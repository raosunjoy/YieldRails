name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Lint and format check
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npx prettier --check "**/*.{js,ts,tsx,json,md,sol}"

  # Unit tests for all workspaces
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        workspace: [contracts, backend, frontend, sdk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests - ${{ matrix.workspace }}
        run: npm run test:unit --workspace=${{ matrix.workspace }}

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.workspace }}/coverage/lcov.info
          flags: ${{ matrix.workspace }}
          name: ${{ matrix.workspace }}-coverage

  # Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: yieldrails_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npm run db:migrate --workspace=backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/yieldrails_test

      - name: Run integration tests
        run: npm run test:integration --workspace=backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/yieldrails_test
          REDIS_URL: redis://localhost:6379

  # Smart contract tests with coverage
  test-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npm run build --workspace=contracts

      - name: Run contract tests with coverage
        run: npm run test:coverage --workspace=contracts

      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -o '"statements":{"total":[0-9]*,"covered":[0-9]*' contracts/coverage/coverage-final.json | head -1)
          TOTAL=$(echo $COVERAGE | grep -o '"total":[0-9]*' | grep -o '[0-9]*')
          COVERED=$(echo $COVERAGE | grep -o '"covered":[0-9]*' | grep -o '[0-9]*')
          PERCENTAGE=$((COVERED * 100 / TOTAL))
          echo "Coverage: $PERCENTAGE%"
          if [ $PERCENTAGE -lt 100 ]; then
            echo "❌ Contract coverage is $PERCENTAGE%, required: 100%"
            exit 1
          fi
          echo "✅ Contract coverage requirement met: $PERCENTAGE%"

      - name: Upload contract coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./contracts/coverage/lcov.info
          flags: contracts
          name: contracts-coverage

  # E2E tests
  test-e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: yieldrails_e2e_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build all workspaces
        run: npm run build

      - name: Run database migrations
        run: npm run db:migrate --workspace=backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/yieldrails_e2e_test

      - name: Start backend server
        run: npm run start --workspace=backend &
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/yieldrails_e2e_test
          REDIS_URL: redis://localhost:6379
          PORT: 3001

      - name: Wait for backend to be ready
        run: |
          timeout 60 bash -c 'until curl -f http://localhost:3001/health; do sleep 2; done'

      - name: Run E2E tests - Backend
        run: npm run test:e2e --workspace=backend
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/yieldrails_e2e_test
          REDIS_URL: redis://localhost:6379

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests - Frontend
        run: npm run test:e2e --workspace=frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm run security:audit

      - name: Run contract security analysis
        run: npm run security --workspace=contracts
        continue-on-error: true # Allow to continue if security tools are not configured

  # Build and test Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint, test-unit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging (only on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-e2e, security, build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add actual deployment commands here

  # Deploy to production (only on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test-e2e, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          # Add actual deployment commands here