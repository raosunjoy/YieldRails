name: YieldRails CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci
          cd ../sdk && npm ci
      
      - name: Run linting
        run: |
          cd backend && npm run lint
          cd ../frontend && npm run lint
          cd ../sdk && npm run lint

  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'contracts/package-lock.json'
      
      - name: Install dependencies
        run: cd contracts && npm ci
      
      - name: Run contract tests
        run: cd contracts && npm test
      
      - name: Run contract coverage
        run: cd contracts && npm run coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./contracts/coverage
          flags: contracts

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: yieldrails_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'
      
      - name: Install dependencies
        run: cd backend && npm ci
      
      - name: Generate Prisma client
        run: cd backend && npx prisma generate
      
      - name: Run database migrations
        run: cd backend && npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldrails_test
      
      - name: Run unit tests
        run: cd backend && npm run test:unit
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldrails_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          API_KEY: test_api_key
      
      - name: Run integration tests
        run: cd backend && npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldrails_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret
          API_KEY: test_api_key
      
      - name: Run E2E tests
        run: cd backend && npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/yieldrails_e2e_test
          REDIS_URL: redis://localhost:6379/3
          JWT_SECRET: test_jwt_secret
          API_KEY: test_api_key
          CHAINALYSIS_API_KEY: test-chainalysis-key
          CIRCLE_API_KEY: test-circle-key
          MOONPAY_API_KEY: test-moonpay-key
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./backend/coverage
          flags: backend

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'
      
      - name: Install dependencies
        run: cd frontend && npm ci
      
      - name: Run frontend tests
        run: cd frontend && npm test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./frontend/coverage
          flags: frontend

  test-sdk:
    name: Test SDK
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'sdk/package-lock.json'
      
      - name: Install dependencies
        run: cd sdk && npm ci
      
      - name: Run SDK tests
        run: cd sdk && npm test
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./sdk/coverage
          flags: sdk

  quality-gates:
    name: Quality Gates
    needs: [test-contracts, test-backend, test-frontend, test-sdk]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Download coverage reports
        uses: actions/download-artifact@v3
        with:
          path: ./coverage-reports
      
      - name: Copy coverage reports to appropriate locations
        run: |
          mkdir -p contracts/coverage
          mkdir -p backend/coverage
          mkdir -p frontend/coverage
          mkdir -p sdk/coverage
          cp -r coverage-reports/contracts-coverage/* contracts/coverage/ || true
          cp -r coverage-reports/backend-coverage/* backend/coverage/ || true
          cp -r coverage-reports/frontend-coverage/* frontend/coverage/ || true
          cp -r coverage-reports/sdk-coverage/* sdk/coverage/ || true
      
      - name: Validate quality gates
        run: node scripts/validate-quality-gates.js

  build:
    name: Build
    needs: [lint, quality-gates]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: false
          load: true
          tags: yieldrails/backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: false
          load: true
          tags: yieldrails/frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build SDK image
        uses: docker/build-push-action@v4
        with:
          context: ./sdk
          push: false
          load: true
          tags: yieldrails/sdk:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test containers
        run: |
          docker run --rm yieldrails/backend:latest node -e "console.log('Backend container works')"
          docker run --rm yieldrails/frontend:latest node -e "console.log('Frontend container works')"
          docker run --rm yieldrails/sdk:latest node -e "console.log('SDK container works')"