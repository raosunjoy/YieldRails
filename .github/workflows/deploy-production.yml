name: Deploy to Production

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/yieldrails

jobs:
  # Security and Quality Gates
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan workflow
      uses: ./.github/workflows/security-scan.yml
      
  # Build and Push Container Images
  build-images:
    name: Build Container Images
    runs-on: ubuntu-latest
    needs: security-scan
    outputs:
      backend-digest: ${{ steps.backend.outputs.digest }}
      frontend-digest: ${{ steps.frontend.outputs.digest }}
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=git-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.meta.outputs.version }}
        format: spdx-json
        output-file: ${{ matrix.service }}-sbom.spdx.json
        
    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.service }}-sbom
        path: ${{ matrix.service }}-sbom.spdx.json
        
    - name: Set output
      id: ${{ matrix.service }}
      run: echo "digest=${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    if: github.ref == 'refs/heads/master' || github.event.inputs.environment == 'staging'
    environment: 
      name: staging
      url: https://staging.yieldrails.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for staging
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        kubectl config set-context --current --namespace=yieldrails-staging
        
    - name: Update image tags in manifests
      run: |
        # Update image tags to use the newly built images
        sed -i "s|yieldrails/backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend@${{ needs.build-images.outputs.backend-digest }}|g" k8s/backend.yaml
        sed -i "s|yieldrails/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend@${{ needs.build-images.outputs.frontend-digest }}|g" k8s/frontend.yaml
        
    - name: Deploy to staging
      run: |
        # Apply namespace and basic resources
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        
        # Apply secrets (staging versions)
        kubectl apply -f k8s/secrets.yaml -n yieldrails-staging
        
        # Deploy infrastructure
        kubectl apply -f k8s/postgresql.yaml -n yieldrails-staging
        kubectl apply -f k8s/redis.yaml -n yieldrails-staging
        
        # Wait for infrastructure to be ready
        kubectl wait --for=condition=ready pod -l app=postgres -n yieldrails-staging --timeout=300s
        kubectl wait --for=condition=ready pod -l app=redis -n yieldrails-staging --timeout=300s
        
        # Deploy applications
        kubectl apply -f k8s/backend.yaml -n yieldrails-staging
        kubectl apply -f k8s/frontend.yaml -n yieldrails-staging
        kubectl apply -f k8s/nginx.yaml -n yieldrails-staging
        
        # Wait for deployment to complete
        kubectl rollout status deployment/backend -n yieldrails-staging --timeout=300s
        kubectl rollout status deployment/frontend -n yieldrails-staging --timeout=300s
        kubectl rollout status deployment/nginx -n yieldrails-staging --timeout=300s
        
    - name: Run deployment tests
      run: |
        # Wait for services to be ready
        sleep 30
        
        # Test backend health
        kubectl exec -n yieldrails-staging deployment/backend -- curl -f http://localhost:3000/api/health
        
        # Test frontend health
        kubectl exec -n yieldrails-staging deployment/frontend -- curl -f http://localhost:3000/api/health
        
        # Test database connectivity
        kubectl exec -n yieldrails-staging deployment/backend -- npm run db:status
        
    - name: Run integration tests
      run: |
        # Run E2E tests against staging environment
        npm ci
        npm run test:e2e:staging
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: (startsWith(github.ref, 'refs/tags/') || github.event.inputs.environment == 'production') && needs.deploy-staging.result == 'success'
    environment: 
      name: production
      url: https://app.yieldrails.com
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl for production
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config set-context --current --namespace=yieldrails-prod
        
    - name: Pre-deployment backup
      run: |
        # Create database backup before deployment
        kubectl exec -n yieldrails-prod deployment/postgres -- pg_dump -U $DB_USER $DB_NAME > backup-$(date +%Y%m%d-%H%M%S).sql
        
        # Upload backup to cloud storage
        aws s3 cp backup-*.sql s3://${{ secrets.BACKUP_BUCKET }}/pre-deployment/
        
    - name: Update image tags in manifests
      run: |
        # Update image tags to use the newly built images
        sed -i "s|yieldrails/backend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-backend@${{ needs.build-images.outputs.backend-digest }}|g" k8s/backend.yaml
        sed -i "s|yieldrails/frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-frontend@${{ needs.build-images.outputs.frontend-digest }}|g" k8s/frontend.yaml
        
    - name: Deploy monitoring stack
      run: |
        # Deploy monitoring namespace and components
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/monitoring.yaml -n yieldrails-monitoring
        kubectl apply -f k8s/logging.yaml -n yieldrails-monitoring
        
        # Wait for monitoring to be ready
        kubectl wait --for=condition=ready pod -l app=prometheus -n yieldrails-monitoring --timeout=300s
        kubectl wait --for=condition=ready pod -l app=elasticsearch -n yieldrails-monitoring --timeout=600s
        
    - name: Deploy to production with blue-green strategy
      run: |
        # Apply namespace and basic resources
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        
        # Apply secrets (production versions)
        kubectl apply -f k8s/secrets.yaml -n yieldrails-prod
        
        # Deploy infrastructure (if not already running)
        kubectl apply -f k8s/postgresql.yaml -n yieldrails-prod
        kubectl apply -f k8s/redis.yaml -n yieldrails-prod
        
        # Wait for infrastructure to be ready
        kubectl wait --for=condition=ready pod -l app=postgres -n yieldrails-prod --timeout=300s
        kubectl wait --for=condition=ready pod -l app=redis -n yieldrails-prod --timeout=300s
        
        # Deploy applications with rolling update
        kubectl apply -f k8s/backend.yaml -n yieldrails-prod
        kubectl apply -f k8s/frontend.yaml -n yieldrails-prod
        
        # Wait for rollout to complete
        kubectl rollout status deployment/backend -n yieldrails-prod --timeout=600s
        kubectl rollout status deployment/frontend -n yieldrails-prod --timeout=600s
        
        # Update load balancer only after successful deployment
        kubectl apply -f k8s/nginx.yaml -n yieldrails-prod
        kubectl rollout status deployment/nginx -n yieldrails-prod --timeout=300s
        
    - name: Run production health checks
      run: |
        # Wait for services to be fully ready
        sleep 60
        
        # Comprehensive health checks
        echo "Testing backend health..."
        kubectl exec -n yieldrails-prod deployment/backend -- curl -f http://localhost:3000/api/health
        
        echo "Testing frontend health..."
        kubectl exec -n yieldrails-prod deployment/frontend -- curl -f http://localhost:3000/api/health
        
        echo "Testing database connectivity..."
        kubectl exec -n yieldrails-prod deployment/backend -- npm run db:status
        
        echo "Testing external services..."
        kubectl exec -n yieldrails-prod deployment/backend -- node -e "
          const { testExternalServices } = require('./dist/src/utils/health-check');
          testExternalServices().then(console.log).catch(console.error);
        "
        
    - name: Run smoke tests
      run: |
        # Run critical path smoke tests
        npm ci
        npm run test:smoke:production
        
    - name: Post-deployment verification
      run: |
        # Verify all pods are running
        kubectl get pods -n yieldrails-prod
        
        # Check resource usage
        kubectl top pods -n yieldrails-prod
        
        # Verify HPA is working
        kubectl get hpa -n yieldrails-prod
        
        # Check service endpoints
        kubectl get endpoints -n yieldrails-prod
        
  # Rollback mechanism
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-production.result == 'failure')
    needs: [deploy-production]
    environment: production
    steps:
    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        kubectl config set-context --current --namespace=yieldrails-prod
        
    - name: Rollback deployments
      run: |
        echo "Rolling back failed deployment..."
        kubectl rollout undo deployment/backend -n yieldrails-prod
        kubectl rollout undo deployment/frontend -n yieldrails-prod
        kubectl rollout undo deployment/nginx -n yieldrails-prod
        
        # Wait for rollback to complete
        kubectl rollout status deployment/backend -n yieldrails-prod --timeout=300s
        kubectl rollout status deployment/frontend -n yieldrails-prod --timeout=300s
        kubectl rollout status deployment/nginx -n yieldrails-prod --timeout=300s
        
    - name: Restore database backup
      run: |
        echo "Restoring database from backup if needed..."
        # This would be implemented based on backup strategy
        # kubectl exec -n yieldrails-prod deployment/postgres -- psql -U $DB_USER -d $DB_NAME < latest-backup.sql
        
    - name: Notify teams
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#alerts'
        text: 'Production deployment failed and has been rolled back. Immediate attention required!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Notification
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-staging, deploy-production]
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '✅ YieldRails production deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Notify staging only
      if: needs.deploy-staging.result == 'success' && needs.deploy-production.result == 'skipped'
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        text: '🚀 YieldRails staging deployment successful!'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        
    - name: Update deployment tracking
      run: |
        echo "Deployment completed at $(date)" >> deployment-log.txt
        echo "Staging: ${{ needs.deploy-staging.result }}" >> deployment-log.txt
        echo "Production: ${{ needs.deploy-production.result }}" >> deployment-log.txt