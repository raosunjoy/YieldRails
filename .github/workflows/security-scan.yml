name: Security Scanning

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci --prefix backend
        npm ci --prefix frontend
        npm ci --prefix sdk
    
    - name: Run npm audit (Backend)
      run: |
        cd backend
        npm audit --audit-level=moderate --json > ../backend-audit.json || true
        
    - name: Run npm audit (Frontend)
      run: |
        cd frontend
        npm audit --audit-level=moderate --json > ../frontend-audit.json || true
        
    - name: Run npm audit (SDK)
      run: |
        cd sdk
        npm audit --audit-level=moderate --json > ../sdk-audit.json || true
    
    - name: Upload audit results
      uses: actions/upload-artifact@v3
      with:
        name: dependency-audit-results
        path: |
          backend-audit.json
          frontend-audit.json
          sdk-audit.json
          
    - name: Snyk Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high --all-projects
        
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Backend Docker Image
      run: |
        docker build -t yieldrails/backend:security-scan -f backend/Dockerfile.prod backend/
        
    - name: Build Frontend Docker Image
      run: |
        docker build -t yieldrails/frontend:security-scan -f frontend/Dockerfile.prod frontend/
        
    - name: Run Trivy vulnerability scanner (Backend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'yieldrails/backend:security-scan'
        format: 'sarif'
        output: 'backend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Run Trivy vulnerability scanner (Frontend)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'yieldrails/frontend:security-scan'
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'backend-trivy-results.sarif'
        
    - name: Upload Frontend Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'frontend-trivy-results.sarif'
        
  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        queries: security-and-quality
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
    - name: ESLint Security Scan (Backend)
      run: |
        cd backend
        npm ci
        npx eslint . --ext .ts,.js --format json --output-file ../backend-eslint-security.json || true
        
    - name: ESLint Security Scan (Frontend)
      run: |
        cd frontend
        npm ci
        npx eslint . --ext .ts,.tsx,.js,.jsx --format json --output-file ../frontend-eslint-security.json || true
        
    - name: Upload ESLint results
      uses: actions/upload-artifact@v3
      with:
        name: eslint-security-results
        path: |
          backend-eslint-security.json
          frontend-eslint-security.json
          
  secrets-scan:
    name: Secrets and Credentials Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run TruffleHog OSS
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: GitLeaks Scan
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
        
  infrastructure-scan:
    name: Infrastructure as Code Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Checkov
      id: checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,kubernetes,github_configuration
        output_format: sarif
        output_file_path: infrastructure-checkov.sarif
        
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: infrastructure-checkov.sarif
        
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, sast-scan, secrets-scan, infrastructure-scan]
    if: always()
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      
    - name: Generate security summary
      run: |
        echo "# YieldRails Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results Summary" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-report.md
        echo "- SAST Scan: ${{ needs.sast-scan.result }}" >> security-report.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment PR with security results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });