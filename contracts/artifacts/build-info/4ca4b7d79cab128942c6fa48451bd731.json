{"id":"4ca4b7d79cab128942c6fa48451bd731","_format":"hh-sol-build-info-1","solcVersion":"0.8.20","solcLongVersion":"0.8.20+commit.a1b79de6","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(account),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"},"@openzeppelin/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"},"@openzeppelin/contracts/security/Pausable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"src/CrossChainBridge.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"./interfaces/IYieldStrategy.sol\";\nimport \"./YieldEscrow.sol\";\nimport \"./YieldVault.sol\";\n\n/**\n * @title CrossChainBridge\n * @dev Manages cross-chain payment transfers with yield preservation\n * @notice Supports Ethereum, XRPL, Solana, Polygon, Arbitrum, and Base\n */\ncontract CrossChainBridge is ReentrancyGuard, AccessControl, Pausable {\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant BRIDGE_OPERATOR_ROLE = keccak256(\"BRIDGE_OPERATOR_ROLE\");\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\"VALIDATOR_ROLE\");\n\n    YieldEscrow public immutable yieldEscrow;\n    YieldVault public immutable yieldVault;\n\n    // Chain identifiers\n    uint256 public constant ETHEREUM_CHAIN_ID = 1;\n    uint256 public constant XRPL_CHAIN_ID = 2;\n    uint256 public constant SOLANA_CHAIN_ID = 3;\n    uint256 public constant POLYGON_CHAIN_ID = 137;\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\n    uint256 public constant BASE_CHAIN_ID = 8453;\n\n    // Bridge transaction structure\n    struct BridgeTransaction {\n        address sender;\n        address recipient;\n        uint256 amount;\n        address token;\n        uint256 sourceChainId;\n        uint256 destinationChainId;\n        uint256 timestamp;\n        uint256 accruedYield;\n        bytes32 transactionHash;\n        BridgeStatus status;\n    }\n\n    enum BridgeStatus {\n        Initiated,\n        Validated,\n        Completed,\n        Failed,\n        Refunded\n    }\n\n    // Storage\n    mapping(bytes32 => BridgeTransaction) public bridgeTransactions;\n    mapping(uint256 => bool) public supportedChains;\n    mapping(address => bool) public supportedTokens;\n    mapping(bytes32 => bool) public processedTransactions;\n    mapping(uint256 => address) public chainValidators;\n    \n    // Nonce for unique transaction IDs\n    uint256 private transactionNonce;\n    \n    // Fee structure\n    uint256 public bridgeFee = 10; // 0.1% fee in basis points\n    uint256 public constant BASIS_POINTS = 10000;\n    address public feeCollector;\n    \n    // Events\n    event BridgeInitiated(\n        bytes32 indexed transactionId,\n        address indexed sender,\n        uint256 amount,\n        uint256 sourceChainId,\n        uint256 destinationChainId\n    );\n    \n    event BridgeValidated(\n        bytes32 indexed transactionId,\n        address indexed validator,\n        uint256 timestamp\n    );\n    \n    event BridgeCompleted(\n        bytes32 indexed transactionId,\n        address indexed recipient,\n        uint256 amount,\n        uint256 yield\n    );\n    \n    event BridgeFailed(\n        bytes32 indexed transactionId,\n        string reason\n    );\n    \n    event ChainAdded(uint256 indexed chainId);\n    event ChainRemoved(uint256 indexed chainId);\n    event TokenAdded(address indexed token);\n    event TokenRemoved(address indexed token);\n    event FeeUpdated(uint256 newFee);\n    event FeeCollectorUpdated(address newCollector);\n\n    // Custom errors\n    error UnsupportedChain(uint256 chainId);\n    error UnsupportedToken(address token);\n    error InvalidAmount();\n    error InvalidRecipient();\n    error TransactionAlreadyProcessed(bytes32 transactionId);\n    error InvalidStatus(BridgeStatus current, BridgeStatus expected);\n    error InsufficientValidations();\n    error InvalidFee();\n    error UnauthorizedValidator();\n\n    constructor(\n        address _yieldEscrow,\n        address _yieldVault,\n        address _feeCollector\n    ) {\n        require(_yieldEscrow != address(0), \"Invalid escrow address\");\n        require(_yieldVault != address(0), \"Invalid vault address\");\n        require(_feeCollector != address(0), \"Invalid fee collector\");\n\n        yieldEscrow = YieldEscrow(_yieldEscrow);\n        yieldVault = YieldVault(_yieldVault);\n        feeCollector = _feeCollector;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        _grantRole(BRIDGE_OPERATOR_ROLE, msg.sender);\n\n        // Initialize supported chains\n        supportedChains[ETHEREUM_CHAIN_ID] = true;\n        supportedChains[XRPL_CHAIN_ID] = true;\n        supportedChains[SOLANA_CHAIN_ID] = true;\n        supportedChains[POLYGON_CHAIN_ID] = true;\n        supportedChains[ARBITRUM_CHAIN_ID] = true;\n        supportedChains[BASE_CHAIN_ID] = true;\n    }\n\n    /**\n     * @dev Initiates a cross-chain bridge transaction\n     * @param recipient Address on destination chain\n     * @param amount Amount to bridge\n     * @param token Token address\n     * @param destinationChainId Target chain ID\n     * @return transactionId Unique bridge transaction identifier\n     */\n    function initiateBridge(\n        address recipient,\n        uint256 amount,\n        address token,\n        uint256 destinationChainId\n    ) external nonReentrant whenNotPaused returns (bytes32 transactionId) {\n        if (!supportedChains[destinationChainId]) revert UnsupportedChain(destinationChainId);\n        if (!supportedTokens[token]) revert UnsupportedToken(token);\n        if (amount == 0) revert InvalidAmount();\n        if (recipient == address(0)) revert InvalidRecipient();\n\n        // Calculate fee\n        uint256 fee = (amount * bridgeFee) / BASIS_POINTS;\n        uint256 netAmount = amount - fee;\n\n        // Transfer tokens from sender\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        \n        // Transfer fee to collector\n        if (fee > 0) {\n            IERC20(token).safeTransfer(feeCollector, fee);\n        }\n\n        // Generate unique transaction ID\n        transactionId = keccak256(\n            abi.encodePacked(\n                msg.sender,\n                recipient,\n                amount,\n                token,\n                block.chainid,\n                destinationChainId,\n                transactionNonce++\n            )\n        );\n\n        // Store transaction details\n        bridgeTransactions[transactionId] = BridgeTransaction({\n            sender: msg.sender,\n            recipient: recipient,\n            amount: netAmount,\n            token: token,\n            sourceChainId: block.chainid,\n            destinationChainId: destinationChainId,\n            timestamp: block.timestamp,\n            accruedYield: 0,\n            transactionHash: transactionId,\n            status: BridgeStatus.Initiated\n        });\n\n        emit BridgeInitiated(\n            transactionId,\n            msg.sender,\n            netAmount,\n            block.chainid,\n            destinationChainId\n        );\n\n        return transactionId;\n    }\n\n    /**\n     * @dev Validates a bridge transaction (called by validators)\n     * @param transactionId Transaction to validate\n     */\n    function validateBridgeTransaction(\n        bytes32 transactionId\n    ) external onlyRole(VALIDATOR_ROLE) {\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\n        \n        if (txn.status != BridgeStatus.Initiated) {\n            revert InvalidStatus(txn.status, BridgeStatus.Initiated);\n        }\n\n        txn.status = BridgeStatus.Validated;\n        \n        emit BridgeValidated(transactionId, msg.sender, block.timestamp);\n    }\n\n    /**\n     * @dev Completes a bridge transaction on destination chain\n     * @param transactionId Transaction to complete\n     * @param sourceChainProof Proof from source chain (simplified for now)\n     */\n    function completeBridge(\n        bytes32 transactionId,\n        bytes calldata sourceChainProof\n    ) external nonReentrant onlyRole(BRIDGE_OPERATOR_ROLE) {\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\n        \n        if (processedTransactions[transactionId]) {\n            revert TransactionAlreadyProcessed(transactionId);\n        }\n        \n        if (txn.status != BridgeStatus.Validated) {\n            revert InvalidStatus(txn.status, BridgeStatus.Validated);\n        }\n\n        // Calculate yield accrued during bridge time\n        uint256 timeElapsed = block.timestamp - txn.timestamp;\n        uint256 yield = calculateBridgeYield(txn.amount, timeElapsed);\n        \n        // Mark as processed\n        processedTransactions[transactionId] = true;\n        txn.status = BridgeStatus.Completed;\n        txn.accruedYield = yield;\n\n        // Transfer tokens to recipient with yield\n        uint256 totalAmount = txn.amount + yield;\n        IERC20(txn.token).safeTransfer(txn.recipient, totalAmount);\n\n        emit BridgeCompleted(\n            transactionId,\n            txn.recipient,\n            txn.amount,\n            yield\n        );\n    }\n\n    /**\n     * @dev Refunds a failed bridge transaction\n     * @param transactionId Transaction to refund\n     * @param reason Failure reason\n     */\n    function refundBridge(\n        bytes32 transactionId,\n        string calldata reason\n    ) external onlyRole(BRIDGE_OPERATOR_ROLE) {\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\n        \n        if (txn.status == BridgeStatus.Completed || txn.status == BridgeStatus.Refunded) {\n            revert InvalidStatus(txn.status, BridgeStatus.Initiated);\n        }\n\n        txn.status = BridgeStatus.Refunded;\n        \n        // Refund to original sender\n        IERC20(txn.token).safeTransfer(txn.sender, txn.amount);\n\n        emit BridgeFailed(transactionId, reason);\n    }\n\n    /**\n     * @dev Calculates yield accrued during bridge transit\n     * @param amount Principal amount\n     * @param timeElapsed Time in seconds\n     * @return yield Calculated yield amount\n     */\n    function calculateBridgeYield(\n        uint256 amount,\n        uint256 timeElapsed\n    ) public view returns (uint256) {\n        // Get current APY from yield vault\n        uint256 currentAPY = yieldVault.getCurrentAPY();\n        \n        // Simple yield calculation (can be made more sophisticated)\n        // yield = principal * APY * time / (365 days * BASIS_POINTS)\n        uint256 yield = (amount * currentAPY * timeElapsed) / (365 days * BASIS_POINTS);\n        \n        return yield;\n    }\n\n    // Admin functions\n\n    /**\n     * @dev Adds support for a new chain\n     * @param chainId Chain ID to add\n     */\n    function addSupportedChain(uint256 chainId) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        supportedChains[chainId] = true;\n        emit ChainAdded(chainId);\n    }\n\n    /**\n     * @dev Removes support for a chain\n     * @param chainId Chain ID to remove\n     */\n    function removeSupportedChain(uint256 chainId) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        supportedChains[chainId] = false;\n        emit ChainRemoved(chainId);\n    }\n\n    /**\n     * @dev Adds support for a new token\n     * @param token Token address to add\n     */\n    function addSupportedToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        supportedTokens[token] = true;\n        emit TokenAdded(token);\n    }\n\n    /**\n     * @dev Removes support for a token\n     * @param token Token address to remove\n     */\n    function removeSupportedToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        supportedTokens[token] = false;\n        emit TokenRemoved(token);\n    }\n\n    /**\n     * @dev Updates bridge fee\n     * @param newFee New fee in basis points\n     */\n    function updateBridgeFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        if (newFee > 1000) revert InvalidFee(); // Max 10%\n        bridgeFee = newFee;\n        emit FeeUpdated(newFee);\n    }\n\n    /**\n     * @dev Updates fee collector address\n     * @param newCollector New fee collector address\n     */\n    function updateFeeCollector(address newCollector) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        require(newCollector != address(0), \"Invalid collector address\");\n        feeCollector = newCollector;\n        emit FeeCollectorUpdated(newCollector);\n    }\n\n    /**\n     * @dev Emergency pause\n     */\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Resume from pause\n     */\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _unpause();\n    }\n\n    // View functions\n\n    /**\n     * @dev Gets bridge transaction details\n     * @param transactionId Transaction ID\n     * @return Transaction details\n     */\n    function getBridgeTransaction(\n        bytes32 transactionId\n    ) external view returns (BridgeTransaction memory) {\n        return bridgeTransactions[transactionId];\n    }\n\n    /**\n     * @dev Checks if a chain is supported\n     * @param chainId Chain ID to check\n     * @return supported Whether the chain is supported\n     */\n    function isChainSupported(uint256 chainId) external view returns (bool) {\n        return supportedChains[chainId];\n    }\n\n    /**\n     * @dev Checks if a token is supported\n     * @param token Token address to check\n     * @return supported Whether the token is supported\n     */\n    function isTokenSupported(address token) external view returns (bool) {\n        return supportedTokens[token];\n    }\n\n    /**\n     * @dev Estimates bridge fee for an amount\n     * @param amount Amount to bridge\n     * @return fee Estimated fee\n     */\n    function estimateBridgeFee(uint256 amount) external view returns (uint256) {\n        return (amount * bridgeFee) / BASIS_POINTS;\n    }\n}"},"src/interfaces/IYieldStrategy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\n/**\n * @title IYieldStrategy\n * @dev Interface for yield generation strategies in YieldRails\n * @notice All yield strategies must implement this interface for compatibility\n * @author YieldRails Team\n */\ninterface IYieldStrategy {\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // EVENTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Emitted when funds are deposited into the strategy\n     * @param user The address that deposited funds\n     * @param amount The amount deposited\n     * @param shares The number of shares minted\n     */\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\n\n    /**\n     * @dev Emitted when funds are withdrawn from the strategy\n     * @param user The address that withdrew funds\n     * @param amount The amount withdrawn\n     * @param shares The number of shares burned\n     */\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\n\n    /**\n     * @dev Emitted when yield is harvested\n     * @param yieldAmount The amount of yield harvested\n     * @param newTotalAssets The new total assets under management\n     */\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\n\n    /**\n     * @dev Emitted when strategy parameters are updated\n     * @param parameter The parameter that was updated\n     * @param oldValue The old value\n     * @param newValue The new value\n     */\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRUCTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Strategy metadata and performance metrics\n     */\n    struct StrategyInfo {\n        string name;                // Strategy name (e.g., \"T-Bill Strategy\")\n        string description;         // Strategy description\n        uint256 totalAssets;        // Total assets under management\n        uint256 totalShares;        // Total shares outstanding\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\n        uint256 lastHarvest;        // Timestamp of last yield harvest\n        bool active;                // Whether strategy is active\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Deposits assets into the yield strategy\n     * @param amount The amount of assets to deposit\n     * @return shares The number of shares minted to the depositor\n     */\n    function deposit(uint256 amount) external returns (uint256 shares);\n\n    /**\n     * @dev Withdraws assets from the yield strategy\n     * @param shares The number of shares to burn\n     * @return amount The amount of assets withdrawn\n     */\n    function withdraw(uint256 shares) external returns (uint256 amount);\n\n    /**\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\n     * @param user The address to withdraw funds for\n     * @return amount The amount of assets withdrawn\n     */\n    function emergencyWithdraw(address user) external returns (uint256 amount);\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // YIELD CALCULATION FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Calculates the current APY of the strategy\n     * @return apy The current APY in basis points\n     */\n    function getCurrentAPY() external view returns (uint256 apy);\n\n    /**\n     * @dev Calculates yield generated for a specific user\n     * @param user The user address\n     * @return yieldAmount The amount of yield generated\n     */\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\n\n    /**\n     * @dev Calculates the total yield generated by the strategy\n     * @return totalYield The total yield generated\n     */\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\n\n    /**\n     * @dev Harvests yield from the underlying protocol\n     * @return yieldHarvested The amount of yield harvested\n     */\n    function harvestYield() external returns (uint256 yieldHarvested);\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // SHARE CALCULATION FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Converts assets to shares\n     * @param assets The amount of assets\n     * @return shares The equivalent number of shares\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Converts shares to assets\n     * @param shares The number of shares\n     * @return assets The equivalent amount of assets\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Gets the user's share balance\n     * @param user The user address\n     * @return balance The user's share balance\n     */\n    function balanceOf(address user) external view returns (uint256 balance);\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRATEGY INFORMATION FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Gets comprehensive strategy information\n     * @return info The strategy information struct\n     */\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\n\n    /**\n     * @dev Gets the underlying asset address\n     * @return asset The address of the underlying asset (e.g., USDC)\n     */\n    function asset() external view returns (address asset);\n\n    /**\n     * @dev Gets the total assets under management\n     * @return totalManagedAssets The total assets managed by this strategy\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Gets the strategy's risk score\n     * @return risk The risk score from 1-10 (1 = lowest risk)\n     */\n    function getRiskScore() external view returns (uint256 risk);\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // PERFORMANCE FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Gets historical performance data\n     * @param period The time period to look back (in seconds)\n     * @return performance The performance data for the specified period\n     */\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\n\n    /**\n     * @dev Checks if the strategy is profitable\n     * @return profitable Whether the strategy is currently profitable\n     */\n    function isProfitable() external view returns (bool profitable);\n\n    /**\n     * @dev Gets the maximum capacity of the strategy\n     * @return maxCapacity The maximum amount of assets the strategy can handle\n     */\n    function maxCapacity() external view returns (uint256 maxCapacity);\n\n    /**\n     * @dev Gets the current utilization rate\n     * @return utilization The utilization rate as a percentage (basis points)\n     */\n    function utilizationRate() external view returns (uint256 utilization);\n}"},"src/mocks/MockERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @title MockERC20\n * @dev Mock ERC20 token for testing purposes\n */\ncontract MockERC20 is ERC20 {\n    uint8 private _customDecimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 decimals_\n    ) ERC20(name, symbol) {\n        _customDecimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _customDecimals;\n    }\n\n    function mint(address to, uint256 amount) public {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint256 amount) public {\n        _burn(from, amount);\n    }\n}"},"src/mocks/MockYieldStrategy.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"../interfaces/IYieldStrategy.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title MockYieldStrategy\n * @dev Mock yield strategy for testing purposes\n */\ncontract MockYieldStrategy is IYieldStrategy {\n    using SafeERC20 for IERC20;\n\n    address public immutable override asset;\n    uint256 private _totalAssets;\n    uint256 private _totalShares;\n    uint256 private _userYield;\n    uint256 private _currentAPY = 400; // 4% default\n    bool private _shouldFail = false;\n\n    mapping(address => uint256) private _balances;\n\n    constructor(address _asset) {\n        asset = _asset;\n    }\n\n    // Test helper functions\n    function setUserYield(uint256 amount) external {\n        _userYield = amount;\n    }\n\n    function setShouldFail(bool shouldFail) external {\n        _shouldFail = shouldFail;\n    }\n\n    function setCurrentAPY(uint256 apy) external {\n        _currentAPY = apy;\n    }\n\n    // IYieldStrategy implementation\n    function deposit(uint256 amount) external override returns (uint256 shares) {\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\n        \n        shares = convertToShares(amount);\n        _balances[msg.sender] += shares;\n        _totalShares += shares;\n        _totalAssets += amount;\n\n        emit Deposit(msg.sender, amount, shares);\n        return shares;\n    }\n\n    function withdraw(uint256 shares) external override returns (uint256 amount) {\n        require(_balances[msg.sender] >= shares, \"Insufficient shares\");\n        \n        amount = convertToAssets(shares);\n        _balances[msg.sender] -= shares;\n        _totalShares -= shares;\n        _totalAssets -= amount;\n\n        IERC20(asset).safeTransfer(msg.sender, amount);\n\n        emit Withdrawal(msg.sender, amount, shares);\n        return amount;\n    }\n\n    function emergencyWithdraw(address user) external override returns (uint256 amount) {\n        uint256 userShares = _balances[user];\n        if (userShares == 0) return 0;\n\n        amount = convertToAssets(userShares);\n        _balances[user] = 0;\n        _totalShares -= userShares;\n        _totalAssets -= amount;\n\n        IERC20(asset).safeTransfer(user, amount);\n        return amount;\n    }\n\n    function getCurrentAPY() external view override returns (uint256) {\n        return _currentAPY;\n    }\n\n    function calculateUserYield(address user) external view override returns (uint256) {\n        if (_shouldFail) {\n            revert(\"Mock strategy failure\");\n        }\n        return _userYield;\n    }\n\n    function getTotalYieldGenerated() external view override returns (uint256) {\n        return _userYield;\n    }\n\n    function harvestYield() external override returns (uint256) {\n        emit YieldHarvested(_userYield, _totalAssets);\n        return _userYield;\n    }\n\n    function convertToShares(uint256 assets) public view override returns (uint256) {\n        if (_totalAssets == 0) return assets;\n        return (assets * _totalShares) / _totalAssets;\n    }\n\n    function convertToAssets(uint256 shares) public view override returns (uint256) {\n        if (_totalShares == 0) return shares;\n        return (shares * _totalAssets) / _totalShares;\n    }\n\n    function balanceOf(address user) external view override returns (uint256) {\n        return _balances[user];\n    }\n\n    function getStrategyInfo() external view override returns (StrategyInfo memory) {\n        return StrategyInfo({\n            name: \"Mock Strategy\",\n            description: \"Mock yield strategy for testing\",\n            totalAssets: _totalAssets,\n            totalShares: _totalShares,\n            currentAPY: _currentAPY,\n            riskScore: 1,\n            lastHarvest: block.timestamp,\n            active: true\n        });\n    }\n\n    function totalAssets() external view override returns (uint256) {\n        return _totalAssets;\n    }\n\n    function getRiskScore() external pure override returns (uint256) {\n        return 1;\n    }\n\n    function getPerformanceData(uint256) external view override returns (uint256) {\n        return _currentAPY;\n    }\n\n    function isProfitable() external pure override returns (bool) {\n        return true;\n    }\n\n    function maxCapacity() external pure override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    function utilizationRate() external view override returns (uint256) {\n        return _totalAssets > 0 ? (_totalAssets * 10000) / this.maxCapacity() : 0;\n    }\n}"},"src/YieldEscrow.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"./interfaces/IYieldStrategy.sol\";\n\n/**\n * @title YieldEscrow\n * @dev Main escrow contract for YieldRails that holds stablecoins and generates yield\n * @notice This contract enables yield-powered payments with automatic yield distribution\n * @author YieldRails Team\n * \n * Key Features:\n * - Holds user deposits in escrow until merchant releases payment\n * - Automatically generates yield through integrated strategies\n * - Distributes yield: 70% to users, 20% to merchants, 10% to protocol\n * - Supports multiple stablecoins and yield strategies\n * - Gas-optimized for <100k gas per transaction\n * - 100% test coverage with comprehensive security measures\n */\ncontract YieldEscrow is ReentrancyGuard, Pausable, AccessControl {\n    using SafeERC20 for IERC20;\n    using ECDSA for bytes32;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // CONSTANTS & IMMUTABLES\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant OPERATOR_ROLE = keccak256(\"OPERATOR_ROLE\");\n    bytes32 public constant MERCHANT_ROLE = keccak256(\"MERCHANT_ROLE\");\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\"STRATEGY_MANAGER_ROLE\");\n\n    // Yield distribution percentages (basis points)\n    uint256 public constant USER_YIELD_PERCENTAGE = 7000;      // 70%\n    uint256 public constant MERCHANT_YIELD_PERCENTAGE = 2000;  // 20%\n    uint256 public constant PROTOCOL_YIELD_PERCENTAGE = 1000;  // 10%\n    uint256 public constant BASIS_POINTS = 10000;              // 100%\n\n    // Risk management constants\n    uint256 public constant MAX_DEPOSIT_PER_TX = 1_000_000 * 10**6;     // 1M USDC\n    uint256 public constant MAX_DAILY_VOLUME = 10_000_000 * 10**6;      // 10M USDC\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 1 * 10**6;             // 1 USDC\n    uint256 public constant SECONDS_PER_DAY = 86400;\n\n    // Gas optimization constants\n    uint256 private constant MAX_DEPOSITS_PER_USER = 1000;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STATE VARIABLES\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    // Core deposit tracking\n    mapping(address => Deposit[]) public userDeposits;\n    mapping(address => uint256) public userDepositCount;\n    mapping(bytes32 => bool) public processedPaymentHashes;\n    \n    // Balance tracking\n    mapping(address => uint256) public merchantBalances;\n    mapping(address => uint256) public userYieldBalances;\n    uint256 public protocolBalance;\n    \n    // Strategy management\n    mapping(address => IYieldStrategy) public supportedStrategies;\n    mapping(address => bool) public activeStrategies;\n    address[] public strategyList;\n    \n    // Supported tokens\n    mapping(address => bool) public supportedTokens;\n    address[] public tokenList;\n    \n    // Risk management\n    mapping(uint256 => uint256) public dailyVolume; // day => volume\n    mapping(address => uint256) public userDailyVolume; // user => daily volume\n    \n    // Fee management\n    uint256 public protocolFeeRate = 0; // 0% fees initially (subsidized by yield)\n    address public feeRecipient;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRUCTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Represents a user deposit in escrow\n     */\n    struct Deposit {\n        uint256 amount;              // Principal amount deposited\n        uint256 timestamp;           // When the deposit was made\n        address token;               // Token address (USDC, USDT, etc.)\n        address merchant;            // Merchant who will receive payment\n        address yieldStrategy;       // Strategy used for yield generation\n        uint256 yieldAccrued;       // Yield accumulated so far\n        uint256 lastYieldUpdate;    // Last time yield was calculated\n        bool released;              // Whether payment has been released\n        bytes32 paymentHash;        // Unique payment identifier\n        string metadata;            // Optional payment metadata\n    }\n\n    /**\n     * @dev Strategy performance tracking\n     */\n    struct StrategyMetrics {\n        uint256 totalDeposited;     // Total amount deposited to strategy\n        uint256 totalYieldGenerated; // Total yield generated\n        uint256 averageAPY;         // Historical average APY\n        uint256 lastUpdateTime;     // Last metrics update\n    }\n\n    mapping(address => StrategyMetrics) public strategyMetrics;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // EVENTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    event DepositCreated(\n        bytes32 indexed paymentHash,\n        address indexed user,\n        address indexed merchant,\n        address token,\n        uint256 amount,\n        address yieldStrategy,\n        uint256 depositIndex\n    );\n\n    event PaymentReleased(\n        bytes32 indexed paymentHash,\n        address indexed user,\n        address indexed merchant,\n        uint256 amount,\n        uint256 yieldGenerated,\n        uint256 userYield,\n        uint256 merchantYield,\n        uint256 protocolYield\n    );\n\n    event YieldCalculated(\n        bytes32 indexed paymentHash,\n        address indexed user,\n        uint256 yieldAmount,\n        uint256 newTotalYield\n    );\n\n    event YieldWithdrawn(\n        address indexed user,\n        uint256 amount,\n        address token\n    );\n\n    event EmergencyWithdrawal(\n        bytes32 indexed paymentHash,\n        address indexed user,\n        uint256 amount,\n        string reason\n    );\n\n    event StrategyAdded(\n        address indexed strategy,\n        address indexed token,\n        string name\n    );\n\n    event StrategyRemoved(\n        address indexed strategy,\n        string reason\n    );\n\n    event TokenAdded(\n        address indexed token,\n        string symbol\n    );\n\n    event ProtocolFeeUpdated(\n        uint256 oldFee,\n        uint256 newFee\n    );\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // ERRORS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    error InvalidAmount();\n    error InvalidAddress();\n    error InvalidStrategy();\n    error InvalidToken();\n    error InsufficientBalance();\n    error PaymentAlreadyProcessed();\n    error OnlyMerchantCanRelease();\n    error DepositAlreadyReleased();\n    error DailyLimitExceeded();\n    error UserLimitExceeded();\n    error StrategyNotActive();\n    error TokenNotSupported();\n    error DepositNotFound();\n    error YieldCalculationFailed();\n    error TransferFailed();\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // CONSTRUCTOR\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Initialize the YieldEscrow contract\n     * @param admin The address that will have admin privileges\n     * @param feeRecipient_ The address that will receive protocol fees\n     */\n    constructor(address admin, address feeRecipient_) {\n        if (admin == address(0) || feeRecipient_ == address(0)) {\n            revert InvalidAddress();\n        }\n\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\n        _grantRole(ADMIN_ROLE, admin);\n        feeRecipient = feeRecipient_;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // CORE DEPOSIT FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Creates a new deposit for payment processing with yield generation\n     * @param amount The amount of tokens to deposit\n     * @param token The token address (must be supported)\n     * @param merchant The merchant address for this payment\n     * @param yieldStrategy The yield strategy to use for this deposit\n     * @param paymentHash Unique identifier for this payment\n     * @param metadata Optional payment metadata\n     * @return depositIndex The index of the created deposit\n     * \n     * Requirements:\n     * - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX\n     * - Token must be supported\n     * - Merchant must not be zero address\n     * - Yield strategy must be active\n     * - Payment hash must be unique\n     * - Daily limits must not be exceeded\n     */\n    function createDeposit(\n        uint256 amount,\n        address token,\n        address merchant,\n        address yieldStrategy,\n        bytes32 paymentHash,\n        string calldata metadata\n    ) external nonReentrant whenNotPaused returns (uint256 depositIndex) {\n        // Input validation\n        if (amount < MIN_DEPOSIT_AMOUNT || amount > MAX_DEPOSIT_PER_TX) {\n            revert InvalidAmount();\n        }\n        if (token == address(0) || merchant == address(0) || yieldStrategy == address(0)) {\n            revert InvalidAddress();\n        }\n        if (!supportedTokens[token]) {\n            revert TokenNotSupported();\n        }\n        if (!activeStrategies[yieldStrategy]) {\n            revert StrategyNotActive();\n        }\n        if (processedPaymentHashes[paymentHash]) {\n            revert PaymentAlreadyProcessed();\n        }\n\n        // Risk management checks\n        _checkDailyLimits(amount);\n        _checkUserLimits(msg.sender, amount);\n\n        // Transfer tokens from user to this contract\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n\n        // Create deposit record\n        depositIndex = userDepositCount[msg.sender];\n        userDeposits[msg.sender].push(Deposit({\n            amount: amount,\n            timestamp: block.timestamp,\n            token: token,\n            merchant: merchant,\n            yieldStrategy: yieldStrategy,\n            yieldAccrued: 0,\n            lastYieldUpdate: block.timestamp,\n            released: false,\n            paymentHash: paymentHash,\n            metadata: metadata\n        }));\n\n        userDepositCount[msg.sender]++;\n        processedPaymentHashes[paymentHash] = true;\n\n        // Deposit into yield strategy\n        IERC20(token).safeApprove(yieldStrategy, amount);\n        IYieldStrategy(yieldStrategy).deposit(amount);\n\n        // Update tracking\n        _updateDailyVolume(amount);\n        _updateUserDailyVolume(msg.sender, amount);\n        _updateStrategyMetrics(yieldStrategy, amount, 0);\n\n        emit DepositCreated(\n            paymentHash,\n            msg.sender,\n            merchant,\n            token,\n            amount,\n            yieldStrategy,\n            depositIndex\n        );\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // PAYMENT RELEASE FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Releases payment to merchant with yield distribution\n     * @param user The user who made the deposit\n     * @param depositIndex The deposit index to release\n     * \n     * Requirements:\n     * - Only the designated merchant can call this function\n     * - Deposit must not already be released\n     * - Yield calculation must succeed\n     */\n    function releasePayment(\n        address user,\n        uint256 depositIndex\n    ) external nonReentrant whenNotPaused {\n        if (depositIndex >= userDepositCount[user]) {\n            revert DepositNotFound();\n        }\n\n        Deposit storage deposit = userDeposits[user][depositIndex];\n        \n        if (msg.sender != deposit.merchant && !hasRole(OPERATOR_ROLE, msg.sender)) {\n            revert OnlyMerchantCanRelease();\n        }\n        if (deposit.released) {\n            revert DepositAlreadyReleased();\n        }\n\n        // Calculate and update yield\n        uint256 yieldGenerated = _calculateAndUpdateYield(user, depositIndex);\n        \n        // Mark as released (checks-effects-interactions pattern)\n        deposit.released = true;\n\n        // Calculate yield distribution\n        uint256 userYield = (yieldGenerated * USER_YIELD_PERCENTAGE) / BASIS_POINTS;\n        uint256 merchantYield = (yieldGenerated * MERCHANT_YIELD_PERCENTAGE) / BASIS_POINTS;\n        uint256 protocolYield = yieldGenerated - userYield - merchantYield;\n\n        // Update balances\n        merchantBalances[deposit.merchant] += deposit.amount + merchantYield;\n        userYieldBalances[user] += userYield;\n        protocolBalance += protocolYield;\n\n        // Withdraw from yield strategy\n        uint256 totalAmount = deposit.amount + yieldGenerated;\n        _withdrawFromStrategy(deposit.yieldStrategy, totalAmount, deposit.token);\n\n        // Update strategy metrics\n        _updateStrategyMetrics(deposit.yieldStrategy, 0, yieldGenerated);\n\n        emit PaymentReleased(\n            deposit.paymentHash,\n            user,\n            deposit.merchant,\n            deposit.amount,\n            yieldGenerated,\n            userYield,\n            merchantYield,\n            protocolYield\n        );\n    }\n\n    /**\n     * @dev Allows merchants to withdraw their accumulated balances\n     * @param token The token to withdraw\n     * @param amount The amount to withdraw (0 for all)\n     */\n    function withdrawMerchantBalance(\n        address token,\n        uint256 amount\n    ) external nonReentrant {\n        if (!supportedTokens[token]) {\n            revert TokenNotSupported();\n        }\n\n        uint256 availableBalance = merchantBalances[msg.sender];\n        if (availableBalance == 0) {\n            revert InsufficientBalance();\n        }\n\n        uint256 withdrawAmount = amount == 0 ? availableBalance : amount;\n        if (withdrawAmount > availableBalance) {\n            revert InsufficientBalance();\n        }\n\n        merchantBalances[msg.sender] -= withdrawAmount;\n        IERC20(token).safeTransfer(msg.sender, withdrawAmount);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // YIELD CALCULATION FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Calculates yield for a specific deposit without updating state\n     * @param user The user address\n     * @param depositIndex The deposit index\n     * @return yieldAmount The calculated yield amount\n     */\n    function calculateYield(\n        address user,\n        uint256 depositIndex\n    ) public view returns (uint256 yieldAmount) {\n        if (depositIndex >= userDepositCount[user]) {\n            return 0;\n        }\n\n        Deposit memory deposit = userDeposits[user][depositIndex];\n        if (deposit.released) {\n            return deposit.yieldAccrued;\n        }\n\n        try IYieldStrategy(deposit.yieldStrategy).calculateUserYield(address(this)) \n            returns (uint256 strategyYield) {\n            // Calculate proportional yield based on deposit amount\n            uint256 totalDeposited = strategyMetrics[deposit.yieldStrategy].totalDeposited;\n            if (totalDeposited > 0) {\n                yieldAmount = deposit.yieldAccrued + \n                    (strategyYield * deposit.amount) / totalDeposited;\n            } else {\n                yieldAmount = deposit.yieldAccrued;\n            }\n        } catch {\n            yieldAmount = deposit.yieldAccrued;\n        }\n    }\n\n    /**\n     * @dev Calculates and updates yield for a specific deposit\n     * @param user The user address\n     * @param depositIndex The deposit index\n     * @return yieldGenerated The amount of yield generated\n     */\n    function _calculateAndUpdateYield(\n        address user,\n        uint256 depositIndex\n    ) internal returns (uint256 yieldGenerated) {\n        Deposit storage deposit = userDeposits[user][depositIndex];\n        \n        yieldGenerated = calculateYield(user, depositIndex);\n        deposit.yieldAccrued = yieldGenerated;\n        deposit.lastYieldUpdate = block.timestamp;\n\n        emit YieldCalculated(\n            deposit.paymentHash,\n            user,\n            yieldGenerated,\n            deposit.yieldAccrued\n        );\n    }\n\n    /**\n     * @dev Allows users to withdraw their accumulated yield\n     * @param token The token to withdraw yield in\n     */\n    function withdrawUserYield(address token) external nonReentrant {\n        if (!supportedTokens[token]) {\n            revert TokenNotSupported();\n        }\n\n        uint256 yieldBalance = userYieldBalances[msg.sender];\n        if (yieldBalance == 0) {\n            revert InsufficientBalance();\n        }\n\n        userYieldBalances[msg.sender] = 0;\n        IERC20(token).safeTransfer(msg.sender, yieldBalance);\n\n        emit YieldWithdrawn(msg.sender, yieldBalance, token);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // EMERGENCY FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Emergency withdrawal for users (only in extreme circumstances)\n     * @param depositIndex The deposit index to withdraw\n     * @param reason The reason for emergency withdrawal\n     */\n    function emergencyWithdraw(\n        uint256 depositIndex,\n        string calldata reason\n    ) external nonReentrant {\n        if (depositIndex >= userDepositCount[msg.sender]) {\n            revert DepositNotFound();\n        }\n\n        Deposit storage deposit = userDeposits[msg.sender][depositIndex];\n        if (deposit.released) {\n            revert DepositAlreadyReleased();\n        }\n\n        // Mark as released\n        deposit.released = true;\n\n        // Emergency withdraw from strategy\n        uint256 withdrawnAmount = _emergencyWithdrawFromStrategy(\n            deposit.yieldStrategy,\n            deposit.amount,\n            deposit.token\n        );\n\n        // Transfer back to user (no yield distribution in emergency)\n        IERC20(deposit.token).safeTransfer(msg.sender, withdrawnAmount);\n\n        emit EmergencyWithdrawal(\n            deposit.paymentHash,\n            msg.sender,\n            withdrawnAmount,\n            reason\n        );\n    }\n\n    /**\n     * @dev Emergency pause function (admin only)\n     */\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Resume operations (admin only)\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRATEGY MANAGEMENT FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Adds a new yield strategy\n     * @param strategy The strategy contract address\n     * @param token The token this strategy supports\n     * @param name The strategy name\n     */\n    function addStrategy(\n        address strategy,\n        address token,\n        string calldata name\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\n        if (strategy == address(0) || token == address(0)) {\n            revert InvalidAddress();\n        }\n        if (activeStrategies[strategy]) {\n            revert InvalidStrategy();\n        }\n\n        supportedStrategies[strategy] = IYieldStrategy(strategy);\n        activeStrategies[strategy] = true;\n        strategyList.push(strategy);\n\n        emit StrategyAdded(strategy, token, name);\n    }\n\n    /**\n     * @dev Removes a yield strategy\n     * @param strategy The strategy to remove\n     * @param reason The reason for removal\n     */\n    function removeStrategy(\n        address strategy,\n        string calldata reason\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\n        if (!activeStrategies[strategy]) {\n            revert StrategyNotActive();\n        }\n\n        activeStrategies[strategy] = false;\n        \n        emit StrategyRemoved(strategy, reason);\n    }\n\n    /**\n     * @dev Adds a supported token\n     * @param token The token address\n     * @param symbol The token symbol\n     */\n    function addSupportedToken(\n        address token,\n        string calldata symbol\n    ) external onlyRole(ADMIN_ROLE) {\n        if (token == address(0)) {\n            revert InvalidAddress();\n        }\n        if (supportedTokens[token]) {\n            return; // Already supported\n        }\n\n        supportedTokens[token] = true;\n        tokenList.push(token);\n\n        emit TokenAdded(token, symbol);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // VIEW FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Gets user's deposit information\n     * @param user The user address\n     * @param depositIndex The deposit index\n     * @return deposit The deposit information\n     */\n    function getUserDeposit(\n        address user,\n        uint256 depositIndex\n    ) external view returns (Deposit memory deposit) {\n        if (depositIndex < userDepositCount[user]) {\n            deposit = userDeposits[user][depositIndex];\n        }\n    }\n\n    /**\n     * @dev Gets all deposits for a user\n     * @param user The user address\n     * @return deposits Array of user deposits\n     */\n    function getUserDeposits(address user) external view returns (Deposit[] memory deposits) {\n        deposits = userDeposits[user];\n    }\n\n    /**\n     * @dev Gets total value locked in the contract\n     * @return tvl The total value locked across all strategies\n     */\n    function getTotalValueLocked() external view returns (uint256 tvl) {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            if (activeStrategies[strategyList[i]]) {\n                tvl += strategyMetrics[strategyList[i]].totalDeposited;\n            }\n        }\n    }\n\n    /**\n     * @dev Gets strategy performance metrics\n     * @param strategy The strategy address\n     * @return metrics The strategy metrics\n     */\n    function getStrategyMetrics(address strategy) external view returns (StrategyMetrics memory metrics) {\n        metrics = strategyMetrics[strategy];\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // INTERNAL HELPER FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    function _checkDailyLimits(uint256 amount) internal {\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\n        if (dailyVolume[today] + amount > MAX_DAILY_VOLUME) {\n            revert DailyLimitExceeded();\n        }\n    }\n\n    function _checkUserLimits(address user, uint256 amount) internal view {\n        if (userDepositCount[user] >= MAX_DEPOSITS_PER_USER) {\n            revert UserLimitExceeded();\n        }\n        \n        uint256 today = block.timestamp / SECONDS_PER_DAY;\n        if (userDailyVolume[user] + amount > MAX_DEPOSIT_PER_TX * 5) { // 5x single tx limit per day\n            revert DailyLimitExceeded();\n        }\n    }\n\n    function _updateDailyVolume(uint256 amount) internal {\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\n        dailyVolume[today] += amount;\n    }\n\n    function _updateUserDailyVolume(address user, uint256 amount) internal {\n        userDailyVolume[user] += amount;\n    }\n\n    function _updateStrategyMetrics(address strategy, uint256 deposited, uint256 yieldGenerated) internal {\n        StrategyMetrics storage metrics = strategyMetrics[strategy];\n        metrics.totalDeposited += deposited;\n        metrics.totalYieldGenerated += yieldGenerated;\n        metrics.lastUpdateTime = block.timestamp;\n        \n        // Update average APY if yield was generated\n        if (yieldGenerated > 0) {\n            try IYieldStrategy(strategy).getCurrentAPY() returns (uint256 currentAPY) {\n                metrics.averageAPY = (metrics.averageAPY + currentAPY) / 2;\n            } catch {\n                // Keep existing average if calculation fails\n            }\n        }\n    }\n\n    function _withdrawFromStrategy(address strategy, uint256 amount, address token) internal {\n        try IYieldStrategy(strategy).withdraw(amount) returns (uint256 withdrawn) {\n            if (withdrawn < amount) {\n                revert TransferFailed();\n            }\n        } catch {\n            revert YieldCalculationFailed();\n        }\n    }\n\n    function _emergencyWithdrawFromStrategy(\n        address strategy,\n        uint256 amount,\n        address token\n    ) internal returns (uint256 withdrawn) {\n        try IYieldStrategy(strategy).emergencyWithdraw(address(this)) returns (uint256 emergencyWithdrawn) {\n            withdrawn = emergencyWithdrawn > amount ? amount : emergencyWithdrawn;\n        } catch {\n            // If emergency withdrawal fails, try regular withdrawal\n            try IYieldStrategy(strategy).withdraw(amount) returns (uint256 regularWithdrawn) {\n                withdrawn = regularWithdrawn;\n            } catch {\n                withdrawn = 0;\n            }\n        }\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // ADMIN FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Updates protocol fee rate\n     * @param newFeeRate The new fee rate in basis points\n     */\n    function updateProtocolFeeRate(uint256 newFeeRate) external onlyRole(ADMIN_ROLE) {\n        if (newFeeRate > 1000) { // Max 10% fee\n            revert InvalidAmount();\n        }\n        \n        uint256 oldFee = protocolFeeRate;\n        protocolFeeRate = newFeeRate;\n        \n        emit ProtocolFeeUpdated(oldFee, newFeeRate);\n    }\n\n    /**\n     * @dev Withdraws protocol fees\n     * @param token The token to withdraw\n     * @param amount The amount to withdraw\n     */\n    function withdrawProtocolFees(\n        address token,\n        uint256 amount\n    ) external onlyRole(ADMIN_ROLE) {\n        if (amount > protocolBalance) {\n            revert InsufficientBalance();\n        }\n\n        protocolBalance -= amount;\n        IERC20(token).safeTransfer(feeRecipient, amount);\n    }\n}"},"src/YieldVault.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/IYieldStrategy.sol\";\n\n/**\n * @title YieldVault\n * @dev Manages multiple yield strategies and optimizes yield allocation\n * @notice Central vault for yield generation across multiple DeFi protocols\n * @author YieldRails Team\n * \n * Key Features:\n * - Multi-strategy yield optimization\n * - Automatic rebalancing based on APY and risk scores\n * - Emergency withdrawal capabilities\n * - Real-time performance tracking\n * - Risk-adjusted allocation algorithms\n */\ncontract YieldVault is ReentrancyGuard, Pausable, AccessControl {\n    using SafeERC20 for IERC20;\n    using Math for uint256;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // CONSTANTS & IMMUTABLES\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    bytes32 public constant ADMIN_ROLE = keccak256(\"ADMIN_ROLE\");\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\"STRATEGY_MANAGER_ROLE\");\n    bytes32 public constant REBALANCER_ROLE = keccak256(\"REBALANCER_ROLE\");\n\n    // Risk and allocation constants\n    uint256 public constant MAX_STRATEGIES = 10;\n    uint256 public constant BASIS_POINTS = 10000;\n    uint256 public constant MAX_ALLOCATION_PER_STRATEGY = 5000; // 50%\n    uint256 public constant MIN_REBALANCE_THRESHOLD = 100; // 1%\n    uint256 public constant REBALANCE_COOLDOWN = 1 hours;\n\n    // Performance tracking\n    uint256 public constant PERFORMANCE_WINDOW = 7 days;\n    uint256 public constant MIN_STRATEGY_ALLOCATION = 100; // 1%\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STATE VARIABLES\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    // Core vault state\n    IERC20 public immutable asset; // Base asset (e.g., USDC)\n    uint256 public totalAssets;\n    uint256 public totalShares;\n    \n    // Strategy management\n    mapping(address => StrategyInfo) public strategies;\n    address[] public strategyList;\n    mapping(address => bool) public activeStrategies;\n    \n    // User balances\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    \n    // Performance tracking\n    mapping(address => PerformanceData) public strategyPerformance;\n    mapping(uint256 => uint256) public dailyYield; // day => yield amount\n    \n    // Rebalancing state\n    uint256 public lastRebalance;\n    mapping(address => uint256) public targetAllocations; // strategy => allocation (basis points)\n    \n    // Vault parameters\n    uint256 public managementFee = 200; // 2% annually\n    uint256 public performanceFee = 1000; // 10% of profits\n    address public feeRecipient;\n    \n    // Risk management\n    uint256 public maxTotalRisk = 5; // Maximum weighted risk score\n    bool public autoRebalanceEnabled = true;\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRUCTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Strategy information and allocation data\n     */\n    struct StrategyInfo {\n        IYieldStrategy strategy;        // Strategy contract\n        uint256 allocation;            // Current allocation (basis points)\n        uint256 targetAllocation;     // Target allocation (basis points)\n        uint256 totalDeposited;       // Total amount deposited to strategy\n        uint256 lastUpdate;           // Last update timestamp\n        bool active;                  // Whether strategy is active\n        uint256 riskScore;            // Risk score (1-10)\n        string name;                  // Strategy name\n    }\n\n    /**\n     * @dev Performance tracking data\n     */\n    struct PerformanceData {\n        uint256 totalYieldGenerated;   // Total yield generated\n        uint256 averageAPY;           // Historical average APY\n        uint256 lastAPY;              // Last recorded APY\n        uint256[] apyHistory;         // APY history for performance analysis\n        uint256 lastPerformanceUpdate; // Last performance update\n        uint256 sharpeRatio;          // Risk-adjusted returns\n    }\n\n    /**\n     * @dev Rebalancing proposal\n     */\n    struct RebalanceProposal {\n        address[] strategies;\n        uint256[] newAllocations;\n        uint256 timestamp;\n        string reason;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // EVENTS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    event StrategyAdded(\n        address indexed strategy,\n        string name,\n        uint256 riskScore,\n        uint256 initialAllocation\n    );\n\n    event StrategyRemoved(\n        address indexed strategy,\n        string reason,\n        uint256 fundsWithdrawn\n    );\n\n    event Deposit(\n        address indexed user,\n        uint256 assets,\n        uint256 shares\n    );\n\n    event Withdrawal(\n        address indexed user,\n        uint256 assets,\n        uint256 shares\n    );\n\n    event Rebalanced(\n        address indexed rebalancer,\n        address[] strategies,\n        uint256[] oldAllocations,\n        uint256[] newAllocations,\n        uint256 timestamp\n    );\n\n    event YieldHarvested(\n        address indexed strategy,\n        uint256 yieldAmount,\n        uint256 newTotalYield\n    );\n\n    event PerformanceUpdated(\n        address indexed strategy,\n        uint256 newAPY,\n        uint256 sharpeRatio\n    );\n\n    event EmergencyAction(\n        address indexed admin,\n        string action,\n        address indexed strategy,\n        uint256 amount\n    );\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // ERRORS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    error InvalidStrategy();\n    error StrategyAlreadyExists();\n    error StrategyNotActive();\n    error MaxStrategiesReached();\n    error InvalidAllocation();\n    error InsufficientBalance();\n    error InvalidAmount();\n    error RebalanceCooldownActive();\n    error ExceedsRiskLimit();\n    error InvalidTarget();\n    error TransferFailed();\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // CONSTRUCTOR\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Initialize the YieldVault\n     * @param _asset The base asset for the vault (e.g., USDC)\n     * @param _admin The admin address\n     * @param _feeRecipient The fee recipient address\n     */\n    constructor(\n        address _asset,\n        address _admin,\n        address _feeRecipient\n    ) {\n        if (_asset == address(0) || _admin == address(0) || _feeRecipient == address(0)) {\n            revert InvalidAmount();\n        }\n\n        asset = IERC20(_asset);\n        feeRecipient = _feeRecipient;\n\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n        _grantRole(ADMIN_ROLE, _admin);\n        _grantRole(STRATEGY_MANAGER_ROLE, _admin);\n        _grantRole(REBALANCER_ROLE, _admin);\n\n        lastRebalance = block.timestamp;\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // STRATEGY MANAGEMENT FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Adds a new yield strategy to the vault\n     * @param strategy The strategy contract address\n     * @param name The strategy name\n     * @param riskScore The risk score (1-10)\n     * @param initialAllocation Initial allocation in basis points\n     */\n    function addStrategy(\n        address strategy,\n        string calldata name,\n        uint256 riskScore,\n        uint256 initialAllocation\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\n        if (strategy == address(0)) revert InvalidStrategy();\n        if (activeStrategies[strategy]) revert StrategyAlreadyExists();\n        if (strategyList.length >= MAX_STRATEGIES) revert MaxStrategiesReached();\n        if (riskScore == 0 || riskScore > 10) revert InvalidAmount();\n        if (initialAllocation > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\n\n        // Verify strategy implements IYieldStrategy\n        try IYieldStrategy(strategy).asset() returns (address strategyAsset) {\n            if (strategyAsset != address(asset)) revert InvalidStrategy();\n        } catch {\n            revert InvalidStrategy();\n        }\n\n        strategies[strategy] = StrategyInfo({\n            strategy: IYieldStrategy(strategy),\n            allocation: initialAllocation,\n            targetAllocation: initialAllocation,\n            totalDeposited: 0,\n            lastUpdate: block.timestamp,\n            active: true,\n            riskScore: riskScore,\n            name: name\n        });\n\n        activeStrategies[strategy] = true;\n        strategyList.push(strategy);\n        targetAllocations[strategy] = initialAllocation;\n\n        // Initialize performance data\n        strategyPerformance[strategy] = PerformanceData({\n            totalYieldGenerated: 0,\n            averageAPY: 0,\n            lastAPY: 0,\n            apyHistory: new uint256[](0),\n            lastPerformanceUpdate: block.timestamp,\n            sharpeRatio: 0\n        });\n\n        // Validate total risk doesn't exceed limit\n        _validateRiskLimits();\n\n        emit StrategyAdded(strategy, name, riskScore, initialAllocation);\n    }\n\n    /**\n     * @dev Removes a strategy from the vault\n     * @param strategy The strategy to remove\n     * @param reason The reason for removal\n     */\n    function removeStrategy(\n        address strategy,\n        string calldata reason\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\n        if (!activeStrategies[strategy]) revert StrategyNotActive();\n\n        StrategyInfo storage strategyInfo = strategies[strategy];\n        \n        // Withdraw all funds from strategy\n        uint256 withdrawnAmount = 0;\n        if (strategyInfo.totalDeposited > 0) {\n            try strategyInfo.strategy.withdraw(strategyInfo.totalDeposited) \n                returns (uint256 amount) {\n                withdrawnAmount = amount;\n            } catch {\n                // Try emergency withdrawal\n                try strategyInfo.strategy.emergencyWithdraw(address(this)) \n                    returns (uint256 emergencyAmount) {\n                    withdrawnAmount = emergencyAmount;\n                } catch {\n                    // Strategy withdrawal failed - mark as inactive but keep record\n                }\n            }\n        }\n\n        // Update state\n        activeStrategies[strategy] = false;\n        strategyInfo.active = false;\n        strategyInfo.allocation = 0;\n        targetAllocations[strategy] = 0;\n\n        // Remove from strategy list\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            if (strategyList[i] == strategy) {\n                strategyList[i] = strategyList[strategyList.length - 1];\n                strategyList.pop();\n                break;\n            }\n        }\n\n        emit StrategyRemoved(strategy, reason, withdrawnAmount);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Deposits assets into the vault and allocates to strategies\n     * @param assets The amount of assets to deposit\n     * @return shares The number of shares minted\n     */\n    function deposit(uint256 assets) external nonReentrant whenNotPaused returns (uint256 shares) {\n        if (assets == 0) revert InvalidAmount();\n\n        // Calculate shares to mint\n        shares = convertToShares(assets);\n\n        // Transfer assets from user\n        asset.safeTransferFrom(msg.sender, address(this), assets);\n\n        // Update balances\n        _balances[msg.sender] += shares;\n        totalShares += shares;\n        totalAssets += assets;\n\n        // Allocate to strategies\n        _allocateToStrategies(assets);\n\n        emit Deposit(msg.sender, assets, shares);\n    }\n\n    /**\n     * @dev Withdraws assets from the vault\n     * @param shares The number of shares to burn\n     * @return assets The amount of assets withdrawn\n     */\n    function withdraw(uint256 shares) external nonReentrant returns (uint256 assets) {\n        if (shares == 0) revert InvalidAmount();\n        if (_balances[msg.sender] < shares) revert InsufficientBalance();\n\n        // Calculate assets to withdraw\n        assets = convertToAssets(shares);\n\n        // Withdraw from strategies as needed\n        _withdrawFromStrategies(assets);\n\n        // Update balances\n        _balances[msg.sender] -= shares;\n        totalShares -= shares;\n        totalAssets -= assets;\n\n        // Transfer assets to user\n        asset.safeTransfer(msg.sender, assets);\n\n        emit Withdrawal(msg.sender, assets, shares);\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // YIELD OPTIMIZATION FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Rebalances allocations across strategies\n     * @param newAllocations Array of new allocations (must sum to 10000)\n     */\n    function rebalance(\n        address[] calldata strategyAddresses,\n        uint256[] calldata newAllocations\n    ) external onlyRole(REBALANCER_ROLE) {\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\n            revert RebalanceCooldownActive();\n        }\n        if (strategyAddresses.length != newAllocations.length) revert InvalidAmount();\n\n        // Validate allocations\n        uint256 totalAllocation = 0;\n        for (uint256 i = 0; i < newAllocations.length; i++) {\n            if (!activeStrategies[strategyAddresses[i]]) revert StrategyNotActive();\n            if (newAllocations[i] > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\n            totalAllocation += newAllocations[i];\n        }\n        \n        // For rebalance, we require that all strategies are included and sum to 100%\n        if (strategyAddresses.length != _getActiveStrategyCount()) revert InvalidAllocation();\n        if (totalAllocation != BASIS_POINTS) revert InvalidAllocation();\n\n        // Store old allocations for event\n        uint256[] memory oldAllocations = new uint256[](strategyAddresses.length);\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\n            oldAllocations[i] = strategies[strategyAddresses[i]].allocation;\n        }\n\n        // Update target allocations\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\n            targetAllocations[strategyAddresses[i]] = newAllocations[i];\n        }\n\n        // Execute rebalancing (updates actual allocations)\n        _executeRebalance();\n\n        lastRebalance = block.timestamp;\n\n        emit Rebalanced(msg.sender, strategyAddresses, oldAllocations, newAllocations, block.timestamp);\n    }\n\n    /**\n     * @dev Automatically rebalances based on performance and risk\n     */\n    function autoRebalance() external onlyRole(REBALANCER_ROLE) {\n        if (!autoRebalanceEnabled) revert InvalidTarget();\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\n            revert RebalanceCooldownActive();\n        }\n\n        // Calculate optimal allocations\n        uint256[] memory optimalAllocations = _calculateOptimalAllocations();\n        \n        // Update target allocations\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategy = strategyList[i];\n            if (activeStrategies[strategy]) {\n                targetAllocations[strategy] = optimalAllocations[i];\n            }\n        }\n\n        // Execute rebalancing\n        _executeRebalance();\n\n        lastRebalance = block.timestamp;\n    }\n\n    /**\n     * @dev Harvests yield from all strategies\n     * @return totalYieldHarvested The total yield harvested\n     */\n    function harvestAll() external nonReentrant returns (uint256 totalYieldHarvested) {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\n                \n                try strategyInfo.strategy.harvestYield() returns (uint256 yieldHarvested) {\n                    if (yieldHarvested > 0) {\n                        totalYieldHarvested += yieldHarvested;\n                        \n                        // Update performance tracking\n                        strategyPerformance[strategyAddr].totalYieldGenerated += yieldHarvested;\n                        \n                        emit YieldHarvested(strategyAddr, yieldHarvested, \n                            strategyPerformance[strategyAddr].totalYieldGenerated);\n                    }\n                } catch {\n                    // Strategy harvest failed - continue with others\n                    continue;\n                }\n            }\n        }\n\n        // Update daily yield tracking\n        uint256 today = block.timestamp / 1 days;\n        dailyYield[today] += totalYieldHarvested;\n\n        // Collect fees if applicable\n        if (totalYieldHarvested > 0) {\n            _collectFees(totalYieldHarvested);\n        }\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // VIEW FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Gets the current vault APY based on strategy performance\n     * @return vaultAPY The weighted average APY\n     */\n    function getCurrentAPY() external view returns (uint256 vaultAPY) {\n        uint256 totalWeightedAPY = 0;\n        uint256 totalWeight = 0;\n\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\n                \n                try strategyInfo.strategy.getCurrentAPY() returns (uint256 strategyAPY) {\n                    uint256 weight = strategyInfo.allocation;\n                    totalWeightedAPY += strategyAPY * weight;\n                    totalWeight += weight;\n                } catch {\n                    // Strategy APY call failed - skip\n                    continue;\n                }\n            }\n        }\n\n        if (totalWeight > 0) {\n            vaultAPY = totalWeightedAPY / totalWeight;\n        }\n    }\n\n    /**\n     * @dev Converts assets to shares\n     * @param assets The amount of assets\n     * @return shares The equivalent shares\n     */\n    function convertToShares(uint256 assets) public view returns (uint256 shares) {\n        if (totalAssets == 0 || totalShares == 0) {\n            return assets;\n        }\n        return assets.mulDiv(totalShares, totalAssets);\n    }\n\n    /**\n     * @dev Converts shares to assets\n     * @param shares The number of shares\n     * @return assets The equivalent assets\n     */\n    function convertToAssets(uint256 shares) public view returns (uint256 assets) {\n        if (totalShares == 0) {\n            return shares;\n        }\n        return shares.mulDiv(totalAssets, totalShares);\n    }\n\n    /**\n     * @dev Gets user's share balance\n     * @param user The user address\n     * @return balance The user's share balance\n     */\n    function balanceOf(address user) external view returns (uint256 balance) {\n        return _balances[user];\n    }\n\n    /**\n     * @dev Gets strategy allocation data\n     * @param strategy The strategy address\n     * @return info The strategy information\n     */\n    function getStrategyInfo(address strategy) external view returns (StrategyInfo memory info) {\n        return strategies[strategy];\n    }\n\n    /**\n     * @dev Gets performance data for a strategy\n     * @param strategy The strategy address\n     * @return performance The performance data\n     */\n    function getStrategyPerformance(address strategy) \n        external \n        view \n        returns (PerformanceData memory performance) \n    {\n        return strategyPerformance[strategy];\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // INTERNAL FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    function _allocateToStrategies(uint256 assets) internal {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\n                uint256 allocationAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\n                \n                if (allocationAmount > 0) {\n                    asset.safeApprove(strategyAddr, allocationAmount);\n                    try strategyInfo.strategy.deposit(allocationAmount) {\n                        strategyInfo.totalDeposited += allocationAmount;\n                    } catch {\n                        // Strategy deposit failed - handle gracefully\n                        asset.safeApprove(strategyAddr, 0);\n                    }\n                }\n            }\n        }\n    }\n\n    function _withdrawFromStrategies(uint256 assets) internal {\n        uint256 remainingToWithdraw = assets;\n        \n        // Withdraw proportionally from strategies\n        for (uint256 i = 0; i < strategyList.length && remainingToWithdraw > 0; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\n                \n                uint256 proportionalAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\n                uint256 withdrawAmount = Math.min(proportionalAmount, \n                    Math.min(remainingToWithdraw, strategyInfo.totalDeposited));\n                \n                if (withdrawAmount > 0) {\n                    try strategyInfo.strategy.withdraw(withdrawAmount) returns (uint256 withdrawn) {\n                        strategyInfo.totalDeposited -= Math.min(withdrawAmount, strategyInfo.totalDeposited);\n                        remainingToWithdraw -= Math.min(withdrawn, remainingToWithdraw);\n                    } catch {\n                        // Strategy withdrawal failed - continue with others\n                        continue;\n                    }\n                }\n            }\n        }\n    }\n\n    function _executeRebalance() internal {\n        // Implementation would involve complex rebalancing logic\n        // For now, update allocations\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                strategies[strategyAddr].allocation = targetAllocations[strategyAddr];\n            }\n        }\n    }\n\n    function _calculateOptimalAllocations() internal view returns (uint256[] memory allocations) {\n        allocations = new uint256[](strategyList.length);\n        \n        // Simple implementation - equal weight for active strategies\n        uint256 activeCount = 0;\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            if (activeStrategies[strategyList[i]]) {\n                activeCount++;\n            }\n        }\n        \n        if (activeCount > 0) {\n            uint256 equalWeight = BASIS_POINTS / activeCount;\n            for (uint256 i = 0; i < strategyList.length; i++) {\n                if (activeStrategies[strategyList[i]]) {\n                    allocations[i] = equalWeight;\n                }\n            }\n        }\n    }\n\n    function _getActiveStrategyCount() internal view returns (uint256 count) {\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            if (activeStrategies[strategyList[i]]) {\n                count++;\n            }\n        }\n    }\n\n    function _validateTotalAllocations() internal view {\n        uint256 totalAllocation = 0;\n        \n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                totalAllocation += strategies[strategyAddr].allocation;\n            }\n        }\n        \n        if (totalAllocation > BASIS_POINTS) {\n            revert InvalidAllocation();\n        }\n    }\n\n    function _validateRiskLimits() internal view {\n        uint256 totalWeightedRisk = 0;\n        uint256 totalWeight = 0;\n\n        for (uint256 i = 0; i < strategyList.length; i++) {\n            address strategyAddr = strategyList[i];\n            if (activeStrategies[strategyAddr]) {\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\n                totalWeightedRisk += strategyInfo.riskScore * strategyInfo.allocation;\n                totalWeight += strategyInfo.allocation;\n            }\n        }\n\n        if (totalWeight > 0) {\n            uint256 avgRisk = totalWeightedRisk / totalWeight;\n            if (avgRisk > maxTotalRisk) {\n                revert ExceedsRiskLimit();\n            }\n        }\n    }\n\n    function _collectFees(uint256 yieldAmount) internal {\n        if (performanceFee > 0 && yieldAmount > 0) {\n            uint256 feeAmount = (yieldAmount * performanceFee) / BASIS_POINTS;\n            uint256 availableBalance = asset.balanceOf(address(this));\n            \n            if (feeAmount > 0 && availableBalance >= feeAmount) {\n                asset.safeTransfer(feeRecipient, feeAmount);\n            }\n        }\n    }\n\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n    // ADMIN FUNCTIONS\n    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════\n\n    /**\n     * @dev Emergency pause function\n     */\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\n        _pause();\n    }\n\n    /**\n     * @dev Resume operations\n     */\n    function unpause() external onlyRole(ADMIN_ROLE) {\n        _unpause();\n    }\n\n    /**\n     * @dev Updates vault parameters\n     */\n    function updateVaultParameters(\n        uint256 _managementFee,\n        uint256 _performanceFee,\n        address _feeRecipient,\n        bool _autoRebalanceEnabled\n    ) external onlyRole(ADMIN_ROLE) {\n        if (_managementFee > 1000 || _performanceFee > 2000) revert InvalidAmount(); // Max 10%/20%\n        if (_feeRecipient == address(0)) revert InvalidAmount();\n\n        managementFee = _managementFee;\n        performanceFee = _performanceFee;\n        feeRecipient = _feeRecipient;\n        autoRebalanceEnabled = _autoRebalanceEnabled;\n    }\n}"}},"settings":{"optimizer":{"enabled":true,"runs":200},"viaIR":true,"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"2072","formattedMessage":"Warning: Unused local variable.\n   --> src/YieldEscrow.sol:680:9:\n    |\n680 |         uint256 today = block.timestamp / SECONDS_PER_DAY;\n    |         ^^^^^^^^^^^^^\n\n","message":"Unused local variable.","severity":"warning","sourceLocation":{"end":29438,"file":"src/YieldEscrow.sol","start":29425},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> src/YieldEscrow.sol:711:70:\n    |\n711 |     function _withdrawFromStrategy(address strategy, uint256 amount, address token) internal {\n    |                                                                      ^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":30707,"file":"src/YieldEscrow.sol","start":30694},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> src/YieldEscrow.sol:724:9:\n    |\n724 |         address token\n    |         ^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":31093,"file":"src/YieldEscrow.sol","start":31080},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> src/CrossChainBridge.sol:236:9:\n    |\n236 |         bytes calldata sourceChainProof\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":7680,"file":"src/CrossChainBridge.sol","start":7649},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n  --> src/mocks/MockYieldStrategy.sol:85:33:\n   |\n85 |     function calculateUserYield(address user) external view override returns (uint256) {\n   |                                 ^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":2478,"file":"src/mocks/MockYieldStrategy.sol","start":2466},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to view\n   --> src/YieldEscrow.sol:668:5:\n    |\n668 |     function _checkDailyLimits(uint256 amount) internal {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to view","severity":"warning","sourceLocation":{"end":29217,"file":"src/YieldEscrow.sol","start":28986},"type":"Warning"}],"sources":{"@openzeppelin/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[315],"Context":[2023],"ERC165":[2642],"IAccessControl":[388],"IERC165":[2654],"Math":[3520],"SignedMath":[3625],"Strings":[2252]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:0"},{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","file":"./IAccessControl.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":389,"src":"133:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2024,"src":"164:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../utils/Strings.sol","id":4,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2253,"src":"195:30:0","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../utils/introspection/ERC165.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":316,"sourceUnit":2643,"src":"226:43:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"Context","nameLocations":["1967:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":2023,"src":"1967:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"1967:7:0"},{"baseName":{"id":9,"name":"IAccessControl","nameLocations":["1976:14:0"],"nodeType":"IdentifierPath","referencedDeclaration":388,"src":"1976:14:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"1976:14:0"},{"baseName":{"id":11,"name":"ERC165","nameLocations":["1992:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":2642,"src":"1992:6:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"1992:6:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"271:1660:0","text":" @dev Contract module that allows children to implement role-based access\n control mechanisms. This is a lightweight version that doesn't allow enumerating role\n members except through off-chain means by accessing the contract event logs. Some\n applications may benefit from on-chain enumerability, for those cases see\n {AccessControlEnumerable}.\n Roles are referred to by their `bytes32` identifier. These should be exposed\n in the external API and be unique. The best way to achieve this is by\n using `public constant` hash digests:\n ```solidity\n bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n ```\n Roles can be used to represent a set of permissions. To restrict access to a\n function call, use {hasRole}:\n ```solidity\n function foo() public {\n     require(hasRole(MY_ROLE, msg.sender));\n     ...\n }\n ```\n Roles can be granted and revoked dynamically via the {grantRole} and\n {revokeRole} functions. Each role has an associated admin role, and only\n accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n that only accounts with this role will be able to grant or revoke other\n roles. More complex role relationships can be created by using\n {_setRoleAdmin}.\n WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n grant and revoke this role. Extra precautions should be taken to secure\n accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n to enforce additional security measures for this role."},"fullyImplemented":true,"id":315,"linearizedBaseContracts":[315,2642,2654,388,2023],"name":"AccessControl","nameLocation":"1950:13:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"AccessControl.RoleData","id":19,"members":[{"constant":false,"id":16,"mutability":"mutable","name":"members","nameLocation":"2056:7:0","nodeType":"VariableDeclaration","scope":19,"src":"2031:32:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"2039:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2031:24:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"bool","nodeType":"ElementaryTypeName","src":"2050:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"adminRole","nameLocation":"2081:9:0","nodeType":"VariableDeclaration","scope":19,"src":"2073:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":17,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2073:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"RoleData","nameLocation":"2012:8:0","nodeType":"StructDefinition","scope":315,"src":"2005:92:0","visibility":"public"},{"constant":false,"id":24,"mutability":"mutable","name":"_roles","nameLocation":"2140:6:0","nodeType":"VariableDeclaration","scope":315,"src":"2103:43:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"typeName":{"id":23,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":20,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2111:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2103:28:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":22,"nodeType":"UserDefinedTypeName","pathNode":{"id":21,"name":"RoleData","nameLocations":["2122:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"2122:8:0"},"referencedDeclaration":19,"src":"2122:8:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage_ptr","typeString":"struct AccessControl.RoleData"}}},"visibility":"private"},{"constant":true,"functionSelector":"a217fddf","id":27,"mutability":"constant","name":"DEFAULT_ADMIN_ROLE","nameLocation":"2177:18:0","nodeType":"VariableDeclaration","scope":315,"src":"2153:49:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":25,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"30783030","id":26,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2198:4:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0x00"},"visibility":"public"},{"body":{"id":37,"nodeType":"Block","src":"2621:44:0","statements":[{"expression":{"arguments":[{"id":33,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":30,"src":"2642:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":32,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":92,"src":"2631:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$__$","typeString":"function (bytes32) view"}},"id":34,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2631:16:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":35,"nodeType":"ExpressionStatement","src":"2631:16:0"},{"id":36,"nodeType":"PlaceholderStatement","src":"2657:1:0"}]},"documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"2209:375:0","text":" @dev Modifier that checks that an account has a specific role. Reverts\n with a standardized message including the required role.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n _Available since v4.1._"},"id":38,"name":"onlyRole","nameLocation":"2598:8:0","nodeType":"ModifierDefinition","parameters":{"id":31,"nodeType":"ParameterList","parameters":[{"constant":false,"id":30,"mutability":"mutable","name":"role","nameLocation":"2615:4:0","nodeType":"VariableDeclaration","scope":38,"src":"2607:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":29,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2607:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2606:14:0"},"src":"2589:76:0","virtual":false,"visibility":"internal"},{"baseFunctions":[2641],"body":{"id":59,"nodeType":"Block","src":"2823:111:0","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":52,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":47,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2840:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":49,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":388,"src":"2860:14:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$388_$","typeString":"type(contract IAccessControl)"}],"id":48,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2855:4:0","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2855:20:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IAccessControl_$388","typeString":"type(contract IAccessControl)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2876:11:0","memberName":"interfaceId","nodeType":"MemberAccess","src":"2855:32:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"2840:47:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":55,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":41,"src":"2915:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":53,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2891:5:0","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_AccessControl_$315_$","typeString":"type(contract super AccessControl)"}},"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":2641,"src":"2891:23:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2891:36:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2840:87:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":46,"id":58,"nodeType":"Return","src":"2833:94:0"}]},"documentation":{"id":39,"nodeType":"StructuredDocumentation","src":"2671:56:0","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":60,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"2741:17:0","nodeType":"FunctionDefinition","overrides":{"id":43,"nodeType":"OverrideSpecifier","overrides":[],"src":"2799:8:0"},"parameters":{"id":42,"nodeType":"ParameterList","parameters":[{"constant":false,"id":41,"mutability":"mutable","name":"interfaceId","nameLocation":"2766:11:0","nodeType":"VariableDeclaration","scope":60,"src":"2759:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":40,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2759:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2758:20:0"},"returnParameters":{"id":46,"nodeType":"ParameterList","parameters":[{"constant":false,"id":45,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":60,"src":"2817:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":44,"name":"bool","nodeType":"ElementaryTypeName","src":"2817:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2816:6:0"},"scope":315,"src":"2732:202:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[355],"body":{"id":78,"nodeType":"Block","src":"3113:53:0","statements":[{"expression":{"baseExpression":{"expression":{"baseExpression":{"id":71,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"3130:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":73,"indexExpression":{"id":72,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":63,"src":"3137:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3143:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"3130:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":76,"indexExpression":{"id":75,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"3151:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3130:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":70,"id":77,"nodeType":"Return","src":"3123:36:0"}]},"documentation":{"id":61,"nodeType":"StructuredDocumentation","src":"2940:76:0","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"3030:7:0","nodeType":"FunctionDefinition","overrides":{"id":67,"nodeType":"OverrideSpecifier","overrides":[],"src":"3089:8:0"},"parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":63,"mutability":"mutable","name":"role","nameLocation":"3046:4:0","nodeType":"VariableDeclaration","scope":79,"src":"3038:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":62,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3038:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":65,"mutability":"mutable","name":"account","nameLocation":"3060:7:0","nodeType":"VariableDeclaration","scope":79,"src":"3052:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"3052:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3037:31:0"},"returnParameters":{"id":70,"nodeType":"ParameterList","parameters":[{"constant":false,"id":69,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":79,"src":"3107:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":68,"name":"bool","nodeType":"ElementaryTypeName","src":"3107:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3106:6:0"},"scope":315,"src":"3021:145:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":91,"nodeType":"Block","src":"3516:47:0","statements":[{"expression":{"arguments":[{"id":86,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"3537:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"3543:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3543:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":85,"name":"_checkRole","nodeType":"Identifier","overloadedDeclarations":[92,131],"referencedDeclaration":131,"src":"3526:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) view"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3526:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":90,"nodeType":"ExpressionStatement","src":"3526:30:0"}]},"documentation":{"id":80,"nodeType":"StructuredDocumentation","src":"3172:283:0","text":" @dev Revert with a standard message if `_msgSender()` is missing `role`.\n Overriding this function changes the behavior of the {onlyRole} modifier.\n Format of the revert message is described in {_checkRole}.\n _Available since v4.6._"},"id":92,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3469:10:0","nodeType":"FunctionDefinition","parameters":{"id":83,"nodeType":"ParameterList","parameters":[{"constant":false,"id":82,"mutability":"mutable","name":"role","nameLocation":"3488:4:0","nodeType":"VariableDeclaration","scope":92,"src":"3480:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":81,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3480:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3479:14:0"},"returnParameters":{"id":84,"nodeType":"ParameterList","parameters":[],"src":"3516:0:0"},"scope":315,"src":"3460:103:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":130,"nodeType":"Block","src":"3917:406:0","statements":[{"condition":{"id":104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3931:23:0","subExpression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"3940:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"3946:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":100,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"3932:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":103,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3932:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":129,"nodeType":"IfStatement","src":"3927:390:0","trueBody":{"id":128,"nodeType":"Block","src":"3956:361:0","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"416363657373436f6e74726f6c3a206163636f756e7420","id":110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4064:25:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},"value":"AccessControl: account "},{"arguments":[{"id":113,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":97,"src":"4135:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":111,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"4115:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2252_$","typeString":"type(library Strings)"}},"id":112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4123:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2226,"src":"4115:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$returns$_t_string_memory_ptr_$","typeString":"function (address) pure returns (string memory)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4115:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"hexValue":"206973206d697373696e6720726f6c6520","id":115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4169:19:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},"value":" is missing role "},{"arguments":[{"arguments":[{"id":120,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":95,"src":"4242:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":119,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4234:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":118,"name":"uint256","nodeType":"ElementaryTypeName","src":"4234:7:0","typeDescriptions":{}}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4234:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"3332","id":122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4249:2:0","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"}],"expression":{"id":116,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"4214:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2252_$","typeString":"type(library Strings)"}},"id":117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4222:11:0","memberName":"toHexString","nodeType":"MemberAccess","referencedDeclaration":2206,"src":"4214:19:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4214:38:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_da0d07ce4a2849fbfc4cb9d6f939e9bd93016c372ca4a5ff14fe06caf3d67874","typeString":"literal_string \"AccessControl: account \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_stringliteral_f986ce851518a691bccd44ea42a5a185d1b866ef6cb07984a09b81694d20ab69","typeString":"literal_string \" is missing role \""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":108,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4022:3:0","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4026:12:0","memberName":"encodePacked","nodeType":"MemberAccess","src":"4022:16:0","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4022:252:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":107,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3994:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":106,"name":"string","nodeType":"ElementaryTypeName","src":"3994:6:0","typeDescriptions":{}}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3994:298:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":105,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3970:6:0","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3970:336:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"3970:336:0"}]}}]},"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"3569:270:0","text":" @dev Revert with a standard message if `account` is missing `role`.\n The format of the revert reason is given by the following regular expression:\n  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/"},"id":131,"implemented":true,"kind":"function","modifiers":[],"name":"_checkRole","nameLocation":"3853:10:0","nodeType":"FunctionDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"role","nameLocation":"3872:4:0","nodeType":"VariableDeclaration","scope":131,"src":"3864:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":94,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3864:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":97,"mutability":"mutable","name":"account","nameLocation":"3886:7:0","nodeType":"VariableDeclaration","scope":131,"src":"3878:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"3878:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3863:31:0"},"returnParameters":{"id":99,"nodeType":"ParameterList","parameters":[],"src":"3917:0:0"},"scope":315,"src":"3844:479:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[363],"body":{"id":145,"nodeType":"Block","src":"4587:46:0","statements":[{"expression":{"expression":{"baseExpression":{"id":140,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"4604:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":142,"indexExpression":{"id":141,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4611:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4604:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":143,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4617:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"4604:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":139,"id":144,"nodeType":"Return","src":"4597:29:0"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"4329:170:0","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {_setRoleAdmin}."},"functionSelector":"248a9ca3","id":146,"implemented":true,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"4513:12:0","nodeType":"FunctionDefinition","overrides":{"id":136,"nodeType":"OverrideSpecifier","overrides":[],"src":"4560:8:0"},"parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"role","nameLocation":"4534:4:0","nodeType":"VariableDeclaration","scope":146,"src":"4526:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4526:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4525:14:0"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":146,"src":"4578:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":137,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4578:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4577:9:0"},"scope":315,"src":"4504:129:0","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[371],"body":{"id":165,"nodeType":"Block","src":"5032:42:0","statements":[{"expression":{"arguments":[{"id":161,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"5053:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":162,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"5059:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":160,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"5042:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":164,"nodeType":"ExpressionStatement","src":"5042:25:0"}]},"documentation":{"id":147,"nodeType":"StructuredDocumentation","src":"4639:285:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleGranted} event."},"functionSelector":"2f2ff15d","id":166,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":156,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":149,"src":"5025:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":155,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5012:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5012:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":158,"kind":"modifierInvocation","modifierName":{"id":154,"name":"onlyRole","nameLocations":["5003:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"5003:8:0"},"nodeType":"ModifierInvocation","src":"5003:28:0"}],"name":"grantRole","nameLocation":"4938:9:0","nodeType":"FunctionDefinition","overrides":{"id":153,"nodeType":"OverrideSpecifier","overrides":[],"src":"4994:8:0"},"parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":149,"mutability":"mutable","name":"role","nameLocation":"4956:4:0","nodeType":"VariableDeclaration","scope":166,"src":"4948:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4948:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"account","nameLocation":"4970:7:0","nodeType":"VariableDeclaration","scope":166,"src":"4962:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":150,"name":"address","nodeType":"ElementaryTypeName","src":"4962:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4947:31:0"},"returnParameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"5032:0:0"},"scope":315,"src":"4929:145:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[379],"body":{"id":185,"nodeType":"Block","src":"5458:43:0","statements":[{"expression":{"arguments":[{"id":181,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5480:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":182,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":171,"src":"5486:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":180,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"5468:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5468:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"ExpressionStatement","src":"5468:26:0"}]},"documentation":{"id":167,"nodeType":"StructuredDocumentation","src":"5080:269:0","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role.\n May emit a {RoleRevoked} event."},"functionSelector":"d547741f","id":186,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"arguments":[{"id":176,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":169,"src":"5451:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"5438:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5438:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":178,"kind":"modifierInvocation","modifierName":{"id":174,"name":"onlyRole","nameLocations":["5429:8:0"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"5429:8:0"},"nodeType":"ModifierInvocation","src":"5429:28:0"}],"name":"revokeRole","nameLocation":"5363:10:0","nodeType":"FunctionDefinition","overrides":{"id":173,"nodeType":"OverrideSpecifier","overrides":[],"src":"5420:8:0"},"parameters":{"id":172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":169,"mutability":"mutable","name":"role","nameLocation":"5382:4:0","nodeType":"VariableDeclaration","scope":186,"src":"5374:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5374:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":171,"mutability":"mutable","name":"account","nameLocation":"5396:7:0","nodeType":"VariableDeclaration","scope":186,"src":"5388:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":170,"name":"address","nodeType":"ElementaryTypeName","src":"5388:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5373:31:0"},"returnParameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"5458:0:0"},"scope":315,"src":"5354:147:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[387],"body":{"id":208,"nodeType":"Block","src":"6115:137:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":196,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6133:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":197,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"6144:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6144:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6133:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66","id":200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6158:49:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""},"value":"AccessControl: can only renounce roles for self"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fb06fa8ff2141e8ed74502f6792273793f25f0e9d3cf15344f3f5a0d4948fd4b","typeString":"literal_string \"AccessControl: can only renounce roles for self\""}],"id":195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6125:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6125:83:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":202,"nodeType":"ExpressionStatement","src":"6125:83:0"},{"expression":{"arguments":[{"id":204,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"6231:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":205,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":191,"src":"6237:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":203,"name":"_revokeRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"6219:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6219:26:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":207,"nodeType":"ExpressionStatement","src":"6219:26:0"}]},"documentation":{"id":187,"nodeType":"StructuredDocumentation","src":"5507:526:0","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been revoked `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`.\n May emit a {RoleRevoked} event."},"functionSelector":"36568abe","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"6047:12:0","nodeType":"FunctionDefinition","overrides":{"id":193,"nodeType":"OverrideSpecifier","overrides":[],"src":"6106:8:0"},"parameters":{"id":192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"role","nameLocation":"6068:4:0","nodeType":"VariableDeclaration","scope":209,"src":"6060:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":188,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6060:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":191,"mutability":"mutable","name":"account","nameLocation":"6082:7:0","nodeType":"VariableDeclaration","scope":209,"src":"6074:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":190,"name":"address","nodeType":"ElementaryTypeName","src":"6074:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6059:31:0"},"returnParameters":{"id":194,"nodeType":"ParameterList","parameters":[],"src":"6115:0:0"},"scope":315,"src":"6038:214:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":222,"nodeType":"Block","src":"7005:42:0","statements":[{"expression":{"arguments":[{"id":218,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"7026:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":219,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"7032:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":217,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"7015:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7015:25:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"7015:25:0"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"6258:674:0","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event. Note that unlike {grantRole}, this function doesn't perform any\n checks on the calling account.\n May emit a {RoleGranted} event.\n [WARNING]\n ====\n This function should only be called from the constructor when setting\n up the initial roles for the system.\n Using this function in any other way is effectively circumventing the admin\n system imposed by {AccessControl}.\n ====\n NOTE: This function is deprecated in favor of {_grantRole}."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"_setupRole","nameLocation":"6946:10:0","nodeType":"FunctionDefinition","parameters":{"id":215,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"role","nameLocation":"6965:4:0","nodeType":"VariableDeclaration","scope":223,"src":"6957:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6957:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":214,"mutability":"mutable","name":"account","nameLocation":"6979:7:0","nodeType":"VariableDeclaration","scope":223,"src":"6971:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"6971:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6956:31:0"},"returnParameters":{"id":216,"nodeType":"ParameterList","parameters":[],"src":"7005:0:0"},"scope":315,"src":"6937:110:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":250,"nodeType":"Block","src":"7245:174:0","statements":[{"assignments":[232],"declarations":[{"constant":false,"id":232,"mutability":"mutable","name":"previousAdminRole","nameLocation":"7263:17:0","nodeType":"VariableDeclaration","scope":250,"src":"7255:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7255:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":236,"initialValue":{"arguments":[{"id":234,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7296:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":233,"name":"getRoleAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":146,"src":"7283:12:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) view returns (bytes32)"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7283:18:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7255:46:0"},{"expression":{"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":237,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7311:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":239,"indexExpression":{"id":238,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7318:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7311:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7324:9:0","memberName":"adminRole","nodeType":"MemberAccess","referencedDeclaration":18,"src":"7311:22:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":241,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7336:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7311:34:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":243,"nodeType":"ExpressionStatement","src":"7311:34:0"},{"eventCall":{"arguments":[{"id":245,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"7377:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":246,"name":"previousAdminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":232,"src":"7383:17:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":247,"name":"adminRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":228,"src":"7402:9:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":244,"name":"RoleAdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":327,"src":"7360:16:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (bytes32,bytes32,bytes32)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7360:52:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":249,"nodeType":"EmitStatement","src":"7355:57:0"}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"7053:114:0","text":" @dev Sets `adminRole` as ``role``'s admin role.\n Emits a {RoleAdminChanged} event."},"id":251,"implemented":true,"kind":"function","modifiers":[],"name":"_setRoleAdmin","nameLocation":"7181:13:0","nodeType":"FunctionDefinition","parameters":{"id":229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"role","nameLocation":"7203:4:0","nodeType":"VariableDeclaration","scope":251,"src":"7195:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":225,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7195:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":228,"mutability":"mutable","name":"adminRole","nameLocation":"7217:9:0","nodeType":"VariableDeclaration","scope":251,"src":"7209:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":227,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7209:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7194:33:0"},"returnParameters":{"id":230,"nodeType":"ParameterList","parameters":[],"src":"7245:0:0"},"scope":315,"src":"7172:247:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":282,"nodeType":"Block","src":"7655:165:0","statements":[{"condition":{"id":263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7669:23:0","subExpression":{"arguments":[{"id":260,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7678:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":261,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7684:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":259,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"7670:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7670:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":281,"nodeType":"IfStatement","src":"7665:149:0","trueBody":{"id":280,"nodeType":"Block","src":"7694:120:0","statements":[{"expression":{"id":271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":264,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"7708:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":266,"indexExpression":{"id":265,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7715:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7708:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":267,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7721:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"7708:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":269,"indexExpression":{"id":268,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7729:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7708:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":270,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7740:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7708:36:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":272,"nodeType":"ExpressionStatement","src":"7708:36:0"},{"eventCall":{"arguments":[{"id":274,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"7775:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":275,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"7781:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":276,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"7790:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7790:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":273,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"7763:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7763:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":279,"nodeType":"EmitStatement","src":"7758:45:0"}]}}]},"documentation":{"id":252,"nodeType":"StructuredDocumentation","src":"7425:157:0","text":" @dev Grants `role` to `account`.\n Internal function without access restriction.\n May emit a {RoleGranted} event."},"id":283,"implemented":true,"kind":"function","modifiers":[],"name":"_grantRole","nameLocation":"7596:10:0","nodeType":"FunctionDefinition","parameters":{"id":257,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"role","nameLocation":"7615:4:0","nodeType":"VariableDeclaration","scope":283,"src":"7607:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":253,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7607:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"account","nameLocation":"7629:7:0","nodeType":"VariableDeclaration","scope":283,"src":"7621:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"7621:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7606:31:0"},"returnParameters":{"id":258,"nodeType":"ParameterList","parameters":[],"src":"7655:0:0"},"scope":315,"src":"7587:233:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"8060:165:0","statements":[{"condition":{"arguments":[{"id":292,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8082:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":293,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8088:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":291,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"8074:7:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8074:22:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":312,"nodeType":"IfStatement","src":"8070:149:0","trueBody":{"id":311,"nodeType":"Block","src":"8098:121:0","statements":[{"expression":{"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"baseExpression":{"id":295,"name":"_roles","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":24,"src":"8112:6:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_RoleData_$19_storage_$","typeString":"mapping(bytes32 => struct AccessControl.RoleData storage ref)"}},"id":297,"indexExpression":{"id":296,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8119:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8112:12:0","typeDescriptions":{"typeIdentifier":"t_struct$_RoleData_$19_storage","typeString":"struct AccessControl.RoleData storage ref"}},"id":298,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8125:7:0","memberName":"members","nodeType":"MemberAccess","referencedDeclaration":16,"src":"8112:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":300,"indexExpression":{"id":299,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8133:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8112:29:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8144:5:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"8112:37:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":303,"nodeType":"ExpressionStatement","src":"8112:37:0"},{"eventCall":{"arguments":[{"id":305,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"8180:4:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":306,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":288,"src":"8186:7:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":307,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"8195:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8195:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":304,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"8168:11:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8168:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":310,"nodeType":"EmitStatement","src":"8163:45:0"}]}}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"7826:160:0","text":" @dev Revokes `role` from `account`.\n Internal function without access restriction.\n May emit a {RoleRevoked} event."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"_revokeRole","nameLocation":"8000:11:0","nodeType":"FunctionDefinition","parameters":{"id":289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":286,"mutability":"mutable","name":"role","nameLocation":"8020:4:0","nodeType":"VariableDeclaration","scope":314,"src":"8012:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":285,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8012:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":288,"mutability":"mutable","name":"account","nameLocation":"8034:7:0","nodeType":"VariableDeclaration","scope":314,"src":"8026:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":287,"name":"address","nodeType":"ElementaryTypeName","src":"8026:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8011:31:0"},"returnParameters":{"id":290,"nodeType":"ParameterList","parameters":[],"src":"8060:0:0"},"scope":315,"src":"7991:234:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":316,"src":"1932:6295:0","usedErrors":[],"usedEvents":[327,336,345]}],"src":"108:8120:0"},"id":0},"@openzeppelin/contracts/access/IAccessControl.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/IAccessControl.sol","exportedSymbols":{"IAccessControl":[388]},"id":389,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"94:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"119:89:1","text":" @dev External interface of AccessControl declared to support ERC165 detection."},"fullyImplemented":false,"id":388,"linearizedBaseContracts":[388],"name":"IAccessControl","nameLocation":"219:14:1","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"240:292:1","text":" @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n {RoleAdminChanged} not being emitted signaling this.\n _Available since v3.1._"},"eventSelector":"bd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff","id":327,"name":"RoleAdminChanged","nameLocation":"543:16:1","nodeType":"EventDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"576:4:1","nodeType":"VariableDeclaration","scope":327,"src":"560:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":320,"name":"bytes32","nodeType":"ElementaryTypeName","src":"560:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":323,"indexed":true,"mutability":"mutable","name":"previousAdminRole","nameLocation":"598:17:1","nodeType":"VariableDeclaration","scope":327,"src":"582:33:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":322,"name":"bytes32","nodeType":"ElementaryTypeName","src":"582:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":325,"indexed":true,"mutability":"mutable","name":"newAdminRole","nameLocation":"633:12:1","nodeType":"VariableDeclaration","scope":327,"src":"617:28:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"617:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"559:87:1"},"src":"537:110:1"},{"anonymous":false,"documentation":{"id":328,"nodeType":"StructuredDocumentation","src":"653:212:1","text":" @dev Emitted when `account` is granted `role`.\n `sender` is the account that originated the contract call, an admin role\n bearer except when using {AccessControl-_setupRole}."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":336,"name":"RoleGranted","nameLocation":"876:11:1","nodeType":"EventDefinition","parameters":{"id":335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"904:4:1","nodeType":"VariableDeclaration","scope":336,"src":"888:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"888:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":332,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"926:7:1","nodeType":"VariableDeclaration","scope":336,"src":"910:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":331,"name":"address","nodeType":"ElementaryTypeName","src":"910:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":334,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"951:6:1","nodeType":"VariableDeclaration","scope":336,"src":"935:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"935:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"887:71:1"},"src":"870:89:1"},{"anonymous":false,"documentation":{"id":337,"nodeType":"StructuredDocumentation","src":"965:275:1","text":" @dev Emitted when `account` is revoked `role`.\n `sender` is the account that originated the contract call:\n   - if using `revokeRole`, it is the admin role bearer\n   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":345,"name":"RoleRevoked","nameLocation":"1251:11:1","nodeType":"EventDefinition","parameters":{"id":344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"indexed":true,"mutability":"mutable","name":"role","nameLocation":"1279:4:1","nodeType":"VariableDeclaration","scope":345,"src":"1263:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1263:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":341,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"1301:7:1","nodeType":"VariableDeclaration","scope":345,"src":"1285:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":340,"name":"address","nodeType":"ElementaryTypeName","src":"1285:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":343,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1326:6:1","nodeType":"VariableDeclaration","scope":345,"src":"1310:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":342,"name":"address","nodeType":"ElementaryTypeName","src":"1310:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1262:71:1"},"src":"1245:89:1"},{"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"1340:76:1","text":" @dev Returns `true` if `account` has been granted `role`."},"functionSelector":"91d14854","id":355,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"1430:7:1","nodeType":"FunctionDefinition","parameters":{"id":351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":348,"mutability":"mutable","name":"role","nameLocation":"1446:4:1","nodeType":"VariableDeclaration","scope":355,"src":"1438:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1438:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":350,"mutability":"mutable","name":"account","nameLocation":"1460:7:1","nodeType":"VariableDeclaration","scope":355,"src":"1452:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":349,"name":"address","nodeType":"ElementaryTypeName","src":"1452:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1437:31:1"},"returnParameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":353,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":355,"src":"1492:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":352,"name":"bool","nodeType":"ElementaryTypeName","src":"1492:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1491:6:1"},"scope":388,"src":"1421:77:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":356,"nodeType":"StructuredDocumentation","src":"1504:184:1","text":" @dev Returns the admin role that controls `role`. See {grantRole} and\n {revokeRole}.\n To change a role's admin, use {AccessControl-_setRoleAdmin}."},"functionSelector":"248a9ca3","id":363,"implemented":false,"kind":"function","modifiers":[],"name":"getRoleAdmin","nameLocation":"1702:12:1","nodeType":"FunctionDefinition","parameters":{"id":359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":358,"mutability":"mutable","name":"role","nameLocation":"1723:4:1","nodeType":"VariableDeclaration","scope":363,"src":"1715:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1715:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1714:14:1"},"returnParameters":{"id":362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":363,"src":"1752:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1752:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1751:9:1"},"scope":388,"src":"1693:68:1","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":364,"nodeType":"StructuredDocumentation","src":"1767:239:1","text":" @dev Grants `role` to `account`.\n If `account` had not been already granted `role`, emits a {RoleGranted}\n event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"2f2ff15d","id":371,"implemented":false,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"2020:9:1","nodeType":"FunctionDefinition","parameters":{"id":369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":366,"mutability":"mutable","name":"role","nameLocation":"2038:4:1","nodeType":"VariableDeclaration","scope":371,"src":"2030:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":365,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2030:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":368,"mutability":"mutable","name":"account","nameLocation":"2052:7:1","nodeType":"VariableDeclaration","scope":371,"src":"2044:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":367,"name":"address","nodeType":"ElementaryTypeName","src":"2044:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2029:31:1"},"returnParameters":{"id":370,"nodeType":"ParameterList","parameters":[],"src":"2069:0:1"},"scope":388,"src":"2011:59:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"2076:223:1","text":" @dev Revokes `role` from `account`.\n If `account` had been granted `role`, emits a {RoleRevoked} event.\n Requirements:\n - the caller must have ``role``'s admin role."},"functionSelector":"d547741f","id":379,"implemented":false,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"2313:10:1","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":374,"mutability":"mutable","name":"role","nameLocation":"2332:4:1","nodeType":"VariableDeclaration","scope":379,"src":"2324:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":373,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"account","nameLocation":"2346:7:1","nodeType":"VariableDeclaration","scope":379,"src":"2338:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"2338:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2323:31:1"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"2363:0:1"},"scope":388,"src":"2304:60:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"2370:480:1","text":" @dev Revokes `role` from the calling account.\n Roles are often managed via {grantRole} and {revokeRole}: this function's\n purpose is to provide a mechanism for accounts to lose their privileges\n if they are compromised (such as when a trusted device is misplaced).\n If the calling account had been granted `role`, emits a {RoleRevoked}\n event.\n Requirements:\n - the caller must be `account`."},"functionSelector":"36568abe","id":387,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2864:12:1","nodeType":"FunctionDefinition","parameters":{"id":385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":382,"mutability":"mutable","name":"role","nameLocation":"2885:4:1","nodeType":"VariableDeclaration","scope":387,"src":"2877:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2877:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":384,"mutability":"mutable","name":"account","nameLocation":"2899:7:1","nodeType":"VariableDeclaration","scope":387,"src":"2891:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":383,"name":"address","nodeType":"ElementaryTypeName","src":"2891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2876:31:1"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[],"src":"2916:0:1"},"scope":388,"src":"2855:62:1","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":389,"src":"209:2710:1","usedErrors":[],"usedEvents":[327,336,345]}],"src":"94:2826:1"},"id":1},"@openzeppelin/contracts/security/Pausable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","exportedSymbols":{"Context":[2023],"Pausable":[496]},"id":497,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":390,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:2"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":391,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":497,"sourceUnit":2024,"src":"130:30:2","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":393,"name":"Context","nameLocations":["632:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2023,"src":"632:7:2"},"id":394,"nodeType":"InheritanceSpecifier","src":"632:7:2"}],"canonicalName":"Pausable","contractDependencies":[],"contractKind":"contract","documentation":{"id":392,"nodeType":"StructuredDocumentation","src":"162:439:2","text":" @dev Contract module which allows children to implement an emergency stop\n mechanism that can be triggered by an authorized account.\n This module is used through inheritance. It will make available the\n modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n the functions of your contract. Note that they will not be pausable by\n simply including this module, only once the modifiers are put in place."},"fullyImplemented":true,"id":496,"linearizedBaseContracts":[496,2023],"name":"Pausable","nameLocation":"620:8:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":395,"nodeType":"StructuredDocumentation","src":"646:73:2","text":" @dev Emitted when the pause is triggered by `account`."},"eventSelector":"62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258","id":399,"name":"Paused","nameLocation":"730:6:2","nodeType":"EventDefinition","parameters":{"id":398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":397,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"745:7:2","nodeType":"VariableDeclaration","scope":399,"src":"737:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":396,"name":"address","nodeType":"ElementaryTypeName","src":"737:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"736:17:2"},"src":"724:30:2"},{"anonymous":false,"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"760:70:2","text":" @dev Emitted when the pause is lifted by `account`."},"eventSelector":"5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa","id":404,"name":"Unpaused","nameLocation":"841:8:2","nodeType":"EventDefinition","parameters":{"id":403,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"858:7:2","nodeType":"VariableDeclaration","scope":404,"src":"850:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"850:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"849:17:2"},"src":"835:32:2"},{"constant":false,"id":406,"mutability":"mutable","name":"_paused","nameLocation":"886:7:2","nodeType":"VariableDeclaration","scope":496,"src":"873:20:2","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":405,"name":"bool","nodeType":"ElementaryTypeName","src":"873:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"private"},{"body":{"id":414,"nodeType":"Block","src":"986:32:2","statements":[{"expression":{"id":412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":410,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"996:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1006:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"996:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":413,"nodeType":"ExpressionStatement","src":"996:15:2"}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"900:67:2","text":" @dev Initializes the contract in unpaused state."},"id":415,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":408,"nodeType":"ParameterList","parameters":[],"src":"983:2:2"},"returnParameters":{"id":409,"nodeType":"ParameterList","parameters":[],"src":"986:0:2"},"scope":496,"src":"972:46:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":422,"nodeType":"Block","src":"1229:47:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":418,"name":"_requireNotPaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"1239:17:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":419,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1239:19:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":420,"nodeType":"ExpressionStatement","src":"1239:19:2"},{"id":421,"nodeType":"PlaceholderStatement","src":"1268:1:2"}]},"documentation":{"id":416,"nodeType":"StructuredDocumentation","src":"1024:175:2","text":" @dev Modifier to make a function callable only when the contract is not paused.\n Requirements:\n - The contract must not be paused."},"id":423,"name":"whenNotPaused","nameLocation":"1213:13:2","nodeType":"ModifierDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[],"src":"1226:2:2"},"src":"1204:72:2","virtual":false,"visibility":"internal"},{"body":{"id":430,"nodeType":"Block","src":"1476:44:2","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":426,"name":"_requirePaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":463,"src":"1486:14:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:16:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":428,"nodeType":"ExpressionStatement","src":"1486:16:2"},{"id":429,"nodeType":"PlaceholderStatement","src":"1512:1:2"}]},"documentation":{"id":424,"nodeType":"StructuredDocumentation","src":"1282:167:2","text":" @dev Modifier to make a function callable only when the contract is paused.\n Requirements:\n - The contract must be paused."},"id":431,"name":"whenPaused","nameLocation":"1463:10:2","nodeType":"ModifierDefinition","parameters":{"id":425,"nodeType":"ParameterList","parameters":[],"src":"1473:2:2"},"src":"1454:66:2","virtual":false,"visibility":"internal"},{"body":{"id":439,"nodeType":"Block","src":"1668:31:2","statements":[{"expression":{"id":437,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"1685:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":436,"id":438,"nodeType":"Return","src":"1678:14:2"}]},"documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"1526:84:2","text":" @dev Returns true if the contract is paused, and false otherwise."},"functionSelector":"5c975abb","id":440,"implemented":true,"kind":"function","modifiers":[],"name":"paused","nameLocation":"1624:6:2","nodeType":"FunctionDefinition","parameters":{"id":433,"nodeType":"ParameterList","parameters":[],"src":"1630:2:2"},"returnParameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":440,"src":"1662:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":434,"name":"bool","nodeType":"ElementaryTypeName","src":"1662:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1661:6:2"},"scope":496,"src":"1615:84:2","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":451,"nodeType":"Block","src":"1818:55:2","statements":[{"expression":{"arguments":[{"id":447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1836:9:2","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":445,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"1837:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a20706175736564","id":448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1847:18:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""},"value":"Pausable: paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a","typeString":"literal_string \"Pausable: paused\""}],"id":444,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1828:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:38:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":450,"nodeType":"ExpressionStatement","src":"1828:38:2"}]},"documentation":{"id":441,"nodeType":"StructuredDocumentation","src":"1705:57:2","text":" @dev Throws if the contract is paused."},"id":452,"implemented":true,"kind":"function","modifiers":[],"name":"_requireNotPaused","nameLocation":"1776:17:2","nodeType":"FunctionDefinition","parameters":{"id":442,"nodeType":"ParameterList","parameters":[],"src":"1793:2:2"},"returnParameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"1818:0:2"},"scope":496,"src":"1767:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":462,"nodeType":"Block","src":"1993:58:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":457,"name":"paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":440,"src":"2011:6:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bool_$","typeString":"function () view returns (bool)"}},"id":458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2011:8:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5061757361626c653a206e6f7420706175736564","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2021:22:2","typeDescriptions":{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""},"value":"Pausable: not paused"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a","typeString":"literal_string \"Pausable: not paused\""}],"id":456,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2003:7:2","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":460,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2003:41:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":461,"nodeType":"ExpressionStatement","src":"2003:41:2"}]},"documentation":{"id":453,"nodeType":"StructuredDocumentation","src":"1879:61:2","text":" @dev Throws if the contract is not paused."},"id":463,"implemented":true,"kind":"function","modifiers":[],"name":"_requirePaused","nameLocation":"1954:14:2","nodeType":"FunctionDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[],"src":"1968:2:2"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[],"src":"1993:0:2"},"scope":496,"src":"1945:106:2","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":478,"nodeType":"Block","src":"2235:66:2","statements":[{"expression":{"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":469,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"2245:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2255:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"2245:14:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":472,"nodeType":"ExpressionStatement","src":"2245:14:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":474,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"2281:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2281:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":473,"name":"Paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":399,"src":"2274:6:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2274:20:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":477,"nodeType":"EmitStatement","src":"2269:25:2"}]},"documentation":{"id":464,"nodeType":"StructuredDocumentation","src":"2057:124:2","text":" @dev Triggers stopped state.\n Requirements:\n - The contract must not be paused."},"id":479,"implemented":true,"kind":"function","modifiers":[{"id":467,"kind":"modifierInvocation","modifierName":{"id":466,"name":"whenNotPaused","nameLocations":["2221:13:2"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"2221:13:2"},"nodeType":"ModifierInvocation","src":"2221:13:2"}],"name":"_pause","nameLocation":"2195:6:2","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[],"src":"2201:2:2"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"2235:0:2"},"scope":496,"src":"2186:115:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":494,"nodeType":"Block","src":"2481:69:2","statements":[{"expression":{"id":487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":485,"name":"_paused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"2491:7:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2501:5:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2491:15:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":488,"nodeType":"ExpressionStatement","src":"2491:15:2"},{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":490,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"2530:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2530:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":489,"name":"Unpaused","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":404,"src":"2521:8:2","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2521:22:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":493,"nodeType":"EmitStatement","src":"2516:27:2"}]},"documentation":{"id":480,"nodeType":"StructuredDocumentation","src":"2307:121:2","text":" @dev Returns to normal state.\n Requirements:\n - The contract must be paused."},"id":495,"implemented":true,"kind":"function","modifiers":[{"id":483,"kind":"modifierInvocation","modifierName":{"id":482,"name":"whenPaused","nameLocations":["2470:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"2470:10:2"},"nodeType":"ModifierInvocation","src":"2470:10:2"}],"name":"_unpause","nameLocation":"2442:8:2","nodeType":"FunctionDefinition","parameters":{"id":481,"nodeType":"ParameterList","parameters":[],"src":"2450:2:2"},"returnParameters":{"id":484,"nodeType":"ParameterList","parameters":[],"src":"2481:0:2"},"scope":496,"src":"2433:117:2","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":497,"src":"602:1950:2","usedErrors":[],"usedEvents":[399,404]}],"src":"105:2448:2"},"id":2},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[561]},"id":562,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":498,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:3"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":499,"nodeType":"StructuredDocumentation","src":"137:750:3","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":561,"linearizedBaseContracts":[561],"name":"ReentrancyGuard","nameLocation":"906:15:3","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":502,"mutability":"constant","name":"_NOT_ENTERED","nameLocation":"1701:12:3","nodeType":"VariableDeclaration","scope":561,"src":"1676:41:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":500,"name":"uint256","nodeType":"ElementaryTypeName","src":"1676:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1716:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":505,"mutability":"constant","name":"_ENTERED","nameLocation":"1748:8:3","nodeType":"VariableDeclaration","scope":561,"src":"1723:37:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":503,"name":"uint256","nodeType":"ElementaryTypeName","src":"1723:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1759:1:3","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":507,"mutability":"mutable","name":"_status","nameLocation":"1783:7:3","nodeType":"VariableDeclaration","scope":561,"src":"1767:23:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":506,"name":"uint256","nodeType":"ElementaryTypeName","src":"1767:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"body":{"id":514,"nodeType":"Block","src":"1811:39:3","statements":[{"expression":{"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":510,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"1821:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":511,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1831:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1821:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":513,"nodeType":"ExpressionStatement","src":"1821:22:3"}]},"id":515,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":508,"nodeType":"ParameterList","parameters":[],"src":"1808:2:3"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[],"src":"1811:0:3"},"scope":561,"src":"1797:53:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":525,"nodeType":"Block","src":"2251:79:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":518,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"2261:19:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2261:21:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":520,"nodeType":"ExpressionStatement","src":"2261:21:3"},{"id":521,"nodeType":"PlaceholderStatement","src":"2292:1:3"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":522,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":549,"src":"2303:18:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":524,"nodeType":"ExpressionStatement","src":"2303:20:3"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"1856:366:3","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":526,"name":"nonReentrant","nameLocation":"2236:12:3","nodeType":"ModifierDefinition","parameters":{"id":517,"nodeType":"ParameterList","parameters":[],"src":"2248:2:3"},"src":"2227:103:3","virtual":false,"visibility":"internal"},{"body":{"id":540,"nodeType":"Block","src":"2375:248:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":530,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"2468:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":531,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"2479:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2468:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5265656e7472616e637947756172643a207265656e7472616e742063616c6c","id":533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2489:33:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""},"value":"ReentrancyGuard: reentrant call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619","typeString":"literal_string \"ReentrancyGuard: reentrant call\""}],"id":529,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2460:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2460:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":535,"nodeType":"ExpressionStatement","src":"2460:63:3"},{"expression":{"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":536,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"2598:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":537,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"2608:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2598:18:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":539,"nodeType":"ExpressionStatement","src":"2598:18:3"}]},"id":541,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2345:19:3","nodeType":"FunctionDefinition","parameters":{"id":527,"nodeType":"ParameterList","parameters":[],"src":"2364:2:3"},"returnParameters":{"id":528,"nodeType":"ParameterList","parameters":[],"src":"2375:0:3"},"scope":561,"src":"2336:287:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":548,"nodeType":"Block","src":"2667:171:3","statements":[{"expression":{"id":546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":544,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"2809:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":545,"name":"_NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"2819:12:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2809:22:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":547,"nodeType":"ExpressionStatement","src":"2809:22:3"}]},"id":549,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2638:18:3","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[],"src":"2656:2:3"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"2667:0:3"},"scope":561,"src":"2629:209:3","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":559,"nodeType":"Block","src":"3081:43:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":555,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"3098:7:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":556,"name":"_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"3109:8:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3098:19:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":554,"id":558,"nodeType":"Return","src":"3091:26:3"}]},"documentation":{"id":550,"nodeType":"StructuredDocumentation","src":"2844:168:3","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":560,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3026:23:3","nodeType":"FunctionDefinition","parameters":{"id":551,"nodeType":"ParameterList","parameters":[],"src":"3049:2:3"},"returnParameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":560,"src":"3075:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":552,"name":"bool","nodeType":"ElementaryTypeName","src":"3075:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3074:6:3"},"scope":561,"src":"3017:107:3","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":562,"src":"888:2238:3","usedErrors":[],"usedEvents":[]}],"src":"112:3015:3"},"id":3},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[2023],"ERC20":[1148],"IERC20":[1226],"IERC20Metadata":[1251]},"id":1149,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":563,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:4"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":564,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1149,"sourceUnit":1227,"src":"130:22:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":565,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1149,"sourceUnit":1252,"src":"153:41:4","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":566,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1149,"sourceUnit":2024,"src":"195:33:4","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":568,"name":"Context","nameLocations":["1550:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2023,"src":"1550:7:4"},"id":569,"nodeType":"InheritanceSpecifier","src":"1550:7:4"},{"baseName":{"id":570,"name":"IERC20","nameLocations":["1559:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"1559:6:4"},"id":571,"nodeType":"InheritanceSpecifier","src":"1559:6:4"},{"baseName":{"id":572,"name":"IERC20Metadata","nameLocations":["1567:14:4"],"nodeType":"IdentifierPath","referencedDeclaration":1251,"src":"1567:14:4"},"id":573,"nodeType":"InheritanceSpecifier","src":"1567:14:4"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"230:1301:4","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":1148,"linearizedBaseContracts":[1148,1251,1226,2023],"name":"ERC20","nameLocation":"1541:5:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":577,"mutability":"mutable","name":"_balances","nameLocation":"1624:9:4","nodeType":"VariableDeclaration","scope":1148,"src":"1588:45:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":576,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":574,"name":"address","nodeType":"ElementaryTypeName","src":"1596:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1588:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":575,"name":"uint256","nodeType":"ElementaryTypeName","src":"1607:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":583,"mutability":"mutable","name":"_allowances","nameLocation":"1696:11:4","nodeType":"VariableDeclaration","scope":1148,"src":"1640:67:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":582,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":578,"name":"address","nodeType":"ElementaryTypeName","src":"1648:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1640:47:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":581,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":579,"name":"address","nodeType":"ElementaryTypeName","src":"1667:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1659:27:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":580,"name":"uint256","nodeType":"ElementaryTypeName","src":"1678:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":585,"mutability":"mutable","name":"_totalSupply","nameLocation":"1730:12:4","nodeType":"VariableDeclaration","scope":1148,"src":"1714:28:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":584,"name":"uint256","nodeType":"ElementaryTypeName","src":"1714:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":587,"mutability":"mutable","name":"_name","nameLocation":"1764:5:4","nodeType":"VariableDeclaration","scope":1148,"src":"1749:20:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":586,"name":"string","nodeType":"ElementaryTypeName","src":"1749:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":589,"mutability":"mutable","name":"_symbol","nameLocation":"1790:7:4","nodeType":"VariableDeclaration","scope":1148,"src":"1775:22:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":588,"name":"string","nodeType":"ElementaryTypeName","src":"1775:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":605,"nodeType":"Block","src":"2036:57:4","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":597,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2046:5:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":598,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":592,"src":"2054:5:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2046:13:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":600,"nodeType":"ExpressionStatement","src":"2046:13:4"},{"expression":{"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":601,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"2069:7:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":602,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2079:7:4","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2069:17:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":604,"nodeType":"ExpressionStatement","src":"2069:17:4"}]},"documentation":{"id":590,"nodeType":"StructuredDocumentation","src":"1804:171:4","text":" @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."},"id":606,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":592,"mutability":"mutable","name":"name_","nameLocation":"2006:5:4","nodeType":"VariableDeclaration","scope":606,"src":"1992:19:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":591,"name":"string","nodeType":"ElementaryTypeName","src":"1992:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":594,"mutability":"mutable","name":"symbol_","nameLocation":"2027:7:4","nodeType":"VariableDeclaration","scope":606,"src":"2013:21:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":593,"name":"string","nodeType":"ElementaryTypeName","src":"2013:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1991:44:4"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"2036:0:4"},"scope":1148,"src":"1980:113:4","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1238],"body":{"id":615,"nodeType":"Block","src":"2227:29:4","statements":[{"expression":{"id":613,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":587,"src":"2244:5:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":612,"id":614,"nodeType":"Return","src":"2237:12:4"}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"2099:54:4","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":616,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2167:4:4","nodeType":"FunctionDefinition","overrides":{"id":609,"nodeType":"OverrideSpecifier","overrides":[],"src":"2194:8:4"},"parameters":{"id":608,"nodeType":"ParameterList","parameters":[],"src":"2171:2:4"},"returnParameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":611,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":616,"src":"2212:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":610,"name":"string","nodeType":"ElementaryTypeName","src":"2212:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2211:15:4"},"scope":1148,"src":"2158:98:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1244],"body":{"id":625,"nodeType":"Block","src":"2440:31:4","statements":[{"expression":{"id":623,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":589,"src":"2457:7:4","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":622,"id":624,"nodeType":"Return","src":"2450:14:4"}]},"documentation":{"id":617,"nodeType":"StructuredDocumentation","src":"2262:102:4","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":626,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2378:6:4","nodeType":"FunctionDefinition","overrides":{"id":619,"nodeType":"OverrideSpecifier","overrides":[],"src":"2407:8:4"},"parameters":{"id":618,"nodeType":"ParameterList","parameters":[],"src":"2384:2:4"},"returnParameters":{"id":622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":626,"src":"2425:13:4","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":620,"name":"string","nodeType":"ElementaryTypeName","src":"2425:6:4","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2424:15:4"},"scope":1148,"src":"2369:102:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1250],"body":{"id":635,"nodeType":"Block","src":"3169:26:4","statements":[{"expression":{"hexValue":"3138","id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3186:2:4","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":632,"id":634,"nodeType":"Return","src":"3179:9:4"}]},"documentation":{"id":627,"nodeType":"StructuredDocumentation","src":"2477:622:4","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":636,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3113:8:4","nodeType":"FunctionDefinition","overrides":{"id":629,"nodeType":"OverrideSpecifier","overrides":[],"src":"3144:8:4"},"parameters":{"id":628,"nodeType":"ParameterList","parameters":[],"src":"3121:2:4"},"returnParameters":{"id":632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":636,"src":"3162:5:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":630,"name":"uint8","nodeType":"ElementaryTypeName","src":"3162:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3161:7:4"},"scope":1148,"src":"3104:91:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1175],"body":{"id":645,"nodeType":"Block","src":"3325:36:4","statements":[{"expression":{"id":643,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"3342:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":642,"id":644,"nodeType":"Return","src":"3335:19:4"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"3201:49:4","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":646,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3264:11:4","nodeType":"FunctionDefinition","overrides":{"id":639,"nodeType":"OverrideSpecifier","overrides":[],"src":"3298:8:4"},"parameters":{"id":638,"nodeType":"ParameterList","parameters":[],"src":"3275:2:4"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":641,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":646,"src":"3316:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":640,"name":"uint256","nodeType":"ElementaryTypeName","src":"3316:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3315:9:4"},"scope":1148,"src":"3255:106:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1183],"body":{"id":659,"nodeType":"Block","src":"3502:42:4","statements":[{"expression":{"baseExpression":{"id":655,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"3519:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":657,"indexExpression":{"id":656,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":649,"src":"3529:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3519:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":654,"id":658,"nodeType":"Return","src":"3512:25:4"}]},"documentation":{"id":647,"nodeType":"StructuredDocumentation","src":"3367:47:4","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":660,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3428:9:4","nodeType":"FunctionDefinition","overrides":{"id":651,"nodeType":"OverrideSpecifier","overrides":[],"src":"3475:8:4"},"parameters":{"id":650,"nodeType":"ParameterList","parameters":[{"constant":false,"id":649,"mutability":"mutable","name":"account","nameLocation":"3446:7:4","nodeType":"VariableDeclaration","scope":660,"src":"3438:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":648,"name":"address","nodeType":"ElementaryTypeName","src":"3438:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3437:17:4"},"returnParameters":{"id":654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":653,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":660,"src":"3493:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"3493:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3492:9:4"},"scope":1148,"src":"3419:125:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1193],"body":{"id":684,"nodeType":"Block","src":"3825:104:4","statements":[{"assignments":[672],"declarations":[{"constant":false,"id":672,"mutability":"mutable","name":"owner","nameLocation":"3843:5:4","nodeType":"VariableDeclaration","scope":684,"src":"3835:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":671,"name":"address","nodeType":"ElementaryTypeName","src":"3835:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":675,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":673,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"3851:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3851:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3835:28:4"},{"expression":{"arguments":[{"id":677,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":672,"src":"3883:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":678,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"3890:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":679,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"3894:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":676,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"3873:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3873:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":681,"nodeType":"ExpressionStatement","src":"3873:28:4"},{"expression":{"hexValue":"74727565","id":682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3918:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":670,"id":683,"nodeType":"Return","src":"3911:11:4"}]},"documentation":{"id":661,"nodeType":"StructuredDocumentation","src":"3550:185:4","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":685,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3749:8:4","nodeType":"FunctionDefinition","overrides":{"id":667,"nodeType":"OverrideSpecifier","overrides":[],"src":"3801:8:4"},"parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":663,"mutability":"mutable","name":"to","nameLocation":"3766:2:4","nodeType":"VariableDeclaration","scope":685,"src":"3758:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":662,"name":"address","nodeType":"ElementaryTypeName","src":"3758:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"amount","nameLocation":"3778:6:4","nodeType":"VariableDeclaration","scope":685,"src":"3770:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":664,"name":"uint256","nodeType":"ElementaryTypeName","src":"3770:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3757:28:4"},"returnParameters":{"id":670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":685,"src":"3819:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":668,"name":"bool","nodeType":"ElementaryTypeName","src":"3819:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3818:6:4"},"scope":1148,"src":"3740:189:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1203],"body":{"id":702,"nodeType":"Block","src":"4085:51:4","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":696,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"4102:11:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":698,"indexExpression":{"id":697,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"4114:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":700,"indexExpression":{"id":699,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":690,"src":"4121:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4102:27:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":695,"id":701,"nodeType":"Return","src":"4095:34:4"}]},"documentation":{"id":686,"nodeType":"StructuredDocumentation","src":"3935:47:4","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":703,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3996:9:4","nodeType":"FunctionDefinition","overrides":{"id":692,"nodeType":"OverrideSpecifier","overrides":[],"src":"4058:8:4"},"parameters":{"id":691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"owner","nameLocation":"4014:5:4","nodeType":"VariableDeclaration","scope":703,"src":"4006:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"4006:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":690,"mutability":"mutable","name":"spender","nameLocation":"4029:7:4","nodeType":"VariableDeclaration","scope":703,"src":"4021:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"4021:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4005:32:4"},"returnParameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":703,"src":"4076:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"4076:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4075:9:4"},"scope":1148,"src":"3987:149:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1213],"body":{"id":727,"nodeType":"Block","src":"4533:108:4","statements":[{"assignments":[715],"declarations":[{"constant":false,"id":715,"mutability":"mutable","name":"owner","nameLocation":"4551:5:4","nodeType":"VariableDeclaration","scope":727,"src":"4543:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":714,"name":"address","nodeType":"ElementaryTypeName","src":"4543:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":718,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":716,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"4559:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4559:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4543:28:4"},{"expression":{"arguments":[{"id":720,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":715,"src":"4590:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":721,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":706,"src":"4597:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":722,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"4606:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":719,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"4581:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4581:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":724,"nodeType":"ExpressionStatement","src":"4581:32:4"},{"expression":{"hexValue":"74727565","id":725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4630:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":713,"id":726,"nodeType":"Return","src":"4623:11:4"}]},"documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"4142:297:4","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":728,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4453:7:4","nodeType":"FunctionDefinition","overrides":{"id":710,"nodeType":"OverrideSpecifier","overrides":[],"src":"4509:8:4"},"parameters":{"id":709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":706,"mutability":"mutable","name":"spender","nameLocation":"4469:7:4","nodeType":"VariableDeclaration","scope":728,"src":"4461:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":705,"name":"address","nodeType":"ElementaryTypeName","src":"4461:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":708,"mutability":"mutable","name":"amount","nameLocation":"4486:6:4","nodeType":"VariableDeclaration","scope":728,"src":"4478:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"4478:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4460:33:4"},"returnParameters":{"id":713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":712,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":728,"src":"4527:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":711,"name":"bool","nodeType":"ElementaryTypeName","src":"4527:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4526:6:4"},"scope":1148,"src":"4444:197:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1225],"body":{"id":760,"nodeType":"Block","src":"5306:153:4","statements":[{"assignments":[742],"declarations":[{"constant":false,"id":742,"mutability":"mutable","name":"spender","nameLocation":"5324:7:4","nodeType":"VariableDeclaration","scope":760,"src":"5316:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":741,"name":"address","nodeType":"ElementaryTypeName","src":"5316:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":745,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":743,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"5334:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5334:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5316:30:4"},{"expression":{"arguments":[{"id":747,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"5372:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":748,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":742,"src":"5378:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":749,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"5387:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":746,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"5356:15:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5356:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":751,"nodeType":"ExpressionStatement","src":"5356:38:4"},{"expression":{"arguments":[{"id":753,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"5414:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":754,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"5420:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":755,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":735,"src":"5424:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":752,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":908,"src":"5404:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5404:27:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":757,"nodeType":"ExpressionStatement","src":"5404:27:4"},{"expression":{"hexValue":"74727565","id":758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5448:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":740,"id":759,"nodeType":"Return","src":"5441:11:4"}]},"documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"4647:551:4","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":761,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5212:12:4","nodeType":"FunctionDefinition","overrides":{"id":737,"nodeType":"OverrideSpecifier","overrides":[],"src":"5282:8:4"},"parameters":{"id":736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"from","nameLocation":"5233:4:4","nodeType":"VariableDeclaration","scope":761,"src":"5225:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"5225:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":733,"mutability":"mutable","name":"to","nameLocation":"5247:2:4","nodeType":"VariableDeclaration","scope":761,"src":"5239:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":732,"name":"address","nodeType":"ElementaryTypeName","src":"5239:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":735,"mutability":"mutable","name":"amount","nameLocation":"5259:6:4","nodeType":"VariableDeclaration","scope":761,"src":"5251:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":734,"name":"uint256","nodeType":"ElementaryTypeName","src":"5251:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5224:42:4"},"returnParameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":739,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":761,"src":"5300:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":738,"name":"bool","nodeType":"ElementaryTypeName","src":"5300:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5299:6:4"},"scope":1148,"src":"5203:256:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":789,"nodeType":"Block","src":"5948:140:4","statements":[{"assignments":[772],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"owner","nameLocation":"5966:5:4","nodeType":"VariableDeclaration","scope":789,"src":"5958:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":771,"name":"address","nodeType":"ElementaryTypeName","src":"5958:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":775,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":773,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"5974:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5974:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5958:28:4"},{"expression":{"arguments":[{"id":777,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6005:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":778,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6012:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":780,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6031:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":781,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6038:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":779,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"6021:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6021:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":783,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"6049:10:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6021:38:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":776,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"5996:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5996:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":786,"nodeType":"ExpressionStatement","src":"5996:64:4"},{"expression":{"hexValue":"74727565","id":787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6077:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":770,"id":788,"nodeType":"Return","src":"6070:11:4"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"5465:384:4","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":790,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5863:17:4","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"spender","nameLocation":"5889:7:4","nodeType":"VariableDeclaration","scope":790,"src":"5881:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"5881:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"addedValue","nameLocation":"5906:10:4","nodeType":"VariableDeclaration","scope":790,"src":"5898:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":765,"name":"uint256","nodeType":"ElementaryTypeName","src":"5898:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5880:37:4"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":790,"src":"5942:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":768,"name":"bool","nodeType":"ElementaryTypeName","src":"5942:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5941:6:4"},"scope":1148,"src":"5854:234:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":830,"nodeType":"Block","src":"6674:328:4","statements":[{"assignments":[801],"declarations":[{"constant":false,"id":801,"mutability":"mutable","name":"owner","nameLocation":"6692:5:4","nodeType":"VariableDeclaration","scope":830,"src":"6684:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":800,"name":"address","nodeType":"ElementaryTypeName","src":"6684:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":804,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":802,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"6700:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6700:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6684:28:4"},{"assignments":[806],"declarations":[{"constant":false,"id":806,"mutability":"mutable","name":"currentAllowance","nameLocation":"6730:16:4","nodeType":"VariableDeclaration","scope":830,"src":"6722:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":805,"name":"uint256","nodeType":"ElementaryTypeName","src":"6722:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":811,"initialValue":{"arguments":[{"id":808,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6759:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":809,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"6766:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":807,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"6749:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6749:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6722:52:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":813,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6792:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":814,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"6812:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6792:35:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6829:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":812,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6784:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6784:85:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":818,"nodeType":"ExpressionStatement","src":"6784:85:4"},{"id":827,"nodeType":"UncheckedBlock","src":"6879:95:4","statements":[{"expression":{"arguments":[{"id":820,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":801,"src":"6912:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":821,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"6919:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":822,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"6928:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":823,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"6947:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6928:34:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":819,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"6903:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6903:60:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":826,"nodeType":"ExpressionStatement","src":"6903:60:4"}]},{"expression":{"hexValue":"74727565","id":828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6991:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":799,"id":829,"nodeType":"Return","src":"6984:11:4"}]},"documentation":{"id":791,"nodeType":"StructuredDocumentation","src":"6094:476:4","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":831,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6584:17:4","nodeType":"FunctionDefinition","parameters":{"id":796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"spender","nameLocation":"6610:7:4","nodeType":"VariableDeclaration","scope":831,"src":"6602:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":792,"name":"address","nodeType":"ElementaryTypeName","src":"6602:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":795,"mutability":"mutable","name":"subtractedValue","nameLocation":"6627:15:4","nodeType":"VariableDeclaration","scope":831,"src":"6619:23:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":794,"name":"uint256","nodeType":"ElementaryTypeName","src":"6619:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6601:42:4"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":831,"src":"6668:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":797,"name":"bool","nodeType":"ElementaryTypeName","src":"6668:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6667:6:4"},"scope":1148,"src":"6575:427:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":907,"nodeType":"Block","src":"7534:710:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":842,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7552:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7568:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":844,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7560:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":843,"name":"address","nodeType":"ElementaryTypeName","src":"7560:7:4","typeDescriptions":{}}},"id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7560:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7552:18:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7572:39:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":841,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7544:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7544:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":850,"nodeType":"ExpressionStatement","src":"7544:68:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7630:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7644:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":854,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7636:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":853,"name":"address","nodeType":"ElementaryTypeName","src":"7636:7:4","typeDescriptions":{}}},"id":856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7636:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7630:16:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7648:37:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7622:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7622:64:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":860,"nodeType":"ExpressionStatement","src":"7622:64:4"},{"expression":{"arguments":[{"id":862,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7718:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":863,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"7724:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":864,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"7728:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":861,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"7697:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7697:38:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":866,"nodeType":"ExpressionStatement","src":"7697:38:4"},{"assignments":[868],"declarations":[{"constant":false,"id":868,"mutability":"mutable","name":"fromBalance","nameLocation":"7754:11:4","nodeType":"VariableDeclaration","scope":907,"src":"7746:19:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"7746:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":872,"initialValue":{"baseExpression":{"id":869,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"7768:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":871,"indexExpression":{"id":870,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7778:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7768:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7746:37:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":874,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7801:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":875,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"7816:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7824:40:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":873,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7793:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7793:72:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":879,"nodeType":"ExpressionStatement","src":"7793:72:4"},{"id":894,"nodeType":"UncheckedBlock","src":"7875:273:4","statements":[{"expression":{"id":886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":880,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"7899:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":882,"indexExpression":{"id":881,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"7909:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7899:15:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":883,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"7917:11:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":884,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"7931:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7917:20:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:38:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":887,"nodeType":"ExpressionStatement","src":"7899:38:4"},{"expression":{"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":888,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"8114:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":890,"indexExpression":{"id":889,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"8124:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8114:13:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":891,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"8131:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8114:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":893,"nodeType":"ExpressionStatement","src":"8114:23:4"}]},{"eventCall":{"arguments":[{"id":896,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"8172:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":897,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"8178:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":898,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"8182:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":895,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"8163:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8163:26:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":900,"nodeType":"EmitStatement","src":"8158:31:4"},{"expression":{"arguments":[{"id":902,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"8220:4:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":903,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"8226:2:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":904,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":838,"src":"8230:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":901,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"8200:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8200:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":906,"nodeType":"ExpressionStatement","src":"8200:37:4"}]},"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"7008:443:4","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":908,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7465:9:4","nodeType":"FunctionDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":834,"mutability":"mutable","name":"from","nameLocation":"7483:4:4","nodeType":"VariableDeclaration","scope":908,"src":"7475:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":833,"name":"address","nodeType":"ElementaryTypeName","src":"7475:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"to","nameLocation":"7497:2:4","nodeType":"VariableDeclaration","scope":908,"src":"7489:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":835,"name":"address","nodeType":"ElementaryTypeName","src":"7489:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":838,"mutability":"mutable","name":"amount","nameLocation":"7509:6:4","nodeType":"VariableDeclaration","scope":908,"src":"7501:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":837,"name":"uint256","nodeType":"ElementaryTypeName","src":"7501:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7474:42:4"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"7534:0:4"},"scope":1148,"src":"7456:788:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":964,"nodeType":"Block","src":"8585:470:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":917,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"8603:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8622:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":919,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8614:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":918,"name":"address","nodeType":"ElementaryTypeName","src":"8614:7:4","typeDescriptions":{}}},"id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8614:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8603:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8626:33:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":916,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8595:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":924,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8595:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":925,"nodeType":"ExpressionStatement","src":"8595:65:4"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8700:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":928,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8692:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"8692:7:4","typeDescriptions":{}}},"id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8692:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":931,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"8704:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":932,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"8713:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":926,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"8671:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8671:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":934,"nodeType":"ExpressionStatement","src":"8671:49:4"},{"expression":{"id":937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":935,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"8731:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":936,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"8747:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8731:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":938,"nodeType":"ExpressionStatement","src":"8731:22:4"},{"id":945,"nodeType":"UncheckedBlock","src":"8763:175:4","statements":[{"expression":{"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":939,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"8899:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":941,"indexExpression":{"id":940,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"8909:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8899:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":942,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"8921:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8899:28:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":944,"nodeType":"ExpressionStatement","src":"8899:28:4"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":949,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8969:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":948,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8961:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":947,"name":"address","nodeType":"ElementaryTypeName","src":"8961:7:4","typeDescriptions":{}}},"id":950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8961:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":951,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"8973:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":952,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"8982:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":946,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"8952:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8952:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":954,"nodeType":"EmitStatement","src":"8947:42:4"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9028:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9020:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":956,"name":"address","nodeType":"ElementaryTypeName","src":"9020:7:4","typeDescriptions":{}}},"id":959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9020:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":960,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"9032:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":961,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"9041:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":955,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9000:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":962,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9000:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":963,"nodeType":"ExpressionStatement","src":"9000:48:4"}]},"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"8250:265:4","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":965,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8529:5:4","nodeType":"FunctionDefinition","parameters":{"id":914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"account","nameLocation":"8543:7:4","nodeType":"VariableDeclaration","scope":965,"src":"8535:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"8535:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"amount","nameLocation":"8560:6:4","nodeType":"VariableDeclaration","scope":965,"src":"8552:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"8552:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8534:33:4"},"returnParameters":{"id":915,"nodeType":"ParameterList","parameters":[],"src":"8585:0:4"},"scope":1148,"src":"8520:535:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1036,"nodeType":"Block","src":"9440:594:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":974,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9458:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9477:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":976,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9469:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":975,"name":"address","nodeType":"ElementaryTypeName","src":"9469:7:4","typeDescriptions":{}}},"id":978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9469:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9458:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9481:35:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":973,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9450:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9450:67:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":982,"nodeType":"ExpressionStatement","src":"9450:67:4"},{"expression":{"arguments":[{"id":984,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9549:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":987,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9566:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9558:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":985,"name":"address","nodeType":"ElementaryTypeName","src":"9558:7:4","typeDescriptions":{}}},"id":988,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9558:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":989,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"9570:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":983,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"9528:20:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9528:49:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"9528:49:4"},{"assignments":[993],"declarations":[{"constant":false,"id":993,"mutability":"mutable","name":"accountBalance","nameLocation":"9596:14:4","nodeType":"VariableDeclaration","scope":1036,"src":"9588:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":992,"name":"uint256","nodeType":"ElementaryTypeName","src":"9588:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":997,"initialValue":{"baseExpression":{"id":994,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"9613:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":996,"indexExpression":{"id":995,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9623:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9613:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9588:43:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":999,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"9649:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1000,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"9667:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9649:24:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9675:36:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":998,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9641:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9641:71:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1004,"nodeType":"ExpressionStatement","src":"9641:71:4"},{"id":1017,"nodeType":"UncheckedBlock","src":"9722:194:4","statements":[{"expression":{"id":1011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1005,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"9746:9:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1007,"indexExpression":{"id":1006,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9756:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9746:18:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1008,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":993,"src":"9767:14:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1009,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"9784:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9767:23:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9746:44:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1012,"nodeType":"ExpressionStatement","src":"9746:44:4"},{"expression":{"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1013,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":585,"src":"9883:12:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1014,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"9899:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:22:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1016,"nodeType":"ExpressionStatement","src":"9883:22:4"}]},{"eventCall":{"arguments":[{"id":1019,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9940:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1022,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9957:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9949:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1020,"name":"address","nodeType":"ElementaryTypeName","src":"9949:7:4","typeDescriptions":{}}},"id":1023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9949:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1024,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"9961:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1018,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"9931:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9931:37:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1026,"nodeType":"EmitStatement","src":"9926:42:4"},{"expression":{"arguments":[{"id":1028,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":968,"src":"9999:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10016:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10008:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1029,"name":"address","nodeType":"ElementaryTypeName","src":"10008:7:4","typeDescriptions":{}}},"id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10008:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1033,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":970,"src":"10020:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1027,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"9979:19:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1034,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9979:48:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1035,"nodeType":"ExpressionStatement","src":"9979:48:4"}]},"documentation":{"id":966,"nodeType":"StructuredDocumentation","src":"9061:309:4","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":1037,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9384:5:4","nodeType":"FunctionDefinition","parameters":{"id":971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"account","nameLocation":"9398:7:4","nodeType":"VariableDeclaration","scope":1037,"src":"9390:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":967,"name":"address","nodeType":"ElementaryTypeName","src":"9390:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":970,"mutability":"mutable","name":"amount","nameLocation":"9415:6:4","nodeType":"VariableDeclaration","scope":1037,"src":"9407:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":969,"name":"uint256","nodeType":"ElementaryTypeName","src":"9407:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9389:33:4"},"returnParameters":{"id":972,"nodeType":"ParameterList","parameters":[],"src":"9440:0:4"},"scope":1148,"src":"9375:659:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1081,"nodeType":"Block","src":"10540:257:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1048,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"10558:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10575:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1050,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10567:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1049,"name":"address","nodeType":"ElementaryTypeName","src":"10567:7:4","typeDescriptions":{}}},"id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10567:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10558:19:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":1054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10579:38:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":1047,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10550:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10550:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"ExpressionStatement","src":"10550:68:4"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1058,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"10636:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10655:1:4","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1060,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10647:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1059,"name":"address","nodeType":"ElementaryTypeName","src":"10647:7:4","typeDescriptions":{}}},"id":1062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10647:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10636:21:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10659:36:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":1057,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10628:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10628:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1066,"nodeType":"ExpressionStatement","src":"10628:68:4"},{"expression":{"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1067,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":583,"src":"10707:11:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":1070,"indexExpression":{"id":1068,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"10719:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10707:18:4","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1071,"indexExpression":{"id":1069,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"10726:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10707:27:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1072,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"10737:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10707:36:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1074,"nodeType":"ExpressionStatement","src":"10707:36:4"},{"eventCall":{"arguments":[{"id":1076,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"10767:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1077,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"10774:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1078,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"10783:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1075,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1169,"src":"10758:8:4","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10758:32:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1080,"nodeType":"EmitStatement","src":"10753:37:4"}]},"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"10040:412:4","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":1082,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10466:8:4","nodeType":"FunctionDefinition","parameters":{"id":1045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1040,"mutability":"mutable","name":"owner","nameLocation":"10483:5:4","nodeType":"VariableDeclaration","scope":1082,"src":"10475:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1039,"name":"address","nodeType":"ElementaryTypeName","src":"10475:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1042,"mutability":"mutable","name":"spender","nameLocation":"10498:7:4","nodeType":"VariableDeclaration","scope":1082,"src":"10490:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1041,"name":"address","nodeType":"ElementaryTypeName","src":"10490:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"amount","nameLocation":"10515:6:4","nodeType":"VariableDeclaration","scope":1082,"src":"10507:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1043,"name":"uint256","nodeType":"ElementaryTypeName","src":"10507:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10474:48:4"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[],"src":"10540:0:4"},"scope":1148,"src":"10457:340:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1124,"nodeType":"Block","src":"11168:321:4","statements":[{"assignments":[1093],"declarations":[{"constant":false,"id":1093,"mutability":"mutable","name":"currentAllowance","nameLocation":"11186:16:4","nodeType":"VariableDeclaration","scope":1124,"src":"11178:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1092,"name":"uint256","nodeType":"ElementaryTypeName","src":"11178:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1098,"initialValue":{"arguments":[{"id":1095,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"11215:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1096,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"11222:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1094,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"11205:9:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11205:25:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11178:52:4"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1099,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"11244:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":1102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11269:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"11269:7:4","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":1100,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11264:4:4","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11264:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":1104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11278:3:4","memberName":"max","nodeType":"MemberAccess","src":"11264:17:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11244:37:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1123,"nodeType":"IfStatement","src":"11240:243:4","trueBody":{"id":1122,"nodeType":"Block","src":"11283:200:4","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1107,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"11305:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1108,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"11325:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11305:26:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":1110,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11333:31:4","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":1106,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11297:7:4","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11297:68:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1112,"nodeType":"ExpressionStatement","src":"11297:68:4"},{"id":1121,"nodeType":"UncheckedBlock","src":"11379:94:4","statements":[{"expression":{"arguments":[{"id":1114,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"11416:5:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1115,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1087,"src":"11423:7:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1116,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1093,"src":"11432:16:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1117,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1089,"src":"11451:6:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11432:25:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1113,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1082,"src":"11407:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11407:51:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"ExpressionStatement","src":"11407:51:4"}]}]}}]},"documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"10803:270:4","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":1125,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11087:15:4","nodeType":"FunctionDefinition","parameters":{"id":1090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1085,"mutability":"mutable","name":"owner","nameLocation":"11111:5:4","nodeType":"VariableDeclaration","scope":1125,"src":"11103:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1084,"name":"address","nodeType":"ElementaryTypeName","src":"11103:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1087,"mutability":"mutable","name":"spender","nameLocation":"11126:7:4","nodeType":"VariableDeclaration","scope":1125,"src":"11118:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"11118:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1089,"mutability":"mutable","name":"amount","nameLocation":"11143:6:4","nodeType":"VariableDeclaration","scope":1125,"src":"11135:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1088,"name":"uint256","nodeType":"ElementaryTypeName","src":"11135:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11102:48:4"},"returnParameters":{"id":1091,"nodeType":"ParameterList","parameters":[],"src":"11168:0:4"},"scope":1148,"src":"11078:411:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1135,"nodeType":"Block","src":"12162:2:4","statements":[]},"documentation":{"id":1126,"nodeType":"StructuredDocumentation","src":"11495:573:4","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1136,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12082:20:4","nodeType":"FunctionDefinition","parameters":{"id":1133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"from","nameLocation":"12111:4:4","nodeType":"VariableDeclaration","scope":1136,"src":"12103:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"12103:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"to","nameLocation":"12125:2:4","nodeType":"VariableDeclaration","scope":1136,"src":"12117:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1129,"name":"address","nodeType":"ElementaryTypeName","src":"12117:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1132,"mutability":"mutable","name":"amount","nameLocation":"12137:6:4","nodeType":"VariableDeclaration","scope":1136,"src":"12129:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1131,"name":"uint256","nodeType":"ElementaryTypeName","src":"12129:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12102:42:4"},"returnParameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"12162:0:4"},"scope":1148,"src":"12073:91:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1146,"nodeType":"Block","src":"12840:2:4","statements":[]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"12170:577:4","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12761:19:4","nodeType":"FunctionDefinition","parameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"from","nameLocation":"12789:4:4","nodeType":"VariableDeclaration","scope":1147,"src":"12781:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1138,"name":"address","nodeType":"ElementaryTypeName","src":"12781:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"to","nameLocation":"12803:2:4","nodeType":"VariableDeclaration","scope":1147,"src":"12795:10:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1140,"name":"address","nodeType":"ElementaryTypeName","src":"12795:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"amount","nameLocation":"12815:6:4","nodeType":"VariableDeclaration","scope":1147,"src":"12807:14:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"12807:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12780:42:4"},"returnParameters":{"id":1145,"nodeType":"ParameterList","parameters":[],"src":"12840:0:4"},"scope":1148,"src":"12752:90:4","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1149,"src":"1532:11312:4","usedErrors":[],"usedEvents":[1160,1169]}],"src":"105:12740:4"},"id":4},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[1226]},"id":1227,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1150,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1151,"nodeType":"StructuredDocumentation","src":"131:70:5","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":1226,"linearizedBaseContracts":[1226],"name":"IERC20","nameLocation":"212:6:5","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1152,"nodeType":"StructuredDocumentation","src":"225:158:5","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1160,"name":"Transfer","nameLocation":"394:8:5","nodeType":"EventDefinition","parameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1154,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:5","nodeType":"VariableDeclaration","scope":1160,"src":"403:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1153,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1156,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:5","nodeType":"VariableDeclaration","scope":1160,"src":"425:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1158,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:5","nodeType":"VariableDeclaration","scope":1160,"src":"445:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1157,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:5"},"src":"388:72:5"},{"anonymous":false,"documentation":{"id":1161,"nodeType":"StructuredDocumentation","src":"466:148:5","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1169,"name":"Approval","nameLocation":"625:8:5","nodeType":"EventDefinition","parameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1163,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:5","nodeType":"VariableDeclaration","scope":1169,"src":"634:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1162,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1165,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:5","nodeType":"VariableDeclaration","scope":1169,"src":"657:23:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1164,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1167,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:5","nodeType":"VariableDeclaration","scope":1169,"src":"682:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1166,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:5"},"src":"619:78:5"},{"documentation":{"id":1170,"nodeType":"StructuredDocumentation","src":"703:66:5","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":1175,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:5","nodeType":"FunctionDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[],"src":"794:2:5"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"820:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1172,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:5"},"scope":1226,"src":"774:55:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1176,"nodeType":"StructuredDocumentation","src":"835:72:5","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":1183,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:5","nodeType":"FunctionDefinition","parameters":{"id":1179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1178,"mutability":"mutable","name":"account","nameLocation":"939:7:5","nodeType":"VariableDeclaration","scope":1183,"src":"931:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1177,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:5"},"returnParameters":{"id":1182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1181,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1183,"src":"971:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1180,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:5"},"scope":1226,"src":"912:68:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"986:202:5","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":1193,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:5","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"to","nameLocation":"1219:2:5","nodeType":"VariableDeclaration","scope":1193,"src":"1211:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"amount","nameLocation":"1231:6:5","nodeType":"VariableDeclaration","scope":1193,"src":"1223:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1187,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:5"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"1257:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1190,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:5"},"scope":1226,"src":"1193:70:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"1269:264:5","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:5","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"owner","nameLocation":"1565:5:5","nodeType":"VariableDeclaration","scope":1203,"src":"1557:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"spender","nameLocation":"1580:7:5","nodeType":"VariableDeclaration","scope":1203,"src":"1572:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:5"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1203,"src":"1612:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1200,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:5"},"scope":1226,"src":"1538:83:5","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"1627:642:5","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":1213,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:5","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"spender","nameLocation":"2299:7:5","nodeType":"VariableDeclaration","scope":1213,"src":"2291:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"amount","nameLocation":"2316:6:5","nodeType":"VariableDeclaration","scope":1213,"src":"2308:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:5"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1213,"src":"2342:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1210,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:5"},"scope":1226,"src":"2274:74:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1214,"nodeType":"StructuredDocumentation","src":"2354:287:5","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":1225,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:5","nodeType":"FunctionDefinition","parameters":{"id":1221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1216,"mutability":"mutable","name":"from","nameLocation":"2676:4:5","nodeType":"VariableDeclaration","scope":1225,"src":"2668:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1215,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"to","nameLocation":"2690:2:5","nodeType":"VariableDeclaration","scope":1225,"src":"2682:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1220,"mutability":"mutable","name":"amount","nameLocation":"2702:6:5","nodeType":"VariableDeclaration","scope":1225,"src":"2694:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1219,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:5"},"returnParameters":{"id":1224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1225,"src":"2728:4:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1222,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:5"},"scope":1226,"src":"2646:88:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1227,"src":"202:2534:5","usedErrors":[],"usedEvents":[1160,1169]}],"src":"106:2631:5"},"id":5},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[1226],"IERC20Metadata":[1251]},"id":1252,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1228,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:6"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1229,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1252,"sourceUnit":1227,"src":"135:23:6","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1231,"name":"IERC20","nameLocations":["305:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"305:6:6"},"id":1232,"nodeType":"InheritanceSpecifier","src":"305:6:6"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1230,"nodeType":"StructuredDocumentation","src":"160:116:6","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":1251,"linearizedBaseContracts":[1251,1226],"name":"IERC20Metadata","nameLocation":"287:14:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"318:54:6","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":1238,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:6","nodeType":"FunctionDefinition","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[],"src":"390:2:6"},"returnParameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1238,"src":"416:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1235,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:6"},"scope":1251,"src":"377:54:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1239,"nodeType":"StructuredDocumentation","src":"437:56:6","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":1244,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:6","nodeType":"FunctionDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[],"src":"513:2:6"},"returnParameters":{"id":1243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"539:13:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1241,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:6"},"scope":1251,"src":"498:56:6","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"560:65:6","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":1250,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:6","nodeType":"FunctionDefinition","parameters":{"id":1246,"nodeType":"ParameterList","parameters":[],"src":"647:2:6"},"returnParameters":{"id":1249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1248,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1250,"src":"673:5:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1247,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:6","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:6"},"scope":1251,"src":"630:50:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1252,"src":"277:405:6","usedErrors":[],"usedEvents":[1160,1169]}],"src":"110:573:6"},"id":6},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[1287]},"id":1288,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1253,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"148:1963:7","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."},"fullyImplemented":false,"id":1287,"linearizedBaseContracts":[1287],"name":"IERC20Permit","nameLocation":"2122:12:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1255,"nodeType":"StructuredDocumentation","src":"2141:850:7","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."},"functionSelector":"d505accf","id":1272,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"3005:6:7","nodeType":"FunctionDefinition","parameters":{"id":1270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1257,"mutability":"mutable","name":"owner","nameLocation":"3029:5:7","nodeType":"VariableDeclaration","scope":1272,"src":"3021:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1256,"name":"address","nodeType":"ElementaryTypeName","src":"3021:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1259,"mutability":"mutable","name":"spender","nameLocation":"3052:7:7","nodeType":"VariableDeclaration","scope":1272,"src":"3044:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1258,"name":"address","nodeType":"ElementaryTypeName","src":"3044:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1261,"mutability":"mutable","name":"value","nameLocation":"3077:5:7","nodeType":"VariableDeclaration","scope":1272,"src":"3069:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1260,"name":"uint256","nodeType":"ElementaryTypeName","src":"3069:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1263,"mutability":"mutable","name":"deadline","nameLocation":"3100:8:7","nodeType":"VariableDeclaration","scope":1272,"src":"3092:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1262,"name":"uint256","nodeType":"ElementaryTypeName","src":"3092:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1265,"mutability":"mutable","name":"v","nameLocation":"3124:1:7","nodeType":"VariableDeclaration","scope":1272,"src":"3118:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1264,"name":"uint8","nodeType":"ElementaryTypeName","src":"3118:5:7","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1267,"mutability":"mutable","name":"r","nameLocation":"3143:1:7","nodeType":"VariableDeclaration","scope":1272,"src":"3135:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3135:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1269,"mutability":"mutable","name":"s","nameLocation":"3162:1:7","nodeType":"VariableDeclaration","scope":1272,"src":"3154:9:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1268,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3154:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3011:158:7"},"returnParameters":{"id":1271,"nodeType":"ParameterList","parameters":[],"src":"3178:0:7"},"scope":1287,"src":"2996:183:7","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1273,"nodeType":"StructuredDocumentation","src":"3185:294:7","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":1280,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"3493:6:7","nodeType":"FunctionDefinition","parameters":{"id":1276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1275,"mutability":"mutable","name":"owner","nameLocation":"3508:5:7","nodeType":"VariableDeclaration","scope":1280,"src":"3500:13:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1274,"name":"address","nodeType":"ElementaryTypeName","src":"3500:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3499:15:7"},"returnParameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1280,"src":"3538:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1277,"name":"uint256","nodeType":"ElementaryTypeName","src":"3538:7:7","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3537:9:7"},"scope":1287,"src":"3484:63:7","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1281,"nodeType":"StructuredDocumentation","src":"3553:128:7","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":1286,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"3748:16:7","nodeType":"FunctionDefinition","parameters":{"id":1282,"nodeType":"ParameterList","parameters":[],"src":"3764:2:7"},"returnParameters":{"id":1285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1286,"src":"3790:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1283,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3790:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3789:9:7"},"scope":1287,"src":"3739:60:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1288,"src":"2112:1689:7","usedErrors":[],"usedEvents":[]}],"src":"123:3679:7"},"id":7},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1993],"IERC20":[1226],"IERC20Permit":[1287],"SafeERC20":[1663]},"id":1664,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1289,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:8"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":1290,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1664,"sourceUnit":1227,"src":"140:23:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":1291,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1664,"sourceUnit":1288,"src":"164:40:8","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":1292,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1664,"sourceUnit":1994,"src":"205:36:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":1293,"nodeType":"StructuredDocumentation","src":"243:457:8","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1663,"linearizedBaseContracts":[1663],"name":"SafeERC20","nameLocation":"709:9:8","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1296,"libraryName":{"id":1294,"name":"Address","nameLocations":["731:7:8"],"nodeType":"IdentifierPath","referencedDeclaration":1993,"src":"731:7:8"},"nodeType":"UsingForDirective","src":"725:26:8","typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":1319,"nodeType":"Block","src":"1013:103:8","statements":[{"expression":{"arguments":[{"id":1308,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1043:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1311,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1300,"src":"1073:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:8","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":1193,"src":"1073:14:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:8","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1314,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1302,"src":"1098:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1315,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"1102:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1309,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1307,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"1023:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1318,"nodeType":"ExpressionStatement","src":"1023:86:8"}]},"documentation":{"id":1297,"nodeType":"StructuredDocumentation","src":"757:179:8","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1320,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:8","nodeType":"FunctionDefinition","parameters":{"id":1305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"token","nameLocation":"970:5:8","nodeType":"VariableDeclaration","scope":1320,"src":"963:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1299,"nodeType":"UserDefinedTypeName","pathNode":{"id":1298,"name":"IERC20","nameLocations":["963:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"963:6:8"},"referencedDeclaration":1226,"src":"963:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"to","nameLocation":"985:2:8","nodeType":"VariableDeclaration","scope":1320,"src":"977:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1301,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1304,"mutability":"mutable","name":"value","nameLocation":"997:5:8","nodeType":"VariableDeclaration","scope":1320,"src":"989:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1303,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:8"},"returnParameters":{"id":1306,"nodeType":"ParameterList","parameters":[],"src":"1013:0:8"},"scope":1663,"src":"941:175:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1346,"nodeType":"Block","src":"1445:113:8","statements":[{"expression":{"arguments":[{"id":1334,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1475:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1337,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"1505:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:8","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1225,"src":"1505:18:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:8","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1340,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"1534:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1341,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"1540:2:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"1544:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1335,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1333,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"1455:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1345,"nodeType":"ExpressionStatement","src":"1455:96:8"}]},"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"1122:228:8","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":1347,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:8","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"token","nameLocation":"1388:5:8","nodeType":"VariableDeclaration","scope":1347,"src":"1381:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1323,"nodeType":"UserDefinedTypeName","pathNode":{"id":1322,"name":"IERC20","nameLocations":["1381:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"1381:6:8"},"referencedDeclaration":1226,"src":"1381:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"from","nameLocation":"1403:4:8","nodeType":"VariableDeclaration","scope":1347,"src":"1395:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"to","nameLocation":"1417:2:8","nodeType":"VariableDeclaration","scope":1347,"src":"1409:10:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1327,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"value","nameLocation":"1429:5:8","nodeType":"VariableDeclaration","scope":1347,"src":"1421:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1329,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:8"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[],"src":"1445:0:8"},"scope":1663,"src":"1355:203:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1390,"nodeType":"Block","src":"1894:497:8","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1359,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"2143:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1367,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}],"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1365,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:8","typeDescriptions":{}}},"id":1368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1369,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"2190:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1363,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"2159:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"2159:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1373,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":1375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":1358,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1377,"nodeType":"ExpressionStatement","src":"2121:163:8"},{"expression":{"arguments":[{"id":1379,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"2314:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1382,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"2344:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1213,"src":"2344:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1385,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"2368:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1386,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"2377:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1380,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1378,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2294:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1389,"nodeType":"ExpressionStatement","src":"2294:90:8"}]},"documentation":{"id":1348,"nodeType":"StructuredDocumentation","src":"1564:249:8","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":1391,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:8","nodeType":"FunctionDefinition","parameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1351,"mutability":"mutable","name":"token","nameLocation":"1846:5:8","nodeType":"VariableDeclaration","scope":1391,"src":"1839:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1350,"nodeType":"UserDefinedTypeName","pathNode":{"id":1349,"name":"IERC20","nameLocations":["1839:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"1839:6:8"},"referencedDeclaration":1226,"src":"1839:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1353,"mutability":"mutable","name":"spender","nameLocation":"1861:7:8","nodeType":"VariableDeclaration","scope":1391,"src":"1853:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1352,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1355,"mutability":"mutable","name":"value","nameLocation":"1878:5:8","nodeType":"VariableDeclaration","scope":1391,"src":"1870:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1354,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:8"},"returnParameters":{"id":1357,"nodeType":"ParameterList","parameters":[],"src":"1894:0:8"},"scope":1663,"src":"1818:573:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1427,"nodeType":"Block","src":"2668:194:8","statements":[{"assignments":[1403],"declarations":[{"constant":false,"id":1403,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:8","nodeType":"VariableDeclaration","scope":1427,"src":"2678:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1402,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1412,"initialValue":{"arguments":[{"arguments":[{"id":1408,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}],"id":1407,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1406,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:8","typeDescriptions":{}}},"id":1409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1410,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2732:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1404,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2701:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"2701:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1411,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:8"},{"expression":{"arguments":[{"id":1414,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2770:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1417,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1395,"src":"2800:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1213,"src":"2800:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:8","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1420,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1397,"src":"2824:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1421,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"2833:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1422,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"2848:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1415,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1413,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"2750:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1426,"nodeType":"ExpressionStatement","src":"2750:105:8"}]},"documentation":{"id":1392,"nodeType":"StructuredDocumentation","src":"2397:180:8","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:8","nodeType":"FunctionDefinition","parameters":{"id":1400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1395,"mutability":"mutable","name":"token","nameLocation":"2620:5:8","nodeType":"VariableDeclaration","scope":1428,"src":"2613:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1394,"nodeType":"UserDefinedTypeName","pathNode":{"id":1393,"name":"IERC20","nameLocations":["2613:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"2613:6:8"},"referencedDeclaration":1226,"src":"2613:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1397,"mutability":"mutable","name":"spender","nameLocation":"2635:7:8","nodeType":"VariableDeclaration","scope":1428,"src":"2627:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1399,"mutability":"mutable","name":"value","nameLocation":"2652:5:8","nodeType":"VariableDeclaration","scope":1428,"src":"2644:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:8"},"returnParameters":{"id":1401,"nodeType":"ParameterList","parameters":[],"src":"2668:0:8"},"scope":1663,"src":"2582:280:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1472,"nodeType":"Block","src":"3139:321:8","statements":[{"id":1471,"nodeType":"UncheckedBlock","src":"3149:305:8","statements":[{"assignments":[1440],"declarations":[{"constant":false,"id":1440,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:8","nodeType":"VariableDeclaration","scope":1471,"src":"3173:20:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1449,"initialValue":{"arguments":[{"arguments":[{"id":1445,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:8","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1663","typeString":"library SafeERC20"}],"id":1444,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:8","typeDescriptions":{}}},"id":1446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1447,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"3227:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1441,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3196:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:8","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"3196:15:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":1448,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1451,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3257:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1452,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"3273:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":1450,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1456,"nodeType":"ExpressionStatement","src":"3249:75:8"},{"expression":{"arguments":[{"id":1458,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3358:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1461,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"3388:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1213,"src":"3388:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:8","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1464,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"3412:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1465,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"3421:12:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1466,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1436,"src":"3436:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1459,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1468,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1457,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"3338:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1469,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1470,"nodeType":"ExpressionStatement","src":"3338:105:8"}]}]},"documentation":{"id":1429,"nodeType":"StructuredDocumentation","src":"2868:180:8","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":1473,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:8","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1432,"mutability":"mutable","name":"token","nameLocation":"3091:5:8","nodeType":"VariableDeclaration","scope":1473,"src":"3084:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1431,"nodeType":"UserDefinedTypeName","pathNode":{"id":1430,"name":"IERC20","nameLocations":["3084:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"3084:6:8"},"referencedDeclaration":1226,"src":"3084:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"spender","nameLocation":"3106:7:8","nodeType":"VariableDeclaration","scope":1473,"src":"3098:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1433,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1436,"mutability":"mutable","name":"value","nameLocation":"3123:5:8","nodeType":"VariableDeclaration","scope":1473,"src":"3115:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:8"},"returnParameters":{"id":1438,"nodeType":"ParameterList","parameters":[],"src":"3139:0:8"},"scope":1663,"src":"3053:407:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1519,"nodeType":"Block","src":"3856:333:8","statements":[{"assignments":[1485],"declarations":[{"constant":false,"id":1485,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:8","nodeType":"VariableDeclaration","scope":1519,"src":"3866:25:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1484,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1494,"initialValue":{"arguments":[{"expression":{"expression":{"id":1488,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"3917:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1213,"src":"3917:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:8","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1491,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"3941:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1492,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"3950:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1486,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:8"},{"condition":{"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:8","subExpression":{"arguments":[{"id":1496,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"3996:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"id":1497,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"4003:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1495,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"3972:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1518,"nodeType":"IfStatement","src":"3967:216:8","trueBody":{"id":1517,"nodeType":"Block","src":"4018:165:8","statements":[{"expression":{"arguments":[{"id":1501,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4052:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1504,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4082:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:8","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":1213,"src":"4082:13:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:8","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:8","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1507,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"4106:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":1502,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:8","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:8","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1500,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"4032:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1511,"nodeType":"ExpressionStatement","src":"4032:86:8"},{"expression":{"arguments":[{"id":1513,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1477,"src":"4152:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},{"id":1514,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"4159:12:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1512,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1614,"src":"4132:19:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1516,"nodeType":"ExpressionStatement","src":"4132:40:8"}]}}]},"documentation":{"id":1474,"nodeType":"StructuredDocumentation","src":"3466:308:8","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:8","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1477,"mutability":"mutable","name":"token","nameLocation":"3808:5:8","nodeType":"VariableDeclaration","scope":1520,"src":"3801:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1476,"nodeType":"UserDefinedTypeName","pathNode":{"id":1475,"name":"IERC20","nameLocations":["3801:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"3801:6:8"},"referencedDeclaration":1226,"src":"3801:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1479,"mutability":"mutable","name":"spender","nameLocation":"3823:7:8","nodeType":"VariableDeclaration","scope":1520,"src":"3815:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"value","nameLocation":"3840:5:8","nodeType":"VariableDeclaration","scope":1520,"src":"3832:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1480,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:8"},"returnParameters":{"id":1483,"nodeType":"ParameterList","parameters":[],"src":"3856:0:8"},"scope":1663,"src":"3779:410:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1576,"nodeType":"Block","src":"4556:257:8","statements":[{"assignments":[1542],"declarations":[{"constant":false,"id":1542,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:8","nodeType":"VariableDeclaration","scope":1576,"src":"4566:19:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1541,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1547,"initialValue":{"arguments":[{"id":1545,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"4601:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1543,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"4588:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1287","typeString":"contract IERC20Permit"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1280,"src":"4588:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:8"},{"expression":{"arguments":[{"id":1551,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"4630:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1552,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1528,"src":"4637:7:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1553,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"4646:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1554,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"4653:8:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1555,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"4663:1:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1556,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"4666:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1557,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1538,"src":"4669:1:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1548,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"4617:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1287","typeString":"contract IERC20Permit"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:8","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":1272,"src":"4617:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1559,"nodeType":"ExpressionStatement","src":"4617:54:8"},{"assignments":[1561],"declarations":[{"constant":false,"id":1561,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:8","nodeType":"VariableDeclaration","scope":1576,"src":"4681:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1560,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1566,"initialValue":{"arguments":[{"id":1564,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1526,"src":"4715:5:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1562,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1524,"src":"4702:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1287","typeString":"contract IERC20Permit"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:8","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":1280,"src":"4702:12:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1568,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"4739:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1569,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1542,"src":"4753:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1567,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1575,"nodeType":"ExpressionStatement","src":"4731:75:8"}]},"documentation":{"id":1521,"nodeType":"StructuredDocumentation","src":"4195:141:8","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":1577,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:8","nodeType":"FunctionDefinition","parameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"mutability":"mutable","name":"token","nameLocation":"4383:5:8","nodeType":"VariableDeclaration","scope":1577,"src":"4370:18:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1287","typeString":"contract IERC20Permit"},"typeName":{"id":1523,"nodeType":"UserDefinedTypeName","pathNode":{"id":1522,"name":"IERC20Permit","nameLocations":["4370:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":1287,"src":"4370:12:8"},"referencedDeclaration":1287,"src":"4370:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$1287","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1526,"mutability":"mutable","name":"owner","nameLocation":"4406:5:8","nodeType":"VariableDeclaration","scope":1577,"src":"4398:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1525,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1528,"mutability":"mutable","name":"spender","nameLocation":"4429:7:8","nodeType":"VariableDeclaration","scope":1577,"src":"4421:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1527,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"value","nameLocation":"4454:5:8","nodeType":"VariableDeclaration","scope":1577,"src":"4446:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1529,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:8","nodeType":"VariableDeclaration","scope":1577,"src":"4469:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1534,"mutability":"mutable","name":"v","nameLocation":"4501:1:8","nodeType":"VariableDeclaration","scope":1577,"src":"4495:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1533,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1536,"mutability":"mutable","name":"r","nameLocation":"4520:1:8","nodeType":"VariableDeclaration","scope":1577,"src":"4512:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1538,"mutability":"mutable","name":"s","nameLocation":"4539:1:8","nodeType":"VariableDeclaration","scope":1577,"src":"4531:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:8"},"returnParameters":{"id":1540,"nodeType":"ParameterList","parameters":[],"src":"4556:0:8"},"scope":1663,"src":"4341:472:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1613,"nodeType":"Block","src":"5266:572:8","statements":[{"assignments":[1587],"declarations":[{"constant":false,"id":1587,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:8","nodeType":"VariableDeclaration","scope":1613,"src":"5615:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1586,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1596,"initialValue":{"arguments":[{"id":1593,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"5669:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1590,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1581,"src":"5649:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}],"id":1589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1588,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:8","typeDescriptions":{}}},"id":1591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:8","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1753,"src":"5641:27:8","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1598,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5728:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:8","memberName":"length","nodeType":"MemberAccess","src":"5728:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1600,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1604,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"5765:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1606,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1605,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:8","typeDescriptions":{}}}],"id":1607,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1602,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:8","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1597,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1612,"nodeType":"ExpressionStatement","src":"5720:111:8"}]},"documentation":{"id":1578,"nodeType":"StructuredDocumentation","src":"4819:372:8","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1614,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:8","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"token","nameLocation":"5232:5:8","nodeType":"VariableDeclaration","scope":1614,"src":"5225:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1580,"nodeType":"UserDefinedTypeName","pathNode":{"id":1579,"name":"IERC20","nameLocations":["5225:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"5225:6:8"},"referencedDeclaration":1226,"src":"5225:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1583,"mutability":"mutable","name":"data","nameLocation":"5252:4:8","nodeType":"VariableDeclaration","scope":1614,"src":"5239:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1582,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:8"},"returnParameters":{"id":1585,"nodeType":"ParameterList","parameters":[],"src":"5266:0:8"},"scope":1663,"src":"5196:642:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1661,"nodeType":"Block","src":"6428:505:8","statements":[{"assignments":[1626,1628],"declarations":[{"constant":false,"id":1626,"mutability":"mutable","name":"success","nameLocation":"6729:7:8","nodeType":"VariableDeclaration","scope":1661,"src":"6724:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1625,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1628,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:8","nodeType":"VariableDeclaration","scope":1661,"src":"6738:23:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1627,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1636,"initialValue":{"arguments":[{"id":1634,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1620,"src":"6785:4:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"6773:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}],"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1629,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:8","typeDescriptions":{}}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:8","memberName":"call","nodeType":"MemberAccess","src":"6765:19:8","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:8"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1637,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1626,"src":"6819:7:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1638,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6831:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:8","memberName":"length","nodeType":"MemberAccess","src":"6831:17:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1644,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6868:10:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1645,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:8","typeDescriptions":{}}}],"id":1647,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1642,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:8","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:8","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:8","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1650,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":1656,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1618,"src":"6919:5:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}],"id":1655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1654,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:8","typeDescriptions":{}}},"id":1657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1652,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"6892:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$1993_$","typeString":"type(library Address)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:8","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1681,"src":"6892:18:8","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1624,"id":1660,"nodeType":"Return","src":"6800:126:8"}]},"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"5844:490:8","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":1662,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:8","nodeType":"FunctionDefinition","parameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1618,"mutability":"mutable","name":"token","nameLocation":"6379:5:8","nodeType":"VariableDeclaration","scope":1662,"src":"6372:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":1617,"nodeType":"UserDefinedTypeName","pathNode":{"id":1616,"name":"IERC20","nameLocations":["6372:6:8"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"6372:6:8"},"referencedDeclaration":1226,"src":"6372:6:8","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1620,"mutability":"mutable","name":"data","nameLocation":"6399:4:8","nodeType":"VariableDeclaration","scope":1662,"src":"6386:17:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1619,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:8"},"returnParameters":{"id":1624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1662,"src":"6422:4:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1622,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:8"},"scope":1663,"src":"6339:594:8","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1664,"src":"701:6234:8","usedErrors":[],"usedEvents":[]}],"src":"115:6821:8"},"id":8},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1993]},"id":1994,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1665,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1666,"nodeType":"StructuredDocumentation","src":"126:67:9","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1993,"linearizedBaseContracts":[1993],"name":"Address","nameLocation":"202:7:9","nodeType":"ContractDefinition","nodes":[{"body":{"id":1680,"nodeType":"Block","src":"1478:254:9","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1674,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1669,"src":"1702:7:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:9","memberName":"code","nodeType":"MemberAccess","src":"1702:12:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:9","memberName":"length","nodeType":"MemberAccess","src":"1702:19:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1673,"id":1679,"nodeType":"Return","src":"1695:30:9"}]},"documentation":{"id":1667,"nodeType":"StructuredDocumentation","src":"216:1191:9","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1681,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:9","nodeType":"FunctionDefinition","parameters":{"id":1670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1669,"mutability":"mutable","name":"account","nameLocation":"1440:7:9","nodeType":"VariableDeclaration","scope":1681,"src":"1432:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1668,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:9"},"returnParameters":{"id":1673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1672,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1681,"src":"1472:4:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1671,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:9"},"scope":1993,"src":"1412:320:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1714,"nodeType":"Block","src":"2718:241:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1692,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1993","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1993","typeString":"library Address"}],"id":1691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1690,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:9","typeDescriptions":{}}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:9","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1695,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2761:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1689,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1699,"nodeType":"ExpressionStatement","src":"2728:73:9"},{"assignments":[1701,null],"declarations":[{"constant":false,"id":1701,"mutability":"mutable","name":"success","nameLocation":"2818:7:9","nodeType":"VariableDeclaration","scope":1714,"src":"2813:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1700,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1708,"initialValue":{"arguments":[{"hexValue":"","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1702,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1684,"src":"2831:9:9","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:9","memberName":"call","nodeType":"MemberAccess","src":"2831:14:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1704,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"2853:6:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:9"},{"expression":{"arguments":[{"id":1710,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1701,"src":"2882:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1709,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1713,"nodeType":"ExpressionStatement","src":"2874:78:9"}]},"documentation":{"id":1682,"nodeType":"StructuredDocumentation","src":"1738:904:9","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1715,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:9","nodeType":"FunctionDefinition","parameters":{"id":1687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1684,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:9","nodeType":"VariableDeclaration","scope":1715,"src":"2666:25:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1683,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:9","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1686,"mutability":"mutable","name":"amount","nameLocation":"2701:6:9","nodeType":"VariableDeclaration","scope":1715,"src":"2693:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1685,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:9"},"returnParameters":{"id":1688,"nodeType":"ParameterList","parameters":[],"src":"2718:0:9"},"scope":1993,"src":"2647:312:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1732,"nodeType":"Block","src":"3790:96:9","statements":[{"expression":{"arguments":[{"id":1726,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"3829:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1727,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"3837:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1725,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1773,1817],"referencedDeclaration":1817,"src":"3807:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1724,"id":1731,"nodeType":"Return","src":"3800:79:9"}]},"documentation":{"id":1716,"nodeType":"StructuredDocumentation","src":"2965:731:9","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1733,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:9","nodeType":"FunctionDefinition","parameters":{"id":1721,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1718,"mutability":"mutable","name":"target","nameLocation":"3731:6:9","nodeType":"VariableDeclaration","scope":1733,"src":"3723:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1717,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1720,"mutability":"mutable","name":"data","nameLocation":"3752:4:9","nodeType":"VariableDeclaration","scope":1733,"src":"3739:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1719,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:9"},"returnParameters":{"id":1724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1723,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1733,"src":"3776:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1722,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:9"},"scope":1993,"src":"3701:185:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1752,"nodeType":"Block","src":"4255:76:9","statements":[{"expression":{"arguments":[{"id":1746,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"4294:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1747,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1738,"src":"4302:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1749,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1740,"src":"4311:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1745,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1773,1817],"referencedDeclaration":1817,"src":"4272:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1744,"id":1751,"nodeType":"Return","src":"4265:59:9"}]},"documentation":{"id":1734,"nodeType":"StructuredDocumentation","src":"3892:211:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1753,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:9","nodeType":"FunctionDefinition","parameters":{"id":1741,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1736,"mutability":"mutable","name":"target","nameLocation":"4147:6:9","nodeType":"VariableDeclaration","scope":1753,"src":"4139:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1738,"mutability":"mutable","name":"data","nameLocation":"4176:4:9","nodeType":"VariableDeclaration","scope":1753,"src":"4163:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1737,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1740,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:9","nodeType":"VariableDeclaration","scope":1753,"src":"4190:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1739,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:9"},"returnParameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1743,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1753,"src":"4241:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1742,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:9"},"scope":1993,"src":"4108:223:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1772,"nodeType":"Block","src":"4806:111:9","statements":[{"expression":{"arguments":[{"id":1766,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1756,"src":"4845:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1767,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1758,"src":"4853:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1768,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"4859:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1765,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1773,1817],"referencedDeclaration":1817,"src":"4823:21:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1764,"id":1771,"nodeType":"Return","src":"4816:94:9"}]},"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"4337:351:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1773,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:9","nodeType":"FunctionDefinition","parameters":{"id":1761,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1756,"mutability":"mutable","name":"target","nameLocation":"4732:6:9","nodeType":"VariableDeclaration","scope":1773,"src":"4724:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1755,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1758,"mutability":"mutable","name":"data","nameLocation":"4753:4:9","nodeType":"VariableDeclaration","scope":1773,"src":"4740:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1757,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"value","nameLocation":"4767:5:9","nodeType":"VariableDeclaration","scope":1773,"src":"4759:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1759,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:9"},"returnParameters":{"id":1764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1763,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1773,"src":"4792:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1762,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:9"},"scope":1993,"src":"4693:224:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1816,"nodeType":"Block","src":"5344:267:9","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1790,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:9","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1993","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1993","typeString":"library Address"}],"id":1789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1788,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:9","typeDescriptions":{}}},"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:9","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"5387:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1787,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1797,"nodeType":"ExpressionStatement","src":"5354:81:9"},{"assignments":[1799,1801],"declarations":[{"constant":false,"id":1799,"mutability":"mutable","name":"success","nameLocation":"5451:7:9","nodeType":"VariableDeclaration","scope":1816,"src":"5446:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1798,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1801,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:9","nodeType":"VariableDeclaration","scope":1816,"src":"5460:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1800,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1808,"initialValue":{"arguments":[{"id":1806,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"5513:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1802,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"5487:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:9","memberName":"call","nodeType":"MemberAccess","src":"5487:11:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1804,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"5506:5:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:9","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:9"},{"expression":{"arguments":[{"id":1810,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"5562:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1811,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1799,"src":"5570:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1812,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1801,"src":"5579:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1813,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1782,"src":"5591:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1809,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"5535:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1786,"id":1815,"nodeType":"Return","src":"5528:76:9"}]},"documentation":{"id":1774,"nodeType":"StructuredDocumentation","src":"4923:237:9","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1817,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:9","nodeType":"FunctionDefinition","parameters":{"id":1783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"target","nameLocation":"5213:6:9","nodeType":"VariableDeclaration","scope":1817,"src":"5205:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1775,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"data","nameLocation":"5242:4:9","nodeType":"VariableDeclaration","scope":1817,"src":"5229:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1777,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"value","nameLocation":"5264:5:9","nodeType":"VariableDeclaration","scope":1817,"src":"5256:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1779,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1782,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:9","nodeType":"VariableDeclaration","scope":1817,"src":"5279:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1781,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:9"},"returnParameters":{"id":1786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1785,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1817,"src":"5330:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1784,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:9"},"scope":1993,"src":"5165:446:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1833,"nodeType":"Block","src":"5888:97:9","statements":[{"expression":{"arguments":[{"id":1828,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"5924:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1829,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"5932:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1830,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1827,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1834,1863],"referencedDeclaration":1863,"src":"5905:18:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1826,"id":1832,"nodeType":"Return","src":"5898:80:9"}]},"documentation":{"id":1818,"nodeType":"StructuredDocumentation","src":"5617:166:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1834,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:9","nodeType":"FunctionDefinition","parameters":{"id":1823,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1820,"mutability":"mutable","name":"target","nameLocation":"5824:6:9","nodeType":"VariableDeclaration","scope":1834,"src":"5816:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1819,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1822,"mutability":"mutable","name":"data","nameLocation":"5845:4:9","nodeType":"VariableDeclaration","scope":1834,"src":"5832:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1821,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:9"},"returnParameters":{"id":1826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1825,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1834,"src":"5874:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1824,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:9"},"scope":1993,"src":"5788:197:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1862,"nodeType":"Block","src":"6327:168:9","statements":[{"assignments":[1847,1849],"declarations":[{"constant":false,"id":1847,"mutability":"mutable","name":"success","nameLocation":"6343:7:9","nodeType":"VariableDeclaration","scope":1862,"src":"6338:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1846,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1849,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:9","nodeType":"VariableDeclaration","scope":1862,"src":"6352:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1848,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1854,"initialValue":{"arguments":[{"id":1852,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"6397:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1850,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"6379:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:9","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:9","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:9"},{"expression":{"arguments":[{"id":1856,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1837,"src":"6446:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1857,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"6454:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1858,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1849,"src":"6463:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1859,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1841,"src":"6475:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1855,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"6419:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1860,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1845,"id":1861,"nodeType":"Return","src":"6412:76:9"}]},"documentation":{"id":1835,"nodeType":"StructuredDocumentation","src":"5991:173:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1863,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:9","nodeType":"FunctionDefinition","parameters":{"id":1842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1837,"mutability":"mutable","name":"target","nameLocation":"6214:6:9","nodeType":"VariableDeclaration","scope":1863,"src":"6206:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1836,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1839,"mutability":"mutable","name":"data","nameLocation":"6243:4:9","nodeType":"VariableDeclaration","scope":1863,"src":"6230:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1838,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1841,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:9","nodeType":"VariableDeclaration","scope":1863,"src":"6257:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1840,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:9"},"returnParameters":{"id":1845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1863,"src":"6313:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1843,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:9"},"scope":1993,"src":"6169:326:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1879,"nodeType":"Block","src":"6771:101:9","statements":[{"expression":{"arguments":[{"id":1874,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"6809:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1875,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1868,"src":"6817:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1873,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1880,1909],"referencedDeclaration":1909,"src":"6788:20:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1872,"id":1878,"nodeType":"Return","src":"6781:84:9"}]},"documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"6501:168:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1880,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:9","nodeType":"FunctionDefinition","parameters":{"id":1869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1866,"mutability":"mutable","name":"target","nameLocation":"6712:6:9","nodeType":"VariableDeclaration","scope":1880,"src":"6704:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1865,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1868,"mutability":"mutable","name":"data","nameLocation":"6733:4:9","nodeType":"VariableDeclaration","scope":1880,"src":"6720:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1867,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:9"},"returnParameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1880,"src":"6757:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1870,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:9"},"scope":1993,"src":"6674:198:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1908,"nodeType":"Block","src":"7213:170:9","statements":[{"assignments":[1893,1895],"declarations":[{"constant":false,"id":1893,"mutability":"mutable","name":"success","nameLocation":"7229:7:9","nodeType":"VariableDeclaration","scope":1908,"src":"7224:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1892,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:9","nodeType":"VariableDeclaration","scope":1908,"src":"7238:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1894,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1900,"initialValue":{"arguments":[{"id":1898,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1885,"src":"7285:4:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1896,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"7265:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:9","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:9","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:9"},{"expression":{"arguments":[{"id":1902,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"7334:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1903,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"7342:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1904,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1895,"src":"7351:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1905,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1887,"src":"7363:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1901,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"7307:26:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1891,"id":1907,"nodeType":"Return","src":"7300:76:9"}]},"documentation":{"id":1881,"nodeType":"StructuredDocumentation","src":"6878:175:9","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1909,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:9","nodeType":"FunctionDefinition","parameters":{"id":1888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1883,"mutability":"mutable","name":"target","nameLocation":"7105:6:9","nodeType":"VariableDeclaration","scope":1909,"src":"7097:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1882,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1885,"mutability":"mutable","name":"data","nameLocation":"7134:4:9","nodeType":"VariableDeclaration","scope":1909,"src":"7121:17:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1884,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1887,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:9","nodeType":"VariableDeclaration","scope":1909,"src":"7148:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1886,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:9"},"returnParameters":{"id":1891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1909,"src":"7199:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1889,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:9"},"scope":1993,"src":"7058:325:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1947,"nodeType":"Block","src":"7865:434:9","statements":[{"condition":{"id":1923,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1914,"src":"7879:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1945,"nodeType":"Block","src":"8235:58:9","statements":[{"expression":{"arguments":[{"id":1941,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"8257:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1942,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"8269:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1940,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"8249:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1944,"nodeType":"ExpressionStatement","src":"8249:33:9"}]},"id":1946,"nodeType":"IfStatement","src":"7875:418:9","trueBody":{"id":1939,"nodeType":"Block","src":"7888:341:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1924,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"7906:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:9","memberName":"length","nodeType":"MemberAccess","src":"7906:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1926,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1936,"nodeType":"IfStatement","src":"7902:286:9","trueBody":{"id":1935,"nodeType":"Block","src":"7930:258:9","statements":[{"expression":{"arguments":[{"arguments":[{"id":1930,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"8132:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1929,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1681,"src":"8121:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1928,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:9","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1934,"nodeType":"ExpressionStatement","src":"8113:60:9"}]}},{"expression":{"id":1937,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"8208:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1922,"id":1938,"nodeType":"Return","src":"8201:17:9"}]}}]},"documentation":{"id":1910,"nodeType":"StructuredDocumentation","src":"7389:277:9","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1948,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:9","nodeType":"FunctionDefinition","parameters":{"id":1919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1912,"mutability":"mutable","name":"target","nameLocation":"7724:6:9","nodeType":"VariableDeclaration","scope":1948,"src":"7716:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1911,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1914,"mutability":"mutable","name":"success","nameLocation":"7745:7:9","nodeType":"VariableDeclaration","scope":1948,"src":"7740:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1913,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1916,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:9","nodeType":"VariableDeclaration","scope":1948,"src":"7762:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1915,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:9","nodeType":"VariableDeclaration","scope":1948,"src":"7795:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1917,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:9"},"returnParameters":{"id":1922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1921,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1948,"src":"7851:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1920,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:9"},"scope":1993,"src":"7671:628:9","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1971,"nodeType":"Block","src":"8680:135:9","statements":[{"condition":{"id":1960,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"8694:7:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1969,"nodeType":"Block","src":"8751:58:9","statements":[{"expression":{"arguments":[{"id":1965,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"8773:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1966,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1955,"src":"8785:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1964,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1992,"src":"8765:7:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1968,"nodeType":"ExpressionStatement","src":"8765:33:9"}]},"id":1970,"nodeType":"IfStatement","src":"8690:119:9","trueBody":{"id":1963,"nodeType":"Block","src":"8703:42:9","statements":[{"expression":{"id":1961,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"8724:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1959,"id":1962,"nodeType":"Return","src":"8717:17:9"}]}}]},"documentation":{"id":1949,"nodeType":"StructuredDocumentation","src":"8305:210:9","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1972,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:9","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1951,"mutability":"mutable","name":"success","nameLocation":"8560:7:9","nodeType":"VariableDeclaration","scope":1972,"src":"8555:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1950,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:9","nodeType":"VariableDeclaration","scope":1972,"src":"8577:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1952,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:9","nodeType":"VariableDeclaration","scope":1972,"src":"8610:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1954,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:9"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1972,"src":"8666:12:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1957,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:9"},"scope":1993,"src":"8520:295:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1991,"nodeType":"Block","src":"8904:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1979,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1974,"src":"8980:10:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:9","memberName":"length","nodeType":"MemberAccess","src":"8980:17:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1981,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1989,"nodeType":"Block","src":"9310:45:9","statements":[{"expression":{"arguments":[{"id":1986,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"9331:12:9","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1985,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1987,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1988,"nodeType":"ExpressionStatement","src":"9324:20:9"}]},"id":1990,"nodeType":"IfStatement","src":"8976:379:9","trueBody":{"id":1984,"nodeType":"Block","src":"9003:301:9","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:9","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:9","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:9"},"nodeType":"YulFunctionCall","src":"9202:17:9"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:9","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:9","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:9"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:9"},"nodeType":"YulFunctionCall","src":"9243:19:9"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:9"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:9"},"nodeType":"YulFunctionCall","src":"9236:44:9"},"nodeType":"YulExpressionStatement","src":"9236:44:9"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1974,"isOffset":false,"isSlot":false,"src":"9208:10:9","valueSize":1},{"declaration":1974,"isOffset":false,"isSlot":false,"src":"9251:10:9","valueSize":1}],"id":1983,"nodeType":"InlineAssembly","src":"9152:142:9"}]}}]},"id":1992,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:9","nodeType":"FunctionDefinition","parameters":{"id":1977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1974,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:9","nodeType":"VariableDeclaration","scope":1992,"src":"8838:23:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1973,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1976,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:9","nodeType":"VariableDeclaration","scope":1992,"src":"8863:26:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1975,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:9","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:9"},"returnParameters":{"id":1978,"nodeType":"ParameterList","parameters":[],"src":"8904:0:9"},"scope":1993,"src":"8821:540:9","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1994,"src":"194:9169:9","usedErrors":[],"usedEvents":[]}],"src":"101:9263:9"},"id":9},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2023]},"id":2024,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1995,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:10"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1996,"nodeType":"StructuredDocumentation","src":"126:496:10","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2023,"linearizedBaseContracts":[2023],"name":"Context","nameLocation":"641:7:10","nodeType":"ContractDefinition","nodes":[{"body":{"id":2004,"nodeType":"Block","src":"717:34:10","statements":[{"expression":{"expression":{"id":2001,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"734:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:10","memberName":"sender","nodeType":"MemberAccess","src":"734:10:10","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2000,"id":2003,"nodeType":"Return","src":"727:17:10"}]},"id":2005,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"664:10:10","nodeType":"FunctionDefinition","parameters":{"id":1997,"nodeType":"ParameterList","parameters":[],"src":"674:2:10"},"returnParameters":{"id":2000,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1999,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2005,"src":"708:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1998,"name":"address","nodeType":"ElementaryTypeName","src":"708:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"707:9:10"},"scope":2023,"src":"655:96:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2013,"nodeType":"Block","src":"824:32:10","statements":[{"expression":{"expression":{"id":2010,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"841:3:10","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"845:4:10","memberName":"data","nodeType":"MemberAccess","src":"841:8:10","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2009,"id":2012,"nodeType":"Return","src":"834:15:10"}]},"id":2014,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"766:8:10","nodeType":"FunctionDefinition","parameters":{"id":2006,"nodeType":"ParameterList","parameters":[],"src":"774:2:10"},"returnParameters":{"id":2009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2014,"src":"808:14:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2007,"name":"bytes","nodeType":"ElementaryTypeName","src":"808:5:10","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"807:16:10"},"scope":2023,"src":"757:99:10","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2021,"nodeType":"Block","src":"934:25:10","statements":[{"expression":{"hexValue":"30","id":2019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"951:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2018,"id":2020,"nodeType":"Return","src":"944:8:10"}]},"id":2022,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"871:20:10","nodeType":"FunctionDefinition","parameters":{"id":2015,"nodeType":"ParameterList","parameters":[],"src":"891:2:10"},"returnParameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2022,"src":"925:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"925:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"924:9:10"},"scope":2023,"src":"862:97:10","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2024,"src":"623:338:10","usedErrors":[],"usedEvents":[]}],"src":"101:861:10"},"id":10},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[3520],"SignedMath":[3625],"Strings":[2252]},"id":2253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2025,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:11"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2026,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2253,"sourceUnit":3521,"src":"126:25:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2027,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2253,"sourceUnit":3626,"src":"152:31:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2028,"nodeType":"StructuredDocumentation","src":"185:34:11","text":" @dev String operations."},"fullyImplemented":true,"id":2252,"linearizedBaseContracts":[2252],"name":"Strings","nameLocation":"228:7:11","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2031,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:11","nodeType":"VariableDeclaration","scope":2252,"src":"242:54:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2029,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2030,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2034,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:11","nodeType":"VariableDeclaration","scope":2252,"src":"302:43:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2032,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2033,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2081,"nodeType":"Block","src":"518:625:11","statements":[{"id":2080,"nodeType":"UncheckedBlock","src":"528:609:11","statements":[{"assignments":[2043],"declarations":[{"constant":false,"id":2043,"mutability":"mutable","name":"length","nameLocation":"560:6:11","nodeType":"VariableDeclaration","scope":2080,"src":"552:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2050,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"580:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2044,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"569:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:11","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":3357,"src":"569:10:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2048,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:11"},{"assignments":[2052],"declarations":[{"constant":false,"id":2052,"mutability":"mutable","name":"buffer","nameLocation":"618:6:11","nodeType":"VariableDeclaration","scope":2080,"src":"604:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2051,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2057,"initialValue":{"arguments":[{"id":2055,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"638:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2054,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2053,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:11"},{"assignments":[2059],"declarations":[{"constant":false,"id":2059,"mutability":"mutable","name":"ptr","nameLocation":"667:3:11","nodeType":"VariableDeclaration","scope":2080,"src":"659:11:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2058,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2060,"nodeType":"VariableDeclarationStatement","src":"659:11:11"},{"AST":{"nodeType":"YulBlock","src":"740:67:11","statements":[{"nodeType":"YulAssignment","src":"758:35:11","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:11"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:11","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:11"},"nodeType":"YulFunctionCall","src":"777:15:11"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:11"},"nodeType":"YulFunctionCall","src":"765:28:11"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:11"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2052,"isOffset":false,"isSlot":false,"src":"769:6:11","valueSize":1},{"declaration":2043,"isOffset":false,"isSlot":false,"src":"785:6:11","valueSize":1},{"declaration":2059,"isOffset":false,"isSlot":false,"src":"758:3:11","valueSize":1}],"id":2061,"nodeType":"InlineAssembly","src":"731:76:11"},{"body":{"id":2076,"nodeType":"Block","src":"833:267:11","statements":[{"expression":{"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:11","subExpression":{"id":2063,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2059,"src":"851:3:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2065,"nodeType":"ExpressionStatement","src":"851:5:11"},{"AST":{"nodeType":"YulBlock","src":"934:84:11","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:11"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:11"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:11","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:11"},"nodeType":"YulFunctionCall","src":"974:14:11"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:11"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:11"},"nodeType":"YulFunctionCall","src":"969:30:11"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:11"},"nodeType":"YulFunctionCall","src":"956:44:11"},"nodeType":"YulExpressionStatement","src":"956:44:11"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2031,"isOffset":false,"isSlot":false,"src":"990:8:11","valueSize":1},{"declaration":2059,"isOffset":false,"isSlot":false,"src":"964:3:11","valueSize":1},{"declaration":2037,"isOffset":false,"isSlot":false,"src":"978:5:11","valueSize":1}],"id":2066,"nodeType":"InlineAssembly","src":"925:93:11"},{"expression":{"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2067,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"1035:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:11","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2070,"nodeType":"ExpressionStatement","src":"1035:11:11"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"1068:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2075,"nodeType":"IfStatement","src":"1064:21:11","trueBody":{"id":2074,"nodeType":"Break","src":"1080:5:11"}}]},"condition":{"hexValue":"74727565","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2077,"nodeType":"WhileStatement","src":"820:280:11"},{"expression":{"id":2078,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1120:6:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2041,"id":2079,"nodeType":"Return","src":"1113:13:11"}]}]},"documentation":{"id":2035,"nodeType":"StructuredDocumentation","src":"352:90:11","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2082,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:11","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2037,"mutability":"mutable","name":"value","nameLocation":"473:5:11","nodeType":"VariableDeclaration","scope":2082,"src":"465:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2036,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:11"},"returnParameters":{"id":2041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2082,"src":"503:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2039,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:11"},"scope":2252,"src":"447:696:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2109,"nodeType":"Block","src":"1313:103:11","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"1354:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:11","trueExpression":{"hexValue":"2d","id":2097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2103,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"1400:5:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2101,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3625,"src":"1385:10:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$3625_$","typeString":"type(library SignedMath)"}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:11","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":3624,"src":"1385:14:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2100,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[2082,2110],"referencedDeclaration":2082,"src":"1376:8:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2092,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:11","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:11","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:11","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2090,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:11","typeDescriptions":{}}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2089,"id":2108,"nodeType":"Return","src":"1323:86:11"}]},"documentation":{"id":2083,"nodeType":"StructuredDocumentation","src":"1149:89:11","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2110,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:11","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2085,"mutability":"mutable","name":"value","nameLocation":"1268:5:11","nodeType":"VariableDeclaration","scope":2110,"src":"1261:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2084,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:11","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:11"},"returnParameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2110,"src":"1298:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2087,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:11"},"scope":2252,"src":"1243:173:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2129,"nodeType":"Block","src":"1595:100:11","statements":[{"id":2128,"nodeType":"UncheckedBlock","src":"1605:84:11","statements":[{"expression":{"arguments":[{"id":2119,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1648:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2113,"src":"1667:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2120,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"1655:4:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:11","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":3480,"src":"1655:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2118,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2130,2206,2226],"referencedDeclaration":2206,"src":"1636:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2117,"id":2127,"nodeType":"Return","src":"1629:49:11"}]}]},"documentation":{"id":2111,"nodeType":"StructuredDocumentation","src":"1422:94:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2130,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:11","nodeType":"FunctionDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2113,"mutability":"mutable","name":"value","nameLocation":"1550:5:11","nodeType":"VariableDeclaration","scope":2130,"src":"1542:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2112,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:11"},"returnParameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2130,"src":"1580:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2115,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:11"},"scope":2252,"src":"1521:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2205,"nodeType":"Block","src":"1908:347:11","statements":[{"assignments":[2141],"declarations":[{"constant":false,"id":2141,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:11","nodeType":"VariableDeclaration","scope":2205,"src":"1918:19:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2140,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2150,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2145,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"1954:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:11","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2142,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:11"},{"expression":{"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2151,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1975:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2153,"indexExpression":{"hexValue":"30","id":2152,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2156,"nodeType":"ExpressionStatement","src":"1975:15:11"},{"expression":{"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2157,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2000:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2159,"indexExpression":{"hexValue":"31","id":2158,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":2160,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2162,"nodeType":"ExpressionStatement","src":"2000:15:11"},{"body":{"id":2191,"nodeType":"Block","src":"2070:83:11","statements":[{"expression":{"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2177,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2084:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2179,"indexExpression":{"id":2178,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"2091:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2180,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2031,"src":"2096:8:11","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":2184,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2181,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2105:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:11","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:11","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":2186,"nodeType":"ExpressionStatement","src":"2084:33:11"},{"expression":{"id":2189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2187,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2131:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:11","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2190,"nodeType":"ExpressionStatement","src":"2131:11:11"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2171,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"2058:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":2172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2192,"initializationExpression":{"assignments":[2164],"declarations":[{"constant":false,"id":2164,"mutability":"mutable","name":"i","nameLocation":"2038:1:11","nodeType":"VariableDeclaration","scope":2192,"src":"2030:9:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2163,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2170,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:11","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2166,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"2046:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:11"},"loopExpression":{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:11","subExpression":{"id":2174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2164,"src":"2067:1:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"2065:3:11"},"nodeType":"ForStatement","src":"2025:128:11"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2194,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"2170:5:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:11","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":2197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":2193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2199,"nodeType":"ExpressionStatement","src":"2162:55:11"},{"expression":{"arguments":[{"id":2202,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2241:6:11","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:11","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2200,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:11","typeDescriptions":{}}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2139,"id":2204,"nodeType":"Return","src":"2227:21:11"}]},"documentation":{"id":2131,"nodeType":"StructuredDocumentation","src":"1701:112:11","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":2206,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:11","nodeType":"FunctionDefinition","parameters":{"id":2136,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2133,"mutability":"mutable","name":"value","nameLocation":"1847:5:11","nodeType":"VariableDeclaration","scope":2206,"src":"1839:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2135,"mutability":"mutable","name":"length","nameLocation":"1862:6:11","nodeType":"VariableDeclaration","scope":2206,"src":"1854:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2134,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:11"},"returnParameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2206,"src":"1893:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2137,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:11"},"scope":2252,"src":"1818:437:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2225,"nodeType":"Block","src":"2480:76:11","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":2219,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2525:4:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2218,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2217,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:11","typeDescriptions":{}}},"id":2220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2215,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:11","typeDescriptions":{}}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2222,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2034,"src":"2533:15:11","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":2214,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2130,2206,2226],"referencedDeclaration":2206,"src":"2497:11:11","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2213,"id":2224,"nodeType":"Return","src":"2490:59:11"}]},"documentation":{"id":2207,"nodeType":"StructuredDocumentation","src":"2261:141:11","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":2226,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:11","nodeType":"FunctionDefinition","parameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2209,"mutability":"mutable","name":"addr","nameLocation":"2436:4:11","nodeType":"VariableDeclaration","scope":2226,"src":"2428:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2208,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:11"},"returnParameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2226,"src":"2465:13:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2211,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:11"},"scope":2252,"src":"2407:149:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2250,"nodeType":"Block","src":"2711:66:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":2239,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2229,"src":"2744:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2238,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2237,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:11","typeDescriptions":{}}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2236,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":2245,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2231,"src":"2767:1:11","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2243,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:11","typeDescriptions":{}}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2242,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2235,"id":2249,"nodeType":"Return","src":"2721:49:11"}]},"documentation":{"id":2227,"nodeType":"StructuredDocumentation","src":"2562:66:11","text":" @dev Returns true if the two strings are equal."},"id":2251,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:11","nodeType":"FunctionDefinition","parameters":{"id":2232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2229,"mutability":"mutable","name":"a","nameLocation":"2662:1:11","nodeType":"VariableDeclaration","scope":2251,"src":"2648:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2228,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2231,"mutability":"mutable","name":"b","nameLocation":"2679:1:11","nodeType":"VariableDeclaration","scope":2251,"src":"2665:15:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2230,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:11","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:11"},"returnParameters":{"id":2235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2251,"src":"2705:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2233,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:11"},"scope":2252,"src":"2633:144:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2253,"src":"220:2559:11","usedErrors":[],"usedEvents":[]}],"src":"101:2679:11"},"id":11},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2618],"Math":[3520],"SignedMath":[3625],"Strings":[2252]},"id":2619,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2254,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":2255,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2619,"sourceUnit":2253,"src":"137:24:12","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":2256,"nodeType":"StructuredDocumentation","src":"163:205:12","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2618,"linearizedBaseContracts":[2618],"name":"ECDSA","nameLocation":"377:5:12","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":2262,"members":[{"id":2257,"name":"NoError","nameLocation":"417:7:12","nodeType":"EnumValue","src":"417:7:12"},{"id":2258,"name":"InvalidSignature","nameLocation":"434:16:12","nodeType":"EnumValue","src":"434:16:12"},{"id":2259,"name":"InvalidSignatureLength","nameLocation":"460:22:12","nodeType":"EnumValue","src":"460:22:12"},{"id":2260,"name":"InvalidSignatureS","nameLocation":"492:17:12","nodeType":"EnumValue","src":"492:17:12"},{"id":2261,"name":"InvalidSignatureV","nameLocation":"519:17:12","nodeType":"EnumValue","src":"519:17:12"}],"name":"RecoverError","nameLocation":"394:12:12","nodeType":"EnumDefinition","src":"389:175:12"},{"body":{"id":2305,"nodeType":"Block","src":"624:457:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2268,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"638:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2269,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"647:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:12","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2257,"src":"647:20:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2274,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"734:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2275,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"743:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2276,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:12","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2258,"src":"743:29:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2283,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"843:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2284,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"852:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:12","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2259,"src":"852:35:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2292,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2265,"src":"965:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2293,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"974:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:12","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2260,"src":"974:30:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2301,"nodeType":"IfStatement","src":"961:114:12","trueBody":{"id":2300,"nodeType":"Block","src":"1006:69:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":2296,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2299,"nodeType":"ExpressionStatement","src":"1020:44:12"}]}},"id":2302,"nodeType":"IfStatement","src":"839:236:12","trueBody":{"id":2291,"nodeType":"Block","src":"889:66:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":2287,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2290,"nodeType":"ExpressionStatement","src":"903:41:12"}]}},"id":2303,"nodeType":"IfStatement","src":"730:345:12","trueBody":{"id":2282,"nodeType":"Block","src":"774:59:12","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":2279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":2278,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:12","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2281,"nodeType":"ExpressionStatement","src":"788:34:12"}]}},"id":2304,"nodeType":"IfStatement","src":"634:441:12","trueBody":{"id":2273,"nodeType":"Block","src":"669:55:12","statements":[{"functionReturnParameters":2267,"id":2272,"nodeType":"Return","src":"683:7:12"}]}}]},"id":2306,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:12","nodeType":"FunctionDefinition","parameters":{"id":2266,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2265,"mutability":"mutable","name":"error","nameLocation":"604:5:12","nodeType":"VariableDeclaration","scope":2306,"src":"591:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2264,"nodeType":"UserDefinedTypeName","pathNode":{"id":2263,"name":"RecoverError","nameLocations":["591:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"591:12:12"},"referencedDeclaration":2262,"src":"591:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:12"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[],"src":"624:0:12"},"scope":2618,"src":"570:511:12","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":2351,"nodeType":"Block","src":"2249:626:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2319,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2311,"src":"2263:9:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:12","memberName":"length","nodeType":"MemberAccess","src":"2263:16:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":2321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:12","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2349,"nodeType":"Block","src":"2788:81:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:12","typeDescriptions":{}}},"id":2344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2345,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"2822:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:12","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":2259,"src":"2822:35:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"id":2347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2318,"id":2348,"nodeType":"Return","src":"2802:56:12"}]},"id":2350,"nodeType":"IfStatement","src":"2259:610:12","trueBody":{"id":2340,"nodeType":"Block","src":"2287:495:12","statements":[{"assignments":[2324],"declarations":[{"constant":false,"id":2324,"mutability":"mutable","name":"r","nameLocation":"2309:1:12","nodeType":"VariableDeclaration","scope":2340,"src":"2301:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2323,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2325,"nodeType":"VariableDeclarationStatement","src":"2301:9:12"},{"assignments":[2327],"declarations":[{"constant":false,"id":2327,"mutability":"mutable","name":"s","nameLocation":"2332:1:12","nodeType":"VariableDeclaration","scope":2340,"src":"2324:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2326,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2328,"nodeType":"VariableDeclarationStatement","src":"2324:9:12"},{"assignments":[2330],"declarations":[{"constant":false,"id":2330,"mutability":"mutable","name":"v","nameLocation":"2353:1:12","nodeType":"VariableDeclaration","scope":2340,"src":"2347:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2329,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2331,"nodeType":"VariableDeclarationStatement","src":"2347:7:12"},{"AST":{"nodeType":"YulBlock","src":"2555:171:12","statements":[{"nodeType":"YulAssignment","src":"2573:32:12","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:12","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:12"},"nodeType":"YulFunctionCall","src":"2584:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:12"},"nodeType":"YulFunctionCall","src":"2578:27:12"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:12"}]},{"nodeType":"YulAssignment","src":"2622:32:12","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:12","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:12"},"nodeType":"YulFunctionCall","src":"2633:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:12"},"nodeType":"YulFunctionCall","src":"2627:27:12"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:12"}]},{"nodeType":"YulAssignment","src":"2671:41:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:12","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:12"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:12","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:12"},"nodeType":"YulFunctionCall","src":"2690:20:12"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:12"},"nodeType":"YulFunctionCall","src":"2684:27:12"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:12"},"nodeType":"YulFunctionCall","src":"2676:36:12"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2324,"isOffset":false,"isSlot":false,"src":"2573:1:12","valueSize":1},{"declaration":2327,"isOffset":false,"isSlot":false,"src":"2622:1:12","valueSize":1},{"declaration":2311,"isOffset":false,"isSlot":false,"src":"2588:9:12","valueSize":1},{"declaration":2311,"isOffset":false,"isSlot":false,"src":"2637:9:12","valueSize":1},{"declaration":2311,"isOffset":false,"isSlot":false,"src":"2694:9:12","valueSize":1},{"declaration":2330,"isOffset":false,"isSlot":false,"src":"2671:1:12","valueSize":1}],"id":2332,"nodeType":"InlineAssembly","src":"2546:180:12"},{"expression":{"arguments":[{"id":2334,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2309,"src":"2757:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2335,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2330,"src":"2763:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2336,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"2766:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2337,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2327,"src":"2769:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2333,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2352,2426,2520],"referencedDeclaration":2520,"src":"2746:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2318,"id":2339,"nodeType":"Return","src":"2739:32:12"}]}}]},"documentation":{"id":2307,"nodeType":"StructuredDocumentation","src":"1087:1053:12","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":2352,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:12","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2309,"mutability":"mutable","name":"hash","nameLocation":"2173:4:12","nodeType":"VariableDeclaration","scope":2352,"src":"2165:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2311,"mutability":"mutable","name":"signature","nameLocation":"2192:9:12","nodeType":"VariableDeclaration","scope":2352,"src":"2179:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2310,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:12"},"returnParameters":{"id":2318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2352,"src":"2226:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2313,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2352,"src":"2235:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2316,"nodeType":"UserDefinedTypeName","pathNode":{"id":2315,"name":"RecoverError","nameLocations":["2235:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"2235:12:12"},"referencedDeclaration":2262,"src":"2235:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:12"},"scope":2618,"src":"2145:730:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2378,"nodeType":"Block","src":"3748:140:12","statements":[{"assignments":[2363,2366],"declarations":[{"constant":false,"id":2363,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:12","nodeType":"VariableDeclaration","scope":2378,"src":"3759:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2366,"mutability":"mutable","name":"error","nameLocation":"3791:5:12","nodeType":"VariableDeclaration","scope":2378,"src":"3778:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2365,"nodeType":"UserDefinedTypeName","pathNode":{"id":2364,"name":"RecoverError","nameLocations":["3778:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"3778:12:12"},"referencedDeclaration":2262,"src":"3778:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2371,"initialValue":{"arguments":[{"id":2368,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"3811:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2369,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"3817:9:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2367,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2352,2426,2520],"referencedDeclaration":2352,"src":"3800:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:12"},{"expression":{"arguments":[{"id":2373,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2366,"src":"3849:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}],"id":2372,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"3837:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2262_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2375,"nodeType":"ExpressionStatement","src":"3837:18:12"},{"expression":{"id":2376,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"3872:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2361,"id":2377,"nodeType":"Return","src":"3865:16:12"}]},"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"2881:775:12","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":2379,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:12","nodeType":"FunctionDefinition","parameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"hash","nameLocation":"3686:4:12","nodeType":"VariableDeclaration","scope":2379,"src":"3678:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"signature","nameLocation":"3705:9:12","nodeType":"VariableDeclaration","scope":2379,"src":"3692:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2356,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:12"},"returnParameters":{"id":2361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2360,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2379,"src":"3739:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2359,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:12"},"scope":2618,"src":"3661:227:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2425,"nodeType":"Block","src":"4245:203:12","statements":[{"assignments":[2395],"declarations":[{"constant":false,"id":2395,"mutability":"mutable","name":"s","nameLocation":"4263:1:12","nodeType":"VariableDeclaration","scope":2425,"src":"4255:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2394,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2402,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2396,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"4267:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:12","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":2398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2397,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:12","typeDescriptions":{}}},"id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:12"},{"assignments":[2404],"declarations":[{"constant":false,"id":2404,"mutability":"mutable","name":"v","nameLocation":"4363:1:12","nodeType":"VariableDeclaration","scope":2425,"src":"4357:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2403,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":2417,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2409,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2386,"src":"4382:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2407,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:12","typeDescriptions":{}}},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:12","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2413,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:12","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":2405,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:12","typeDescriptions":{}}},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:12"},{"expression":{"arguments":[{"id":2419,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"4427:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2420,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2404,"src":"4433:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2421,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"4436:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2422,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2395,"src":"4439:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2418,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2352,2426,2520],"referencedDeclaration":2520,"src":"4416:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2393,"id":2424,"nodeType":"Return","src":"4409:32:12"}]},"documentation":{"id":2380,"nodeType":"StructuredDocumentation","src":"3894:243:12","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":2426,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:12","nodeType":"FunctionDefinition","parameters":{"id":2387,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2382,"mutability":"mutable","name":"hash","nameLocation":"4170:4:12","nodeType":"VariableDeclaration","scope":2426,"src":"4162:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"r","nameLocation":"4184:1:12","nodeType":"VariableDeclaration","scope":2426,"src":"4176:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2386,"mutability":"mutable","name":"vs","nameLocation":"4195:2:12","nodeType":"VariableDeclaration","scope":2426,"src":"4187:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2385,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:12"},"returnParameters":{"id":2393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2389,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"4222:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2392,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2426,"src":"4231:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2391,"nodeType":"UserDefinedTypeName","pathNode":{"id":2390,"name":"RecoverError","nameLocations":["4231:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"4231:12:12"},"referencedDeclaration":2262,"src":"4231:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:12"},"scope":2618,"src":"4142:306:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2455,"nodeType":"Block","src":"4699:136:12","statements":[{"assignments":[2439,2442],"declarations":[{"constant":false,"id":2439,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:12","nodeType":"VariableDeclaration","scope":2455,"src":"4710:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2438,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2442,"mutability":"mutable","name":"error","nameLocation":"4742:5:12","nodeType":"VariableDeclaration","scope":2455,"src":"4729:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2441,"nodeType":"UserDefinedTypeName","pathNode":{"id":2440,"name":"RecoverError","nameLocations":["4729:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"4729:12:12"},"referencedDeclaration":2262,"src":"4729:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2448,"initialValue":{"arguments":[{"id":2444,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"4762:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2445,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"4768:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2446,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2433,"src":"4771:2:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2443,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2352,2426,2520],"referencedDeclaration":2426,"src":"4751:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:12"},{"expression":{"arguments":[{"id":2450,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2442,"src":"4796:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}],"id":2449,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"4784:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2262_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2452,"nodeType":"ExpressionStatement","src":"4784:18:12"},{"expression":{"id":2453,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2439,"src":"4819:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2437,"id":2454,"nodeType":"Return","src":"4812:16:12"}]},"documentation":{"id":2427,"nodeType":"StructuredDocumentation","src":"4454:154:12","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":2456,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:12","nodeType":"FunctionDefinition","parameters":{"id":2434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2429,"mutability":"mutable","name":"hash","nameLocation":"4638:4:12","nodeType":"VariableDeclaration","scope":2456,"src":"4630:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2428,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2431,"mutability":"mutable","name":"r","nameLocation":"4652:1:12","nodeType":"VariableDeclaration","scope":2456,"src":"4644:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2430,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2433,"mutability":"mutable","name":"vs","nameLocation":"4663:2:12","nodeType":"VariableDeclaration","scope":2456,"src":"4655:10:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2432,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:12"},"returnParameters":{"id":2437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2456,"src":"4690:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2435,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:12"},"scope":2618,"src":"4613:222:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2519,"nodeType":"Block","src":"5120:1345:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2475,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6016:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2474,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:12","typeDescriptions":{}}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":2477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:12","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2488,"nodeType":"IfStatement","src":"6004:161:12","trueBody":{"id":2487,"nodeType":"Block","src":"6089:76:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2480,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2479,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:12","typeDescriptions":{}}},"id":2482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2483,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"6123:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:12","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":2260,"src":"6123:30:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"id":2485,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2472,"id":2486,"nodeType":"Return","src":"6103:51:12"}]}},{"assignments":[2490],"declarations":[{"constant":false,"id":2490,"mutability":"mutable","name":"signer","nameLocation":"6267:6:12","nodeType":"VariableDeclaration","scope":2519,"src":"6259:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2489,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2497,"initialValue":{"arguments":[{"id":2492,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"6286:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2493,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"6292:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2494,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"6295:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2495,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"6298:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2491,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:12","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2498,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6314:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2499,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:12","typeDescriptions":{}}},"id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2513,"nodeType":"IfStatement","src":"6310:101:12","trueBody":{"id":2512,"nodeType":"Block","src":"6336:75:12","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":2506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2505,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2504,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:12","typeDescriptions":{}}},"id":2507,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2508,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"6370:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2509,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:12","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":2258,"src":"6370:29:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"id":2510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2472,"id":2511,"nodeType":"Return","src":"6350:50:12"}]}},{"expression":{"components":[{"id":2514,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2490,"src":"6429:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2515,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"6437:12:12","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$2262_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":2516,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:12","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2257,"src":"6437:20:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"id":2517,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:12","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":2472,"id":2518,"nodeType":"Return","src":"6421:37:12"}]},"documentation":{"id":2457,"nodeType":"StructuredDocumentation","src":"4841:163:12","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":2520,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:12","nodeType":"FunctionDefinition","parameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2459,"mutability":"mutable","name":"hash","nameLocation":"5037:4:12","nodeType":"VariableDeclaration","scope":2520,"src":"5029:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"v","nameLocation":"5049:1:12","nodeType":"VariableDeclaration","scope":2520,"src":"5043:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2460,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"r","nameLocation":"5060:1:12","nodeType":"VariableDeclaration","scope":2520,"src":"5052:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2462,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"s","nameLocation":"5071:1:12","nodeType":"VariableDeclaration","scope":2520,"src":"5063:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2464,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:12"},"returnParameters":{"id":2472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2520,"src":"5097:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2467,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2471,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2520,"src":"5106:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2470,"nodeType":"UserDefinedTypeName","pathNode":{"id":2469,"name":"RecoverError","nameLocations":["5106:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"5106:12:12"},"referencedDeclaration":2262,"src":"5106:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:12"},"scope":2618,"src":"5009:1456:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2552,"nodeType":"Block","src":"6692:138:12","statements":[{"assignments":[2535,2538],"declarations":[{"constant":false,"id":2535,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:12","nodeType":"VariableDeclaration","scope":2552,"src":"6703:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2534,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2538,"mutability":"mutable","name":"error","nameLocation":"6735:5:12","nodeType":"VariableDeclaration","scope":2552,"src":"6722:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":2537,"nodeType":"UserDefinedTypeName","pathNode":{"id":2536,"name":"RecoverError","nameLocations":["6722:12:12"],"nodeType":"IdentifierPath","referencedDeclaration":2262,"src":"6722:12:12"},"referencedDeclaration":2262,"src":"6722:12:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":2545,"initialValue":{"arguments":[{"id":2540,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2523,"src":"6755:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2541,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2525,"src":"6761:1:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":2542,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2527,"src":"6764:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2543,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2529,"src":"6767:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2539,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[2352,2426,2520],"referencedDeclaration":2520,"src":"6744:10:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$2262_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:12"},{"expression":{"arguments":[{"id":2547,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2538,"src":"6791:5:12","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$2262","typeString":"enum ECDSA.RecoverError"}],"id":2546,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2306,"src":"6779:11:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$2262_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2549,"nodeType":"ExpressionStatement","src":"6779:18:12"},{"expression":{"id":2550,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"6814:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2533,"id":2551,"nodeType":"Return","src":"6807:16:12"}]},"documentation":{"id":2521,"nodeType":"StructuredDocumentation","src":"6471:122:12","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":2553,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:12","nodeType":"FunctionDefinition","parameters":{"id":2530,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2523,"mutability":"mutable","name":"hash","nameLocation":"6623:4:12","nodeType":"VariableDeclaration","scope":2553,"src":"6615:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2525,"mutability":"mutable","name":"v","nameLocation":"6635:1:12","nodeType":"VariableDeclaration","scope":2553,"src":"6629:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2524,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":2527,"mutability":"mutable","name":"r","nameLocation":"6646:1:12","nodeType":"VariableDeclaration","scope":2553,"src":"6638:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2529,"mutability":"mutable","name":"s","nameLocation":"6657:1:12","nodeType":"VariableDeclaration","scope":2553,"src":"6649:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2528,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:12"},"returnParameters":{"id":2533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2532,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2553,"src":"6683:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2531,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:12"},"scope":2618,"src":"6598:232:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2562,"nodeType":"Block","src":"7206:310:12","statements":[{"AST":{"nodeType":"YulBlock","src":"7362:148:12","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7383:4:12","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nodeType":"YulLiteral","src":"7389:34:12","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7376:6:12"},"nodeType":"YulFunctionCall","src":"7376:48:12"},"nodeType":"YulExpressionStatement","src":"7376:48:12"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7444:4:12","type":"","value":"0x1c"},{"name":"hash","nodeType":"YulIdentifier","src":"7450:4:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7437:6:12"},"nodeType":"YulFunctionCall","src":"7437:18:12"},"nodeType":"YulExpressionStatement","src":"7437:18:12"},{"nodeType":"YulAssignment","src":"7468:32:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7489:4:12","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"7495:4:12","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"7479:9:12"},"nodeType":"YulFunctionCall","src":"7479:21:12"},"variableNames":[{"name":"message","nodeType":"YulIdentifier","src":"7468:7:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2556,"isOffset":false,"isSlot":false,"src":"7450:4:12","valueSize":1},{"declaration":2559,"isOffset":false,"isSlot":false,"src":"7468:7:12","valueSize":1}],"id":2561,"nodeType":"InlineAssembly","src":"7353:157:12"}]},"documentation":{"id":2554,"nodeType":"StructuredDocumentation","src":"6836:279:12","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2563,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:12","nodeType":"FunctionDefinition","parameters":{"id":2557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2556,"mutability":"mutable","name":"hash","nameLocation":"7160:4:12","nodeType":"VariableDeclaration","scope":2563,"src":"7152:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:12"},"returnParameters":{"id":2560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2559,"mutability":"mutable","name":"message","nameLocation":"7197:7:12","nodeType":"VariableDeclaration","scope":2563,"src":"7189:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:12"},"scope":2618,"src":"7120:396:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2584,"nodeType":"Block","src":"7881:116:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":2574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":2577,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7976:1:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:12","memberName":"length","nodeType":"MemberAccess","src":"7976:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2575,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2252,"src":"7959:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$2252_$","typeString":"type(library Strings)"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:12","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2082,"src":"7959:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2580,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7987:1:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2572,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2571,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2570,"id":2583,"nodeType":"Return","src":"7891:99:12"}]},"documentation":{"id":2564,"nodeType":"StructuredDocumentation","src":"7522:274:12","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":2585,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:12","nodeType":"FunctionDefinition","parameters":{"id":2567,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2566,"mutability":"mutable","name":"s","nameLocation":"7846:1:12","nodeType":"VariableDeclaration","scope":2585,"src":"7833:14:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2565,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:12"},"returnParameters":{"id":2570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2585,"src":"7872:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2568,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:12"},"scope":2618,"src":"7801:196:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2596,"nodeType":"Block","src":"8443:290:12","statements":[{"AST":{"nodeType":"YulBlock","src":"8505:222:12","statements":[{"nodeType":"YulVariableDeclaration","src":"8519:22:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8536:4:12","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8530:5:12"},"nodeType":"YulFunctionCall","src":"8530:11:12"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"8523:3:12","type":""}]},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8561:3:12"},{"hexValue":"1901","kind":"string","nodeType":"YulLiteral","src":"8566:10:12","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8554:6:12"},"nodeType":"YulFunctionCall","src":"8554:23:12"},"nodeType":"YulExpressionStatement","src":"8554:23:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8601:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8606:4:12","type":"","value":"0x02"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8597:3:12"},"nodeType":"YulFunctionCall","src":"8597:14:12"},{"name":"domainSeparator","nodeType":"YulIdentifier","src":"8613:15:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8590:6:12"},"nodeType":"YulFunctionCall","src":"8590:39:12"},"nodeType":"YulExpressionStatement","src":"8590:39:12"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8653:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8658:4:12","type":"","value":"0x22"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8649:3:12"},"nodeType":"YulFunctionCall","src":"8649:14:12"},{"name":"structHash","nodeType":"YulIdentifier","src":"8665:10:12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8642:6:12"},"nodeType":"YulFunctionCall","src":"8642:34:12"},"nodeType":"YulExpressionStatement","src":"8642:34:12"},{"nodeType":"YulAssignment","src":"8689:28:12","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"8707:3:12"},{"kind":"number","nodeType":"YulLiteral","src":"8712:4:12","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"8697:9:12"},"nodeType":"YulFunctionCall","src":"8697:20:12"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"8689:4:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2593,"isOffset":false,"isSlot":false,"src":"8689:4:12","valueSize":1},{"declaration":2588,"isOffset":false,"isSlot":false,"src":"8613:15:12","valueSize":1},{"declaration":2590,"isOffset":false,"isSlot":false,"src":"8665:10:12","valueSize":1}],"id":2595,"nodeType":"InlineAssembly","src":"8496:231:12"}]},"documentation":{"id":2586,"nodeType":"StructuredDocumentation","src":"8003:328:12","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2597,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:12","nodeType":"FunctionDefinition","parameters":{"id":2591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2588,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:12","nodeType":"VariableDeclaration","scope":2597,"src":"8361:23:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2590,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:12","nodeType":"VariableDeclaration","scope":2597,"src":"8386:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2589,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:12"},"returnParameters":{"id":2594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2593,"mutability":"mutable","name":"data","nameLocation":"8437:4:12","nodeType":"VariableDeclaration","scope":2597,"src":"8429:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2592,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:12"},"scope":2618,"src":"8336:397:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2616,"nodeType":"Block","src":"9048:80:12","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":2611,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"9104:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2612,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"9115:4:12","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2608,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:12","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2609,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:12","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:12","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2607,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2606,"id":2615,"nodeType":"Return","src":"9058:63:12"}]},"documentation":{"id":2598,"nodeType":"StructuredDocumentation","src":"8739:193:12","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":2617,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:12","nodeType":"FunctionDefinition","parameters":{"id":2603,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"validator","nameLocation":"8986:9:12","nodeType":"VariableDeclaration","scope":2617,"src":"8978:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2599,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"data","nameLocation":"9010:4:12","nodeType":"VariableDeclaration","scope":2617,"src":"8997:17:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2601,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:12"},"returnParameters":{"id":2606,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2617,"src":"9039:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:12"},"scope":2618,"src":"8937:191:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2619,"src":"369:8761:12","usedErrors":[],"usedEvents":[]}],"src":"112:9019:12"},"id":12},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[2642],"IERC165":[2654]},"id":2643,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2620,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:13"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":2621,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2643,"sourceUnit":2655,"src":"124:23:13","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2623,"name":"IERC165","nameLocations":["754:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":2654,"src":"754:7:13"},"id":2624,"nodeType":"InheritanceSpecifier","src":"754:7:13"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":2622,"nodeType":"StructuredDocumentation","src":"149:576:13","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":2642,"linearizedBaseContracts":[2642,2654],"name":"ERC165","nameLocation":"744:6:13","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[2653],"body":{"id":2640,"nodeType":"Block","src":"920:64:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2633,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"937:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":2635,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"957:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$2654_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$2654_$","typeString":"type(contract IERC165)"}],"id":2634,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$2654","typeString":"type(contract IERC165)"}},"id":2637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2632,"id":2639,"nodeType":"Return","src":"930:47:13"}]},"documentation":{"id":2625,"nodeType":"StructuredDocumentation","src":"768:56:13","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":2641,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:13","nodeType":"FunctionDefinition","overrides":{"id":2629,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:13"},"parameters":{"id":2628,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:13","nodeType":"VariableDeclaration","scope":2641,"src":"856:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2626,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:13"},"returnParameters":{"id":2632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2641,"src":"914:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2630,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:13"},"scope":2642,"src":"829:155:13","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":2643,"src":"726:260:13","usedErrors":[],"usedEvents":[]}],"src":"99:888:13"},"id":13},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[2654]},"id":2655,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2644,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":2645,"nodeType":"StructuredDocumentation","src":"125:279:14","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":2654,"linearizedBaseContracts":[2654],"name":"IERC165","nameLocation":"415:7:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2646,"nodeType":"StructuredDocumentation","src":"429:340:14","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":2653,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:14","nodeType":"FunctionDefinition","parameters":{"id":2649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2648,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:14","nodeType":"VariableDeclaration","scope":2653,"src":"801:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2647,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:14"},"returnParameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2651,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2653,"src":"844:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2650,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:14"},"scope":2654,"src":"774:76:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2655,"src":"405:447:14","usedErrors":[],"usedEvents":[]}],"src":"100:753:14"},"id":14},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[3520]},"id":3521,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2656,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2657,"nodeType":"StructuredDocumentation","src":"128:73:15","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3520,"linearizedBaseContracts":[3520],"name":"Math","nameLocation":"210:4:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2661,"members":[{"id":2658,"name":"Down","nameLocation":"245:4:15","nodeType":"EnumValue","src":"245:4:15"},{"id":2659,"name":"Up","nameLocation":"287:2:15","nodeType":"EnumValue","src":"287:2:15"},{"id":2660,"name":"Zero","nameLocation":"318:4:15","nodeType":"EnumValue","src":"318:4:15"}],"name":"Rounding","nameLocation":"226:8:15","nodeType":"EnumDefinition","src":"221:122:15"},{"body":{"id":2678,"nodeType":"Block","src":"480:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2671,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"497:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2672,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"501:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2675,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"509:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:15","trueExpression":{"id":2674,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"505:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2670,"id":2677,"nodeType":"Return","src":"490:20:15"}]},"documentation":{"id":2662,"nodeType":"StructuredDocumentation","src":"349:59:15","text":" @dev Returns the largest of two numbers."},"id":2679,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:15","nodeType":"FunctionDefinition","parameters":{"id":2667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"a","nameLocation":"434:1:15","nodeType":"VariableDeclaration","scope":2679,"src":"426:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2663,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2666,"mutability":"mutable","name":"b","nameLocation":"445:1:15","nodeType":"VariableDeclaration","scope":2679,"src":"437:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2665,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:15"},"returnParameters":{"id":2670,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2669,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2679,"src":"471:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2668,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:15"},"scope":3520,"src":"413:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2696,"nodeType":"Block","src":"655:37:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2689,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"672:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2690,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"676:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2693,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"684:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:15","trueExpression":{"id":2692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"680:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2688,"id":2695,"nodeType":"Return","src":"665:20:15"}]},"documentation":{"id":2680,"nodeType":"StructuredDocumentation","src":"523:60:15","text":" @dev Returns the smallest of two numbers."},"id":2697,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:15","nodeType":"FunctionDefinition","parameters":{"id":2685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2682,"mutability":"mutable","name":"a","nameLocation":"609:1:15","nodeType":"VariableDeclaration","scope":2697,"src":"601:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2681,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2684,"mutability":"mutable","name":"b","nameLocation":"620:1:15","nodeType":"VariableDeclaration","scope":2697,"src":"612:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2683,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:15"},"returnParameters":{"id":2688,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2687,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2697,"src":"646:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2686,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:15"},"scope":3520,"src":"588:104:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2719,"nodeType":"Block","src":"876:82:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2707,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"931:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2708,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"935:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2710,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2711,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2700,"src":"941:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2712,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2702,"src":"945:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2714,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2706,"id":2718,"nodeType":"Return","src":"923:28:15"}]},"documentation":{"id":2698,"nodeType":"StructuredDocumentation","src":"698:102:15","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:15","nodeType":"FunctionDefinition","parameters":{"id":2703,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"a","nameLocation":"830:1:15","nodeType":"VariableDeclaration","scope":2720,"src":"822:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2699,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2702,"mutability":"mutable","name":"b","nameLocation":"841:1:15","nodeType":"VariableDeclaration","scope":2720,"src":"833:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2701,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:15"},"returnParameters":{"id":2706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2705,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"867:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2704,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:15"},"scope":3520,"src":"805:153:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2744,"nodeType":"Block","src":"1228:123:15","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2730,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"1316:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2734,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2723,"src":"1330:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2735,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2737,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2738,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"1339:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:15","trueExpression":{"hexValue":"30","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2729,"id":2743,"nodeType":"Return","src":"1309:35:15"}]},"documentation":{"id":2721,"nodeType":"StructuredDocumentation","src":"964:188:15","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2745,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:15","nodeType":"FunctionDefinition","parameters":{"id":2726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2723,"mutability":"mutable","name":"a","nameLocation":"1182:1:15","nodeType":"VariableDeclaration","scope":2745,"src":"1174:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2722,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2725,"mutability":"mutable","name":"b","nameLocation":"1193:1:15","nodeType":"VariableDeclaration","scope":2745,"src":"1185:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:15"},"returnParameters":{"id":2729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2728,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2745,"src":"1219:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2727,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:15"},"scope":3520,"src":"1157:194:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2867,"nodeType":"Block","src":"1765:4115:15","statements":[{"id":2866,"nodeType":"UncheckedBlock","src":"1775:4099:15","statements":[{"assignments":[2758],"declarations":[{"constant":false,"id":2758,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:15","nodeType":"VariableDeclaration","scope":2866,"src":"2096:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2757,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2759,"nodeType":"VariableDeclarationStatement","src":"2096:13:15"},{"assignments":[2761],"declarations":[{"constant":false,"id":2761,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:15","nodeType":"VariableDeclaration","scope":2866,"src":"2168:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2760,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2762,"nodeType":"VariableDeclarationStatement","src":"2168:13:15"},{"AST":{"nodeType":"YulBlock","src":"2248:157:15","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:15"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:15","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:15"},"nodeType":"YulFunctionCall","src":"2289:6:15"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:15"},"nodeType":"YulFunctionCall","src":"2276:20:15"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:15","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:15"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:15"},"nodeType":"YulFunctionCall","src":"2322:9:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:15"}]},{"nodeType":"YulAssignment","src":"2348:43:15","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:15"},"nodeType":"YulFunctionCall","src":"2361:14:15"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:15"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:15"},"nodeType":"YulFunctionCall","src":"2377:13:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:15"},"nodeType":"YulFunctionCall","src":"2357:34:15"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2758,"isOffset":false,"isSlot":false,"src":"2313:5:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"2369:5:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"2384:5:15","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"2348:5:15","valueSize":1},{"declaration":2748,"isOffset":false,"isSlot":false,"src":"2283:1:15","valueSize":1},{"declaration":2748,"isOffset":false,"isSlot":false,"src":"2326:1:15","valueSize":1},{"declaration":2750,"isOffset":false,"isSlot":false,"src":"2286:1:15","valueSize":1},{"declaration":2750,"isOffset":false,"isSlot":false,"src":"2329:1:15","valueSize":1}],"id":2763,"nodeType":"InlineAssembly","src":"2239:166:15"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2764,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2486:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2772,"nodeType":"IfStatement","src":"2482:368:15","trueBody":{"id":2771,"nodeType":"Block","src":"2498:352:15","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2767,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"2816:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2768,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"2824:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2756,"id":2770,"nodeType":"Return","src":"2809:26:15"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2774,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"2960:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2775,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"2974:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":2777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:15","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":2773,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:15","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2779,"nodeType":"ExpressionStatement","src":"2952:53:15"},{"assignments":[2781],"declarations":[{"constant":false,"id":2781,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:15","nodeType":"VariableDeclaration","scope":2866,"src":"3261:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2780,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2782,"nodeType":"VariableDeclarationStatement","src":"3261:17:15"},{"AST":{"nodeType":"YulBlock","src":"3301:291:15","statements":[{"nodeType":"YulAssignment","src":"3370:38:15","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:15"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:15"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:15"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:15"},"nodeType":"YulFunctionCall","src":"3383:25:15"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:15"}]},{"nodeType":"YulAssignment","src":"3490:41:15","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:15"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:15"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:15"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:15"},"nodeType":"YulFunctionCall","src":"3510:20:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:15"},"nodeType":"YulFunctionCall","src":"3499:32:15"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:15"}]},{"nodeType":"YulAssignment","src":"3548:30:15","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:15"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:15"},"nodeType":"YulFunctionCall","src":"3557:21:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2752,"isOffset":false,"isSlot":false,"src":"3396:11:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3524:5:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3548:5:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"3561:5:15","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"3490:5:15","valueSize":1},{"declaration":2761,"isOffset":false,"isSlot":false,"src":"3503:5:15","valueSize":1},{"declaration":2781,"isOffset":false,"isSlot":false,"src":"3370:9:15","valueSize":1},{"declaration":2781,"isOffset":false,"isSlot":false,"src":"3513:9:15","valueSize":1},{"declaration":2781,"isOffset":false,"isSlot":false,"src":"3568:9:15","valueSize":1},{"declaration":2748,"isOffset":false,"isSlot":false,"src":"3390:1:15","valueSize":1},{"declaration":2750,"isOffset":false,"isSlot":false,"src":"3393:1:15","valueSize":1}],"id":2783,"nodeType":"InlineAssembly","src":"3292:300:15"},{"assignments":[2785],"declarations":[{"constant":false,"id":2785,"mutability":"mutable","name":"twos","nameLocation":"3907:4:15","nodeType":"VariableDeclaration","scope":2866,"src":"3899:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2793,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2786,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"3914:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:15","subExpression":{"id":2787,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"3930:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2789,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2791,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:15"},{"AST":{"nodeType":"YulBlock","src":"3969:362:15","statements":[{"nodeType":"YulAssignment","src":"4034:37:15","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:15"},"nodeType":"YulFunctionCall","src":"4049:22:15"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:15"}]},{"nodeType":"YulAssignment","src":"4138:25:15","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:15"},"nodeType":"YulFunctionCall","src":"4147:16:15"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:15"}]},{"nodeType":"YulAssignment","src":"4278:39:15","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:15","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:15"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:15"},"nodeType":"YulFunctionCall","src":"4294:12:15"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:15"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:15"},"nodeType":"YulFunctionCall","src":"4290:23:15"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:15","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:15"},"nodeType":"YulFunctionCall","src":"4286:31:15"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2752,"isOffset":false,"isSlot":false,"src":"4034:11:15","valueSize":1},{"declaration":2752,"isOffset":false,"isSlot":false,"src":"4053:11:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"4138:5:15","valueSize":1},{"declaration":2758,"isOffset":false,"isSlot":false,"src":"4151:5:15","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"4066:4:15","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"4158:4:15","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"4278:4:15","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"4301:4:15","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"4308:4:15","valueSize":1}],"id":2794,"nodeType":"InlineAssembly","src":"3960:371:15"},{"expression":{"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2795,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"4397:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2796,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2761,"src":"4406:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2797,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"4414:4:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2800,"nodeType":"ExpressionStatement","src":"4397:21:15"},{"assignments":[2802],"declarations":[{"constant":false,"id":2802,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:15","nodeType":"VariableDeclaration","scope":2866,"src":"4736:15:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2801,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2809,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2804,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"4759:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2806,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2807,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:15"},{"expression":{"id":2816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2810,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"4992:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2811,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2812,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5007:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2813,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5021:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2817,"nodeType":"ExpressionStatement","src":"4992:36:15"},{"expression":{"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2818,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5061:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2820,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5076:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2821,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5090:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2825,"nodeType":"ExpressionStatement","src":"5061:36:15"},{"expression":{"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2826,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5131:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2827,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2828,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5146:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2829,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5160:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2833,"nodeType":"ExpressionStatement","src":"5131:36:15"},{"expression":{"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2834,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5201:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2836,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5216:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2837,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5230:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2841,"nodeType":"ExpressionStatement","src":"5201:36:15"},{"expression":{"id":2848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2842,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5271:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2844,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5286:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2845,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5300:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2849,"nodeType":"ExpressionStatement","src":"5271:36:15"},{"expression":{"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2850,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5342:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2852,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"5357:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2853,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5371:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2857,"nodeType":"ExpressionStatement","src":"5342:36:15"},{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2858,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"5812:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2859,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2758,"src":"5821:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2860,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2802,"src":"5829:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"5812:24:15"},{"expression":{"id":2864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2755,"src":"5857:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2756,"id":2865,"nodeType":"Return","src":"5850:13:15"}]}]},"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"1357:305:15","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2868,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:15","nodeType":"FunctionDefinition","parameters":{"id":2753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"x","nameLocation":"1691:1:15","nodeType":"VariableDeclaration","scope":2868,"src":"1683:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2750,"mutability":"mutable","name":"y","nameLocation":"1702:1:15","nodeType":"VariableDeclaration","scope":2868,"src":"1694:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2749,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2752,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:15","nodeType":"VariableDeclaration","scope":2868,"src":"1705:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:15"},"returnParameters":{"id":2756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2755,"mutability":"mutable","name":"result","nameLocation":"1757:6:15","nodeType":"VariableDeclaration","scope":2868,"src":"1749:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2754,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:15"},"scope":3520,"src":"1667:4213:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2911,"nodeType":"Block","src":"6122:189:15","statements":[{"assignments":[2884],"declarations":[{"constant":false,"id":2884,"mutability":"mutable","name":"result","nameLocation":"6140:6:15","nodeType":"VariableDeclaration","scope":2911,"src":"6132:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2890,"initialValue":{"arguments":[{"id":2886,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"6156:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2887,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"6159:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2888,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6162:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2885,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2868,2912],"referencedDeclaration":2868,"src":"6149:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:15"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2891,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"6188:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2892,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"6200:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2661_$","typeString":"type(enum Math.Rounding)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:15","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"6200:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"src":"6188:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2896,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"6222:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2897,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"6225:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2898,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"6228:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2895,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:15","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2908,"nodeType":"IfStatement","src":"6184:98:15","trueBody":{"id":2907,"nodeType":"Block","src":"6246:36:15","statements":[{"expression":{"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2903,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"6260:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2906,"nodeType":"ExpressionStatement","src":"6260:11:15"}]}},{"expression":{"id":2909,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"6298:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2882,"id":2910,"nodeType":"Return","src":"6291:13:15"}]},"documentation":{"id":2869,"nodeType":"StructuredDocumentation","src":"5886:121:15","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2912,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:15","nodeType":"FunctionDefinition","parameters":{"id":2879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2871,"mutability":"mutable","name":"x","nameLocation":"6036:1:15","nodeType":"VariableDeclaration","scope":2912,"src":"6028:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2873,"mutability":"mutable","name":"y","nameLocation":"6047:1:15","nodeType":"VariableDeclaration","scope":2912,"src":"6039:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2875,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:15","nodeType":"VariableDeclaration","scope":2912,"src":"6050:19:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2874,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2878,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:15","nodeType":"VariableDeclaration","scope":2912,"src":"6071:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"typeName":{"id":2877,"nodeType":"UserDefinedTypeName","pathNode":{"id":2876,"name":"Rounding","nameLocations":["6071:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2661,"src":"6071:8:15"},"referencedDeclaration":2661,"src":"6071:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:15"},"returnParameters":{"id":2882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2881,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2912,"src":"6113:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2880,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:15"},"scope":3520,"src":"6012:299:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3023,"nodeType":"Block","src":"6587:1585:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2920,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"6601:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2926,"nodeType":"IfStatement","src":"6597:45:15","trueBody":{"id":2925,"nodeType":"Block","src":"6609:33:15","statements":[{"expression":{"hexValue":"30","id":2923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2919,"id":2924,"nodeType":"Return","src":"6623:8:15"}]}},{"assignments":[2928],"declarations":[{"constant":false,"id":2928,"mutability":"mutable","name":"result","nameLocation":"7329:6:15","nodeType":"VariableDeclaration","scope":3023,"src":"7321:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2927,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2937,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7349:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2930,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3192,3228],"referencedDeclaration":3192,"src":"7344:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:15"},{"id":3022,"nodeType":"UncheckedBlock","src":"7758:408:15","statements":[{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2938,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7782:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2939,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7792:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2940,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7801:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7805:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2944,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2948,"nodeType":"ExpressionStatement","src":"7782:35:15"},{"expression":{"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2949,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7831:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2950,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7841:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2951,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7850:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7854:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2955,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ExpressionStatement","src":"7831:35:15"},{"expression":{"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7880:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2961,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7890:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2962,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7899:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2963,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7903:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2966,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2970,"nodeType":"ExpressionStatement","src":"7880:35:15"},{"expression":{"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2971,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7929:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2972,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7939:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2973,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7948:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2974,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7952:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2977,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2981,"nodeType":"ExpressionStatement","src":"7929:35:15"},{"expression":{"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2982,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7978:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2983,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"7988:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2984,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"7997:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2985,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8001:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2988,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2992,"nodeType":"ExpressionStatement","src":"7978:35:15"},{"expression":{"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2993,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8027:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8037:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2995,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"8046:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2996,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8050:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2999,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3003,"nodeType":"ExpressionStatement","src":"8027:35:15"},{"expression":{"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3004,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8076:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3005,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8086:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3006,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"8095:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3007,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8099:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3010,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3011,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3014,"nodeType":"ExpressionStatement","src":"8076:35:15"},{"expression":{"arguments":[{"id":3016,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8136:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3017,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2915,"src":"8144:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3018,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2928,"src":"8148:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3015,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2697,"src":"8132:3:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2919,"id":3021,"nodeType":"Return","src":"8125:30:15"}]}]},"documentation":{"id":2913,"nodeType":"StructuredDocumentation","src":"6317:208:15","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3024,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:15","nodeType":"FunctionDefinition","parameters":{"id":2916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2915,"mutability":"mutable","name":"a","nameLocation":"6552:1:15","nodeType":"VariableDeclaration","scope":3024,"src":"6544:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2914,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:15"},"returnParameters":{"id":2919,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2918,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3024,"src":"6578:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2917,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:15"},"scope":3520,"src":"6530:1642:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3059,"nodeType":"Block","src":"8348:161:15","statements":[{"id":3058,"nodeType":"UncheckedBlock","src":"8358:145:15","statements":[{"assignments":[3036],"declarations":[{"constant":false,"id":3036,"mutability":"mutable","name":"result","nameLocation":"8390:6:15","nodeType":"VariableDeclaration","scope":3058,"src":"8382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3035,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3040,"initialValue":{"arguments":[{"id":3038,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"8404:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3037,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3024,3060],"referencedDeclaration":3024,"src":"8399:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3041,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3036,"src":"8427:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3042,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3030,"src":"8437:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3043,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"8449:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2661_$","typeString":"type(enum Math.Rounding)"}},"id":3044,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:15","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"8449:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"src":"8437:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3046,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3036,"src":"8464:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3047,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3036,"src":"8473:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3049,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3027,"src":"8482:1:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3053,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:15","trueExpression":{"hexValue":"31","id":3052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3055,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3034,"id":3057,"nodeType":"Return","src":"8420:72:15"}]}]},"documentation":{"id":3025,"nodeType":"StructuredDocumentation","src":"8178:89:15","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3060,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:15","nodeType":"FunctionDefinition","parameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3027,"mutability":"mutable","name":"a","nameLocation":"8294:1:15","nodeType":"VariableDeclaration","scope":3060,"src":"8286:9:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3026,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3030,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:15","nodeType":"VariableDeclaration","scope":3060,"src":"8297:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"typeName":{"id":3029,"nodeType":"UserDefinedTypeName","pathNode":{"id":3028,"name":"Rounding","nameLocations":["8297:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2661,"src":"8297:8:15"},"referencedDeclaration":2661,"src":"8297:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:15"},"returnParameters":{"id":3034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3033,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3060,"src":"8339:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3032,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:15"},"scope":3520,"src":"8272:237:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3191,"nodeType":"Block","src":"8694:922:15","statements":[{"assignments":[3069],"declarations":[{"constant":false,"id":3069,"mutability":"mutable","name":"result","nameLocation":"8712:6:15","nodeType":"VariableDeclaration","scope":3191,"src":"8704:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3068,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3071,"initialValue":{"hexValue":"30","id":3070,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:15"},{"id":3188,"nodeType":"UncheckedBlock","src":"8732:855:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3072,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"8760:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3086,"nodeType":"IfStatement","src":"8756:99:15","trueBody":{"id":3085,"nodeType":"Block","src":"8778:77:15","statements":[{"expression":{"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3077,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"8796:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3080,"nodeType":"ExpressionStatement","src":"8796:13:15"},{"expression":{"id":3083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3081,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"8827:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3084,"nodeType":"ExpressionStatement","src":"8827:13:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3087,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"8872:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3101,"nodeType":"IfStatement","src":"8868:96:15","trueBody":{"id":3100,"nodeType":"Block","src":"8889:75:15","statements":[{"expression":{"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3092,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"8907:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3095,"nodeType":"ExpressionStatement","src":"8907:12:15"},{"expression":{"id":3098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3096,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"8937:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3099,"nodeType":"ExpressionStatement","src":"8937:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3102,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"8981:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3116,"nodeType":"IfStatement","src":"8977:96:15","trueBody":{"id":3115,"nodeType":"Block","src":"8998:75:15","statements":[{"expression":{"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3107,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9016:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3110,"nodeType":"ExpressionStatement","src":"9016:12:15"},{"expression":{"id":3113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3111,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9046:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3114,"nodeType":"ExpressionStatement","src":"9046:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3117,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9090:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3131,"nodeType":"IfStatement","src":"9086:96:15","trueBody":{"id":3130,"nodeType":"Block","src":"9107:75:15","statements":[{"expression":{"id":3124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3122,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9125:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3123,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3125,"nodeType":"ExpressionStatement","src":"9125:12:15"},{"expression":{"id":3128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3126,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9155:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3129,"nodeType":"ExpressionStatement","src":"9155:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3132,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9199:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3146,"nodeType":"IfStatement","src":"9195:93:15","trueBody":{"id":3145,"nodeType":"Block","src":"9215:73:15","statements":[{"expression":{"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3137,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9233:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3138,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3140,"nodeType":"ExpressionStatement","src":"9233:11:15"},{"expression":{"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3141,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9262:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3144,"nodeType":"ExpressionStatement","src":"9262:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3147,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9305:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3150,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3161,"nodeType":"IfStatement","src":"9301:93:15","trueBody":{"id":3160,"nodeType":"Block","src":"9321:73:15","statements":[{"expression":{"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3152,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9339:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3155,"nodeType":"ExpressionStatement","src":"9339:11:15"},{"expression":{"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3156,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9368:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3157,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3159,"nodeType":"ExpressionStatement","src":"9368:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3162,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9411:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3176,"nodeType":"IfStatement","src":"9407:93:15","trueBody":{"id":3175,"nodeType":"Block","src":"9427:73:15","statements":[{"expression":{"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3167,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9445:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3170,"nodeType":"ExpressionStatement","src":"9445:11:15"},{"expression":{"id":3173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3171,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9474:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3174,"nodeType":"ExpressionStatement","src":"9474:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3177,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"9517:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3187,"nodeType":"IfStatement","src":"9513:64:15","trueBody":{"id":3186,"nodeType":"Block","src":"9533:44:15","statements":[{"expression":{"id":3184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3182,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9551:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3183,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3185,"nodeType":"ExpressionStatement","src":"9551:11:15"}]}}]},{"expression":{"id":3189,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3069,"src":"9603:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3067,"id":3190,"nodeType":"Return","src":"9596:13:15"}]},"documentation":{"id":3061,"nodeType":"StructuredDocumentation","src":"8515:113:15","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3192,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:15","nodeType":"FunctionDefinition","parameters":{"id":3064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3063,"mutability":"mutable","name":"value","nameLocation":"8655:5:15","nodeType":"VariableDeclaration","scope":3192,"src":"8647:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3062,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:15"},"returnParameters":{"id":3067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3192,"src":"8685:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3065,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:15"},"scope":3520,"src":"8633:983:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3227,"nodeType":"Block","src":"9849:165:15","statements":[{"id":3226,"nodeType":"UncheckedBlock","src":"9859:149:15","statements":[{"assignments":[3204],"declarations":[{"constant":false,"id":3204,"mutability":"mutable","name":"result","nameLocation":"9891:6:15","nodeType":"VariableDeclaration","scope":3226,"src":"9883:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3203,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3208,"initialValue":{"arguments":[{"id":3206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"9905:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3205,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3192,3228],"referencedDeclaration":3192,"src":"9900:4:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3209,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"9932:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"id":3213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3210,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3198,"src":"9942:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3211,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"9954:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2661_$","typeString":"type(enum Math.Rounding)"}},"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:15","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"9954:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"src":"9942:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3215,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"9974:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3217,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"9983:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:15","trueExpression":{"hexValue":"31","id":3220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3223,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3202,"id":3225,"nodeType":"Return","src":"9925:72:15"}]}]},"documentation":{"id":3193,"nodeType":"StructuredDocumentation","src":"9622:142:15","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3228,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:15","nodeType":"FunctionDefinition","parameters":{"id":3199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3195,"mutability":"mutable","name":"value","nameLocation":"9791:5:15","nodeType":"VariableDeclaration","scope":3228,"src":"9783:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3198,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:15","nodeType":"VariableDeclaration","scope":3228,"src":"9798:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"typeName":{"id":3197,"nodeType":"UserDefinedTypeName","pathNode":{"id":3196,"name":"Rounding","nameLocations":["9798:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2661,"src":"9798:8:15"},"referencedDeclaration":2661,"src":"9798:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:15"},"returnParameters":{"id":3202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3201,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3228,"src":"9840:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:15"},"scope":3520,"src":"9769:245:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3356,"nodeType":"Block","src":"10201:854:15","statements":[{"assignments":[3237],"declarations":[{"constant":false,"id":3237,"mutability":"mutable","name":"result","nameLocation":"10219:6:15","nodeType":"VariableDeclaration","scope":3356,"src":"10211:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3236,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3239,"initialValue":{"hexValue":"30","id":3238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:15"},{"id":3353,"nodeType":"UncheckedBlock","src":"10239:787:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10267:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3242,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3256,"nodeType":"IfStatement","src":"10263:103:15","trueBody":{"id":3255,"nodeType":"Block","src":"10286:80:15","statements":[{"expression":{"id":3249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3245,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10304:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3246,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3247,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3250,"nodeType":"ExpressionStatement","src":"10304:17:15"},{"expression":{"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3251,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10339:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3254,"nodeType":"ExpressionStatement","src":"10339:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3257,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10383:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3258,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3273,"nodeType":"IfStatement","src":"10379:103:15","trueBody":{"id":3272,"nodeType":"Block","src":"10402:80:15","statements":[{"expression":{"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3262,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10420:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3263,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3267,"nodeType":"ExpressionStatement","src":"10420:17:15"},{"expression":{"id":3270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3268,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10455:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3269,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3271,"nodeType":"ExpressionStatement","src":"10455:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3274,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10499:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3290,"nodeType":"IfStatement","src":"10495:103:15","trueBody":{"id":3289,"nodeType":"Block","src":"10518:80:15","statements":[{"expression":{"id":3283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3279,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10536:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:15","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3284,"nodeType":"ExpressionStatement","src":"10536:17:15"},{"expression":{"id":3287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3285,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10571:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3288,"nodeType":"ExpressionStatement","src":"10571:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3291,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10615:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3294,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3292,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3307,"nodeType":"IfStatement","src":"10611:100:15","trueBody":{"id":3306,"nodeType":"Block","src":"10633:78:15","statements":[{"expression":{"id":3300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3296,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10651:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3299,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3298,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3301,"nodeType":"ExpressionStatement","src":"10651:16:15"},{"expression":{"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10685:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3305,"nodeType":"ExpressionStatement","src":"10685:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3308,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10728:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3311,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3324,"nodeType":"IfStatement","src":"10724:100:15","trueBody":{"id":3323,"nodeType":"Block","src":"10746:78:15","statements":[{"expression":{"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3313,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10764:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3316,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3318,"nodeType":"ExpressionStatement","src":"10764:16:15"},{"expression":{"id":3321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3319,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10798:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3322,"nodeType":"ExpressionStatement","src":"10798:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3325,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10841:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3328,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3341,"nodeType":"IfStatement","src":"10837:100:15","trueBody":{"id":3340,"nodeType":"Block","src":"10859:78:15","statements":[{"expression":{"id":3334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3330,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10877:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":3333,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":3332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:15","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3335,"nodeType":"ExpressionStatement","src":"10877:16:15"},{"expression":{"id":3338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3336,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10911:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3339,"nodeType":"ExpressionStatement","src":"10911:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3342,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"10954:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":3345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3343,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":3344,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3352,"nodeType":"IfStatement","src":"10950:66:15","trueBody":{"id":3351,"nodeType":"Block","src":"10972:44:15","statements":[{"expression":{"id":3349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3347,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"10990:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3350,"nodeType":"ExpressionStatement","src":"10990:11:15"}]}}]},{"expression":{"id":3354,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3237,"src":"11042:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3235,"id":3355,"nodeType":"Return","src":"11035:13:15"}]},"documentation":{"id":3229,"nodeType":"StructuredDocumentation","src":"10020:114:15","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3357,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:15","nodeType":"FunctionDefinition","parameters":{"id":3232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3231,"mutability":"mutable","name":"value","nameLocation":"10162:5:15","nodeType":"VariableDeclaration","scope":3357,"src":"10154:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3230,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:15"},"returnParameters":{"id":3235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3234,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3357,"src":"10192:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3233,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:15"},"scope":3520,"src":"10139:916:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3392,"nodeType":"Block","src":"11290:167:15","statements":[{"id":3391,"nodeType":"UncheckedBlock","src":"11300:151:15","statements":[{"assignments":[3369],"declarations":[{"constant":false,"id":3369,"mutability":"mutable","name":"result","nameLocation":"11332:6:15","nodeType":"VariableDeclaration","scope":3391,"src":"11324:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3368,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3373,"initialValue":{"arguments":[{"id":3371,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"11347:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3370,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[3357,3393],"referencedDeclaration":3357,"src":"11341:5:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3374,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11374:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"id":3378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3375,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"11384:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3376,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"11396:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2661_$","typeString":"type(enum Math.Rounding)"}},"id":3377,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:15","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"11396:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"src":"11384:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:15","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":3380,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3369,"src":"11417:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3382,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"11426:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3386,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:15","trueExpression":{"hexValue":"31","id":3385,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3388,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3367,"id":3390,"nodeType":"Return","src":"11367:73:15"}]}]},"documentation":{"id":3358,"nodeType":"StructuredDocumentation","src":"11061:143:15","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3393,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:15","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3360,"mutability":"mutable","name":"value","nameLocation":"11232:5:15","nodeType":"VariableDeclaration","scope":3393,"src":"11224:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3359,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:15","nodeType":"VariableDeclaration","scope":3393,"src":"11239:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"typeName":{"id":3362,"nodeType":"UserDefinedTypeName","pathNode":{"id":3361,"name":"Rounding","nameLocations":["11239:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2661,"src":"11239:8:15"},"referencedDeclaration":2661,"src":"11239:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:15"},"returnParameters":{"id":3367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3366,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3393,"src":"11281:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3365,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:15"},"scope":3520,"src":"11209:248:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3479,"nodeType":"Block","src":"11771:600:15","statements":[{"assignments":[3402],"declarations":[{"constant":false,"id":3402,"mutability":"mutable","name":"result","nameLocation":"11789:6:15","nodeType":"VariableDeclaration","scope":3479,"src":"11781:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3401,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3404,"initialValue":{"hexValue":"30","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:15"},{"id":3476,"nodeType":"UncheckedBlock","src":"11809:533:15","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3405,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"11837:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3419,"nodeType":"IfStatement","src":"11833:98:15","trueBody":{"id":3418,"nodeType":"Block","src":"11855:76:15","statements":[{"expression":{"id":3412,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3410,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"11873:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3411,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:15","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3413,"nodeType":"ExpressionStatement","src":"11873:13:15"},{"expression":{"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3414,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"11904:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3417,"nodeType":"ExpressionStatement","src":"11904:12:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3420,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"11948:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3434,"nodeType":"IfStatement","src":"11944:95:15","trueBody":{"id":3433,"nodeType":"Block","src":"11965:74:15","statements":[{"expression":{"id":3427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3425,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"11983:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:15","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3428,"nodeType":"ExpressionStatement","src":"11983:12:15"},{"expression":{"id":3431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3429,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12013:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3432,"nodeType":"ExpressionStatement","src":"12013:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3435,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12056:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3449,"nodeType":"IfStatement","src":"12052:95:15","trueBody":{"id":3448,"nodeType":"Block","src":"12073:74:15","statements":[{"expression":{"id":3442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3440,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12091:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:15","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3443,"nodeType":"ExpressionStatement","src":"12091:12:15"},{"expression":{"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3444,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12121:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:15","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3447,"nodeType":"ExpressionStatement","src":"12121:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3450,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12164:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3464,"nodeType":"IfStatement","src":"12160:95:15","trueBody":{"id":3463,"nodeType":"Block","src":"12181:74:15","statements":[{"expression":{"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3455,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12199:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3456,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:15","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3458,"nodeType":"ExpressionStatement","src":"12199:12:15"},{"expression":{"id":3461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3459,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12229:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:15","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3462,"nodeType":"ExpressionStatement","src":"12229:11:15"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3469,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3465,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"12272:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:15","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3468,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3475,"nodeType":"IfStatement","src":"12268:64:15","trueBody":{"id":3474,"nodeType":"Block","src":"12288:44:15","statements":[{"expression":{"id":3472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3470,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12306:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3473,"nodeType":"ExpressionStatement","src":"12306:11:15"}]}}]},{"expression":{"id":3477,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3402,"src":"12358:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3400,"id":3478,"nodeType":"Return","src":"12351:13:15"}]},"documentation":{"id":3394,"nodeType":"StructuredDocumentation","src":"11463:240:15","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":3480,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:15","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3396,"mutability":"mutable","name":"value","nameLocation":"11732:5:15","nodeType":"VariableDeclaration","scope":3480,"src":"11724:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3395,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:15"},"returnParameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3399,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3480,"src":"11762:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3398,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:15"},"scope":3520,"src":"11708:663:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3518,"nodeType":"Block","src":"12608:174:15","statements":[{"id":3517,"nodeType":"UncheckedBlock","src":"12618:158:15","statements":[{"assignments":[3492],"declarations":[{"constant":false,"id":3492,"mutability":"mutable","name":"result","nameLocation":"12650:6:15","nodeType":"VariableDeclaration","scope":3517,"src":"12642:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3491,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3496,"initialValue":{"arguments":[{"id":3494,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"12666:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3493,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[3480,3519],"referencedDeclaration":3480,"src":"12659:6:15","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:15"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3497,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"12693:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"id":3501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3498,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3486,"src":"12703:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3499,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2661,"src":"12715:8:15","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2661_$","typeString":"type(enum Math.Rounding)"}},"id":3500,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:15","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2659,"src":"12715:11:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"src":"12703:23:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3492,"src":"12736:6:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":3504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:15","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3506,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3483,"src":"12751:5:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3512,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:15","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:15","trueExpression":{"hexValue":"31","id":3511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:15","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3514,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:15","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3490,"id":3516,"nodeType":"Return","src":"12686:79:15"}]}]},"documentation":{"id":3481,"nodeType":"StructuredDocumentation","src":"12377:144:15","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3519,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:15","nodeType":"FunctionDefinition","parameters":{"id":3487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3483,"mutability":"mutable","name":"value","nameLocation":"12550:5:15","nodeType":"VariableDeclaration","scope":3519,"src":"12542:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3482,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3486,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:15","nodeType":"VariableDeclaration","scope":3519,"src":"12557:17:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"},"typeName":{"id":3485,"nodeType":"UserDefinedTypeName","pathNode":{"id":3484,"name":"Rounding","nameLocations":["12557:8:15"],"nodeType":"IdentifierPath","referencedDeclaration":2661,"src":"12557:8:15"},"referencedDeclaration":2661,"src":"12557:8:15","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2661","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:15"},"returnParameters":{"id":3490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3489,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3519,"src":"12599:7:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3488,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:15"},"scope":3520,"src":"12526:256:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3521,"src":"202:12582:15","usedErrors":[],"usedEvents":[]}],"src":"103:12682:15"},"id":15},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[3625]},"id":3626,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3522,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":3523,"nodeType":"StructuredDocumentation","src":"134:80:16","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":3625,"linearizedBaseContracts":[3625],"name":"SignedMath","nameLocation":"223:10:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":3540,"nodeType":"Block","src":"375:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3533,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"392:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3534,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"396:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3537,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3528,"src":"404:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:16","trueExpression":{"id":3536,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3526,"src":"400:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3532,"id":3539,"nodeType":"Return","src":"385:20:16"}]},"documentation":{"id":3524,"nodeType":"StructuredDocumentation","src":"240:66:16","text":" @dev Returns the largest of two signed numbers."},"id":3541,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:16","nodeType":"FunctionDefinition","parameters":{"id":3529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3526,"mutability":"mutable","name":"a","nameLocation":"331:1:16","nodeType":"VariableDeclaration","scope":3541,"src":"324:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3525,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3528,"mutability":"mutable","name":"b","nameLocation":"341:1:16","nodeType":"VariableDeclaration","scope":3541,"src":"334:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3527,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:16"},"returnParameters":{"id":3532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3531,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3541,"src":"367:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3530,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:16"},"scope":3625,"src":"311:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3558,"nodeType":"Block","src":"554:37:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3551,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"571:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3552,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"575:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3555,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"583:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:16","trueExpression":{"id":3554,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3544,"src":"579:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3550,"id":3557,"nodeType":"Return","src":"564:20:16"}]},"documentation":{"id":3542,"nodeType":"StructuredDocumentation","src":"418:67:16","text":" @dev Returns the smallest of two signed numbers."},"id":3559,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:16","nodeType":"FunctionDefinition","parameters":{"id":3547,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3544,"mutability":"mutable","name":"a","nameLocation":"510:1:16","nodeType":"VariableDeclaration","scope":3559,"src":"503:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3543,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3546,"mutability":"mutable","name":"b","nameLocation":"520:1:16","nodeType":"VariableDeclaration","scope":3559,"src":"513:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3545,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:16"},"returnParameters":{"id":3550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3549,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3559,"src":"546:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3548,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:16"},"scope":3625,"src":"490:101:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3602,"nodeType":"Block","src":"796:162:16","statements":[{"assignments":[3570],"declarations":[{"constant":false,"id":3570,"mutability":"mutable","name":"x","nameLocation":"865:1:16","nodeType":"VariableDeclaration","scope":3602,"src":"858:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3569,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":3583,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3571,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"870:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3572,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"874:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3574,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3575,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"881:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3576,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"885:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3578,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3581,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:16"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3584,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"910:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3589,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3570,"src":"930:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3588,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3587,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:16","typeDescriptions":{}}},"id":3590,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":3591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:16","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3586,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":3585,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:16","typeDescriptions":{}}},"id":3593,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3594,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3562,"src":"944:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3595,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3564,"src":"948:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":3599,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":3568,"id":3601,"nodeType":"Return","src":"903:48:16"}]},"documentation":{"id":3560,"nodeType":"StructuredDocumentation","src":"597:126:16","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":3603,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:16","nodeType":"FunctionDefinition","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3562,"mutability":"mutable","name":"a","nameLocation":"752:1:16","nodeType":"VariableDeclaration","scope":3603,"src":"745:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3561,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"b","nameLocation":"762:1:16","nodeType":"VariableDeclaration","scope":3603,"src":"755:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3563,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:16"},"returnParameters":{"id":3568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3567,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3603,"src":"788:6:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3566,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:16"},"scope":3625,"src":"728:230:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3623,"nodeType":"Block","src":"1102:158:16","statements":[{"id":3622,"nodeType":"UncheckedBlock","src":"1112:142:16","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":3615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3613,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"1227:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":3614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:16","subExpression":{"id":3617,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"1241:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":3619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:16","trueExpression":{"id":3616,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3606,"src":"1236:1:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":3612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3611,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:16","typeDescriptions":{}}},"id":3620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3610,"id":3621,"nodeType":"Return","src":"1212:31:16"}]}]},"documentation":{"id":3604,"nodeType":"StructuredDocumentation","src":"964:78:16","text":" @dev Returns the absolute unsigned value of a signed value."},"id":3624,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:16","nodeType":"FunctionDefinition","parameters":{"id":3607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3606,"mutability":"mutable","name":"n","nameLocation":"1067:1:16","nodeType":"VariableDeclaration","scope":3624,"src":"1060:8:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":3605,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:16"},"returnParameters":{"id":3610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3609,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3624,"src":"1093:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3608,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:16"},"scope":3625,"src":"1047:213:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3626,"src":"215:1047:16","usedErrors":[],"usedEvents":[]}],"src":"109:1154:16"},"id":16},"src/CrossChainBridge.sol":{"ast":{"absolutePath":"src/CrossChainBridge.sol","exportedSymbols":{"AccessControl":[315],"Address":[1993],"Context":[2023],"CrossChainBridge":[4537],"ECDSA":[2618],"ERC165":[2642],"IAccessControl":[388],"IERC165":[2654],"IERC20":[1226],"IERC20Permit":[1287],"IYieldStrategy":[8169],"Math":[3520],"Pausable":[496],"ReentrancyGuard":[561],"SafeERC20":[1663],"SignedMath":[3625],"Strings":[2252],"YieldEscrow":[6136],"YieldVault":[7988]},"id":4538,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3627,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":1227,"src":"58:56:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3629,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":1664,"src":"115:65:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":3630,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":562,"src":"181:62:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":3631,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":316,"src":"244:58:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":3632,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":497,"src":"303:55:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"src/interfaces/IYieldStrategy.sol","file":"./interfaces/IYieldStrategy.sol","id":3633,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":8170,"src":"359:41:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"src/YieldEscrow.sol","file":"./YieldEscrow.sol","id":3634,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":6137,"src":"401:27:17","symbolAliases":[],"unitAlias":""},{"absolutePath":"src/YieldVault.sol","file":"./YieldVault.sol","id":3635,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4538,"sourceUnit":7989,"src":"429:26:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3637,"name":"ReentrancyGuard","nameLocations":["663:15:17"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"663:15:17"},"id":3638,"nodeType":"InheritanceSpecifier","src":"663:15:17"},{"baseName":{"id":3639,"name":"AccessControl","nameLocations":["680:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"680:13:17"},"id":3640,"nodeType":"InheritanceSpecifier","src":"680:13:17"},{"baseName":{"id":3641,"name":"Pausable","nameLocations":["695:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":496,"src":"695:8:17"},"id":3642,"nodeType":"InheritanceSpecifier","src":"695:8:17"}],"canonicalName":"CrossChainBridge","contractDependencies":[],"contractKind":"contract","documentation":{"id":3636,"nodeType":"StructuredDocumentation","src":"457:176:17","text":" @title CrossChainBridge\n @dev Manages cross-chain payment transfers with yield preservation\n @notice Supports Ethereum, XRPL, Solana, Polygon, Arbitrum, and Base"},"fullyImplemented":true,"id":4537,"linearizedBaseContracts":[4537,496,315,2642,2654,388,2023,561],"name":"CrossChainBridge","nameLocation":"643:16:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3646,"libraryName":{"id":3643,"name":"SafeERC20","nameLocations":["716:9:17"],"nodeType":"IdentifierPath","referencedDeclaration":1663,"src":"716:9:17"},"nodeType":"UsingForDirective","src":"710:27:17","typeName":{"id":3645,"nodeType":"UserDefinedTypeName","pathNode":{"id":3644,"name":"IERC20","nameLocations":["730:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"730:6:17"},"referencedDeclaration":1226,"src":"730:6:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}},{"constant":true,"functionSelector":"4be40fd1","id":3651,"mutability":"constant","name":"BRIDGE_OPERATOR_ROLE","nameLocation":"767:20:17","nodeType":"VariableDeclaration","scope":4537,"src":"743:80:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"743:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4252494447455f4f50455241544f525f524f4c45","id":3649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"800:22:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b1568","typeString":"literal_string \"BRIDGE_OPERATOR_ROLE\""},"value":"BRIDGE_OPERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b1568","typeString":"literal_string \"BRIDGE_OPERATOR_ROLE\""}],"id":3648,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"790:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"c49baebe","id":3656,"mutability":"constant","name":"VALIDATOR_ROLE","nameLocation":"853:14:17","nodeType":"VariableDeclaration","scope":4537,"src":"829:68:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3652,"name":"bytes32","nodeType":"ElementaryTypeName","src":"829:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"56414c494441544f525f524f4c45","id":3654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"880:16:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926","typeString":"literal_string \"VALIDATOR_ROLE\""},"value":"VALIDATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c98926","typeString":"literal_string \"VALIDATOR_ROLE\""}],"id":3653,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"870:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"functionSelector":"53e589ac","id":3659,"mutability":"immutable","name":"yieldEscrow","nameLocation":"933:11:17","nodeType":"VariableDeclaration","scope":4537,"src":"904:40:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"},"typeName":{"id":3658,"nodeType":"UserDefinedTypeName","pathNode":{"id":3657,"name":"YieldEscrow","nameLocations":["904:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":6136,"src":"904:11:17"},"referencedDeclaration":6136,"src":"904:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}},"visibility":"public"},{"constant":false,"functionSelector":"a7f8a5e2","id":3662,"mutability":"immutable","name":"yieldVault","nameLocation":"978:10:17","nodeType":"VariableDeclaration","scope":4537,"src":"950:38:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"},"typeName":{"id":3661,"nodeType":"UserDefinedTypeName","pathNode":{"id":3660,"name":"YieldVault","nameLocations":["950:10:17"],"nodeType":"IdentifierPath","referencedDeclaration":7988,"src":"950:10:17"},"referencedDeclaration":7988,"src":"950:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}},"visibility":"public"},{"constant":true,"functionSelector":"1dac56d3","id":3665,"mutability":"constant","name":"ETHEREUM_CHAIN_ID","nameLocation":"1044:17:17","nodeType":"VariableDeclaration","scope":4537,"src":"1020:45:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3663,"name":"uint256","nodeType":"ElementaryTypeName","src":"1020:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1064:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"48bf1c51","id":3668,"mutability":"constant","name":"XRPL_CHAIN_ID","nameLocation":"1095:13:17","nodeType":"VariableDeclaration","scope":4537,"src":"1071:41:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3666,"name":"uint256","nodeType":"ElementaryTypeName","src":"1071:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":3667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1111:1:17","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":true,"functionSelector":"067bd07a","id":3671,"mutability":"constant","name":"SOLANA_CHAIN_ID","nameLocation":"1142:15:17","nodeType":"VariableDeclaration","scope":4537,"src":"1118:43:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3669,"name":"uint256","nodeType":"ElementaryTypeName","src":"1118:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":3670,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1160:1:17","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"20eb5632","id":3674,"mutability":"constant","name":"POLYGON_CHAIN_ID","nameLocation":"1191:16:17","nodeType":"VariableDeclaration","scope":4537,"src":"1167:46:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3672,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313337","id":3673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1210:3:17","typeDescriptions":{"typeIdentifier":"t_rational_137_by_1","typeString":"int_const 137"},"value":"137"},"visibility":"public"},{"constant":true,"functionSelector":"cdcdd548","id":3677,"mutability":"constant","name":"ARBITRUM_CHAIN_ID","nameLocation":"1243:17:17","nodeType":"VariableDeclaration","scope":4537,"src":"1219:49:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3675,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3432313631","id":3676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1263:5:17","typeDescriptions":{"typeIdentifier":"t_rational_42161_by_1","typeString":"int_const 42161"},"value":"42161"},"visibility":"public"},{"constant":true,"functionSelector":"efc21e3f","id":3680,"mutability":"constant","name":"BASE_CHAIN_ID","nameLocation":"1298:13:17","nodeType":"VariableDeclaration","scope":4537,"src":"1274:44:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3678,"name":"uint256","nodeType":"ElementaryTypeName","src":"1274:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"38343533","id":3679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1314:4:17","typeDescriptions":{"typeIdentifier":"t_rational_8453_by_1","typeString":"int_const 8453"},"value":"8453"},"visibility":"public"},{"canonicalName":"CrossChainBridge.BridgeTransaction","id":3702,"members":[{"constant":false,"id":3682,"mutability":"mutable","name":"sender","nameLocation":"1404:6:17","nodeType":"VariableDeclaration","scope":3702,"src":"1396:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"1396:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3684,"mutability":"mutable","name":"recipient","nameLocation":"1428:9:17","nodeType":"VariableDeclaration","scope":3702,"src":"1420:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3683,"name":"address","nodeType":"ElementaryTypeName","src":"1420:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3686,"mutability":"mutable","name":"amount","nameLocation":"1455:6:17","nodeType":"VariableDeclaration","scope":3702,"src":"1447:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3685,"name":"uint256","nodeType":"ElementaryTypeName","src":"1447:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3688,"mutability":"mutable","name":"token","nameLocation":"1479:5:17","nodeType":"VariableDeclaration","scope":3702,"src":"1471:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3687,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3690,"mutability":"mutable","name":"sourceChainId","nameLocation":"1502:13:17","nodeType":"VariableDeclaration","scope":3702,"src":"1494:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3689,"name":"uint256","nodeType":"ElementaryTypeName","src":"1494:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3692,"mutability":"mutable","name":"destinationChainId","nameLocation":"1533:18:17","nodeType":"VariableDeclaration","scope":3702,"src":"1525:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3691,"name":"uint256","nodeType":"ElementaryTypeName","src":"1525:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3694,"mutability":"mutable","name":"timestamp","nameLocation":"1569:9:17","nodeType":"VariableDeclaration","scope":3702,"src":"1561:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"1561:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3696,"mutability":"mutable","name":"accruedYield","nameLocation":"1596:12:17","nodeType":"VariableDeclaration","scope":3702,"src":"1588:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3695,"name":"uint256","nodeType":"ElementaryTypeName","src":"1588:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3698,"mutability":"mutable","name":"transactionHash","nameLocation":"1626:15:17","nodeType":"VariableDeclaration","scope":3702,"src":"1618:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3697,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1618:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3701,"mutability":"mutable","name":"status","nameLocation":"1664:6:17","nodeType":"VariableDeclaration","scope":3702,"src":"1651:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"typeName":{"id":3700,"nodeType":"UserDefinedTypeName","pathNode":{"id":3699,"name":"BridgeStatus","nameLocations":["1651:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3708,"src":"1651:12:17"},"referencedDeclaration":3708,"src":"1651:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"visibility":"internal"}],"name":"BridgeTransaction","nameLocation":"1368:17:17","nodeType":"StructDefinition","scope":4537,"src":"1361:316:17","visibility":"public"},{"canonicalName":"CrossChainBridge.BridgeStatus","id":3708,"members":[{"id":3703,"name":"Initiated","nameLocation":"1711:9:17","nodeType":"EnumValue","src":"1711:9:17"},{"id":3704,"name":"Validated","nameLocation":"1730:9:17","nodeType":"EnumValue","src":"1730:9:17"},{"id":3705,"name":"Completed","nameLocation":"1749:9:17","nodeType":"EnumValue","src":"1749:9:17"},{"id":3706,"name":"Failed","nameLocation":"1768:6:17","nodeType":"EnumValue","src":"1768:6:17"},{"id":3707,"name":"Refunded","nameLocation":"1784:8:17","nodeType":"EnumValue","src":"1784:8:17"}],"name":"BridgeStatus","nameLocation":"1688:12:17","nodeType":"EnumDefinition","src":"1683:115:17"},{"constant":false,"functionSelector":"6c63f971","id":3713,"mutability":"mutable","name":"bridgeTransactions","nameLocation":"1864:18:17","nodeType":"VariableDeclaration","scope":4537,"src":"1819:63:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction)"},"typeName":{"id":3712,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3709,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1827:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1819:37:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3711,"nodeType":"UserDefinedTypeName","pathNode":{"id":3710,"name":"BridgeTransaction","nameLocations":["1838:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":3702,"src":"1838:17:17"},"referencedDeclaration":3702,"src":"1838:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"}}},"visibility":"public"},{"constant":false,"functionSelector":"548d496f","id":3717,"mutability":"mutable","name":"supportedChains","nameLocation":"1920:15:17","nodeType":"VariableDeclaration","scope":4537,"src":"1888:47:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"typeName":{"id":3716,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3714,"name":"uint256","nodeType":"ElementaryTypeName","src":"1896:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1888:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3715,"name":"bool","nodeType":"ElementaryTypeName","src":"1907:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"68c4ac26","id":3721,"mutability":"mutable","name":"supportedTokens","nameLocation":"1973:15:17","nodeType":"VariableDeclaration","scope":4537,"src":"1941:47:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":3720,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3718,"name":"address","nodeType":"ElementaryTypeName","src":"1949:7:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1941:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3719,"name":"bool","nodeType":"ElementaryTypeName","src":"1960:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"ac2e4936","id":3725,"mutability":"mutable","name":"processedTransactions","nameLocation":"2026:21:17","nodeType":"VariableDeclaration","scope":4537,"src":"1994:53:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":3724,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2002:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1994:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3723,"name":"bool","nodeType":"ElementaryTypeName","src":"2013:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"c4a01587","id":3729,"mutability":"mutable","name":"chainValidators","nameLocation":"2088:15:17","nodeType":"VariableDeclaration","scope":4537,"src":"2053:50:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":3728,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":3726,"name":"uint256","nodeType":"ElementaryTypeName","src":"2061:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2053:27:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":3727,"name":"address","nodeType":"ElementaryTypeName","src":"2072:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"constant":false,"id":3731,"mutability":"mutable","name":"transactionNonce","nameLocation":"2170:16:17","nodeType":"VariableDeclaration","scope":4537,"src":"2154:32:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3730,"name":"uint256","nodeType":"ElementaryTypeName","src":"2154:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"functionSelector":"82b12dd7","id":3734,"mutability":"mutable","name":"bridgeFee","nameLocation":"2233:9:17","nodeType":"VariableDeclaration","scope":4537,"src":"2218:29:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3732,"name":"uint256","nodeType":"ElementaryTypeName","src":"2218:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130","id":3733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2245:2:17","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"public"},{"constant":true,"functionSelector":"e1f1c4a7","id":3737,"mutability":"constant","name":"BASIS_POINTS","nameLocation":"2305:12:17","nodeType":"VariableDeclaration","scope":4537,"src":"2281:44:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3735,"name":"uint256","nodeType":"ElementaryTypeName","src":"2281:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":3736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2320:5:17","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"public"},{"constant":false,"functionSelector":"c415b95c","id":3739,"mutability":"mutable","name":"feeCollector","nameLocation":"2346:12:17","nodeType":"VariableDeclaration","scope":4537,"src":"2331:27:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3738,"name":"address","nodeType":"ElementaryTypeName","src":"2331:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"anonymous":false,"eventSelector":"cb59e257e7e6c29e3b2d154443821f4c7dfdee5401f775e13db6d7421c51d580","id":3751,"name":"BridgeInitiated","nameLocation":"2389:15:17","nodeType":"EventDefinition","parameters":{"id":3750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"indexed":true,"mutability":"mutable","name":"transactionId","nameLocation":"2430:13:17","nodeType":"VariableDeclaration","scope":3751,"src":"2414:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2414:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3743,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2469:6:17","nodeType":"VariableDeclaration","scope":3751,"src":"2453:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3742,"name":"address","nodeType":"ElementaryTypeName","src":"2453:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3745,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2493:6:17","nodeType":"VariableDeclaration","scope":3751,"src":"2485:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3744,"name":"uint256","nodeType":"ElementaryTypeName","src":"2485:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3747,"indexed":false,"mutability":"mutable","name":"sourceChainId","nameLocation":"2517:13:17","nodeType":"VariableDeclaration","scope":3751,"src":"2509:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3746,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3749,"indexed":false,"mutability":"mutable","name":"destinationChainId","nameLocation":"2548:18:17","nodeType":"VariableDeclaration","scope":3751,"src":"2540:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3748,"name":"uint256","nodeType":"ElementaryTypeName","src":"2540:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2404:168:17"},"src":"2383:190:17"},{"anonymous":false,"eventSelector":"d7b0f99d057bc9987014e38568de5d95ba76962296f6cf10df2e891fd78232d8","id":3759,"name":"BridgeValidated","nameLocation":"2589:15:17","nodeType":"EventDefinition","parameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3753,"indexed":true,"mutability":"mutable","name":"transactionId","nameLocation":"2630:13:17","nodeType":"VariableDeclaration","scope":3759,"src":"2614:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3752,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2614:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3755,"indexed":true,"mutability":"mutable","name":"validator","nameLocation":"2669:9:17","nodeType":"VariableDeclaration","scope":3759,"src":"2653:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3754,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3757,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"2696:9:17","nodeType":"VariableDeclaration","scope":3759,"src":"2688:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3756,"name":"uint256","nodeType":"ElementaryTypeName","src":"2688:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2604:107:17"},"src":"2583:129:17"},{"anonymous":false,"eventSelector":"43d0df41e1c07a3d313b4527a8a17595bfc156a6cc0d47045fe63b3aaffb2b47","id":3769,"name":"BridgeCompleted","nameLocation":"2728:15:17","nodeType":"EventDefinition","parameters":{"id":3768,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3761,"indexed":true,"mutability":"mutable","name":"transactionId","nameLocation":"2769:13:17","nodeType":"VariableDeclaration","scope":3769,"src":"2753:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2753:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3763,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2808:9:17","nodeType":"VariableDeclaration","scope":3769,"src":"2792:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3762,"name":"address","nodeType":"ElementaryTypeName","src":"2792:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3765,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"2835:6:17","nodeType":"VariableDeclaration","scope":3769,"src":"2827:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3764,"name":"uint256","nodeType":"ElementaryTypeName","src":"2827:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3767,"indexed":false,"mutability":"mutable","name":"yield","nameLocation":"2859:5:17","nodeType":"VariableDeclaration","scope":3769,"src":"2851:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3766,"name":"uint256","nodeType":"ElementaryTypeName","src":"2851:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2743:127:17"},"src":"2722:149:17"},{"anonymous":false,"eventSelector":"d2b4dd79c80ad92da5a6dd7455df9e531b9ad078fe353998dc6fc5c442ddc34f","id":3775,"name":"BridgeFailed","nameLocation":"2887:12:17","nodeType":"EventDefinition","parameters":{"id":3774,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3771,"indexed":true,"mutability":"mutable","name":"transactionId","nameLocation":"2925:13:17","nodeType":"VariableDeclaration","scope":3775,"src":"2909:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2909:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3773,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"2955:6:17","nodeType":"VariableDeclaration","scope":3775,"src":"2948:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3772,"name":"string","nodeType":"ElementaryTypeName","src":"2948:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2899:68:17"},"src":"2881:87:17"},{"anonymous":false,"eventSelector":"bba9d55e9fd1a441b1617724e2fdb76777d15ec77ab2b72ac15952cbe97085db","id":3779,"name":"ChainAdded","nameLocation":"2984:10:17","nodeType":"EventDefinition","parameters":{"id":3778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"indexed":true,"mutability":"mutable","name":"chainId","nameLocation":"3011:7:17","nodeType":"VariableDeclaration","scope":3779,"src":"2995:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3776,"name":"uint256","nodeType":"ElementaryTypeName","src":"2995:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:25:17"},"src":"2978:42:17"},{"anonymous":false,"eventSelector":"11a9d1a77f76361ed131c19b1dc5758504c51dbde2e49fc973a0ef9577ad13d5","id":3783,"name":"ChainRemoved","nameLocation":"3031:12:17","nodeType":"EventDefinition","parameters":{"id":3782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3781,"indexed":true,"mutability":"mutable","name":"chainId","nameLocation":"3060:7:17","nodeType":"VariableDeclaration","scope":3783,"src":"3044:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3780,"name":"uint256","nodeType":"ElementaryTypeName","src":"3044:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3043:25:17"},"src":"3025:44:17"},{"anonymous":false,"eventSelector":"784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a4","id":3787,"name":"TokenAdded","nameLocation":"3080:10:17","nodeType":"EventDefinition","parameters":{"id":3786,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3785,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3107:5:17","nodeType":"VariableDeclaration","scope":3787,"src":"3091:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3784,"name":"address","nodeType":"ElementaryTypeName","src":"3091:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3090:23:17"},"src":"3074:40:17"},{"anonymous":false,"eventSelector":"4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd3","id":3791,"name":"TokenRemoved","nameLocation":"3125:12:17","nodeType":"EventDefinition","parameters":{"id":3790,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3789,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"3154:5:17","nodeType":"VariableDeclaration","scope":3791,"src":"3138:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3788,"name":"address","nodeType":"ElementaryTypeName","src":"3138:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3137:23:17"},"src":"3119:42:17"},{"anonymous":false,"eventSelector":"8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76","id":3795,"name":"FeeUpdated","nameLocation":"3172:10:17","nodeType":"EventDefinition","parameters":{"id":3794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3793,"indexed":false,"mutability":"mutable","name":"newFee","nameLocation":"3191:6:17","nodeType":"VariableDeclaration","scope":3795,"src":"3183:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3792,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:16:17"},"src":"3166:33:17"},{"anonymous":false,"eventSelector":"e5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f","id":3799,"name":"FeeCollectorUpdated","nameLocation":"3210:19:17","nodeType":"EventDefinition","parameters":{"id":3798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3797,"indexed":false,"mutability":"mutable","name":"newCollector","nameLocation":"3238:12:17","nodeType":"VariableDeclaration","scope":3799,"src":"3230:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3796,"name":"address","nodeType":"ElementaryTypeName","src":"3230:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3229:22:17"},"src":"3204:48:17"},{"errorSelector":"c3a55c98","id":3803,"name":"UnsupportedChain","nameLocation":"3285:16:17","nodeType":"ErrorDefinition","parameters":{"id":3802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3801,"mutability":"mutable","name":"chainId","nameLocation":"3310:7:17","nodeType":"VariableDeclaration","scope":3803,"src":"3302:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3800,"name":"uint256","nodeType":"ElementaryTypeName","src":"3302:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3301:17:17"},"src":"3279:40:17"},{"errorSelector":"bf16aab6","id":3807,"name":"UnsupportedToken","nameLocation":"3330:16:17","nodeType":"ErrorDefinition","parameters":{"id":3806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3805,"mutability":"mutable","name":"token","nameLocation":"3355:5:17","nodeType":"VariableDeclaration","scope":3807,"src":"3347:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3804,"name":"address","nodeType":"ElementaryTypeName","src":"3347:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3346:15:17"},"src":"3324:38:17"},{"errorSelector":"2c5211c6","id":3809,"name":"InvalidAmount","nameLocation":"3373:13:17","nodeType":"ErrorDefinition","parameters":{"id":3808,"nodeType":"ParameterList","parameters":[],"src":"3386:2:17"},"src":"3367:22:17"},{"errorSelector":"9c8d2cd2","id":3811,"name":"InvalidRecipient","nameLocation":"3400:16:17","nodeType":"ErrorDefinition","parameters":{"id":3810,"nodeType":"ParameterList","parameters":[],"src":"3416:2:17"},"src":"3394:25:17"},{"errorSelector":"be63a148","id":3815,"name":"TransactionAlreadyProcessed","nameLocation":"3430:27:17","nodeType":"ErrorDefinition","parameters":{"id":3814,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3813,"mutability":"mutable","name":"transactionId","nameLocation":"3466:13:17","nodeType":"VariableDeclaration","scope":3815,"src":"3458:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3812,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3458:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3457:23:17"},"src":"3424:57:17"},{"errorSelector":"f924664d","id":3823,"name":"InvalidStatus","nameLocation":"3492:13:17","nodeType":"ErrorDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3818,"mutability":"mutable","name":"current","nameLocation":"3519:7:17","nodeType":"VariableDeclaration","scope":3823,"src":"3506:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"typeName":{"id":3817,"nodeType":"UserDefinedTypeName","pathNode":{"id":3816,"name":"BridgeStatus","nameLocations":["3506:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3708,"src":"3506:12:17"},"referencedDeclaration":3708,"src":"3506:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"expected","nameLocation":"3541:8:17","nodeType":"VariableDeclaration","scope":3823,"src":"3528:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"typeName":{"id":3820,"nodeType":"UserDefinedTypeName","pathNode":{"id":3819,"name":"BridgeStatus","nameLocations":["3528:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":3708,"src":"3528:12:17"},"referencedDeclaration":3708,"src":"3528:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"visibility":"internal"}],"src":"3505:45:17"},"src":"3486:65:17"},{"errorSelector":"f517b35e","id":3825,"name":"InsufficientValidations","nameLocation":"3562:23:17","nodeType":"ErrorDefinition","parameters":{"id":3824,"nodeType":"ParameterList","parameters":[],"src":"3585:2:17"},"src":"3556:32:17"},{"errorSelector":"58d620b3","id":3827,"name":"InvalidFee","nameLocation":"3599:10:17","nodeType":"ErrorDefinition","parameters":{"id":3826,"nodeType":"ParameterList","parameters":[],"src":"3609:2:17"},"src":"3593:19:17"},{"errorSelector":"8460af8a","id":3829,"name":"UnauthorizedValidator","nameLocation":"3623:21:17","nodeType":"ErrorDefinition","parameters":{"id":3828,"nodeType":"ParameterList","parameters":[],"src":"3644:2:17"},"src":"3617:30:17"},{"body":{"id":3932,"nodeType":"Block","src":"3761:794:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3839,"name":"_yieldEscrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"3779:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3803:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3795:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3840,"name":"address","nodeType":"ElementaryTypeName","src":"3795:7:17","typeDescriptions":{}}},"id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3795:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3779:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420657363726f772061646472657373","id":3845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3807:24:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_852981febb830e8505d5e5baf0c08b270afe216f337edb989052665319e39748","typeString":"literal_string \"Invalid escrow address\""},"value":"Invalid escrow address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_852981febb830e8505d5e5baf0c08b270afe216f337edb989052665319e39748","typeString":"literal_string \"Invalid escrow address\""}],"id":3838,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3771:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3771:61:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3847,"nodeType":"ExpressionStatement","src":"3771:61:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3849,"name":"_yieldVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"3850:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3852,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3873:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3851,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3865:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3850,"name":"address","nodeType":"ElementaryTypeName","src":"3865:7:17","typeDescriptions":{}}},"id":3853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3865:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3850:25:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c6964207661756c742061646472657373","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3877:23:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1d4b05e5256c70cb19cbeae4f5dbc68cbf63906eed2b6782a552ca8fc044422e","typeString":"literal_string \"Invalid vault address\""},"value":"Invalid vault address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1d4b05e5256c70cb19cbeae4f5dbc68cbf63906eed2b6782a552ca8fc044422e","typeString":"literal_string \"Invalid vault address\""}],"id":3848,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3842:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3842:59:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3857,"nodeType":"ExpressionStatement","src":"3842:59:17"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3859,"name":"_feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"3919:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":3862,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3861,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3936:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3860,"name":"address","nodeType":"ElementaryTypeName","src":"3936:7:17","typeDescriptions":{}}},"id":3863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3936:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3919:27:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c69642066656520636f6c6c6563746f72","id":3865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3948:23:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9995f8e1da87a0eb523366f83f97e57ccbd459bbdc8bb370b12ced91dcc91345","typeString":"literal_string \"Invalid fee collector\""},"value":"Invalid fee collector"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9995f8e1da87a0eb523366f83f97e57ccbd459bbdc8bb370b12ced91dcc91345","typeString":"literal_string \"Invalid fee collector\""}],"id":3858,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3911:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3911:61:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3867,"nodeType":"ExpressionStatement","src":"3911:61:17"},{"expression":{"id":3872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3868,"name":"yieldEscrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3659,"src":"3983:11:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3870,"name":"_yieldEscrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"4009:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3869,"name":"YieldEscrow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6136,"src":"3997:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_YieldEscrow_$6136_$","typeString":"type(contract YieldEscrow)"}},"id":3871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3997:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}},"src":"3983:39:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}},"id":3873,"nodeType":"ExpressionStatement","src":"3983:39:17"},{"expression":{"id":3878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3874,"name":"yieldVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"4032:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3876,"name":"_yieldVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3833,"src":"4056:11:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3875,"name":"YieldVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7988,"src":"4045:10:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_YieldVault_$7988_$","typeString":"type(contract YieldVault)"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4045:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}},"src":"4032:36:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}},"id":3879,"nodeType":"ExpressionStatement","src":"4032:36:17"},{"expression":{"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3880,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"4078:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3881,"name":"_feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3835,"src":"4093:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4078:28:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3883,"nodeType":"ExpressionStatement","src":"4078:28:17"},{"expression":{"arguments":[{"id":3885,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"4128:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3886,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4148:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4152:6:17","memberName":"sender","nodeType":"MemberAccess","src":"4148:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3884,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4117:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4117:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3889,"nodeType":"ExpressionStatement","src":"4117:42:17"},{"expression":{"arguments":[{"id":3891,"name":"BRIDGE_OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"4180:20:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3892,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4202:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4206:6:17","memberName":"sender","nodeType":"MemberAccess","src":"4202:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3890,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"4169:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3895,"nodeType":"ExpressionStatement","src":"4169:44:17"},{"expression":{"id":3900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3896,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4263:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3898,"indexExpression":{"id":3897,"name":"ETHEREUM_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3665,"src":"4279:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4263:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4300:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4263:41:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3901,"nodeType":"ExpressionStatement","src":"4263:41:17"},{"expression":{"id":3906,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3902,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4314:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3904,"indexExpression":{"id":3903,"name":"XRPL_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3668,"src":"4330:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4314:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3905,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4347:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4314:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3907,"nodeType":"ExpressionStatement","src":"4314:37:17"},{"expression":{"id":3912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3908,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4361:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3910,"indexExpression":{"id":3909,"name":"SOLANA_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3671,"src":"4377:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4361:32:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4396:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4361:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3913,"nodeType":"ExpressionStatement","src":"4361:39:17"},{"expression":{"id":3918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3914,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4410:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3916,"indexExpression":{"id":3915,"name":"POLYGON_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3674,"src":"4426:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4410:33:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4446:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4410:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3919,"nodeType":"ExpressionStatement","src":"4410:40:17"},{"expression":{"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3920,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4460:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3922,"indexExpression":{"id":3921,"name":"ARBITRUM_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"4476:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4460:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3923,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4497:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4460:41:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3925,"nodeType":"ExpressionStatement","src":"4460:41:17"},{"expression":{"id":3930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3926,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"4511:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3928,"indexExpression":{"id":3927,"name":"BASE_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3680,"src":"4527:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4511:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4544:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4511:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3931,"nodeType":"ExpressionStatement","src":"4511:37:17"}]},"id":3933,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3831,"mutability":"mutable","name":"_yieldEscrow","nameLocation":"3682:12:17","nodeType":"VariableDeclaration","scope":3933,"src":"3674:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3830,"name":"address","nodeType":"ElementaryTypeName","src":"3674:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3833,"mutability":"mutable","name":"_yieldVault","nameLocation":"3712:11:17","nodeType":"VariableDeclaration","scope":3933,"src":"3704:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3832,"name":"address","nodeType":"ElementaryTypeName","src":"3704:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3835,"mutability":"mutable","name":"_feeCollector","nameLocation":"3741:13:17","nodeType":"VariableDeclaration","scope":3933,"src":"3733:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3834,"name":"address","nodeType":"ElementaryTypeName","src":"3733:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3664:96:17"},"returnParameters":{"id":3837,"nodeType":"ParameterList","parameters":[],"src":"3761:0:17"},"scope":4537,"src":"3653:902:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4078,"nodeType":"Block","src":"5080:1693:17","statements":[{"condition":{"id":3954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5094:36:17","subExpression":{"baseExpression":{"id":3951,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"5095:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":3953,"indexExpression":{"id":3952,"name":"destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"5111:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5095:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3959,"nodeType":"IfStatement","src":"5090:85:17","trueBody":{"errorCall":{"arguments":[{"id":3956,"name":"destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"5156:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3955,"name":"UnsupportedChain","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3803,"src":"5139:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5139:36:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3958,"nodeType":"RevertStatement","src":"5132:43:17"}},{"condition":{"id":3963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5189:23:17","subExpression":{"baseExpression":{"id":3960,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"5190:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3962,"indexExpression":{"id":3961,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5206:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5190:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3968,"nodeType":"IfStatement","src":"5185:59:17","trueBody":{"errorCall":{"arguments":[{"id":3965,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5238:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3964,"name":"UnsupportedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3807,"src":"5221:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5221:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3967,"nodeType":"RevertStatement","src":"5214:30:17"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3969,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5258:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5268:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5258:11:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3975,"nodeType":"IfStatement","src":"5254:39:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3972,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3809,"src":"5278:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5278:15:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3974,"nodeType":"RevertStatement","src":"5271:22:17"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3976,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"5307:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3979,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5328:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3978,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5320:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3977,"name":"address","nodeType":"ElementaryTypeName","src":"5320:7:17","typeDescriptions":{}}},"id":3980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5320:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5307:23:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3985,"nodeType":"IfStatement","src":"5303:54:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3982,"name":"InvalidRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3811,"src":"5339:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5339:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3984,"nodeType":"RevertStatement","src":"5332:25:17"}},{"assignments":[3987],"declarations":[{"constant":false,"id":3987,"mutability":"mutable","name":"fee","nameLocation":"5401:3:17","nodeType":"VariableDeclaration","scope":4078,"src":"5393:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3986,"name":"uint256","nodeType":"ElementaryTypeName","src":"5393:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3994,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3988,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5408:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3989,"name":"bridgeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"5417:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5408:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3991,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"5407:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3992,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"5430:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5407:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5393:49:17"},{"assignments":[3996],"declarations":[{"constant":false,"id":3996,"mutability":"mutable","name":"netAmount","nameLocation":"5460:9:17","nodeType":"VariableDeclaration","scope":4078,"src":"5452:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3995,"name":"uint256","nodeType":"ElementaryTypeName","src":"5452:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4000,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3997,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5472:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3998,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"5481:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5472:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5452:32:17"},{"expression":{"arguments":[{"expression":{"id":4005,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5565:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5569:6:17","memberName":"sender","nodeType":"MemberAccess","src":"5565:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4009,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5585:4:17","typeDescriptions":{"typeIdentifier":"t_contract$_CrossChainBridge_$4537","typeString":"contract CrossChainBridge"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_CrossChainBridge_$4537","typeString":"contract CrossChainBridge"}],"id":4008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5577:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4007,"name":"address","nodeType":"ElementaryTypeName","src":"5577:7:17","typeDescriptions":{}}},"id":4010,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5577:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4011,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5592:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4002,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5541:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4001,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5534:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5534:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5548:16:17","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1347,"src":"5534:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":4012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5534:65:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4013,"nodeType":"ExpressionStatement","src":"5534:65:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4014,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"5659:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5665:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5659:7:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4026,"nodeType":"IfStatement","src":"5655:83:17","trueBody":{"id":4025,"nodeType":"Block","src":"5668:70:17","statements":[{"expression":{"arguments":[{"id":4021,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"5709:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4022,"name":"fee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3987,"src":"5723:3:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4018,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5689:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4017,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5682:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5682:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":4020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5696:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"5682:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5682:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4024,"nodeType":"ExpressionStatement","src":"5682:45:17"}]}},{"expression":{"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4027,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"5790:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"expression":{"id":4031,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"5863:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5867:6:17","memberName":"sender","nodeType":"MemberAccess","src":"5863:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4033,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"5891:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4034,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3938,"src":"5918:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4035,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"5942:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4036,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5965:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5971:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"5965:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4038,"name":"destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"5996:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6032:18:17","subExpression":{"id":4039,"name":"transactionNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"6032:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4029,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5829:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4030,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5833:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"5829:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5829:235:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4028,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5806:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5806:268:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5790:284:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":4044,"nodeType":"ExpressionStatement","src":"5790:284:17"},{"expression":{"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4045,"name":"bridgeTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"6122:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction storage ref)"}},"id":4047,"indexExpression":{"id":4046,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"6141:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6122:33:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4049,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6198:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6202:6:17","memberName":"sender","nodeType":"MemberAccess","src":"6198:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4051,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3936,"src":"6233:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4052,"name":"netAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6264:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4053,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3940,"src":"6294:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4054,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6328:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6334:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"6328:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4056,"name":"destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"6375:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4057,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6418:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6424:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6418:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":4059,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6461:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4060,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"6493:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4061,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"6528:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4062,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6541:9:17","memberName":"Initiated","nodeType":"MemberAccess","referencedDeclaration":3703,"src":"6528:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}],"id":4048,"name":"BridgeTransaction","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"6158:17:17","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_BridgeTransaction_$3702_storage_ptr_$","typeString":"type(struct CrossChainBridge.BridgeTransaction storage pointer)"}},"id":4063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["6190:6:17","6222:9:17","6256:6:17","6287:5:17","6313:13:17","6355:18:17","6407:9:17","6447:12:17","6476:15:17","6520:6:17"],"names":["sender","recipient","amount","token","sourceChainId","destinationChainId","timestamp","accruedYield","transactionHash","status"],"nodeType":"FunctionCall","src":"6158:403:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_memory_ptr","typeString":"struct CrossChainBridge.BridgeTransaction memory"}},"src":"6122:439:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"id":4065,"nodeType":"ExpressionStatement","src":"6122:439:17"},{"eventCall":{"arguments":[{"id":4067,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"6606:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4068,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6633:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6637:6:17","memberName":"sender","nodeType":"MemberAccess","src":"6633:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4070,"name":"netAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3996,"src":"6657:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4071,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6680:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6686:7:17","memberName":"chainid","nodeType":"MemberAccess","src":"6680:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4073,"name":"destinationChainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3942,"src":"6707:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4066,"name":"BridgeInitiated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3751,"src":"6577:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256,uint256)"}},"id":4074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6577:158:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4075,"nodeType":"EmitStatement","src":"6572:163:17"},{"expression":{"id":4076,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"6753:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3950,"id":4077,"nodeType":"Return","src":"6746:20:17"}]},"documentation":{"id":3934,"nodeType":"StructuredDocumentation","src":"4561:306:17","text":" @dev Initiates a cross-chain bridge transaction\n @param recipient Address on destination chain\n @param amount Amount to bridge\n @param token Token address\n @param destinationChainId Target chain ID\n @return transactionId Unique bridge transaction identifier"},"functionSelector":"c9a4d32f","id":4079,"implemented":true,"kind":"function","modifiers":[{"id":3945,"kind":"modifierInvocation","modifierName":{"id":3944,"name":"nonReentrant","nameLocations":["5021:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"5021:12:17"},"nodeType":"ModifierInvocation","src":"5021:12:17"},{"id":3947,"kind":"modifierInvocation","modifierName":{"id":3946,"name":"whenNotPaused","nameLocations":["5034:13:17"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"5034:13:17"},"nodeType":"ModifierInvocation","src":"5034:13:17"}],"name":"initiateBridge","nameLocation":"4881:14:17","nodeType":"FunctionDefinition","parameters":{"id":3943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3936,"mutability":"mutable","name":"recipient","nameLocation":"4913:9:17","nodeType":"VariableDeclaration","scope":4079,"src":"4905:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3935,"name":"address","nodeType":"ElementaryTypeName","src":"4905:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3938,"mutability":"mutable","name":"amount","nameLocation":"4940:6:17","nodeType":"VariableDeclaration","scope":4079,"src":"4932:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3937,"name":"uint256","nodeType":"ElementaryTypeName","src":"4932:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3940,"mutability":"mutable","name":"token","nameLocation":"4964:5:17","nodeType":"VariableDeclaration","scope":4079,"src":"4956:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3939,"name":"address","nodeType":"ElementaryTypeName","src":"4956:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3942,"mutability":"mutable","name":"destinationChainId","nameLocation":"4987:18:17","nodeType":"VariableDeclaration","scope":4079,"src":"4979:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3941,"name":"uint256","nodeType":"ElementaryTypeName","src":"4979:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4895:116:17"},"returnParameters":{"id":3950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3949,"mutability":"mutable","name":"transactionId","nameLocation":"5065:13:17","nodeType":"VariableDeclaration","scope":4079,"src":"5057:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5057:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5056:23:17"},"scope":4537,"src":"4872:1901:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4124,"nodeType":"Block","src":"7019:352:17","statements":[{"assignments":[4090],"declarations":[{"constant":false,"id":4090,"mutability":"mutable","name":"txn","nameLocation":"7055:3:17","nodeType":"VariableDeclaration","scope":4124,"src":"7029:29:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"},"typeName":{"id":4089,"nodeType":"UserDefinedTypeName","pathNode":{"id":4088,"name":"BridgeTransaction","nameLocations":["7029:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":3702,"src":"7029:17:17"},"referencedDeclaration":3702,"src":"7029:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"}},"visibility":"internal"}],"id":4094,"initialValue":{"baseExpression":{"id":4091,"name":"bridgeTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"7061:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction storage ref)"}},"id":4093,"indexExpression":{"id":4092,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7080:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7061:33:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7029:65:17"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4095,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"7117:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4096,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7121:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"7117:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4097,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7131:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7144:9:17","memberName":"Initiated","nodeType":"MemberAccess","referencedDeclaration":3703,"src":"7131:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"7117:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4108,"nodeType":"IfStatement","src":"7113:123:17","trueBody":{"id":4107,"nodeType":"Block","src":"7155:81:17","statements":[{"errorCall":{"arguments":[{"expression":{"id":4101,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"7190:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4102,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7194:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"7190:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},{"expression":{"id":4103,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7202:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7215:9:17","memberName":"Initiated","nodeType":"MemberAccess","referencedDeclaration":3703,"src":"7202:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}],"id":4100,"name":"InvalidStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"7176:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_BridgeStatus_$3708_$_t_enum$_BridgeStatus_$3708_$returns$__$","typeString":"function (enum CrossChainBridge.BridgeStatus,enum CrossChainBridge.BridgeStatus) pure"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7176:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4106,"nodeType":"RevertStatement","src":"7169:56:17"}]}},{"expression":{"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4109,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4090,"src":"7246:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"7250:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"7246:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4112,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7259:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7272:9:17","memberName":"Validated","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"7259:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"7246:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"id":4115,"nodeType":"ExpressionStatement","src":"7246:35:17"},{"eventCall":{"arguments":[{"id":4117,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4082,"src":"7321:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4118,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7336:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7340:6:17","memberName":"sender","nodeType":"MemberAccess","src":"7336:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4120,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7348:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7354:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"7348:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4116,"name":"BridgeValidated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3759,"src":"7305:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7305:59:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4123,"nodeType":"EmitStatement","src":"7300:64:17"}]},"documentation":{"id":4080,"nodeType":"StructuredDocumentation","src":"6779:129:17","text":" @dev Validates a bridge transaction (called by validators)\n @param transactionId Transaction to validate"},"functionSelector":"34284e4b","id":4125,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4085,"name":"VALIDATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"7003:14:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4086,"kind":"modifierInvocation","modifierName":{"id":4084,"name":"onlyRole","nameLocations":["6994:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"6994:8:17"},"nodeType":"ModifierInvocation","src":"6994:24:17"}],"name":"validateBridgeTransaction","nameLocation":"6922:25:17","nodeType":"FunctionDefinition","parameters":{"id":4083,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4082,"mutability":"mutable","name":"transactionId","nameLocation":"6965:13:17","nodeType":"VariableDeclaration","scope":4125,"src":"6957:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4081,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6957:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6947:37:17"},"returnParameters":{"id":4087,"nodeType":"ParameterList","parameters":[],"src":"7019:0:17"},"scope":4537,"src":"6913:458:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4229,"nodeType":"Block","src":"7740:1024:17","statements":[{"assignments":[4140],"declarations":[{"constant":false,"id":4140,"mutability":"mutable","name":"txn","nameLocation":"7776:3:17","nodeType":"VariableDeclaration","scope":4229,"src":"7750:29:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"},"typeName":{"id":4139,"nodeType":"UserDefinedTypeName","pathNode":{"id":4138,"name":"BridgeTransaction","nameLocations":["7750:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":3702,"src":"7750:17:17"},"referencedDeclaration":3702,"src":"7750:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"}},"visibility":"internal"}],"id":4144,"initialValue":{"baseExpression":{"id":4141,"name":"bridgeTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"7782:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction storage ref)"}},"id":4143,"indexExpression":{"id":4142,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"7801:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7782:33:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7750:65:17"},{"condition":{"baseExpression":{"id":4145,"name":"processedTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"7838:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4147,"indexExpression":{"id":4146,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"7860:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7838:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4153,"nodeType":"IfStatement","src":"7834:116:17","trueBody":{"id":4152,"nodeType":"Block","src":"7876:74:17","statements":[{"errorCall":{"arguments":[{"id":4149,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"7925:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4148,"name":"TransactionAlreadyProcessed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3815,"src":"7897:27:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":4150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7897:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4151,"nodeType":"RevertStatement","src":"7890:49:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"id":4158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4154,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"7972:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7976:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"7972:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4156,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"7986:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4157,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7999:9:17","memberName":"Validated","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"7986:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"7972:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4167,"nodeType":"IfStatement","src":"7968:123:17","trueBody":{"id":4166,"nodeType":"Block","src":"8010:81:17","statements":[{"errorCall":{"arguments":[{"expression":{"id":4160,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8045:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8049:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"8045:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},{"expression":{"id":4162,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"8057:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8070:9:17","memberName":"Validated","nodeType":"MemberAccess","referencedDeclaration":3704,"src":"8057:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}],"id":4159,"name":"InvalidStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"8031:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_BridgeStatus_$3708_$_t_enum$_BridgeStatus_$3708_$returns$__$","typeString":"function (enum CrossChainBridge.BridgeStatus,enum CrossChainBridge.BridgeStatus) pure"}},"id":4164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8031:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4165,"nodeType":"RevertStatement","src":"8024:56:17"}]}},{"assignments":[4169],"declarations":[{"constant":false,"id":4169,"mutability":"mutable","name":"timeElapsed","nameLocation":"8163:11:17","nodeType":"VariableDeclaration","scope":4229,"src":"8155:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4168,"name":"uint256","nodeType":"ElementaryTypeName","src":"8155:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4175,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4170,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"8177:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8183:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"8177:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":4172,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8195:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8199:9:17","memberName":"timestamp","nodeType":"MemberAccess","referencedDeclaration":3694,"src":"8195:13:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8177:31:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8155:53:17"},{"assignments":[4177],"declarations":[{"constant":false,"id":4177,"mutability":"mutable","name":"yield","nameLocation":"8226:5:17","nodeType":"VariableDeclaration","scope":4229,"src":"8218:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4176,"name":"uint256","nodeType":"ElementaryTypeName","src":"8218:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4183,"initialValue":{"arguments":[{"expression":{"id":4179,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8255:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8259:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3686,"src":"8255:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4181,"name":"timeElapsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4169,"src":"8267:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4178,"name":"calculateBridgeYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4325,"src":"8234:20:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) view returns (uint256)"}},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8234:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8218:61:17"},{"expression":{"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4184,"name":"processedTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3725,"src":"8327:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4186,"indexExpression":{"id":4185,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"8349:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8327:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8366:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8327:43:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4189,"nodeType":"ExpressionStatement","src":"8327:43:17"},{"expression":{"id":4195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4190,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8380:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8384:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"8380:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4193,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"8393:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8406:9:17","memberName":"Completed","nodeType":"MemberAccess","referencedDeclaration":3705,"src":"8393:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"8380:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"id":4196,"nodeType":"ExpressionStatement","src":"8380:35:17"},{"expression":{"id":4201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4197,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8425:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4199,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"8429:12:17","memberName":"accruedYield","nodeType":"MemberAccess","referencedDeclaration":3696,"src":"8425:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4200,"name":"yield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"8444:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8425:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4202,"nodeType":"ExpressionStatement","src":"8425:24:17"},{"assignments":[4204],"declarations":[{"constant":false,"id":4204,"mutability":"mutable","name":"totalAmount","nameLocation":"8519:11:17","nodeType":"VariableDeclaration","scope":4229,"src":"8511:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4203,"name":"uint256","nodeType":"ElementaryTypeName","src":"8511:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4209,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4205,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8533:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4206,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8537:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3686,"src":"8533:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4207,"name":"yield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"8546:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8533:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8511:40:17"},{"expression":{"arguments":[{"expression":{"id":4215,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8592:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8596:9:17","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"8592:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4217,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4204,"src":"8607:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4211,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8568:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4212,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8572:5:17","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3688,"src":"8568:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4210,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"8561:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8561:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":4214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8579:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"8561:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8561:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4219,"nodeType":"ExpressionStatement","src":"8561:58:17"},{"eventCall":{"arguments":[{"id":4221,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"8664:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4222,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8691:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4223,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8695:9:17","memberName":"recipient","nodeType":"MemberAccess","referencedDeclaration":3684,"src":"8691:13:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4224,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"8718:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4225,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8722:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3686,"src":"8718:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4226,"name":"yield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4177,"src":"8742:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4220,"name":"BridgeCompleted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3769,"src":"8635:15:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256)"}},"id":4227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8635:122:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4228,"nodeType":"EmitStatement","src":"8630:127:17"}]},"documentation":{"id":4126,"nodeType":"StructuredDocumentation","src":"7377:203:17","text":" @dev Completes a bridge transaction on destination chain\n @param transactionId Transaction to complete\n @param sourceChainProof Proof from source chain (simplified for now)"},"functionSelector":"c06575f4","id":4230,"implemented":true,"kind":"function","modifiers":[{"id":4133,"kind":"modifierInvocation","modifierName":{"id":4132,"name":"nonReentrant","nameLocations":["7696:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"7696:12:17"},"nodeType":"ModifierInvocation","src":"7696:12:17"},{"arguments":[{"id":4135,"name":"BRIDGE_OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"7718:20:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4136,"kind":"modifierInvocation","modifierName":{"id":4134,"name":"onlyRole","nameLocations":["7709:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"7709:8:17"},"nodeType":"ModifierInvocation","src":"7709:30:17"}],"name":"completeBridge","nameLocation":"7594:14:17","nodeType":"FunctionDefinition","parameters":{"id":4131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4128,"mutability":"mutable","name":"transactionId","nameLocation":"7626:13:17","nodeType":"VariableDeclaration","scope":4230,"src":"7618:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4127,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7618:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4130,"mutability":"mutable","name":"sourceChainProof","nameLocation":"7664:16:17","nodeType":"VariableDeclaration","scope":4230,"src":"7649:31:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4129,"name":"bytes","nodeType":"ElementaryTypeName","src":"7649:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7608:78:17"},"returnParameters":{"id":4137,"nodeType":"ParameterList","parameters":[],"src":"7740:0:17"},"scope":4537,"src":"7585:1179:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4291,"nodeType":"Block","src":"9051:468:17","statements":[{"assignments":[4243],"declarations":[{"constant":false,"id":4243,"mutability":"mutable","name":"txn","nameLocation":"9087:3:17","nodeType":"VariableDeclaration","scope":4291,"src":"9061:29:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"},"typeName":{"id":4242,"nodeType":"UserDefinedTypeName","pathNode":{"id":4241,"name":"BridgeTransaction","nameLocations":["9061:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":3702,"src":"9061:17:17"},"referencedDeclaration":3702,"src":"9061:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"}},"visibility":"internal"}],"id":4247,"initialValue":{"baseExpression":{"id":4244,"name":"bridgeTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"9093:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction storage ref)"}},"id":4246,"indexExpression":{"id":4245,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"9112:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9093:33:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9061:65:17"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4248,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9149:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4249,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9153:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"9149:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4250,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"9163:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9176:9:17","memberName":"Completed","nodeType":"MemberAccess","referencedDeclaration":3705,"src":"9163:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"9149:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4253,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9189:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4254,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9193:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"9189:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4255,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"9203:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9216:8:17","memberName":"Refunded","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"9203:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"9189:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9149:75:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4267,"nodeType":"IfStatement","src":"9145:162:17","trueBody":{"id":4266,"nodeType":"Block","src":"9226:81:17","statements":[{"errorCall":{"arguments":[{"expression":{"id":4260,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9261:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4261,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9265:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"9261:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},{"expression":{"id":4262,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"9273:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9286:9:17","memberName":"Initiated","nodeType":"MemberAccess","referencedDeclaration":3703,"src":"9273:22:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"},{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}],"id":4259,"name":"InvalidStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3823,"src":"9247:13:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_enum$_BridgeStatus_$3708_$_t_enum$_BridgeStatus_$3708_$returns$__$","typeString":"function (enum CrossChainBridge.BridgeStatus,enum CrossChainBridge.BridgeStatus) pure"}},"id":4264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9247:49:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4265,"nodeType":"RevertStatement","src":"9240:56:17"}]}},{"expression":{"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4268,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9317:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9321:6:17","memberName":"status","nodeType":"MemberAccess","referencedDeclaration":3701,"src":"9317:10:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4271,"name":"BridgeStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3708,"src":"9330:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_BridgeStatus_$3708_$","typeString":"type(enum CrossChainBridge.BridgeStatus)"}},"id":4272,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9343:8:17","memberName":"Refunded","nodeType":"MemberAccess","referencedDeclaration":3707,"src":"9330:21:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"src":"9317:34:17","typeDescriptions":{"typeIdentifier":"t_enum$_BridgeStatus_$3708","typeString":"enum CrossChainBridge.BridgeStatus"}},"id":4274,"nodeType":"ExpressionStatement","src":"9317:34:17"},{"expression":{"arguments":[{"expression":{"id":4280,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9438:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4281,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9442:6:17","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":3682,"src":"9438:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4282,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9450:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9454:6:17","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":3686,"src":"9450:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":4276,"name":"txn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4243,"src":"9414:3:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction storage pointer"}},"id":4277,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9418:5:17","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":3688,"src":"9414:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4275,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"9407:6:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9407:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":4279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9425:12:17","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"9407:30:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":4284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9407:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4285,"nodeType":"ExpressionStatement","src":"9407:54:17"},{"eventCall":{"arguments":[{"id":4287,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"9490:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4288,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4235,"src":"9505:6:17","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4286,"name":"BridgeFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3775,"src":"9477:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,string memory)"}},"id":4289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9477:35:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4290,"nodeType":"EmitStatement","src":"9472:40:17"}]},"documentation":{"id":4231,"nodeType":"StructuredDocumentation","src":"8770:145:17","text":" @dev Refunds a failed bridge transaction\n @param transactionId Transaction to refund\n @param reason Failure reason"},"functionSelector":"6c5556b7","id":4292,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4238,"name":"BRIDGE_OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3651,"src":"9029:20:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4239,"kind":"modifierInvocation","modifierName":{"id":4237,"name":"onlyRole","nameLocations":["9020:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"9020:8:17"},"nodeType":"ModifierInvocation","src":"9020:30:17"}],"name":"refundBridge","nameLocation":"8929:12:17","nodeType":"FunctionDefinition","parameters":{"id":4236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4233,"mutability":"mutable","name":"transactionId","nameLocation":"8959:13:17","nodeType":"VariableDeclaration","scope":4292,"src":"8951:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8951:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4235,"mutability":"mutable","name":"reason","nameLocation":"8998:6:17","nodeType":"VariableDeclaration","scope":4292,"src":"8982:22:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4234,"name":"string","nodeType":"ElementaryTypeName","src":"8982:6:17","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8941:69:17"},"returnParameters":{"id":4240,"nodeType":"ParameterList","parameters":[],"src":"9051:0:17"},"scope":4537,"src":"8920:599:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4324,"nodeType":"Block","src":"9844:376:17","statements":[{"assignments":[4303],"declarations":[{"constant":false,"id":4303,"mutability":"mutable","name":"currentAPY","nameLocation":"9906:10:17","nodeType":"VariableDeclaration","scope":4324,"src":"9898:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4302,"name":"uint256","nodeType":"ElementaryTypeName","src":"9898:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4307,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4304,"name":"yieldVault","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3662,"src":"9919:10:17","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9930:13:17","memberName":"getCurrentAPY","nodeType":"MemberAccess","referencedDeclaration":7317,"src":"9919:24:17","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":4306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9919:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9898:47:17"},{"assignments":[4309],"declarations":[{"constant":false,"id":4309,"mutability":"mutable","name":"yield","nameLocation":"10111:5:17","nodeType":"VariableDeclaration","scope":4324,"src":"10103:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4308,"name":"uint256","nodeType":"ElementaryTypeName","src":"10103:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4321,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4314,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4310,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4295,"src":"10120:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4311,"name":"currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4303,"src":"10129:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10120:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4313,"name":"timeElapsed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4297,"src":"10142:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10120:33:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4315,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10119:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4318,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"333635","id":4316,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10158:8:17","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_31536000_by_1","typeString":"int_const 31536000"},"value":"365"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4317,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"10169:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10158:23:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4319,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10157:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10119:63:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10103:79:17"},{"expression":{"id":4322,"name":"yield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"10208:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4301,"id":4323,"nodeType":"Return","src":"10201:12:17"}]},"documentation":{"id":4293,"nodeType":"StructuredDocumentation","src":"9525:195:17","text":" @dev Calculates yield accrued during bridge transit\n @param amount Principal amount\n @param timeElapsed Time in seconds\n @return yield Calculated yield amount"},"functionSelector":"17606024","id":4325,"implemented":true,"kind":"function","modifiers":[],"name":"calculateBridgeYield","nameLocation":"9734:20:17","nodeType":"FunctionDefinition","parameters":{"id":4298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4295,"mutability":"mutable","name":"amount","nameLocation":"9772:6:17","nodeType":"VariableDeclaration","scope":4325,"src":"9764:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4294,"name":"uint256","nodeType":"ElementaryTypeName","src":"9764:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4297,"mutability":"mutable","name":"timeElapsed","nameLocation":"9796:11:17","nodeType":"VariableDeclaration","scope":4325,"src":"9788:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4296,"name":"uint256","nodeType":"ElementaryTypeName","src":"9788:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9754:59:17"},"returnParameters":{"id":4301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4325,"src":"9835:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4299,"name":"uint256","nodeType":"ElementaryTypeName","src":"9835:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9834:9:17"},"scope":4537,"src":"9725:495:17","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4344,"nodeType":"Block","src":"10427:82:17","statements":[{"expression":{"id":4338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4334,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"10437:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4336,"indexExpression":{"id":4335,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"10453:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10437:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10464:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10437:31:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4339,"nodeType":"ExpressionStatement","src":"10437:31:17"},{"eventCall":{"arguments":[{"id":4341,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4328,"src":"10494:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4340,"name":"ChainAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"10483:10:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10483:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4343,"nodeType":"EmitStatement","src":"10478:24:17"}]},"documentation":{"id":4326,"nodeType":"StructuredDocumentation","src":"10250:90:17","text":" @dev Adds support for a new chain\n @param chainId Chain ID to add"},"functionSelector":"87188a00","id":4345,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4331,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"10407:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4332,"kind":"modifierInvocation","modifierName":{"id":4330,"name":"onlyRole","nameLocations":["10398:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"10398:8:17"},"nodeType":"ModifierInvocation","src":"10398:28:17"}],"name":"addSupportedChain","nameLocation":"10354:17:17","nodeType":"FunctionDefinition","parameters":{"id":4329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4328,"mutability":"mutable","name":"chainId","nameLocation":"10380:7:17","nodeType":"VariableDeclaration","scope":4345,"src":"10372:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4327,"name":"uint256","nodeType":"ElementaryTypeName","src":"10372:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10371:17:17"},"returnParameters":{"id":4333,"nodeType":"ParameterList","parameters":[],"src":"10427:0:17"},"scope":4537,"src":"10345:164:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4364,"nodeType":"Block","src":"10697:85:17","statements":[{"expression":{"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4354,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"10707:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4356,"indexExpression":{"id":4355,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"10723:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10707:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"10734:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"10707:32:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4359,"nodeType":"ExpressionStatement","src":"10707:32:17"},{"eventCall":{"arguments":[{"id":4361,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4348,"src":"10767:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4360,"name":"ChainRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3783,"src":"10754:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10754:21:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4363,"nodeType":"EmitStatement","src":"10749:26:17"}]},"documentation":{"id":4346,"nodeType":"StructuredDocumentation","src":"10515:92:17","text":" @dev Removes support for a chain\n @param chainId Chain ID to remove"},"functionSelector":"0c4844aa","id":4365,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4351,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"10677:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4352,"kind":"modifierInvocation","modifierName":{"id":4350,"name":"onlyRole","nameLocations":["10668:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"10668:8:17"},"nodeType":"ModifierInvocation","src":"10668:28:17"}],"name":"removeSupportedChain","nameLocation":"10621:20:17","nodeType":"FunctionDefinition","parameters":{"id":4349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4348,"mutability":"mutable","name":"chainId","nameLocation":"10650:7:17","nodeType":"VariableDeclaration","scope":4365,"src":"10642:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4347,"name":"uint256","nodeType":"ElementaryTypeName","src":"10642:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10641:17:17"},"returnParameters":{"id":4353,"nodeType":"ParameterList","parameters":[],"src":"10697:0:17"},"scope":4537,"src":"10612:170:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4384,"nodeType":"Block","src":"10966:78:17","statements":[{"expression":{"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4374,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"10976:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4376,"indexExpression":{"id":4375,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"10992:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10976:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":4377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11001:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"10976:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4379,"nodeType":"ExpressionStatement","src":"10976:29:17"},{"eventCall":{"arguments":[{"id":4381,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4368,"src":"11031:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4380,"name":"TokenAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"11020:10:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11020:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4383,"nodeType":"EmitStatement","src":"11015:22:17"}]},"documentation":{"id":4366,"nodeType":"StructuredDocumentation","src":"10788:93:17","text":" @dev Adds support for a new token\n @param token Token address to add"},"functionSelector":"6d69fcaf","id":4385,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4371,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"10946:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4372,"kind":"modifierInvocation","modifierName":{"id":4370,"name":"onlyRole","nameLocations":["10937:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"10937:8:17"},"nodeType":"ModifierInvocation","src":"10937:28:17"}],"name":"addSupportedToken","nameLocation":"10895:17:17","nodeType":"FunctionDefinition","parameters":{"id":4369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4368,"mutability":"mutable","name":"token","nameLocation":"10921:5:17","nodeType":"VariableDeclaration","scope":4385,"src":"10913:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4367,"name":"address","nodeType":"ElementaryTypeName","src":"10913:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10912:15:17"},"returnParameters":{"id":4373,"nodeType":"ParameterList","parameters":[],"src":"10966:0:17"},"scope":4537,"src":"10886:158:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4404,"nodeType":"Block","src":"11233:81:17","statements":[{"expression":{"id":4398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4394,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"11243:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4396,"indexExpression":{"id":4395,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"11259:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11243:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":4397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11268:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"11243:30:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4399,"nodeType":"ExpressionStatement","src":"11243:30:17"},{"eventCall":{"arguments":[{"id":4401,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4388,"src":"11301:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4400,"name":"TokenRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"11288:12:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11288:19:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4403,"nodeType":"EmitStatement","src":"11283:24:17"}]},"documentation":{"id":4386,"nodeType":"StructuredDocumentation","src":"11050:95:17","text":" @dev Removes support for a token\n @param token Token address to remove"},"functionSelector":"76319190","id":4405,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4391,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"11213:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4392,"kind":"modifierInvocation","modifierName":{"id":4390,"name":"onlyRole","nameLocations":["11204:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"11204:8:17"},"nodeType":"ModifierInvocation","src":"11204:28:17"}],"name":"removeSupportedToken","nameLocation":"11159:20:17","nodeType":"FunctionDefinition","parameters":{"id":4389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4388,"mutability":"mutable","name":"token","nameLocation":"11188:5:17","nodeType":"VariableDeclaration","scope":4405,"src":"11180:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4387,"name":"address","nodeType":"ElementaryTypeName","src":"11180:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11179:15:17"},"returnParameters":{"id":4393,"nodeType":"ParameterList","parameters":[],"src":"11233:0:17"},"scope":4537,"src":"11150:164:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4429,"nodeType":"Block","src":"11491:127:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4414,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"11505:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31303030","id":4415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11514:4:17","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"11505:13:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4420,"nodeType":"IfStatement","src":"11501:38:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4417,"name":"InvalidFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3827,"src":"11527:10:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11527:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4419,"nodeType":"RevertStatement","src":"11520:19:17"}},{"expression":{"id":4423,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4421,"name":"bridgeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"11560:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4422,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"11572:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11560:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4424,"nodeType":"ExpressionStatement","src":"11560:18:17"},{"eventCall":{"arguments":[{"id":4426,"name":"newFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4408,"src":"11604:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4425,"name":"FeeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3795,"src":"11593:10:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11593:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4428,"nodeType":"EmitStatement","src":"11588:23:17"}]},"documentation":{"id":4406,"nodeType":"StructuredDocumentation","src":"11320:87:17","text":" @dev Updates bridge fee\n @param newFee New fee in basis points"},"functionSelector":"5a1c0366","id":4430,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4411,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"11471:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4412,"kind":"modifierInvocation","modifierName":{"id":4410,"name":"onlyRole","nameLocations":["11462:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"11462:8:17"},"nodeType":"ModifierInvocation","src":"11462:28:17"}],"name":"updateBridgeFee","nameLocation":"11421:15:17","nodeType":"FunctionDefinition","parameters":{"id":4409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4408,"mutability":"mutable","name":"newFee","nameLocation":"11445:6:17","nodeType":"VariableDeclaration","scope":4430,"src":"11437:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4407,"name":"uint256","nodeType":"ElementaryTypeName","src":"11437:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11436:16:17"},"returnParameters":{"id":4413,"nodeType":"ParameterList","parameters":[],"src":"11491:0:17"},"scope":4537,"src":"11412:206:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4457,"nodeType":"Block","src":"11823:166:17","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4440,"name":"newCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11841:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11865:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4442,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11857:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4441,"name":"address","nodeType":"ElementaryTypeName","src":"11857:7:17","typeDescriptions":{}}},"id":4444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11857:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11841:26:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e76616c696420636f6c6c6563746f722061646472657373","id":4446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11869:27:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_701ca349eb996d2d2e4d16e3f23ffcfeb6cc238ad57d5d40a3b55fa3702ca9e0","typeString":"literal_string \"Invalid collector address\""},"value":"Invalid collector address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_701ca349eb996d2d2e4d16e3f23ffcfeb6cc238ad57d5d40a3b55fa3702ca9e0","typeString":"literal_string \"Invalid collector address\""}],"id":4439,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11833:7:17","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11833:64:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4448,"nodeType":"ExpressionStatement","src":"11833:64:17"},{"expression":{"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4449,"name":"feeCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3739,"src":"11907:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4450,"name":"newCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11922:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11907:27:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4452,"nodeType":"ExpressionStatement","src":"11907:27:17"},{"eventCall":{"arguments":[{"id":4454,"name":"newCollector","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4433,"src":"11969:12:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4453,"name":"FeeCollectorUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3799,"src":"11949:19:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":4455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11949:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4456,"nodeType":"EmitStatement","src":"11944:38:17"}]},"documentation":{"id":4431,"nodeType":"StructuredDocumentation","src":"11624:106:17","text":" @dev Updates fee collector address\n @param newCollector New fee collector address"},"functionSelector":"d2c35ce8","id":4458,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4436,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"11803:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4437,"kind":"modifierInvocation","modifierName":{"id":4435,"name":"onlyRole","nameLocations":["11794:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"11794:8:17"},"nodeType":"ModifierInvocation","src":"11794:28:17"}],"name":"updateFeeCollector","nameLocation":"11744:18:17","nodeType":"FunctionDefinition","parameters":{"id":4434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4433,"mutability":"mutable","name":"newCollector","nameLocation":"11771:12:17","nodeType":"VariableDeclaration","scope":4458,"src":"11763:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4432,"name":"address","nodeType":"ElementaryTypeName","src":"11763:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"11762:22:17"},"returnParameters":{"id":4438,"nodeType":"ParameterList","parameters":[],"src":"11823:0:17"},"scope":4537,"src":"11735:254:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4468,"nodeType":"Block","src":"12094:25:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4465,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"12104:6:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12104:8:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4467,"nodeType":"ExpressionStatement","src":"12104:8:17"}]},"documentation":{"id":4459,"nodeType":"StructuredDocumentation","src":"11995:39:17","text":" @dev Emergency pause"},"functionSelector":"8456cb59","id":4469,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4462,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"12074:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4463,"kind":"modifierInvocation","modifierName":{"id":4461,"name":"onlyRole","nameLocations":["12065:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"12065:8:17"},"nodeType":"ModifierInvocation","src":"12065:28:17"}],"name":"pause","nameLocation":"12048:5:17","nodeType":"FunctionDefinition","parameters":{"id":4460,"nodeType":"ParameterList","parameters":[],"src":"12053:2:17"},"returnParameters":{"id":4464,"nodeType":"ParameterList","parameters":[],"src":"12094:0:17"},"scope":4537,"src":"12039:80:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4479,"nodeType":"Block","src":"12228:27:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4476,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"12238:8:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12238:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4478,"nodeType":"ExpressionStatement","src":"12238:10:17"}]},"documentation":{"id":4470,"nodeType":"StructuredDocumentation","src":"12125:41:17","text":" @dev Resume from pause"},"functionSelector":"3f4ba83a","id":4480,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4473,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"12208:18:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4474,"kind":"modifierInvocation","modifierName":{"id":4472,"name":"onlyRole","nameLocations":["12199:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"12199:8:17"},"nodeType":"ModifierInvocation","src":"12199:28:17"}],"name":"unpause","nameLocation":"12180:7:17","nodeType":"FunctionDefinition","parameters":{"id":4471,"nodeType":"ParameterList","parameters":[],"src":"12187:2:17"},"returnParameters":{"id":4475,"nodeType":"ParameterList","parameters":[],"src":"12228:0:17"},"scope":4537,"src":"12171:84:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4493,"nodeType":"Block","src":"12538:57:17","statements":[{"expression":{"baseExpression":{"id":4489,"name":"bridgeTransactions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3713,"src":"12555:18:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_BridgeTransaction_$3702_storage_$","typeString":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction storage ref)"}},"id":4491,"indexExpression":{"id":4490,"name":"transactionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"12574:13:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12555:33:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage","typeString":"struct CrossChainBridge.BridgeTransaction storage ref"}},"functionReturnParameters":4488,"id":4492,"nodeType":"Return","src":"12548:40:17"}]},"documentation":{"id":4481,"nodeType":"StructuredDocumentation","src":"12284:133:17","text":" @dev Gets bridge transaction details\n @param transactionId Transaction ID\n @return Transaction details"},"functionSelector":"0024a1b8","id":4494,"implemented":true,"kind":"function","modifiers":[],"name":"getBridgeTransaction","nameLocation":"12431:20:17","nodeType":"FunctionDefinition","parameters":{"id":4484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4483,"mutability":"mutable","name":"transactionId","nameLocation":"12469:13:17","nodeType":"VariableDeclaration","scope":4494,"src":"12461:21:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4482,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12461:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12451:37:17"},"returnParameters":{"id":4488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4494,"src":"12512:24:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_memory_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"},"typeName":{"id":4486,"nodeType":"UserDefinedTypeName","pathNode":{"id":4485,"name":"BridgeTransaction","nameLocations":["12512:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":3702,"src":"12512:17:17"},"referencedDeclaration":3702,"src":"12512:17:17","typeDescriptions":{"typeIdentifier":"t_struct$_BridgeTransaction_$3702_storage_ptr","typeString":"struct CrossChainBridge.BridgeTransaction"}},"visibility":"internal"}],"src":"12511:26:17"},"scope":4537,"src":"12422:173:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4506,"nodeType":"Block","src":"12828:48:17","statements":[{"expression":{"baseExpression":{"id":4502,"name":"supportedChains","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3717,"src":"12845:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_bool_$","typeString":"mapping(uint256 => bool)"}},"id":4504,"indexExpression":{"id":4503,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4497,"src":"12861:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12845:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4501,"id":4505,"nodeType":"Return","src":"12838:31:17"}]},"documentation":{"id":4495,"nodeType":"StructuredDocumentation","src":"12601:150:17","text":" @dev Checks if a chain is supported\n @param chainId Chain ID to check\n @return supported Whether the chain is supported"},"functionSelector":"5221c1f0","id":4507,"implemented":true,"kind":"function","modifiers":[],"name":"isChainSupported","nameLocation":"12765:16:17","nodeType":"FunctionDefinition","parameters":{"id":4498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4497,"mutability":"mutable","name":"chainId","nameLocation":"12790:7:17","nodeType":"VariableDeclaration","scope":4507,"src":"12782:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4496,"name":"uint256","nodeType":"ElementaryTypeName","src":"12782:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12781:17:17"},"returnParameters":{"id":4501,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4500,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4507,"src":"12822:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4499,"name":"bool","nodeType":"ElementaryTypeName","src":"12822:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12821:6:17"},"scope":4537,"src":"12756:120:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4519,"nodeType":"Block","src":"13110:46:17","statements":[{"expression":{"baseExpression":{"id":4515,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"13127:15:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4517,"indexExpression":{"id":4516,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"13143:5:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13127:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4514,"id":4518,"nodeType":"Return","src":"13120:29:17"}]},"documentation":{"id":4508,"nodeType":"StructuredDocumentation","src":"12882:153:17","text":" @dev Checks if a token is supported\n @param token Token address to check\n @return supported Whether the token is supported"},"functionSelector":"75151b63","id":4520,"implemented":true,"kind":"function","modifiers":[],"name":"isTokenSupported","nameLocation":"13049:16:17","nodeType":"FunctionDefinition","parameters":{"id":4511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"token","nameLocation":"13074:5:17","nodeType":"VariableDeclaration","scope":4520,"src":"13066:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4509,"name":"address","nodeType":"ElementaryTypeName","src":"13066:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13065:15:17"},"returnParameters":{"id":4514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4513,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4520,"src":"13104:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4512,"name":"bool","nodeType":"ElementaryTypeName","src":"13104:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13103:6:17"},"scope":4537,"src":"13040:116:17","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":4535,"nodeType":"Block","src":"13371:59:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4528,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4523,"src":"13389:6:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4529,"name":"bridgeFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3734,"src":"13398:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13389:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4531,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"13388:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":4532,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3737,"src":"13411:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13388:35:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4527,"id":4534,"nodeType":"Return","src":"13381:42:17"}]},"documentation":{"id":4521,"nodeType":"StructuredDocumentation","src":"13162:129:17","text":" @dev Estimates bridge fee for an amount\n @param amount Amount to bridge\n @return fee Estimated fee"},"functionSelector":"9822dded","id":4536,"implemented":true,"kind":"function","modifiers":[],"name":"estimateBridgeFee","nameLocation":"13305:17:17","nodeType":"FunctionDefinition","parameters":{"id":4524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4523,"mutability":"mutable","name":"amount","nameLocation":"13331:6:17","nodeType":"VariableDeclaration","scope":4536,"src":"13323:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4522,"name":"uint256","nodeType":"ElementaryTypeName","src":"13323:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13322:16:17"},"returnParameters":{"id":4527,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4526,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4536,"src":"13362:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4525,"name":"uint256","nodeType":"ElementaryTypeName","src":"13362:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13361:9:17"},"scope":4537,"src":"13296:134:17","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4538,"src":"634:12798:17","usedErrors":[3803,3807,3809,3811,3815,3823,3825,3827,3829],"usedEvents":[327,336,345,399,404,3751,3759,3769,3775,3779,3783,3787,3791,3795,3799]}],"src":"32:13400:17"},"id":17},"src/YieldEscrow.sol":{"ast":{"absolutePath":"src/YieldEscrow.sol","exportedSymbols":{"AccessControl":[315],"Address":[1993],"Context":[2023],"ECDSA":[2618],"ERC165":[2642],"IAccessControl":[388],"IERC165":[2654],"IERC20":[1226],"IERC20Permit":[1287],"IYieldStrategy":[8169],"Math":[3520],"Pausable":[496],"ReentrancyGuard":[561],"SafeERC20":[1663],"SignedMath":[3625],"Strings":[2252],"YieldEscrow":[6136]},"id":6137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4539,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":1227,"src":"58:56:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":4541,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":1664,"src":"115:65:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":4542,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":562,"src":"181:62:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":4543,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":497,"src":"244:55:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":4544,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":316,"src":"300:58:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":4545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":2619,"src":"359:62:18","symbolAliases":[],"unitAlias":""},{"absolutePath":"src/interfaces/IYieldStrategy.sol","file":"./interfaces/IYieldStrategy.sol","id":4546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":6137,"sourceUnit":8170,"src":"422:41:18","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4548,"name":"ReentrancyGuard","nameLocations":["1114:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"1114:15:18"},"id":4549,"nodeType":"InheritanceSpecifier","src":"1114:15:18"},{"baseName":{"id":4550,"name":"Pausable","nameLocations":["1131:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":496,"src":"1131:8:18"},"id":4551,"nodeType":"InheritanceSpecifier","src":"1131:8:18"},{"baseName":{"id":4552,"name":"AccessControl","nameLocations":["1141:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"1141:13:18"},"id":4553,"nodeType":"InheritanceSpecifier","src":"1141:13:18"}],"canonicalName":"YieldEscrow","contractDependencies":[],"contractKind":"contract","documentation":{"id":4547,"nodeType":"StructuredDocumentation","src":"465:624:18","text":" @title YieldEscrow\n @dev Main escrow contract for YieldRails that holds stablecoins and generates yield\n @notice This contract enables yield-powered payments with automatic yield distribution\n @author YieldRails Team\n \n Key Features:\n - Holds user deposits in escrow until merchant releases payment\n - Automatically generates yield through integrated strategies\n - Distributes yield: 70% to users, 20% to merchants, 10% to protocol\n - Supports multiple stablecoins and yield strategies\n - Gas-optimized for <100k gas per transaction\n - 100% test coverage with comprehensive security measures"},"fullyImplemented":true,"id":6136,"linearizedBaseContracts":[6136,315,2642,2654,388,496,2023,561],"name":"YieldEscrow","nameLocation":"1099:11:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4557,"libraryName":{"id":4554,"name":"SafeERC20","nameLocations":["1167:9:18"],"nodeType":"IdentifierPath","referencedDeclaration":1663,"src":"1167:9:18"},"nodeType":"UsingForDirective","src":"1161:27:18","typeName":{"id":4556,"nodeType":"UserDefinedTypeName","pathNode":{"id":4555,"name":"IERC20","nameLocations":["1181:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"1181:6:18"},"referencedDeclaration":1226,"src":"1181:6:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}},{"global":false,"id":4560,"libraryName":{"id":4558,"name":"ECDSA","nameLocations":["1199:5:18"],"nodeType":"IdentifierPath","referencedDeclaration":2618,"src":"1199:5:18"},"nodeType":"UsingForDirective","src":"1193:24:18","typeName":{"id":4559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1209:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":true,"functionSelector":"75b238fc","id":4565,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1936:10:18","nodeType":"VariableDeclaration","scope":6136,"src":"1912:60:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1912:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":4563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1959:12:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":4562,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1949:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1949:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"f5b541a6","id":4570,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"2002:13:18","nodeType":"VariableDeclaration","scope":6136,"src":"1978:66:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1978:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4f50455241544f525f524f4c45","id":4568,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2028:15:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""},"value":"OPERATOR_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929","typeString":"literal_string \"OPERATOR_ROLE\""}],"id":4567,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2018:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2018:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"b3d35839","id":4575,"mutability":"constant","name":"MERCHANT_ROLE","nameLocation":"2074:13:18","nodeType":"VariableDeclaration","scope":6136,"src":"2050:66:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2050:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"4d45524348414e545f524f4c45","id":4573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2100:15:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff36","typeString":"literal_string \"MERCHANT_ROLE\""},"value":"MERCHANT_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff36","typeString":"literal_string \"MERCHANT_ROLE\""}],"id":4572,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2090:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2090:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"abcbe0b2","id":4580,"mutability":"constant","name":"STRATEGY_MANAGER_ROLE","nameLocation":"2146:21:18","nodeType":"VariableDeclaration","scope":6136,"src":"2122:82:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2122:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"53545241544547595f4d414e414745525f524f4c45","id":4578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2180:23:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b","typeString":"literal_string \"STRATEGY_MANAGER_ROLE\""},"value":"STRATEGY_MANAGER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b","typeString":"literal_string \"STRATEGY_MANAGER_ROLE\""}],"id":4577,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2170:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"14ae9d7d","id":4583,"mutability":"constant","name":"USER_YIELD_PERCENTAGE","nameLocation":"2288:21:18","nodeType":"VariableDeclaration","scope":6136,"src":"2264:52:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4581,"name":"uint256","nodeType":"ElementaryTypeName","src":"2264:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"37303030","id":4582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2312:4:18","typeDescriptions":{"typeIdentifier":"t_rational_7000_by_1","typeString":"int_const 7000"},"value":"7000"},"visibility":"public"},{"constant":true,"functionSelector":"f6727092","id":4586,"mutability":"constant","name":"MERCHANT_YIELD_PERCENTAGE","nameLocation":"2358:25:18","nodeType":"VariableDeclaration","scope":6136,"src":"2334:56:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4584,"name":"uint256","nodeType":"ElementaryTypeName","src":"2334:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32303030","id":4585,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2386:4:18","typeDescriptions":{"typeIdentifier":"t_rational_2000_by_1","typeString":"int_const 2000"},"value":"2000"},"visibility":"public"},{"constant":true,"functionSelector":"dacf3df9","id":4589,"mutability":"constant","name":"PROTOCOL_YIELD_PERCENTAGE","nameLocation":"2428:25:18","nodeType":"VariableDeclaration","scope":6136,"src":"2404:56:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4587,"name":"uint256","nodeType":"ElementaryTypeName","src":"2404:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":4588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2456:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"public"},{"constant":true,"functionSelector":"e1f1c4a7","id":4592,"mutability":"constant","name":"BASIS_POINTS","nameLocation":"2498:12:18","nodeType":"VariableDeclaration","scope":6136,"src":"2474:44:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4590,"name":"uint256","nodeType":"ElementaryTypeName","src":"2474:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":4591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2513:5:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"public"},{"constant":true,"functionSelector":"41f1c0d9","id":4599,"mutability":"constant","name":"MAX_DEPOSIT_PER_TX","nameLocation":"2603:18:18","nodeType":"VariableDeclaration","scope":6136,"src":"2579:62:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4593,"name":"uint256","nodeType":"ElementaryTypeName","src":"2579:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1000000000000_by_1","typeString":"int_const 1000000000000"},"id":4598,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"315f3030305f303030","id":4594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2624:9:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"value":"1_000_000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"id":4597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2636:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"36","id":4596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2640:1:18","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"2636:5:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}},"src":"2624:17:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000_by_1","typeString":"int_const 1000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"392fe6b2","id":4606,"mutability":"constant","name":"MAX_DAILY_VOLUME","nameLocation":"2686:16:18","nodeType":"VariableDeclaration","scope":6136,"src":"2662:61:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4600,"name":"uint256","nodeType":"ElementaryTypeName","src":"2662:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_10000000000000_by_1","typeString":"int_const 10000000000000"},"id":4605,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31305f3030305f303030","id":4601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2705:10:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000_by_1","typeString":"int_const 10000000"},"value":"10_000_000"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"id":4604,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2718:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"36","id":4603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2722:1:18","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"2718:5:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}},"src":"2705:18:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000_by_1","typeString":"int_const 10000000000000"}},"visibility":"public"},{"constant":true,"functionSelector":"1ea30fef","id":4613,"mutability":"constant","name":"MIN_DEPOSIT_AMOUNT","nameLocation":"2770:18:18","nodeType":"VariableDeclaration","scope":6136,"src":"2746:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4607,"name":"uint256","nodeType":"ElementaryTypeName","src":"2746:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"id":4612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2791:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"commonType":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"},"id":4611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2795:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"36","id":4610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2799:1:18","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"2795:5:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}},"src":"2791:9:18","typeDescriptions":{"typeIdentifier":"t_rational_1000000_by_1","typeString":"int_const 1000000"}},"visibility":"public"},{"constant":true,"functionSelector":"74f0314f","id":4616,"mutability":"constant","name":"SECONDS_PER_DAY","nameLocation":"2852:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"2828:47:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4614,"name":"uint256","nodeType":"ElementaryTypeName","src":"2828:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3836343030","id":4615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2870:5:18","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"86400"},"visibility":"public"},{"constant":true,"id":4619,"mutability":"constant","name":"MAX_DEPOSITS_PER_USER","nameLocation":"2941:21:18","nodeType":"VariableDeclaration","scope":6136,"src":"2916:53:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4617,"name":"uint256","nodeType":"ElementaryTypeName","src":"2916:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":4618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2965:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"private"},{"constant":false,"functionSelector":"08f43333","id":4625,"mutability":"mutable","name":"userDeposits","nameLocation":"3724:12:18","nodeType":"VariableDeclaration","scope":6136,"src":"3687:49:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit[])"},"typeName":{"id":4624,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4620,"name":"address","nodeType":"ElementaryTypeName","src":"3695:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3687:29:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit[])"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"baseType":{"id":4622,"nodeType":"UserDefinedTypeName","pathNode":{"id":4621,"name":"Deposit","nameLocations":["3706:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"3706:7:18"},"referencedDeclaration":4697,"src":"3706:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"id":4623,"nodeType":"ArrayTypeName","src":"3706:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_ptr","typeString":"struct YieldEscrow.Deposit[]"}}},"visibility":"public"},{"constant":false,"functionSelector":"729c3e0e","id":4629,"mutability":"mutable","name":"userDepositCount","nameLocation":"3777:16:18","nodeType":"VariableDeclaration","scope":6136,"src":"3742:51:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4628,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4626,"name":"address","nodeType":"ElementaryTypeName","src":"3750:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3742:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4627,"name":"uint256","nodeType":"ElementaryTypeName","src":"3761:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"99fcfb43","id":4633,"mutability":"mutable","name":"processedPaymentHashes","nameLocation":"3831:22:18","nodeType":"VariableDeclaration","scope":6136,"src":"3799:54:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":4632,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4630,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3807:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"3799:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4631,"name":"bool","nodeType":"ElementaryTypeName","src":"3818:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"7f3f1601","id":4637,"mutability":"mutable","name":"merchantBalances","nameLocation":"3923:16:18","nodeType":"VariableDeclaration","scope":6136,"src":"3888:51:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4636,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4634,"name":"address","nodeType":"ElementaryTypeName","src":"3896:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3888:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4635,"name":"uint256","nodeType":"ElementaryTypeName","src":"3907:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"e7f5165a","id":4641,"mutability":"mutable","name":"userYieldBalances","nameLocation":"3980:17:18","nodeType":"VariableDeclaration","scope":6136,"src":"3945:52:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4640,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4638,"name":"address","nodeType":"ElementaryTypeName","src":"3953:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3945:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4639,"name":"uint256","nodeType":"ElementaryTypeName","src":"3964:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"61e98db8","id":4643,"mutability":"mutable","name":"protocolBalance","nameLocation":"4018:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"4003:30:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4642,"name":"uint256","nodeType":"ElementaryTypeName","src":"4003:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"ee3be5f5","id":4648,"mutability":"mutable","name":"supportedStrategies","nameLocation":"4113:19:18","nodeType":"VariableDeclaration","scope":6136,"src":"4071:61:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_contract$_IYieldStrategy_$8169_$","typeString":"mapping(address => contract IYieldStrategy)"},"typeName":{"id":4647,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4644,"name":"address","nodeType":"ElementaryTypeName","src":"4079:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4071:34:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_contract$_IYieldStrategy_$8169_$","typeString":"mapping(address => contract IYieldStrategy)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4646,"nodeType":"UserDefinedTypeName","pathNode":{"id":4645,"name":"IYieldStrategy","nameLocations":["4090:14:18"],"nodeType":"IdentifierPath","referencedDeclaration":8169,"src":"4090:14:18"},"referencedDeclaration":8169,"src":"4090:14:18","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}}},"visibility":"public"},{"constant":false,"functionSelector":"2c178bd0","id":4652,"mutability":"mutable","name":"activeStrategies","nameLocation":"4170:16:18","nodeType":"VariableDeclaration","scope":6136,"src":"4138:48:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4651,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4649,"name":"address","nodeType":"ElementaryTypeName","src":"4146:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4138:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4650,"name":"bool","nodeType":"ElementaryTypeName","src":"4157:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"a267526b","id":4655,"mutability":"mutable","name":"strategyList","nameLocation":"4209:12:18","nodeType":"VariableDeclaration","scope":6136,"src":"4192:29:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":4653,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4654,"nodeType":"ArrayTypeName","src":"4192:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"constant":false,"functionSelector":"68c4ac26","id":4659,"mutability":"mutable","name":"supportedTokens","nameLocation":"4288:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"4256:47:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":4658,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4656,"name":"address","nodeType":"ElementaryTypeName","src":"4264:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4256:24:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4657,"name":"bool","nodeType":"ElementaryTypeName","src":"4275:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"9ead7222","id":4662,"mutability":"mutable","name":"tokenList","nameLocation":"4326:9:18","nodeType":"VariableDeclaration","scope":6136,"src":"4309:26:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":4660,"name":"address","nodeType":"ElementaryTypeName","src":"4309:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4661,"nodeType":"ArrayTypeName","src":"4309:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"constant":false,"functionSelector":"943ca3b9","id":4666,"mutability":"mutable","name":"dailyVolume","nameLocation":"4404:11:18","nodeType":"VariableDeclaration","scope":6136,"src":"4369:46:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":4665,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4663,"name":"uint256","nodeType":"ElementaryTypeName","src":"4377:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"4369:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4664,"name":"uint256","nodeType":"ElementaryTypeName","src":"4388:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"ab36cb66","id":4670,"mutability":"mutable","name":"userDailyVolume","nameLocation":"4473:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"4438:50:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":4669,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4667,"name":"address","nodeType":"ElementaryTypeName","src":"4446:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"4438:27:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4668,"name":"uint256","nodeType":"ElementaryTypeName","src":"4457:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"58f85880","id":4673,"mutability":"mutable","name":"protocolFeeRate","nameLocation":"4560:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"4545:34:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4671,"name":"uint256","nodeType":"ElementaryTypeName","src":"4545:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":4672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4578:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":false,"functionSelector":"46904840","id":4675,"mutability":"mutable","name":"feeRecipient","nameLocation":"4643:12:18","nodeType":"VariableDeclaration","scope":6136,"src":"4628:27:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4674,"name":"address","nodeType":"ElementaryTypeName","src":"4628:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"canonicalName":"YieldEscrow.Deposit","documentation":{"id":4676,"nodeType":"StructuredDocumentation","src":"5336:59:18","text":" @dev Represents a user deposit in escrow"},"id":4697,"members":[{"constant":false,"id":4678,"mutability":"mutable","name":"amount","nameLocation":"5433:6:18","nodeType":"VariableDeclaration","scope":4697,"src":"5425:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4677,"name":"uint256","nodeType":"ElementaryTypeName","src":"5425:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4680,"mutability":"mutable","name":"timestamp","nameLocation":"5500:9:18","nodeType":"VariableDeclaration","scope":4697,"src":"5492:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4679,"name":"uint256","nodeType":"ElementaryTypeName","src":"5492:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4682,"mutability":"mutable","name":"token","nameLocation":"5566:5:18","nodeType":"VariableDeclaration","scope":4697,"src":"5558:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4681,"name":"address","nodeType":"ElementaryTypeName","src":"5558:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4684,"mutability":"mutable","name":"merchant","nameLocation":"5639:8:18","nodeType":"VariableDeclaration","scope":4697,"src":"5631:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4683,"name":"address","nodeType":"ElementaryTypeName","src":"5631:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4686,"mutability":"mutable","name":"yieldStrategy","nameLocation":"5713:13:18","nodeType":"VariableDeclaration","scope":4697,"src":"5705:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4685,"name":"address","nodeType":"ElementaryTypeName","src":"5705:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4688,"mutability":"mutable","name":"yieldAccrued","nameLocation":"5788:12:18","nodeType":"VariableDeclaration","scope":4697,"src":"5780:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4687,"name":"uint256","nodeType":"ElementaryTypeName","src":"5780:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4690,"mutability":"mutable","name":"lastYieldUpdate","nameLocation":"5852:15:18","nodeType":"VariableDeclaration","scope":4697,"src":"5844:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4689,"name":"uint256","nodeType":"ElementaryTypeName","src":"5844:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4692,"mutability":"mutable","name":"released","nameLocation":"5919:8:18","nodeType":"VariableDeclaration","scope":4697,"src":"5914:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4691,"name":"bool","nodeType":"ElementaryTypeName","src":"5914:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4694,"mutability":"mutable","name":"paymentHash","nameLocation":"5995:11:18","nodeType":"VariableDeclaration","scope":4697,"src":"5987:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4693,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5987:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4696,"mutability":"mutable","name":"metadata","nameLocation":"6059:8:18","nodeType":"VariableDeclaration","scope":4697,"src":"6052:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4695,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"Deposit","nameLocation":"5407:7:18","nodeType":"StructDefinition","scope":6136,"src":"5400:714:18","visibility":"public"},{"canonicalName":"YieldEscrow.StrategyMetrics","documentation":{"id":4698,"nodeType":"StructuredDocumentation","src":"6120:53:18","text":" @dev Strategy performance tracking"},"id":4707,"members":[{"constant":false,"id":4700,"mutability":"mutable","name":"totalDeposited","nameLocation":"6219:14:18","nodeType":"VariableDeclaration","scope":4707,"src":"6211:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4699,"name":"uint256","nodeType":"ElementaryTypeName","src":"6211:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4702,"mutability":"mutable","name":"totalYieldGenerated","nameLocation":"6293:19:18","nodeType":"VariableDeclaration","scope":4707,"src":"6285:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4701,"name":"uint256","nodeType":"ElementaryTypeName","src":"6285:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4704,"mutability":"mutable","name":"averageAPY","nameLocation":"6355:10:18","nodeType":"VariableDeclaration","scope":4707,"src":"6347:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4703,"name":"uint256","nodeType":"ElementaryTypeName","src":"6347:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4706,"mutability":"mutable","name":"lastUpdateTime","nameLocation":"6417:14:18","nodeType":"VariableDeclaration","scope":4707,"src":"6409:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4705,"name":"uint256","nodeType":"ElementaryTypeName","src":"6409:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StrategyMetrics","nameLocation":"6185:15:18","nodeType":"StructDefinition","scope":6136,"src":"6178:287:18","visibility":"public"},{"constant":false,"functionSelector":"b6e85026","id":4712,"mutability":"mutable","name":"strategyMetrics","nameLocation":"6514:15:18","nodeType":"VariableDeclaration","scope":6136,"src":"6471:58:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics)"},"typeName":{"id":4711,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4708,"name":"address","nodeType":"ElementaryTypeName","src":"6479:7:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"6471:35:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4710,"nodeType":"UserDefinedTypeName","pathNode":{"id":4709,"name":"StrategyMetrics","nameLocations":["6490:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"6490:15:18"},"referencedDeclaration":4707,"src":"6490:15:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"75ab645e4be4b4ec5b3feaf8e588258ecfc0e501fa619998920a13ac2a172481","id":4728,"name":"DepositCreated","nameLocation":"7215:14:18","nodeType":"EventDefinition","parameters":{"id":4727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"indexed":true,"mutability":"mutable","name":"paymentHash","nameLocation":"7255:11:18","nodeType":"VariableDeclaration","scope":4728,"src":"7239:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4713,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7239:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4716,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7292:4:18","nodeType":"VariableDeclaration","scope":4728,"src":"7276:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4715,"name":"address","nodeType":"ElementaryTypeName","src":"7276:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4718,"indexed":true,"mutability":"mutable","name":"merchant","nameLocation":"7322:8:18","nodeType":"VariableDeclaration","scope":4728,"src":"7306:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4717,"name":"address","nodeType":"ElementaryTypeName","src":"7306:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4720,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"7348:5:18","nodeType":"VariableDeclaration","scope":4728,"src":"7340:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4719,"name":"address","nodeType":"ElementaryTypeName","src":"7340:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4722,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"7371:6:18","nodeType":"VariableDeclaration","scope":4728,"src":"7363:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4721,"name":"uint256","nodeType":"ElementaryTypeName","src":"7363:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4724,"indexed":false,"mutability":"mutable","name":"yieldStrategy","nameLocation":"7395:13:18","nodeType":"VariableDeclaration","scope":4728,"src":"7387:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4723,"name":"address","nodeType":"ElementaryTypeName","src":"7387:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4726,"indexed":false,"mutability":"mutable","name":"depositIndex","nameLocation":"7426:12:18","nodeType":"VariableDeclaration","scope":4728,"src":"7418:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4725,"name":"uint256","nodeType":"ElementaryTypeName","src":"7418:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7229:215:18"},"src":"7209:236:18"},{"anonymous":false,"eventSelector":"4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de","id":4746,"name":"PaymentReleased","nameLocation":"7457:15:18","nodeType":"EventDefinition","parameters":{"id":4745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4730,"indexed":true,"mutability":"mutable","name":"paymentHash","nameLocation":"7498:11:18","nodeType":"VariableDeclaration","scope":4746,"src":"7482:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4729,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7482:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4732,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7535:4:18","nodeType":"VariableDeclaration","scope":4746,"src":"7519:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4731,"name":"address","nodeType":"ElementaryTypeName","src":"7519:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4734,"indexed":true,"mutability":"mutable","name":"merchant","nameLocation":"7565:8:18","nodeType":"VariableDeclaration","scope":4746,"src":"7549:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4733,"name":"address","nodeType":"ElementaryTypeName","src":"7549:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4736,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"7591:6:18","nodeType":"VariableDeclaration","scope":4746,"src":"7583:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4735,"name":"uint256","nodeType":"ElementaryTypeName","src":"7583:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4738,"indexed":false,"mutability":"mutable","name":"yieldGenerated","nameLocation":"7615:14:18","nodeType":"VariableDeclaration","scope":4746,"src":"7607:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4737,"name":"uint256","nodeType":"ElementaryTypeName","src":"7607:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4740,"indexed":false,"mutability":"mutable","name":"userYield","nameLocation":"7647:9:18","nodeType":"VariableDeclaration","scope":4746,"src":"7639:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4739,"name":"uint256","nodeType":"ElementaryTypeName","src":"7639:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4742,"indexed":false,"mutability":"mutable","name":"merchantYield","nameLocation":"7674:13:18","nodeType":"VariableDeclaration","scope":4746,"src":"7666:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4741,"name":"uint256","nodeType":"ElementaryTypeName","src":"7666:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4744,"indexed":false,"mutability":"mutable","name":"protocolYield","nameLocation":"7705:13:18","nodeType":"VariableDeclaration","scope":4746,"src":"7697:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4743,"name":"uint256","nodeType":"ElementaryTypeName","src":"7697:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7472:252:18"},"src":"7451:274:18"},{"anonymous":false,"eventSelector":"f3122f87791d6eff15d1abbfc04281db2f68fe1e63071cc87f02dfb207365549","id":4756,"name":"YieldCalculated","nameLocation":"7737:15:18","nodeType":"EventDefinition","parameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4748,"indexed":true,"mutability":"mutable","name":"paymentHash","nameLocation":"7778:11:18","nodeType":"VariableDeclaration","scope":4756,"src":"7762:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4747,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7762:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4750,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7815:4:18","nodeType":"VariableDeclaration","scope":4756,"src":"7799:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4749,"name":"address","nodeType":"ElementaryTypeName","src":"7799:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4752,"indexed":false,"mutability":"mutable","name":"yieldAmount","nameLocation":"7837:11:18","nodeType":"VariableDeclaration","scope":4756,"src":"7829:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4751,"name":"uint256","nodeType":"ElementaryTypeName","src":"7829:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4754,"indexed":false,"mutability":"mutable","name":"newTotalYield","nameLocation":"7866:13:18","nodeType":"VariableDeclaration","scope":4756,"src":"7858:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4753,"name":"uint256","nodeType":"ElementaryTypeName","src":"7858:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7752:133:18"},"src":"7731:155:18"},{"anonymous":false,"eventSelector":"2e440ef4db71c471feb663084d681b2e02de7fd708ef717172f488d50067d1a0","id":4764,"name":"YieldWithdrawn","nameLocation":"7898:14:18","nodeType":"EventDefinition","parameters":{"id":4763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4758,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7938:4:18","nodeType":"VariableDeclaration","scope":4764,"src":"7922:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4757,"name":"address","nodeType":"ElementaryTypeName","src":"7922:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4760,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"7960:6:18","nodeType":"VariableDeclaration","scope":4764,"src":"7952:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4759,"name":"uint256","nodeType":"ElementaryTypeName","src":"7952:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4762,"indexed":false,"mutability":"mutable","name":"token","nameLocation":"7984:5:18","nodeType":"VariableDeclaration","scope":4764,"src":"7976:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4761,"name":"address","nodeType":"ElementaryTypeName","src":"7976:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7912:83:18"},"src":"7892:104:18"},{"anonymous":false,"eventSelector":"f9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba","id":4774,"name":"EmergencyWithdrawal","nameLocation":"8008:19:18","nodeType":"EventDefinition","parameters":{"id":4773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4766,"indexed":true,"mutability":"mutable","name":"paymentHash","nameLocation":"8053:11:18","nodeType":"VariableDeclaration","scope":4774,"src":"8037:27:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4765,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8037:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4768,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"8090:4:18","nodeType":"VariableDeclaration","scope":4774,"src":"8074:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4767,"name":"address","nodeType":"ElementaryTypeName","src":"8074:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4770,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"8112:6:18","nodeType":"VariableDeclaration","scope":4774,"src":"8104:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4769,"name":"uint256","nodeType":"ElementaryTypeName","src":"8104:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4772,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"8135:6:18","nodeType":"VariableDeclaration","scope":4774,"src":"8128:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4771,"name":"string","nodeType":"ElementaryTypeName","src":"8128:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8027:120:18"},"src":"8002:146:18"},{"anonymous":false,"eventSelector":"0a6d61c25dd73692b246d702e41b676092851383053847152454787009572ca1","id":4782,"name":"StrategyAdded","nameLocation":"8160:13:18","nodeType":"EventDefinition","parameters":{"id":4781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4776,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"8199:8:18","nodeType":"VariableDeclaration","scope":4782,"src":"8183:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4775,"name":"address","nodeType":"ElementaryTypeName","src":"8183:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4778,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"8233:5:18","nodeType":"VariableDeclaration","scope":4782,"src":"8217:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4777,"name":"address","nodeType":"ElementaryTypeName","src":"8217:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4780,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"8255:4:18","nodeType":"VariableDeclaration","scope":4782,"src":"8248:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4779,"name":"string","nodeType":"ElementaryTypeName","src":"8248:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8173:92:18"},"src":"8154:112:18"},{"anonymous":false,"eventSelector":"a214ec724672a94bf6c67d879945ada3446bdd623baed4584c515309b8573a2c","id":4788,"name":"StrategyRemoved","nameLocation":"8278:15:18","nodeType":"EventDefinition","parameters":{"id":4787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4784,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"8319:8:18","nodeType":"VariableDeclaration","scope":4788,"src":"8303:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4783,"name":"address","nodeType":"ElementaryTypeName","src":"8303:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4786,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"8344:6:18","nodeType":"VariableDeclaration","scope":4788,"src":"8337:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4785,"name":"string","nodeType":"ElementaryTypeName","src":"8337:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8293:63:18"},"src":"8272:85:18"},{"anonymous":false,"eventSelector":"7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a","id":4794,"name":"TokenAdded","nameLocation":"8369:10:18","nodeType":"EventDefinition","parameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4790,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"8405:5:18","nodeType":"VariableDeclaration","scope":4794,"src":"8389:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4789,"name":"address","nodeType":"ElementaryTypeName","src":"8389:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4792,"indexed":false,"mutability":"mutable","name":"symbol","nameLocation":"8427:6:18","nodeType":"VariableDeclaration","scope":4794,"src":"8420:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4791,"name":"string","nodeType":"ElementaryTypeName","src":"8420:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8379:60:18"},"src":"8363:77:18"},{"anonymous":false,"eventSelector":"b404cac19fb1cbeff98d325795b08886e3cd8fe8cb1a2f193aac66f13fb239c3","id":4800,"name":"ProtocolFeeUpdated","nameLocation":"8452:18:18","nodeType":"EventDefinition","parameters":{"id":4799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4796,"indexed":false,"mutability":"mutable","name":"oldFee","nameLocation":"8488:6:18","nodeType":"VariableDeclaration","scope":4800,"src":"8480:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4795,"name":"uint256","nodeType":"ElementaryTypeName","src":"8480:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4798,"indexed":false,"mutability":"mutable","name":"newFee","nameLocation":"8512:6:18","nodeType":"VariableDeclaration","scope":4800,"src":"8504:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4797,"name":"uint256","nodeType":"ElementaryTypeName","src":"8504:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8470:54:18"},"src":"8446:79:18"},{"errorSelector":"2c5211c6","id":4802,"name":"InvalidAmount","nameLocation":"9210:13:18","nodeType":"ErrorDefinition","parameters":{"id":4801,"nodeType":"ParameterList","parameters":[],"src":"9223:2:18"},"src":"9204:22:18"},{"errorSelector":"e6c4247b","id":4804,"name":"InvalidAddress","nameLocation":"9237:14:18","nodeType":"ErrorDefinition","parameters":{"id":4803,"nodeType":"ParameterList","parameters":[],"src":"9251:2:18"},"src":"9231:23:18"},{"errorSelector":"4e236e9a","id":4806,"name":"InvalidStrategy","nameLocation":"9265:15:18","nodeType":"ErrorDefinition","parameters":{"id":4805,"nodeType":"ParameterList","parameters":[],"src":"9280:2:18"},"src":"9259:24:18"},{"errorSelector":"c1ab6dc1","id":4808,"name":"InvalidToken","nameLocation":"9294:12:18","nodeType":"ErrorDefinition","parameters":{"id":4807,"nodeType":"ParameterList","parameters":[],"src":"9306:2:18"},"src":"9288:21:18"},{"errorSelector":"f4d678b8","id":4810,"name":"InsufficientBalance","nameLocation":"9320:19:18","nodeType":"ErrorDefinition","parameters":{"id":4809,"nodeType":"ParameterList","parameters":[],"src":"9339:2:18"},"src":"9314:28:18"},{"errorSelector":"424e8d71","id":4812,"name":"PaymentAlreadyProcessed","nameLocation":"9353:23:18","nodeType":"ErrorDefinition","parameters":{"id":4811,"nodeType":"ParameterList","parameters":[],"src":"9376:2:18"},"src":"9347:32:18"},{"errorSelector":"5ed15cf9","id":4814,"name":"OnlyMerchantCanRelease","nameLocation":"9390:22:18","nodeType":"ErrorDefinition","parameters":{"id":4813,"nodeType":"ParameterList","parameters":[],"src":"9412:2:18"},"src":"9384:31:18"},{"errorSelector":"e8112252","id":4816,"name":"DepositAlreadyReleased","nameLocation":"9426:22:18","nodeType":"ErrorDefinition","parameters":{"id":4815,"nodeType":"ParameterList","parameters":[],"src":"9448:2:18"},"src":"9420:31:18"},{"errorSelector":"194bd314","id":4818,"name":"DailyLimitExceeded","nameLocation":"9462:18:18","nodeType":"ErrorDefinition","parameters":{"id":4817,"nodeType":"ParameterList","parameters":[],"src":"9480:2:18"},"src":"9456:27:18"},{"errorSelector":"c3dd4aea","id":4820,"name":"UserLimitExceeded","nameLocation":"9494:17:18","nodeType":"ErrorDefinition","parameters":{"id":4819,"nodeType":"ParameterList","parameters":[],"src":"9511:2:18"},"src":"9488:26:18"},{"errorSelector":"dc974a98","id":4822,"name":"StrategyNotActive","nameLocation":"9525:17:18","nodeType":"ErrorDefinition","parameters":{"id":4821,"nodeType":"ParameterList","parameters":[],"src":"9542:2:18"},"src":"9519:26:18"},{"errorSelector":"3dd1b305","id":4824,"name":"TokenNotSupported","nameLocation":"9556:17:18","nodeType":"ErrorDefinition","parameters":{"id":4823,"nodeType":"ParameterList","parameters":[],"src":"9573:2:18"},"src":"9550:26:18"},{"errorSelector":"411321ed","id":4826,"name":"DepositNotFound","nameLocation":"9587:15:18","nodeType":"ErrorDefinition","parameters":{"id":4825,"nodeType":"ParameterList","parameters":[],"src":"9602:2:18"},"src":"9581:24:18"},{"errorSelector":"66055ea0","id":4828,"name":"YieldCalculationFailed","nameLocation":"9616:22:18","nodeType":"ErrorDefinition","parameters":{"id":4827,"nodeType":"ParameterList","parameters":[],"src":"9638:2:18"},"src":"9610:31:18"},{"errorSelector":"90b8ec18","id":4830,"name":"TransferFailed","nameLocation":"9652:14:18","nodeType":"ErrorDefinition","parameters":{"id":4829,"nodeType":"ParameterList","parameters":[],"src":"9666:2:18"},"src":"9646:23:18"},{"body":{"id":4870,"nodeType":"Block","src":"10603:245:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4843,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4838,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"10617:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10634:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4840,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10626:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4839,"name":"address","nodeType":"ElementaryTypeName","src":"10626:7:18","typeDescriptions":{}}},"id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10626:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10617:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4844,"name":"feeRecipient_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"10640:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10665:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4846,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10657:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4845,"name":"address","nodeType":"ElementaryTypeName","src":"10657:7:18","typeDescriptions":{}}},"id":4848,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10657:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10640:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10617:50:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4855,"nodeType":"IfStatement","src":"10613:104:18","trueBody":{"id":4854,"nodeType":"Block","src":"10669:48:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4851,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"10690:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10690:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4853,"nodeType":"RevertStatement","src":"10683:23:18"}]}},{"expression":{"arguments":[{"id":4857,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"10738:18:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4858,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"10758:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4856,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10727:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10727:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4860,"nodeType":"ExpressionStatement","src":"10727:37:18"},{"expression":{"arguments":[{"id":4862,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"10785:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4863,"name":"admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4833,"src":"10797:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4861,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10774:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":4864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10774:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4865,"nodeType":"ExpressionStatement","src":"10774:29:18"},{"expression":{"id":4868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4866,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"10813:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4867,"name":"feeRecipient_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4835,"src":"10828:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10813:28:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4869,"nodeType":"ExpressionStatement","src":"10813:28:18"}]},"documentation":{"id":4831,"nodeType":"StructuredDocumentation","src":"10353:195:18","text":" @dev Initialize the YieldEscrow contract\n @param admin The address that will have admin privileges\n @param feeRecipient_ The address that will receive protocol fees"},"id":4871,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4833,"mutability":"mutable","name":"admin","nameLocation":"10573:5:18","nodeType":"VariableDeclaration","scope":4871,"src":"10565:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4832,"name":"address","nodeType":"ElementaryTypeName","src":"10565:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4835,"mutability":"mutable","name":"feeRecipient_","nameLocation":"10588:13:18","nodeType":"VariableDeclaration","scope":4871,"src":"10580:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4834,"name":"address","nodeType":"ElementaryTypeName","src":"10580:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10564:38:18"},"returnParameters":{"id":4837,"nodeType":"ParameterList","parameters":[],"src":"10603:0:18"},"scope":6136,"src":"10553:295:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5061,"nodeType":"Block","src":"12593:1946:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4893,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"12635:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4894,"name":"MIN_DEPOSIT_AMOUNT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"12644:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12635:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4896,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"12666:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4897,"name":"MAX_DEPOSIT_PER_TX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"12675:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12666:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12635:58:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4904,"nodeType":"IfStatement","src":"12631:111:18","trueBody":{"id":4903,"nodeType":"Block","src":"12695:47:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4900,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"12716:13:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12716:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4902,"nodeType":"RevertStatement","src":"12709:22:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4905,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"12755:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12772:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4907,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12764:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4906,"name":"address","nodeType":"ElementaryTypeName","src":"12764:7:18","typeDescriptions":{}}},"id":4909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12764:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12755:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4911,"name":"merchant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"12778:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12798:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12790:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4912,"name":"address","nodeType":"ElementaryTypeName","src":"12790:7:18","typeDescriptions":{}}},"id":4915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12790:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12778:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12755:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4918,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"12804:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12829:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12821:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4919,"name":"address","nodeType":"ElementaryTypeName","src":"12821:7:18","typeDescriptions":{}}},"id":4922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12821:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12804:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12755:76:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4929,"nodeType":"IfStatement","src":"12751:130:18","trueBody":{"id":4928,"nodeType":"Block","src":"12833:48:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4925,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"12854:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4926,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12854:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4927,"nodeType":"RevertStatement","src":"12847:23:18"}]}},{"condition":{"id":4933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12894:23:18","subExpression":{"baseExpression":{"id":4930,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"12895:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4932,"indexExpression":{"id":4931,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"12911:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12895:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4938,"nodeType":"IfStatement","src":"12890:80:18","trueBody":{"id":4937,"nodeType":"Block","src":"12919:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4934,"name":"TokenNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"12940:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12940:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4936,"nodeType":"RevertStatement","src":"12933:26:18"}]}},{"condition":{"id":4942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12983:32:18","subExpression":{"baseExpression":{"id":4939,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"12984:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":4941,"indexExpression":{"id":4940,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"13001:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12984:31:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4947,"nodeType":"IfStatement","src":"12979:89:18","trueBody":{"id":4946,"nodeType":"Block","src":"13017:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4943,"name":"StrategyNotActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"13038:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4944,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13038:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4945,"nodeType":"RevertStatement","src":"13031:26:18"}]}},{"condition":{"baseExpression":{"id":4948,"name":"processedPaymentHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"13081:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":4950,"indexExpression":{"id":4949,"name":"paymentHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"13104:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13081:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4955,"nodeType":"IfStatement","src":"13077:98:18","trueBody":{"id":4954,"nodeType":"Block","src":"13118:57:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4951,"name":"PaymentAlreadyProcessed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4812,"src":"13139:23:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13139:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4953,"nodeType":"RevertStatement","src":"13132:32:18"}]}},{"expression":{"arguments":[{"id":4957,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"13237:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4956,"name":"_checkDailyLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5839,"src":"13219:17:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4958,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13219:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4959,"nodeType":"ExpressionStatement","src":"13219:25:18"},{"expression":{"arguments":[{"expression":{"id":4961,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13271:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13275:6:18","memberName":"sender","nodeType":"MemberAccess","src":"13271:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4963,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"13283:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4960,"name":"_checkUserLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5878,"src":"13254:16:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) view"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13254:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4965,"nodeType":"ExpressionStatement","src":"13254:36:18"},{"expression":{"arguments":[{"expression":{"id":4970,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13386:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13390:6:18","memberName":"sender","nodeType":"MemberAccess","src":"13386:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":4974,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13406:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}],"id":4973,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13398:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4972,"name":"address","nodeType":"ElementaryTypeName","src":"13398:7:18","typeDescriptions":{}}},"id":4975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13398:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4976,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"13413:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":4967,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"13362:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4966,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"13355:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":4968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13355:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":4969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13369:16:18","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1347,"src":"13355:30:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":4977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13355:65:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4978,"nodeType":"ExpressionStatement","src":"13355:65:18"},{"expression":{"id":4984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4979,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"13464:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4980,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"13479:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4983,"indexExpression":{"expression":{"id":4981,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13496:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13500:6:18","memberName":"sender","nodeType":"MemberAccess","src":"13496:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13479:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13464:43:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4985,"nodeType":"ExpressionStatement","src":"13464:43:18"},{"expression":{"arguments":[{"arguments":[{"id":4992,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"13577:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4993,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13608:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4994,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13614:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"13608:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4995,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"13644:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4996,"name":"merchant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"13673:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4997,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"13710:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13751:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":4999,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"13783:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13789:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"13783:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"66616c7365","id":5001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13822:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":5002,"name":"paymentHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"13854:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5003,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4884,"src":"13889:8:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":4991,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4697,"src":"13547:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_Deposit_$4697_storage_ptr_$","typeString":"type(struct YieldEscrow.Deposit storage pointer)"}},"id":5004,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["13569:6:18","13597:9:18","13637:5:18","13663:8:18","13695:13:18","13737:12:18","13766:15:18","13812:8:18","13841:11:18","13879:8:18"],"names":["amount","timestamp","token","merchant","yieldStrategy","yieldAccrued","lastYieldUpdate","released","paymentHash","metadata"],"nodeType":"FunctionCall","src":"13547:361:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}],"expression":{"baseExpression":{"id":4986,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"13517:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":4989,"indexExpression":{"expression":{"id":4987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13530:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13534:6:18","memberName":"sender","nodeType":"MemberAccess","src":"13530:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13517:24:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":4990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13542:4:18","memberName":"push","nodeType":"MemberAccess","src":"13517:29:18","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_ptr_$_t_struct$_Deposit_$4697_storage_$returns$__$attached_to$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_ptr_$","typeString":"function (struct YieldEscrow.Deposit storage ref[] storage pointer,struct YieldEscrow.Deposit storage ref)"}},"id":5005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13517:392:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5006,"nodeType":"ExpressionStatement","src":"13517:392:18"},{"expression":{"id":5011,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13920:30:18","subExpression":{"baseExpression":{"id":5007,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"13920:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5010,"indexExpression":{"expression":{"id":5008,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13937:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13941:6:18","memberName":"sender","nodeType":"MemberAccess","src":"13937:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13920:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5012,"nodeType":"ExpressionStatement","src":"13920:30:18"},{"expression":{"id":5017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5013,"name":"processedPaymentHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4633,"src":"13960:22:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":5015,"indexExpression":{"id":5014,"name":"paymentHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"13983:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13960:35:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5016,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"13998:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"13960:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5018,"nodeType":"ExpressionStatement","src":"13960:42:18"},{"expression":{"arguments":[{"id":5023,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"14078:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5024,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14093:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5020,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"14059:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5019,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"14052:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":5021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14052:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":5022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14066:11:18","memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":1391,"src":"14052:25:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14052:48:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5026,"nodeType":"ExpressionStatement","src":"14052:48:18"},{"expression":{"arguments":[{"id":5031,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14148:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5028,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"14125:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5027,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"14110:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":5029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14110:29:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":5030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14140:7:18","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":8051,"src":"14110:37:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":5032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14110:45:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5033,"nodeType":"ExpressionStatement","src":"14110:45:18"},{"expression":{"arguments":[{"id":5035,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14212:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5034,"name":"_updateDailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5897,"src":"14193:18:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14193:26:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5037,"nodeType":"ExpressionStatement","src":"14193:26:18"},{"expression":{"arguments":[{"expression":{"id":5039,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14252:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14256:6:18","memberName":"sender","nodeType":"MemberAccess","src":"14252:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5041,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14264:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5038,"name":"_updateUserDailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5911,"src":"14229:22:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14229:42:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5043,"nodeType":"ExpressionStatement","src":"14229:42:18"},{"expression":{"arguments":[{"id":5045,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"14304:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5046,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14319:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14327:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5044,"name":"_updateStrategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5977,"src":"14281:22:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14281:48:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5049,"nodeType":"ExpressionStatement","src":"14281:48:18"},{"eventCall":{"arguments":[{"id":5051,"name":"paymentHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4882,"src":"14373:11:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5052,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14398:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14402:6:18","memberName":"sender","nodeType":"MemberAccess","src":"14398:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5054,"name":"merchant","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4878,"src":"14422:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5055,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4876,"src":"14444:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5056,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4874,"src":"14463:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5057,"name":"yieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4880,"src":"14483:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5058,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4891,"src":"14510:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5050,"name":"DepositCreated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4728,"src":"14345:14:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,address,uint256,address,uint256)"}},"id":5059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14345:187:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5060,"nodeType":"EmitStatement","src":"14340:192:18"}]},"documentation":{"id":4872,"nodeType":"StructuredDocumentation","src":"11543:782:18","text":" @dev Creates a new deposit for payment processing with yield generation\n @param amount The amount of tokens to deposit\n @param token The token address (must be supported)\n @param merchant The merchant address for this payment\n @param yieldStrategy The yield strategy to use for this deposit\n @param paymentHash Unique identifier for this payment\n @param metadata Optional payment metadata\n @return depositIndex The index of the created deposit\n \n Requirements:\n - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX\n - Token must be supported\n - Merchant must not be zero address\n - Yield strategy must be active\n - Payment hash must be unique\n - Daily limits must not be exceeded"},"functionSelector":"877c79a8","id":5062,"implemented":true,"kind":"function","modifiers":[{"id":4887,"kind":"modifierInvocation","modifierName":{"id":4886,"name":"nonReentrant","nameLocations":["12535:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"12535:12:18"},"nodeType":"ModifierInvocation","src":"12535:12:18"},{"id":4889,"kind":"modifierInvocation","modifierName":{"id":4888,"name":"whenNotPaused","nameLocations":["12548:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"12548:13:18"},"nodeType":"ModifierInvocation","src":"12548:13:18"}],"name":"createDeposit","nameLocation":"12339:13:18","nodeType":"FunctionDefinition","parameters":{"id":4885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"mutability":"mutable","name":"amount","nameLocation":"12370:6:18","nodeType":"VariableDeclaration","scope":5062,"src":"12362:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4873,"name":"uint256","nodeType":"ElementaryTypeName","src":"12362:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4876,"mutability":"mutable","name":"token","nameLocation":"12394:5:18","nodeType":"VariableDeclaration","scope":5062,"src":"12386:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4875,"name":"address","nodeType":"ElementaryTypeName","src":"12386:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4878,"mutability":"mutable","name":"merchant","nameLocation":"12417:8:18","nodeType":"VariableDeclaration","scope":5062,"src":"12409:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4877,"name":"address","nodeType":"ElementaryTypeName","src":"12409:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4880,"mutability":"mutable","name":"yieldStrategy","nameLocation":"12443:13:18","nodeType":"VariableDeclaration","scope":5062,"src":"12435:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4879,"name":"address","nodeType":"ElementaryTypeName","src":"12435:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4882,"mutability":"mutable","name":"paymentHash","nameLocation":"12474:11:18","nodeType":"VariableDeclaration","scope":5062,"src":"12466:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12466:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4884,"mutability":"mutable","name":"metadata","nameLocation":"12511:8:18","nodeType":"VariableDeclaration","scope":5062,"src":"12495:24:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4883,"name":"string","nodeType":"ElementaryTypeName","src":"12495:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"12352:173:18"},"returnParameters":{"id":4892,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4891,"mutability":"mutable","name":"depositIndex","nameLocation":"12579:12:18","nodeType":"VariableDeclaration","scope":5062,"src":"12571:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4890,"name":"uint256","nodeType":"ElementaryTypeName","src":"12571:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12570:22:18"},"scope":6136,"src":"12330:2209:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5212,"nodeType":"Block","src":"15717:1680:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5074,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"15731:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":5075,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"15747:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5077,"indexExpression":{"id":5076,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"15764:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15747:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15731:38:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5083,"nodeType":"IfStatement","src":"15727:93:18","trueBody":{"id":5082,"nodeType":"Block","src":"15771:49:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5079,"name":"DepositNotFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4826,"src":"15792:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5080,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15792:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5081,"nodeType":"RevertStatement","src":"15785:24:18"}]}},{"assignments":[5086],"declarations":[{"constant":false,"id":5086,"mutability":"mutable","name":"deposit","nameLocation":"15846:7:18","nodeType":"VariableDeclaration","scope":5212,"src":"15830:23:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"},"typeName":{"id":5085,"nodeType":"UserDefinedTypeName","pathNode":{"id":5084,"name":"Deposit","nameLocations":["15830:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"15830:7:18"},"referencedDeclaration":4697,"src":"15830:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"visibility":"internal"}],"id":5092,"initialValue":{"baseExpression":{"baseExpression":{"id":5087,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"15856:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5089,"indexExpression":{"id":5088,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"15869:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15856:18:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":5091,"indexExpression":{"id":5090,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"15875:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15856:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage","typeString":"struct YieldEscrow.Deposit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"15830:58:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5093,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15911:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15915:6:18","memberName":"sender","nodeType":"MemberAccess","src":"15911:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5095,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"15925:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5096,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15933:8:18","memberName":"merchant","nodeType":"MemberAccess","referencedDeclaration":4684,"src":"15925:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15911:30:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":5103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"15945:35:18","subExpression":{"arguments":[{"id":5099,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4570,"src":"15954:13:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5100,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"15969:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15973:6:18","memberName":"sender","nodeType":"MemberAccess","src":"15969:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5098,"name":"hasRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"15946:7:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view returns (bool)"}},"id":5102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15946:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15911:69:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5109,"nodeType":"IfStatement","src":"15907:131:18","trueBody":{"id":5108,"nodeType":"Block","src":"15982:56:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5105,"name":"OnlyMerchantCanRelease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4814,"src":"16003:22:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16003:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5107,"nodeType":"RevertStatement","src":"15996:31:18"}]}},{"condition":{"expression":{"id":5110,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16051:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5111,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16059:8:18","memberName":"released","nodeType":"MemberAccess","referencedDeclaration":4692,"src":"16051:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5116,"nodeType":"IfStatement","src":"16047:78:18","trueBody":{"id":5115,"nodeType":"Block","src":"16069:56:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5112,"name":"DepositAlreadyReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"16090:22:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16090:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5114,"nodeType":"RevertStatement","src":"16083:31:18"}]}},{"assignments":[5118],"declarations":[{"constant":false,"id":5118,"mutability":"mutable","name":"yieldGenerated","nameLocation":"16181:14:18","nodeType":"VariableDeclaration","scope":5212,"src":"16173:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5117,"name":"uint256","nodeType":"ElementaryTypeName","src":"16173:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5123,"initialValue":{"arguments":[{"id":5120,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"16223:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5121,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5067,"src":"16229:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5119,"name":"_calculateAndUpdateYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5421,"src":"16198:24:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) returns (uint256)"}},"id":5122,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16198:44:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16173:69:18"},{"expression":{"id":5128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5124,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16327:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5126,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"16335:8:18","memberName":"released","nodeType":"MemberAccess","referencedDeclaration":4692,"src":"16327:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5127,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"16346:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"16327:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5129,"nodeType":"ExpressionStatement","src":"16327:23:18"},{"assignments":[5131],"declarations":[{"constant":false,"id":5131,"mutability":"mutable","name":"userYield","nameLocation":"16409:9:18","nodeType":"VariableDeclaration","scope":5212,"src":"16401:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5130,"name":"uint256","nodeType":"ElementaryTypeName","src":"16401:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5138,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5132,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"16422:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5133,"name":"USER_YIELD_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4583,"src":"16439:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16422:38:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5135,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16421:40:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5136,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4592,"src":"16464:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16421:55:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16401:75:18"},{"assignments":[5140],"declarations":[{"constant":false,"id":5140,"mutability":"mutable","name":"merchantYield","nameLocation":"16494:13:18","nodeType":"VariableDeclaration","scope":5212,"src":"16486:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5139,"name":"uint256","nodeType":"ElementaryTypeName","src":"16486:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5147,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5141,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"16511:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":5142,"name":"MERCHANT_YIELD_PERCENTAGE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4586,"src":"16528:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16511:42:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5144,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"16510:44:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5145,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4592,"src":"16557:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16510:59:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16486:83:18"},{"assignments":[5149],"declarations":[{"constant":false,"id":5149,"mutability":"mutable","name":"protocolYield","nameLocation":"16587:13:18","nodeType":"VariableDeclaration","scope":5212,"src":"16579:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5148,"name":"uint256","nodeType":"ElementaryTypeName","src":"16579:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5155,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5150,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"16603:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5151,"name":"userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5131,"src":"16620:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16603:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5153,"name":"merchantYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"16632:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16603:42:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16579:66:18"},{"expression":{"id":5164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5156,"name":"merchantBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"16683:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5159,"indexExpression":{"expression":{"id":5157,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16700:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5158,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16708:8:18","memberName":"merchant","nodeType":"MemberAccess","referencedDeclaration":4684,"src":"16700:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16683:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5160,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16721:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16729:6:18","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"16721:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5162,"name":"merchantYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"16738:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16721:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16683:68:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5165,"nodeType":"ExpressionStatement","src":"16683:68:18"},{"expression":{"id":5170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5166,"name":"userYieldBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"16761:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5168,"indexExpression":{"id":5167,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"16779:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16761:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5169,"name":"userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5131,"src":"16788:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16761:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5171,"nodeType":"ExpressionStatement","src":"16761:36:18"},{"expression":{"id":5174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5172,"name":"protocolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"16807:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5173,"name":"protocolYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"16826:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16807:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5175,"nodeType":"ExpressionStatement","src":"16807:32:18"},{"assignments":[5177],"declarations":[{"constant":false,"id":5177,"mutability":"mutable","name":"totalAmount","nameLocation":"16898:11:18","nodeType":"VariableDeclaration","scope":5212,"src":"16890:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5176,"name":"uint256","nodeType":"ElementaryTypeName","src":"16890:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5182,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5178,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16912:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5179,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16920:6:18","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"16912:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5180,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"16929:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16912:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16890:53:18"},{"expression":{"arguments":[{"expression":{"id":5184,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"16975:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5185,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16983:13:18","memberName":"yieldStrategy","nodeType":"MemberAccess","referencedDeclaration":4686,"src":"16975:21:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5186,"name":"totalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5177,"src":"16998:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5187,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"17011:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5188,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17019:5:18","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4682,"src":"17011:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5183,"name":"_withdrawFromStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6012,"src":"16953:21:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16953:72:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5190,"nodeType":"ExpressionStatement","src":"16953:72:18"},{"expression":{"arguments":[{"expression":{"id":5192,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"17094:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5193,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17102:13:18","memberName":"yieldStrategy","nodeType":"MemberAccess","referencedDeclaration":4686,"src":"17094:21:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":5194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17117:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":5195,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"17120:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5191,"name":"_updateStrategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5977,"src":"17071:22:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":5196,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17071:64:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5197,"nodeType":"ExpressionStatement","src":"17071:64:18"},{"eventCall":{"arguments":[{"expression":{"id":5199,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"17180:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17188:11:18","memberName":"paymentHash","nodeType":"MemberAccess","referencedDeclaration":4694,"src":"17180:19:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5201,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5065,"src":"17213:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5202,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"17231:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5203,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17239:8:18","memberName":"merchant","nodeType":"MemberAccess","referencedDeclaration":4684,"src":"17231:16:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5204,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5086,"src":"17261:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17269:6:18","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"17261:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5206,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5118,"src":"17289:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5207,"name":"userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5131,"src":"17317:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5208,"name":"merchantYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5140,"src":"17340:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5209,"name":"protocolYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5149,"src":"17367:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5198,"name":"PaymentReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4746,"src":"17151:15:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,address,uint256,uint256,uint256,uint256,uint256)"}},"id":5210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17151:239:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5211,"nodeType":"EmitStatement","src":"17146:244:18"}]},"documentation":{"id":5063,"nodeType":"StructuredDocumentation","src":"15237:357:18","text":" @dev Releases payment to merchant with yield distribution\n @param user The user who made the deposit\n @param depositIndex The deposit index to release\n \n Requirements:\n - Only the designated merchant can call this function\n - Deposit must not already be released\n - Yield calculation must succeed"},"functionSelector":"966ecf3b","id":5213,"implemented":true,"kind":"function","modifiers":[{"id":5070,"kind":"modifierInvocation","modifierName":{"id":5069,"name":"nonReentrant","nameLocations":["15690:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"15690:12:18"},"nodeType":"ModifierInvocation","src":"15690:12:18"},{"id":5072,"kind":"modifierInvocation","modifierName":{"id":5071,"name":"whenNotPaused","nameLocations":["15703:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"15703:13:18"},"nodeType":"ModifierInvocation","src":"15703:13:18"}],"name":"releasePayment","nameLocation":"15608:14:18","nodeType":"FunctionDefinition","parameters":{"id":5068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5065,"mutability":"mutable","name":"user","nameLocation":"15640:4:18","nodeType":"VariableDeclaration","scope":5213,"src":"15632:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5064,"name":"address","nodeType":"ElementaryTypeName","src":"15632:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5067,"mutability":"mutable","name":"depositIndex","nameLocation":"15662:12:18","nodeType":"VariableDeclaration","scope":5213,"src":"15654:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5066,"name":"uint256","nodeType":"ElementaryTypeName","src":"15654:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15622:58:18"},"returnParameters":{"id":5073,"nodeType":"ParameterList","parameters":[],"src":"15717:0:18"},"scope":6136,"src":"15599:1798:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5280,"nodeType":"Block","src":"17693:548:18","statements":[{"condition":{"id":5226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"17707:23:18","subExpression":{"baseExpression":{"id":5223,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"17708:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5225,"indexExpression":{"id":5224,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"17724:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17708:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5231,"nodeType":"IfStatement","src":"17703:80:18","trueBody":{"id":5230,"nodeType":"Block","src":"17732:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5227,"name":"TokenNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"17753:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17753:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5229,"nodeType":"RevertStatement","src":"17746:26:18"}]}},{"assignments":[5233],"declarations":[{"constant":false,"id":5233,"mutability":"mutable","name":"availableBalance","nameLocation":"17801:16:18","nodeType":"VariableDeclaration","scope":5280,"src":"17793:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5232,"name":"uint256","nodeType":"ElementaryTypeName","src":"17793:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5238,"initialValue":{"baseExpression":{"id":5234,"name":"merchantBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"17820:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5237,"indexExpression":{"expression":{"id":5235,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17837:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17841:6:18","memberName":"sender","nodeType":"MemberAccess","src":"17837:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17820:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17793:55:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5239,"name":"availableBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"17862:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17882:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17862:21:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5246,"nodeType":"IfStatement","src":"17858:80:18","trueBody":{"id":5245,"nodeType":"Block","src":"17885:53:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5242,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"17906:19:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17906:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5244,"nodeType":"RevertStatement","src":"17899:28:18"}]}},{"assignments":[5248],"declarations":[{"constant":false,"id":5248,"mutability":"mutable","name":"withdrawAmount","nameLocation":"17956:14:18","nodeType":"VariableDeclaration","scope":5280,"src":"17948:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5247,"name":"uint256","nodeType":"ElementaryTypeName","src":"17948:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5255,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5249,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5218,"src":"17973:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"17983:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"17973:11:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":5253,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5218,"src":"18006:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"17973:39:18","trueExpression":{"id":5252,"name":"availableBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"17987:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17948:64:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5256,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"18026:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5257,"name":"availableBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5233,"src":"18043:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18026:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5263,"nodeType":"IfStatement","src":"18022:92:18","trueBody":{"id":5262,"nodeType":"Block","src":"18061:53:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5259,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"18082:19:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18082:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5261,"nodeType":"RevertStatement","src":"18075:28:18"}]}},{"expression":{"id":5269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5264,"name":"merchantBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4637,"src":"18124:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5267,"indexExpression":{"expression":{"id":5265,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18141:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18145:6:18","memberName":"sender","nodeType":"MemberAccess","src":"18141:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18124:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5268,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"18156:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18124:46:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5270,"nodeType":"ExpressionStatement","src":"18124:46:18"},{"expression":{"arguments":[{"expression":{"id":5275,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"18207:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18211:6:18","memberName":"sender","nodeType":"MemberAccess","src":"18207:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5277,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5248,"src":"18219:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5272,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5216,"src":"18187:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5271,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"18180:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":5273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18180:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18194:12:18","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"18180:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18180:54:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5279,"nodeType":"ExpressionStatement","src":"18180:54:18"}]},"documentation":{"id":5214,"nodeType":"StructuredDocumentation","src":"17403:177:18","text":" @dev Allows merchants to withdraw their accumulated balances\n @param token The token to withdraw\n @param amount The amount to withdraw (0 for all)"},"functionSelector":"4c54ef84","id":5281,"implemented":true,"kind":"function","modifiers":[{"id":5221,"kind":"modifierInvocation","modifierName":{"id":5220,"name":"nonReentrant","nameLocations":["17680:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"17680:12:18"},"nodeType":"ModifierInvocation","src":"17680:12:18"}],"name":"withdrawMerchantBalance","nameLocation":"17594:23:18","nodeType":"FunctionDefinition","parameters":{"id":5219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5216,"mutability":"mutable","name":"token","nameLocation":"17635:5:18","nodeType":"VariableDeclaration","scope":5281,"src":"17627:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5215,"name":"address","nodeType":"ElementaryTypeName","src":"17627:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5218,"mutability":"mutable","name":"amount","nameLocation":"17658:6:18","nodeType":"VariableDeclaration","scope":5281,"src":"17650:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5217,"name":"uint256","nodeType":"ElementaryTypeName","src":"17650:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"17617:53:18"},"returnParameters":{"id":5222,"nodeType":"ParameterList","parameters":[],"src":"17693:0:18"},"scope":6136,"src":"17585:656:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5371,"nodeType":"Block","src":"19292:862:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5291,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"19306:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":5292,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"19322:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5294,"indexExpression":{"id":5293,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5284,"src":"19339:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19322:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19306:38:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5299,"nodeType":"IfStatement","src":"19302:77:18","trueBody":{"id":5298,"nodeType":"Block","src":"19346:33:18","statements":[{"expression":{"hexValue":"30","id":5296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19367:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":5290,"id":5297,"nodeType":"Return","src":"19360:8:18"}]}},{"assignments":[5302],"declarations":[{"constant":false,"id":5302,"mutability":"mutable","name":"deposit","nameLocation":"19404:7:18","nodeType":"VariableDeclaration","scope":5371,"src":"19389:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit"},"typeName":{"id":5301,"nodeType":"UserDefinedTypeName","pathNode":{"id":5300,"name":"Deposit","nameLocations":["19389:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"19389:7:18"},"referencedDeclaration":4697,"src":"19389:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"visibility":"internal"}],"id":5308,"initialValue":{"baseExpression":{"baseExpression":{"id":5303,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"19414:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5305,"indexExpression":{"id":5304,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5284,"src":"19427:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19414:18:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":5307,"indexExpression":{"id":5306,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5286,"src":"19433:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19414:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage","typeString":"struct YieldEscrow.Deposit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"19389:57:18"},{"condition":{"expression":{"id":5309,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19460:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5310,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19468:8:18","memberName":"released","nodeType":"MemberAccess","referencedDeclaration":4692,"src":"19460:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5315,"nodeType":"IfStatement","src":"19456:74:18","trueBody":{"id":5314,"nodeType":"Block","src":"19478:52:18","statements":[{"expression":{"expression":{"id":5311,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19499:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5312,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19507:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"19499:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":5290,"id":5313,"nodeType":"Return","src":"19492:27:18"}]}},{"clauses":[{"block":{"id":5361,"nodeType":"Block","src":"19661:421:18","statements":[{"assignments":[5330],"declarations":[{"constant":false,"id":5330,"mutability":"mutable","name":"totalDeposited","nameLocation":"19751:14:18","nodeType":"VariableDeclaration","scope":5361,"src":"19743:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5329,"name":"uint256","nodeType":"ElementaryTypeName","src":"19743:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5336,"initialValue":{"expression":{"baseExpression":{"id":5331,"name":"strategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"19768:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics storage ref)"}},"id":5334,"indexExpression":{"expression":{"id":5332,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19784:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19792:13:18","memberName":"yieldStrategy","nodeType":"MemberAccess","referencedDeclaration":4686,"src":"19784:21:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19768:38:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage","typeString":"struct YieldEscrow.StrategyMetrics storage ref"}},"id":5335,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19807:14:18","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":4700,"src":"19768:53:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19743:78:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5337,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5330,"src":"19839:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19856:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19839:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5359,"nodeType":"Block","src":"20005:67:18","statements":[{"expression":{"id":5357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5354,"name":"yieldAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"20023:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5355,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"20037:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20045:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"20037:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20023:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5358,"nodeType":"ExpressionStatement","src":"20023:34:18"}]},"id":5360,"nodeType":"IfStatement","src":"19835:237:18","trueBody":{"id":5353,"nodeType":"Block","src":"19859:140:18","statements":[{"expression":{"id":5351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5340,"name":"yieldAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"19877:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5341,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19891:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5342,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19899:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"19891:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5343,"name":"strategyYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5327,"src":"19936:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":5344,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19952:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5345,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19960:6:18","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"19952:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19936:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5347,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19935:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5348,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5330,"src":"19970:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19935:49:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19891:93:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19877:107:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5352,"nodeType":"ExpressionStatement","src":"19877:107:18"}]}}]},"errorName":"","id":5362,"nodeType":"TryCatchClause","parameters":{"id":5328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5327,"mutability":"mutable","name":"strategyYield","nameLocation":"19646:13:18","nodeType":"VariableDeclaration","scope":5362,"src":"19638:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5326,"name":"uint256","nodeType":"ElementaryTypeName","src":"19638:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19637:23:18"},"src":"19629:453:18"},{"block":{"id":5368,"nodeType":"Block","src":"20089:59:18","statements":[{"expression":{"id":5366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5363,"name":"yieldAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5289,"src":"20103:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5364,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"20117:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5365,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20125:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"20117:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20103:34:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5367,"nodeType":"ExpressionStatement","src":"20103:34:18"}]},"errorName":"","id":5369,"nodeType":"TryCatchClause","src":"20083:65:18"}],"externalCall":{"arguments":[{"arguments":[{"id":5323,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"19609:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}],"id":5322,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19601:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5321,"name":"address","nodeType":"ElementaryTypeName","src":"19601:7:18","typeDescriptions":{}}},"id":5324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19601:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"expression":{"id":5317,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5302,"src":"19559:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19567:13:18","memberName":"yieldStrategy","nodeType":"MemberAccess","referencedDeclaration":4686,"src":"19559:21:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5316,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"19544:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":5319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19544:37:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":5320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19582:18:18","memberName":"calculateUserYield","nodeType":"MemberAccess","referencedDeclaration":8081,"src":"19544:56:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19544:71:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5370,"nodeType":"TryStatement","src":"19540:608:18"}]},"documentation":{"id":5282,"nodeType":"StructuredDocumentation","src":"18941:222:18","text":" @dev Calculates yield for a specific deposit without updating state\n @param user The user address\n @param depositIndex The deposit index\n @return yieldAmount The calculated yield amount"},"functionSelector":"f54b7fb4","id":5372,"implemented":true,"kind":"function","modifiers":[],"name":"calculateYield","nameLocation":"19177:14:18","nodeType":"FunctionDefinition","parameters":{"id":5287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5284,"mutability":"mutable","name":"user","nameLocation":"19209:4:18","nodeType":"VariableDeclaration","scope":5372,"src":"19201:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5283,"name":"address","nodeType":"ElementaryTypeName","src":"19201:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5286,"mutability":"mutable","name":"depositIndex","nameLocation":"19231:12:18","nodeType":"VariableDeclaration","scope":5372,"src":"19223:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5285,"name":"uint256","nodeType":"ElementaryTypeName","src":"19223:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19191:58:18"},"returnParameters":{"id":5290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5289,"mutability":"mutable","name":"yieldAmount","nameLocation":"19279:11:18","nodeType":"VariableDeclaration","scope":5372,"src":"19271:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5288,"name":"uint256","nodeType":"ElementaryTypeName","src":"19271:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19270:21:18"},"scope":6136,"src":"19168:986:18","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":5420,"nodeType":"Block","src":"20515:397:18","statements":[{"assignments":[5384],"declarations":[{"constant":false,"id":5384,"mutability":"mutable","name":"deposit","nameLocation":"20541:7:18","nodeType":"VariableDeclaration","scope":5420,"src":"20525:23:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"},"typeName":{"id":5383,"nodeType":"UserDefinedTypeName","pathNode":{"id":5382,"name":"Deposit","nameLocations":["20525:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"20525:7:18"},"referencedDeclaration":4697,"src":"20525:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"visibility":"internal"}],"id":5390,"initialValue":{"baseExpression":{"baseExpression":{"id":5385,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"20551:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5387,"indexExpression":{"id":5386,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"20564:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20551:18:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":5389,"indexExpression":{"id":5388,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"20570:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20551:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage","typeString":"struct YieldEscrow.Deposit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"20525:58:18"},{"expression":{"id":5396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5391,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"20602:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5393,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"20634:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5394,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5377,"src":"20640:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5392,"name":"calculateYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5372,"src":"20619:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view returns (uint256)"}},"id":5395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20619:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20602:51:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5397,"nodeType":"ExpressionStatement","src":"20602:51:18"},{"expression":{"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5398,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"20663:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20671:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"20663:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5401,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"20686:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20663:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5403,"nodeType":"ExpressionStatement","src":"20663:37:18"},{"expression":{"id":5409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5404,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"20710:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5406,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"20718:15:18","memberName":"lastYieldUpdate","nodeType":"MemberAccess","referencedDeclaration":4690,"src":"20710:23:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5407,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20736:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20742:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"20736:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20710:41:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5410,"nodeType":"ExpressionStatement","src":"20710:41:18"},{"eventCall":{"arguments":[{"expression":{"id":5412,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"20796:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5413,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20804:11:18","memberName":"paymentHash","nodeType":"MemberAccess","referencedDeclaration":4694,"src":"20796:19:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5414,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5375,"src":"20829:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5415,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5380,"src":"20847:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5416,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5384,"src":"20875:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5417,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20883:12:18","memberName":"yieldAccrued","nodeType":"MemberAccess","referencedDeclaration":4688,"src":"20875:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5411,"name":"YieldCalculated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4756,"src":"20767:15:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256)"}},"id":5418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20767:138:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5419,"nodeType":"EmitStatement","src":"20762:143:18"}]},"documentation":{"id":5373,"nodeType":"StructuredDocumentation","src":"20160:216:18","text":" @dev Calculates and updates yield for a specific deposit\n @param user The user address\n @param depositIndex The deposit index\n @return yieldGenerated The amount of yield generated"},"id":5421,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateAndUpdateYield","nameLocation":"20390:24:18","nodeType":"FunctionDefinition","parameters":{"id":5378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5375,"mutability":"mutable","name":"user","nameLocation":"20432:4:18","nodeType":"VariableDeclaration","scope":5421,"src":"20424:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5374,"name":"address","nodeType":"ElementaryTypeName","src":"20424:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5377,"mutability":"mutable","name":"depositIndex","nameLocation":"20454:12:18","nodeType":"VariableDeclaration","scope":5421,"src":"20446:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5376,"name":"uint256","nodeType":"ElementaryTypeName","src":"20446:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20414:58:18"},"returnParameters":{"id":5381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5380,"mutability":"mutable","name":"yieldGenerated","nameLocation":"20499:14:18","nodeType":"VariableDeclaration","scope":5421,"src":"20491:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5379,"name":"uint256","nodeType":"ElementaryTypeName","src":"20491:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20490:24:18"},"scope":6136,"src":"20381:531:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5476,"nodeType":"Block","src":"21110:413:18","statements":[{"condition":{"id":5432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"21124:23:18","subExpression":{"baseExpression":{"id":5429,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"21125:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5431,"indexExpression":{"id":5430,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"21141:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21125:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5437,"nodeType":"IfStatement","src":"21120:80:18","trueBody":{"id":5436,"nodeType":"Block","src":"21149:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5433,"name":"TokenNotSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4824,"src":"21170:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21170:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5435,"nodeType":"RevertStatement","src":"21163:26:18"}]}},{"assignments":[5439],"declarations":[{"constant":false,"id":5439,"mutability":"mutable","name":"yieldBalance","nameLocation":"21218:12:18","nodeType":"VariableDeclaration","scope":5476,"src":"21210:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5438,"name":"uint256","nodeType":"ElementaryTypeName","src":"21210:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5444,"initialValue":{"baseExpression":{"id":5440,"name":"userYieldBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"21233:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5443,"indexExpression":{"expression":{"id":5441,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"21251:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21255:6:18","memberName":"sender","nodeType":"MemberAccess","src":"21251:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21233:29:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21210:52:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5445,"name":"yieldBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5439,"src":"21276:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21292:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21276:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5452,"nodeType":"IfStatement","src":"21272:76:18","trueBody":{"id":5451,"nodeType":"Block","src":"21295:53:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5448,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"21316:19:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21316:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5450,"nodeType":"RevertStatement","src":"21309:28:18"}]}},{"expression":{"id":5458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5453,"name":"userYieldBalances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4641,"src":"21358:17:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5456,"indexExpression":{"expression":{"id":5454,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"21376:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21380:6:18","memberName":"sender","nodeType":"MemberAccess","src":"21376:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21358:29:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21390:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21358:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5459,"nodeType":"ExpressionStatement","src":"21358:33:18"},{"expression":{"arguments":[{"expression":{"id":5464,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"21428:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21432:6:18","memberName":"sender","nodeType":"MemberAccess","src":"21428:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5466,"name":"yieldBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5439,"src":"21440:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5461,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"21408:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5460,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"21401:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21401:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":5463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21415:12:18","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"21401:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21401:52:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5468,"nodeType":"ExpressionStatement","src":"21401:52:18"},{"eventCall":{"arguments":[{"expression":{"id":5470,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"21484:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21488:6:18","memberName":"sender","nodeType":"MemberAccess","src":"21484:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5472,"name":"yieldBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5439,"src":"21496:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5473,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5424,"src":"21510:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5469,"name":"YieldWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4764,"src":"21469:14:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":5474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21469:47:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5475,"nodeType":"EmitStatement","src":"21464:52:18"}]},"documentation":{"id":5422,"nodeType":"StructuredDocumentation","src":"20918:123:18","text":" @dev Allows users to withdraw their accumulated yield\n @param token The token to withdraw yield in"},"functionSelector":"d6fbf61c","id":5477,"implemented":true,"kind":"function","modifiers":[{"id":5427,"kind":"modifierInvocation","modifierName":{"id":5426,"name":"nonReentrant","nameLocations":["21097:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"21097:12:18"},"nodeType":"ModifierInvocation","src":"21097:12:18"}],"name":"withdrawUserYield","nameLocation":"21055:17:18","nodeType":"FunctionDefinition","parameters":{"id":5425,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5424,"mutability":"mutable","name":"token","nameLocation":"21081:5:18","nodeType":"VariableDeclaration","scope":5477,"src":"21073:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5423,"name":"address","nodeType":"ElementaryTypeName","src":"21073:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"21072:15:18"},"returnParameters":{"id":5428,"nodeType":"ParameterList","parameters":[],"src":"21110:0:18"},"scope":6136,"src":"21046:477:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5551,"nodeType":"Block","src":"22537:845:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5487,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5480,"src":"22551:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"baseExpression":{"id":5488,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"22567:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5491,"indexExpression":{"expression":{"id":5489,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"22584:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22588:6:18","memberName":"sender","nodeType":"MemberAccess","src":"22584:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22567:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22551:44:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5497,"nodeType":"IfStatement","src":"22547:99:18","trueBody":{"id":5496,"nodeType":"Block","src":"22597:49:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5493,"name":"DepositNotFound","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4826,"src":"22618:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22618:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5495,"nodeType":"RevertStatement","src":"22611:24:18"}]}},{"assignments":[5500],"declarations":[{"constant":false,"id":5500,"mutability":"mutable","name":"deposit","nameLocation":"22672:7:18","nodeType":"VariableDeclaration","scope":5551,"src":"22656:23:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"},"typeName":{"id":5499,"nodeType":"UserDefinedTypeName","pathNode":{"id":5498,"name":"Deposit","nameLocations":["22656:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"22656:7:18"},"referencedDeclaration":4697,"src":"22656:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"visibility":"internal"}],"id":5507,"initialValue":{"baseExpression":{"baseExpression":{"id":5501,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"22682:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5504,"indexExpression":{"expression":{"id":5502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"22695:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22699:6:18","memberName":"sender","nodeType":"MemberAccess","src":"22695:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22682:24:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":5506,"indexExpression":{"id":5505,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5480,"src":"22707:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22682:38:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage","typeString":"struct YieldEscrow.Deposit storage ref"}},"nodeType":"VariableDeclarationStatement","src":"22656:64:18"},{"condition":{"expression":{"id":5508,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"22734:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5509,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22742:8:18","memberName":"released","nodeType":"MemberAccess","referencedDeclaration":4692,"src":"22734:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5514,"nodeType":"IfStatement","src":"22730:78:18","trueBody":{"id":5513,"nodeType":"Block","src":"22752:56:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5510,"name":"DepositAlreadyReleased","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4816,"src":"22773:22:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22773:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5512,"nodeType":"RevertStatement","src":"22766:31:18"}]}},{"expression":{"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5515,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"22846:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5517,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"22854:8:18","memberName":"released","nodeType":"MemberAccess","referencedDeclaration":4692,"src":"22846:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"22865:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"22846:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5520,"nodeType":"ExpressionStatement","src":"22846:23:18"},{"assignments":[5522],"declarations":[{"constant":false,"id":5522,"mutability":"mutable","name":"withdrawnAmount","nameLocation":"22932:15:18","nodeType":"VariableDeclaration","scope":5551,"src":"22924:23:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5521,"name":"uint256","nodeType":"ElementaryTypeName","src":"22924:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5531,"initialValue":{"arguments":[{"expression":{"id":5524,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"22994:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5525,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23002:13:18","memberName":"yieldStrategy","nodeType":"MemberAccess","referencedDeclaration":4686,"src":"22994:21:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":5526,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"23029:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5527,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23037:6:18","memberName":"amount","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"23029:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":5528,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"23057:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5529,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23065:5:18","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4682,"src":"23057:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5523,"name":"_emergencyWithdrawFromStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6072,"src":"22950:30:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_uint256_$","typeString":"function (address,uint256,address) returns (uint256)"}},"id":5530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22950:130:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22924:156:18"},{"expression":{"arguments":[{"expression":{"id":5537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23196:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23200:6:18","memberName":"sender","nodeType":"MemberAccess","src":"23196:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5539,"name":"withdrawnAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"23208:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":5533,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"23168:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5534,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23176:5:18","memberName":"token","nodeType":"MemberAccess","referencedDeclaration":4682,"src":"23168:13:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5532,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"23161:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":5535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23161:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":5536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23183:12:18","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"23161:34:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":5540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23161:63:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5541,"nodeType":"ExpressionStatement","src":"23161:63:18"},{"eventCall":{"arguments":[{"expression":{"id":5543,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5500,"src":"23273:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit storage pointer"}},"id":5544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23281:11:18","memberName":"paymentHash","nodeType":"MemberAccess","referencedDeclaration":4694,"src":"23273:19:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":5545,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"23306:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":5546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23310:6:18","memberName":"sender","nodeType":"MemberAccess","src":"23306:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5547,"name":"withdrawnAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5522,"src":"23330:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5548,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5482,"src":"23359:6:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5542,"name":"EmergencyWithdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4774,"src":"23240:19:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes32,address,uint256,string memory)"}},"id":5549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23240:135:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5550,"nodeType":"EmitStatement","src":"23235:140:18"}]},"documentation":{"id":5478,"nodeType":"StructuredDocumentation","src":"22215:200:18","text":" @dev Emergency withdrawal for users (only in extreme circumstances)\n @param depositIndex The deposit index to withdraw\n @param reason The reason for emergency withdrawal"},"functionSelector":"3cbb4668","id":5552,"implemented":true,"kind":"function","modifiers":[{"id":5485,"kind":"modifierInvocation","modifierName":{"id":5484,"name":"nonReentrant","nameLocations":["22524:12:18"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"22524:12:18"},"nodeType":"ModifierInvocation","src":"22524:12:18"}],"name":"emergencyWithdraw","nameLocation":"22429:17:18","nodeType":"FunctionDefinition","parameters":{"id":5483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5480,"mutability":"mutable","name":"depositIndex","nameLocation":"22464:12:18","nodeType":"VariableDeclaration","scope":5552,"src":"22456:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5479,"name":"uint256","nodeType":"ElementaryTypeName","src":"22456:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5482,"mutability":"mutable","name":"reason","nameLocation":"22502:6:18","nodeType":"VariableDeclaration","scope":5552,"src":"22486:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5481,"name":"string","nodeType":"ElementaryTypeName","src":"22486:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"22446:68:18"},"returnParameters":{"id":5486,"nodeType":"ParameterList","parameters":[],"src":"22537:0:18"},"scope":6136,"src":"22420:962:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5562,"nodeType":"Block","src":"23510:25:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5559,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"23520:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23520:8:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5561,"nodeType":"ExpressionStatement","src":"23520:8:18"}]},"documentation":{"id":5553,"nodeType":"StructuredDocumentation","src":"23388:61:18","text":" @dev Emergency pause function (admin only)"},"functionSelector":"51858e27","id":5563,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5556,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"23498:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5557,"kind":"modifierInvocation","modifierName":{"id":5555,"name":"onlyRole","nameLocations":["23489:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"23489:8:18"},"nodeType":"ModifierInvocation","src":"23489:20:18"}],"name":"emergencyPause","nameLocation":"23463:14:18","nodeType":"FunctionDefinition","parameters":{"id":5554,"nodeType":"ParameterList","parameters":[],"src":"23477:2:18"},"returnParameters":{"id":5558,"nodeType":"ParameterList","parameters":[],"src":"23510:0:18"},"scope":6136,"src":"23454:81:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5573,"nodeType":"Block","src":"23649:27:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":5570,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"23659:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":5571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23659:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5572,"nodeType":"ExpressionStatement","src":"23659:10:18"}]},"documentation":{"id":5564,"nodeType":"StructuredDocumentation","src":"23541:54:18","text":" @dev Resume operations (admin only)"},"functionSelector":"3f4ba83a","id":5574,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5567,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"23637:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5568,"kind":"modifierInvocation","modifierName":{"id":5566,"name":"onlyRole","nameLocations":["23628:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"23628:8:18"},"nodeType":"ModifierInvocation","src":"23628:20:18"}],"name":"unpause","nameLocation":"23609:7:18","nodeType":"FunctionDefinition","parameters":{"id":5565,"nodeType":"ParameterList","parameters":[],"src":"23616:2:18"},"returnParameters":{"id":5569,"nodeType":"ParameterList","parameters":[],"src":"23649:0:18"},"scope":6136,"src":"23600:76:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5639,"nodeType":"Block","src":"24722:404:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5587,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"24736:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24756:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5589,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24748:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5588,"name":"address","nodeType":"ElementaryTypeName","src":"24748:7:18","typeDescriptions":{}}},"id":5591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24748:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24736:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5593,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"24762:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24771:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5594,"name":"address","nodeType":"ElementaryTypeName","src":"24771:7:18","typeDescriptions":{}}},"id":5597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24771:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24762:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24736:45:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5604,"nodeType":"IfStatement","src":"24732:99:18","trueBody":{"id":5603,"nodeType":"Block","src":"24783:48:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5600,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"24804:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5601,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24804:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5602,"nodeType":"RevertStatement","src":"24797:23:18"}]}},{"condition":{"baseExpression":{"id":5605,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"24844:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5607,"indexExpression":{"id":5606,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"24861:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24844:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5612,"nodeType":"IfStatement","src":"24840:81:18","trueBody":{"id":5611,"nodeType":"Block","src":"24872:49:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5608,"name":"InvalidStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4806,"src":"24893:15:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24893:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5610,"nodeType":"RevertStatement","src":"24886:24:18"}]}},{"expression":{"id":5619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5613,"name":"supportedStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4648,"src":"24931:19:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_contract$_IYieldStrategy_$8169_$","typeString":"mapping(address => contract IYieldStrategy)"}},"id":5615,"indexExpression":{"id":5614,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"24951:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24931:29:18","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":5617,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"24978:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5616,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"24963:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":5618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24963:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"src":"24931:56:18","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":5620,"nodeType":"ExpressionStatement","src":"24931:56:18"},{"expression":{"id":5625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5621,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"24997:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5623,"indexExpression":{"id":5622,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"25014:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24997:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"25026:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"24997:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5626,"nodeType":"ExpressionStatement","src":"24997:33:18"},{"expression":{"arguments":[{"id":5630,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"25058:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5627,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"25040:12:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25053:4:18","memberName":"push","nodeType":"MemberAccess","src":"25040:17:18","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":5631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25040:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5632,"nodeType":"ExpressionStatement","src":"25040:27:18"},{"eventCall":{"arguments":[{"id":5634,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5577,"src":"25097:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5635,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5579,"src":"25107:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5636,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5581,"src":"25114:4:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5633,"name":"StrategyAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4782,"src":"25083:13:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,address,string memory)"}},"id":5637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25083:36:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5638,"nodeType":"EmitStatement","src":"25078:41:18"}]},"documentation":{"id":5575,"nodeType":"StructuredDocumentation","src":"24378:192:18","text":" @dev Adds a new yield strategy\n @param strategy The strategy contract address\n @param token The token this strategy supports\n @param name The strategy name"},"functionSelector":"f939be11","id":5640,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5584,"name":"STRATEGY_MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"24699:21:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5585,"kind":"modifierInvocation","modifierName":{"id":5583,"name":"onlyRole","nameLocations":["24690:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"24690:8:18"},"nodeType":"ModifierInvocation","src":"24690:31:18"}],"name":"addStrategy","nameLocation":"24584:11:18","nodeType":"FunctionDefinition","parameters":{"id":5582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5577,"mutability":"mutable","name":"strategy","nameLocation":"24613:8:18","nodeType":"VariableDeclaration","scope":5640,"src":"24605:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5576,"name":"address","nodeType":"ElementaryTypeName","src":"24605:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5579,"mutability":"mutable","name":"token","nameLocation":"24639:5:18","nodeType":"VariableDeclaration","scope":5640,"src":"24631:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5578,"name":"address","nodeType":"ElementaryTypeName","src":"24631:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5581,"mutability":"mutable","name":"name","nameLocation":"24670:4:18","nodeType":"VariableDeclaration","scope":5640,"src":"24654:20:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5580,"name":"string","nodeType":"ElementaryTypeName","src":"24654:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"24595:85:18"},"returnParameters":{"id":5586,"nodeType":"ParameterList","parameters":[],"src":"24722:0:18"},"scope":6136,"src":"24575:551:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5671,"nodeType":"Block","src":"25404:202:18","statements":[{"condition":{"id":5654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25418:27:18","subExpression":{"baseExpression":{"id":5651,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"25419:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5653,"indexExpression":{"id":5652,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"25436:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25419:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5659,"nodeType":"IfStatement","src":"25414:84:18","trueBody":{"id":5658,"nodeType":"Block","src":"25447:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5655,"name":"StrategyNotActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"25468:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25468:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5657,"nodeType":"RevertStatement","src":"25461:26:18"}]}},{"expression":{"id":5664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5660,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"25508:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5662,"indexExpression":{"id":5661,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"25525:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"25508:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":5663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"25537:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"25508:34:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5665,"nodeType":"ExpressionStatement","src":"25508:34:18"},{"eventCall":{"arguments":[{"id":5667,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5643,"src":"25582:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5668,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5645,"src":"25592:6:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5666,"name":"StrategyRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4788,"src":"25566:15:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory)"}},"id":5669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25566:33:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5670,"nodeType":"EmitStatement","src":"25561:38:18"}]},"documentation":{"id":5641,"nodeType":"StructuredDocumentation","src":"25132:138:18","text":" @dev Removes a yield strategy\n @param strategy The strategy to remove\n @param reason The reason for removal"},"functionSelector":"8ea447e6","id":5672,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5648,"name":"STRATEGY_MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4580,"src":"25381:21:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5649,"kind":"modifierInvocation","modifierName":{"id":5647,"name":"onlyRole","nameLocations":["25372:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"25372:8:18"},"nodeType":"ModifierInvocation","src":"25372:31:18"}],"name":"removeStrategy","nameLocation":"25284:14:18","nodeType":"FunctionDefinition","parameters":{"id":5646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5643,"mutability":"mutable","name":"strategy","nameLocation":"25316:8:18","nodeType":"VariableDeclaration","scope":5672,"src":"25308:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5642,"name":"address","nodeType":"ElementaryTypeName","src":"25308:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5645,"mutability":"mutable","name":"reason","nameLocation":"25350:6:18","nodeType":"VariableDeclaration","scope":5672,"src":"25334:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5644,"name":"string","nodeType":"ElementaryTypeName","src":"25334:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"25298:64:18"},"returnParameters":{"id":5650,"nodeType":"ParameterList","parameters":[],"src":"25404:0:18"},"scope":6136,"src":"25275:331:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5717,"nodeType":"Block","src":"25857:290:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5683,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"25871:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25888:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"25880:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5684,"name":"address","nodeType":"ElementaryTypeName","src":"25880:7:18","typeDescriptions":{}}},"id":5687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25880:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25871:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5693,"nodeType":"IfStatement","src":"25867:73:18","trueBody":{"id":5692,"nodeType":"Block","src":"25892:48:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5689,"name":"InvalidAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4804,"src":"25913:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25913:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5691,"nodeType":"RevertStatement","src":"25906:23:18"}]}},{"condition":{"baseExpression":{"id":5694,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"25953:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5696,"indexExpression":{"id":5695,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"25969:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25953:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5699,"nodeType":"IfStatement","src":"25949:80:18","trueBody":{"id":5698,"nodeType":"Block","src":"25977:52:18","statements":[{"functionReturnParameters":5682,"id":5697,"nodeType":"Return","src":"25991:7:18"}]}},{"expression":{"id":5704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5700,"name":"supportedTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4659,"src":"26039:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5702,"indexExpression":{"id":5701,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"26055:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26039:22:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":5703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"26064:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"26039:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5705,"nodeType":"ExpressionStatement","src":"26039:29:18"},{"expression":{"arguments":[{"id":5709,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"26093:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5706,"name":"tokenList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4662,"src":"26078:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26088:4:18","memberName":"push","nodeType":"MemberAccess","src":"26078:14:18","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":5710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26078:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5711,"nodeType":"ExpressionStatement","src":"26078:21:18"},{"eventCall":{"arguments":[{"id":5713,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5675,"src":"26126:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5714,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5677,"src":"26133:6:18","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":5712,"name":"TokenAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4794,"src":"26115:10:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$returns$__$","typeString":"function (address,string memory)"}},"id":5715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26115:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5716,"nodeType":"EmitStatement","src":"26110:30:18"}]},"documentation":{"id":5673,"nodeType":"StructuredDocumentation","src":"25612:122:18","text":" @dev Adds a supported token\n @param token The token address\n @param symbol The token symbol"},"functionSelector":"720138e8","id":5718,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":5680,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"25845:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":5681,"kind":"modifierInvocation","modifierName":{"id":5679,"name":"onlyRole","nameLocations":["25836:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"25836:8:18"},"nodeType":"ModifierInvocation","src":"25836:20:18"}],"name":"addSupportedToken","nameLocation":"25748:17:18","nodeType":"FunctionDefinition","parameters":{"id":5678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5675,"mutability":"mutable","name":"token","nameLocation":"25783:5:18","nodeType":"VariableDeclaration","scope":5718,"src":"25775:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5674,"name":"address","nodeType":"ElementaryTypeName","src":"25775:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5677,"mutability":"mutable","name":"symbol","nameLocation":"25814:6:18","nodeType":"VariableDeclaration","scope":5718,"src":"25798:22:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":5676,"name":"string","nodeType":"ElementaryTypeName","src":"25798:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"25765:61:18"},"returnParameters":{"id":5682,"nodeType":"ParameterList","parameters":[],"src":"25857:0:18"},"scope":6136,"src":"25739:408:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5744,"nodeType":"Block","src":"27151:126:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5729,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"27165:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":5730,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"27180:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5732,"indexExpression":{"id":5731,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"27197:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27180:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27165:37:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5743,"nodeType":"IfStatement","src":"27161:110:18","trueBody":{"id":5742,"nodeType":"Block","src":"27204:67:18","statements":[{"expression":{"id":5740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5734,"name":"deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5727,"src":"27218:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":5735,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"27228:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5737,"indexExpression":{"id":5736,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5721,"src":"27241:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27228:18:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"id":5739,"indexExpression":{"id":5738,"name":"depositIndex","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5723,"src":"27247:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27228:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage","typeString":"struct YieldEscrow.Deposit storage ref"}},"src":"27218:42:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit memory"}},"id":5741,"nodeType":"ExpressionStatement","src":"27218:42:18"}]}}]},"documentation":{"id":5719,"nodeType":"StructuredDocumentation","src":"26834:183:18","text":" @dev Gets user's deposit information\n @param user The user address\n @param depositIndex The deposit index\n @return deposit The deposit information"},"functionSelector":"60711058","id":5745,"implemented":true,"kind":"function","modifiers":[],"name":"getUserDeposit","nameLocation":"27031:14:18","nodeType":"FunctionDefinition","parameters":{"id":5724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5721,"mutability":"mutable","name":"user","nameLocation":"27063:4:18","nodeType":"VariableDeclaration","scope":5745,"src":"27055:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5720,"name":"address","nodeType":"ElementaryTypeName","src":"27055:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5723,"mutability":"mutable","name":"depositIndex","nameLocation":"27085:12:18","nodeType":"VariableDeclaration","scope":5745,"src":"27077:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5722,"name":"uint256","nodeType":"ElementaryTypeName","src":"27077:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27045:58:18"},"returnParameters":{"id":5728,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5727,"mutability":"mutable","name":"deposit","nameLocation":"27142:7:18","nodeType":"VariableDeclaration","scope":5745,"src":"27127:22:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_memory_ptr","typeString":"struct YieldEscrow.Deposit"},"typeName":{"id":5726,"nodeType":"UserDefinedTypeName","pathNode":{"id":5725,"name":"Deposit","nameLocations":["27127:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"27127:7:18"},"referencedDeclaration":4697,"src":"27127:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"visibility":"internal"}],"src":"27126:24:18"},"scope":6136,"src":"27022:255:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5761,"nodeType":"Block","src":"27512:46:18","statements":[{"expression":{"id":5759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5755,"name":"deposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5753,"src":"27522:8:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_memory_ptr_$dyn_memory_ptr","typeString":"struct YieldEscrow.Deposit memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5756,"name":"userDeposits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"27533:12:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_$","typeString":"mapping(address => struct YieldEscrow.Deposit storage ref[] storage ref)"}},"id":5758,"indexExpression":{"id":5757,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5748,"src":"27546:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27533:18:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage","typeString":"struct YieldEscrow.Deposit storage ref[] storage ref"}},"src":"27522:29:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_memory_ptr_$dyn_memory_ptr","typeString":"struct YieldEscrow.Deposit memory[] memory"}},"id":5760,"nodeType":"ExpressionStatement","src":"27522:29:18"}]},"documentation":{"id":5746,"nodeType":"StructuredDocumentation","src":"27283:135:18","text":" @dev Gets all deposits for a user\n @param user The user address\n @return deposits Array of user deposits"},"functionSelector":"2a5bf6d2","id":5762,"implemented":true,"kind":"function","modifiers":[],"name":"getUserDeposits","nameLocation":"27432:15:18","nodeType":"FunctionDefinition","parameters":{"id":5749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5748,"mutability":"mutable","name":"user","nameLocation":"27456:4:18","nodeType":"VariableDeclaration","scope":5762,"src":"27448:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5747,"name":"address","nodeType":"ElementaryTypeName","src":"27448:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27447:14:18"},"returnParameters":{"id":5754,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5753,"mutability":"mutable","name":"deposits","nameLocation":"27502:8:18","nodeType":"VariableDeclaration","scope":5762,"src":"27485:25:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_memory_ptr_$dyn_memory_ptr","typeString":"struct YieldEscrow.Deposit[]"},"typeName":{"baseType":{"id":5751,"nodeType":"UserDefinedTypeName","pathNode":{"id":5750,"name":"Deposit","nameLocations":["27485:7:18"],"nodeType":"IdentifierPath","referencedDeclaration":4697,"src":"27485:7:18"},"referencedDeclaration":4697,"src":"27485:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_Deposit_$4697_storage_ptr","typeString":"struct YieldEscrow.Deposit"}},"id":5752,"nodeType":"ArrayTypeName","src":"27485:9:18","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Deposit_$4697_storage_$dyn_storage_ptr","typeString":"struct YieldEscrow.Deposit[]"}},"visibility":"internal"}],"src":"27484:27:18"},"scope":6136,"src":"27423:135:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5797,"nodeType":"Block","src":"27763:216:18","statements":[{"body":{"id":5795,"nodeType":"Block","src":"27823:150:18","statements":[{"condition":{"baseExpression":{"id":5779,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4652,"src":"27841:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":5783,"indexExpression":{"baseExpression":{"id":5780,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"27858:12:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5782,"indexExpression":{"id":5781,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"27871:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27858:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27841:33:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5794,"nodeType":"IfStatement","src":"27837:126:18","trueBody":{"id":5793,"nodeType":"Block","src":"27876:87:18","statements":[{"expression":{"id":5791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5784,"name":"tvl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5766,"src":"27894:3:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"id":5785,"name":"strategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"27901:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics storage ref)"}},"id":5789,"indexExpression":{"baseExpression":{"id":5786,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"27917:12:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5788,"indexExpression":{"id":5787,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"27930:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27917:15:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27901:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage","typeString":"struct YieldEscrow.StrategyMetrics storage ref"}},"id":5790,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27934:14:18","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":4700,"src":"27901:47:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27894:54:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5792,"nodeType":"ExpressionStatement","src":"27894:54:18"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5772,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"27793:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5773,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4655,"src":"27797:12:18","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":5774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27810:6:18","memberName":"length","nodeType":"MemberAccess","src":"27797:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27793:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5796,"initializationExpression":{"assignments":[5769],"declarations":[{"constant":false,"id":5769,"mutability":"mutable","name":"i","nameLocation":"27786:1:18","nodeType":"VariableDeclaration","scope":5796,"src":"27778:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5768,"name":"uint256","nodeType":"ElementaryTypeName","src":"27778:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5771,"initialValue":{"hexValue":"30","id":5770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27790:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"27778:13:18"},"loopExpression":{"expression":{"id":5777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"27818:3:18","subExpression":{"id":5776,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5769,"src":"27818:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5778,"nodeType":"ExpressionStatement","src":"27818:3:18"},"nodeType":"ForStatement","src":"27773:200:18"}]},"documentation":{"id":5763,"nodeType":"StructuredDocumentation","src":"27564:127:18","text":" @dev Gets total value locked in the contract\n @return tvl The total value locked across all strategies"},"functionSelector":"b26025aa","id":5798,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalValueLocked","nameLocation":"27705:19:18","nodeType":"FunctionDefinition","parameters":{"id":5764,"nodeType":"ParameterList","parameters":[],"src":"27724:2:18"},"returnParameters":{"id":5767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5766,"mutability":"mutable","name":"tvl","nameLocation":"27758:3:18","nodeType":"VariableDeclaration","scope":5798,"src":"27750:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5765,"name":"uint256","nodeType":"ElementaryTypeName","src":"27750:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27749:13:18"},"scope":6136,"src":"27696:283:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5813,"nodeType":"Block","src":"28236:52:18","statements":[{"expression":{"id":5811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5807,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5805,"src":"28246:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_memory_ptr","typeString":"struct YieldEscrow.StrategyMetrics memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5808,"name":"strategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"28256:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics storage ref)"}},"id":5810,"indexExpression":{"id":5809,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5801,"src":"28272:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28256:25:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage","typeString":"struct YieldEscrow.StrategyMetrics storage ref"}},"src":"28246:35:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_memory_ptr","typeString":"struct YieldEscrow.StrategyMetrics memory"}},"id":5812,"nodeType":"ExpressionStatement","src":"28246:35:18"}]},"documentation":{"id":5799,"nodeType":"StructuredDocumentation","src":"27985:145:18","text":" @dev Gets strategy performance metrics\n @param strategy The strategy address\n @return metrics The strategy metrics"},"functionSelector":"0bd6b070","id":5814,"implemented":true,"kind":"function","modifiers":[],"name":"getStrategyMetrics","nameLocation":"28144:18:18","nodeType":"FunctionDefinition","parameters":{"id":5802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5801,"mutability":"mutable","name":"strategy","nameLocation":"28171:8:18","nodeType":"VariableDeclaration","scope":5814,"src":"28163:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5800,"name":"address","nodeType":"ElementaryTypeName","src":"28163:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28162:18:18"},"returnParameters":{"id":5806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5805,"mutability":"mutable","name":"metrics","nameLocation":"28227:7:18","nodeType":"VariableDeclaration","scope":5814,"src":"28204:30:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_memory_ptr","typeString":"struct YieldEscrow.StrategyMetrics"},"typeName":{"id":5804,"nodeType":"UserDefinedTypeName","pathNode":{"id":5803,"name":"StrategyMetrics","nameLocations":["28204:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"28204:15:18"},"referencedDeclaration":4707,"src":"28204:15:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics"}},"visibility":"internal"}],"src":"28203:32:18"},"scope":6136,"src":"28135:153:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":5838,"nodeType":"Block","src":"29038:179:18","statements":[{"assignments":[5820],"declarations":[{"constant":false,"id":5820,"mutability":"mutable","name":"today","nameLocation":"29056:5:18","nodeType":"VariableDeclaration","scope":5838,"src":"29048:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5819,"name":"uint256","nodeType":"ElementaryTypeName","src":"29048:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5825,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5821,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"29064:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29070:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"29064:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5823,"name":"SECONDS_PER_DAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"29082:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29064:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29048:49:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5832,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5826,"name":"dailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"29111:11:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5828,"indexExpression":{"id":5827,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5820,"src":"29123:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29111:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5829,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5816,"src":"29132:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29111:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5831,"name":"MAX_DAILY_VOLUME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4606,"src":"29141:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29111:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5837,"nodeType":"IfStatement","src":"29107:104:18","trueBody":{"id":5836,"nodeType":"Block","src":"29159:52:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5833,"name":"DailyLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"29180:18:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29180:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5835,"nodeType":"RevertStatement","src":"29173:27:18"}]}}]},"id":5839,"implemented":true,"kind":"function","modifiers":[],"name":"_checkDailyLimits","nameLocation":"28995:17:18","nodeType":"FunctionDefinition","parameters":{"id":5817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5816,"mutability":"mutable","name":"amount","nameLocation":"29021:6:18","nodeType":"VariableDeclaration","scope":5839,"src":"29013:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5815,"name":"uint256","nodeType":"ElementaryTypeName","src":"29013:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29012:16:18"},"returnParameters":{"id":5818,"nodeType":"ParameterList","parameters":[],"src":"29038:0:18"},"scope":6136,"src":"28986:231:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5877,"nodeType":"Block","src":"29293:340:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5846,"name":"userDepositCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4629,"src":"29307:16:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5848,"indexExpression":{"id":5847,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"29324:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29307:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5849,"name":"MAX_DEPOSITS_PER_USER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"29333:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29307:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5855,"nodeType":"IfStatement","src":"29303:104:18","trueBody":{"id":5854,"nodeType":"Block","src":"29356:51:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5851,"name":"UserLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4820,"src":"29377:17:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29377:19:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5853,"nodeType":"RevertStatement","src":"29370:26:18"}]}},{"assignments":[5857],"declarations":[{"constant":false,"id":5857,"mutability":"mutable","name":"today","nameLocation":"29433:5:18","nodeType":"VariableDeclaration","scope":5877,"src":"29425:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5856,"name":"uint256","nodeType":"ElementaryTypeName","src":"29425:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5862,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5858,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"29441:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29447:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"29441:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5860,"name":"SECONDS_PER_DAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"29459:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29441:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29425:49:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5871,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5863,"name":"userDailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"29488:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5865,"indexExpression":{"id":5864,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5841,"src":"29504:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29488:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5866,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5843,"src":"29512:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29488:30:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5870,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"id":5868,"name":"MAX_DEPOSIT_PER_TX","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4599,"src":"29521:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"35","id":5869,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29542:1:18","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"29521:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29488:55:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5876,"nodeType":"IfStatement","src":"29484:143:18","trueBody":{"id":5875,"nodeType":"Block","src":"29545:82:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5872,"name":"DailyLimitExceeded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4818,"src":"29596:18:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5873,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29596:20:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5874,"nodeType":"RevertStatement","src":"29589:27:18"}]}}]},"id":5878,"implemented":true,"kind":"function","modifiers":[],"name":"_checkUserLimits","nameLocation":"29232:16:18","nodeType":"FunctionDefinition","parameters":{"id":5844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5841,"mutability":"mutable","name":"user","nameLocation":"29257:4:18","nodeType":"VariableDeclaration","scope":5878,"src":"29249:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5840,"name":"address","nodeType":"ElementaryTypeName","src":"29249:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5843,"mutability":"mutable","name":"amount","nameLocation":"29271:6:18","nodeType":"VariableDeclaration","scope":5878,"src":"29263:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5842,"name":"uint256","nodeType":"ElementaryTypeName","src":"29263:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29248:30:18"},"returnParameters":{"id":5845,"nodeType":"ParameterList","parameters":[],"src":"29293:0:18"},"scope":6136,"src":"29223:410:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":5896,"nodeType":"Block","src":"29692:104:18","statements":[{"assignments":[5884],"declarations":[{"constant":false,"id":5884,"mutability":"mutable","name":"today","nameLocation":"29710:5:18","nodeType":"VariableDeclaration","scope":5896,"src":"29702:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5883,"name":"uint256","nodeType":"ElementaryTypeName","src":"29702:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5889,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5885,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"29718:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29724:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"29718:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":5887,"name":"SECONDS_PER_DAY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4616,"src":"29736:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29718:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29702:49:18"},{"expression":{"id":5894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5890,"name":"dailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4666,"src":"29761:11:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":5892,"indexExpression":{"id":5891,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5884,"src":"29773:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"29761:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5893,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5880,"src":"29783:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29761:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5895,"nodeType":"ExpressionStatement","src":"29761:28:18"}]},"id":5897,"implemented":true,"kind":"function","modifiers":[],"name":"_updateDailyVolume","nameLocation":"29648:18:18","nodeType":"FunctionDefinition","parameters":{"id":5881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5880,"mutability":"mutable","name":"amount","nameLocation":"29675:6:18","nodeType":"VariableDeclaration","scope":5897,"src":"29667:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5879,"name":"uint256","nodeType":"ElementaryTypeName","src":"29667:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29666:16:18"},"returnParameters":{"id":5882,"nodeType":"ParameterList","parameters":[],"src":"29692:0:18"},"scope":6136,"src":"29639:157:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5910,"nodeType":"Block","src":"29873:48:18","statements":[{"expression":{"id":5908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":5904,"name":"userDailyVolume","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4670,"src":"29883:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":5906,"indexExpression":{"id":5905,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5899,"src":"29899:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"29883:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5907,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5901,"src":"29908:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29883:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5909,"nodeType":"ExpressionStatement","src":"29883:31:18"}]},"id":5911,"implemented":true,"kind":"function","modifiers":[],"name":"_updateUserDailyVolume","nameLocation":"29811:22:18","nodeType":"FunctionDefinition","parameters":{"id":5902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5899,"mutability":"mutable","name":"user","nameLocation":"29842:4:18","nodeType":"VariableDeclaration","scope":5911,"src":"29834:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5898,"name":"address","nodeType":"ElementaryTypeName","src":"29834:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5901,"mutability":"mutable","name":"amount","nameLocation":"29856:6:18","nodeType":"VariableDeclaration","scope":5911,"src":"29848:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5900,"name":"uint256","nodeType":"ElementaryTypeName","src":"29848:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29833:30:18"},"returnParameters":{"id":5903,"nodeType":"ParameterList","parameters":[],"src":"29873:0:18"},"scope":6136,"src":"29802:119:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":5976,"nodeType":"Block","src":"30029:594:18","statements":[{"assignments":[5922],"declarations":[{"constant":false,"id":5922,"mutability":"mutable","name":"metrics","nameLocation":"30063:7:18","nodeType":"VariableDeclaration","scope":5976,"src":"30039:31:18","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics"},"typeName":{"id":5921,"nodeType":"UserDefinedTypeName","pathNode":{"id":5920,"name":"StrategyMetrics","nameLocations":["30039:15:18"],"nodeType":"IdentifierPath","referencedDeclaration":4707,"src":"30039:15:18"},"referencedDeclaration":4707,"src":"30039:15:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics"}},"visibility":"internal"}],"id":5926,"initialValue":{"baseExpression":{"id":5923,"name":"strategyMetrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"30073:15:18","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyMetrics_$4707_storage_$","typeString":"mapping(address => struct YieldEscrow.StrategyMetrics storage ref)"}},"id":5925,"indexExpression":{"id":5924,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"30089:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30073:25:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage","typeString":"struct YieldEscrow.StrategyMetrics storage ref"}},"nodeType":"VariableDeclarationStatement","src":"30039:59:18"},{"expression":{"id":5931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5927,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5922,"src":"30108:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics storage pointer"}},"id":5929,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"30116:14:18","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":4700,"src":"30108:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5930,"name":"deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5915,"src":"30134:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30108:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5932,"nodeType":"ExpressionStatement","src":"30108:35:18"},{"expression":{"id":5937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5933,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5922,"src":"30153:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics storage pointer"}},"id":5935,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"30161:19:18","memberName":"totalYieldGenerated","nodeType":"MemberAccess","referencedDeclaration":4702,"src":"30153:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5936,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"30184:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30153:45:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5938,"nodeType":"ExpressionStatement","src":"30153:45:18"},{"expression":{"id":5944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5939,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5922,"src":"30208:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics storage pointer"}},"id":5941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"30216:14:18","memberName":"lastUpdateTime","nodeType":"MemberAccess","referencedDeclaration":4706,"src":"30208:22:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":5942,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"30233:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":5943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30239:9:18","memberName":"timestamp","nodeType":"MemberAccess","src":"30233:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30208:40:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5945,"nodeType":"ExpressionStatement","src":"30208:40:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5946,"name":"yieldGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5917,"src":"30324:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":5947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30341:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30324:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5975,"nodeType":"IfStatement","src":"30320:297:18","trueBody":{"id":5974,"nodeType":"Block","src":"30344:273:18","statements":[{"clauses":[{"block":{"id":5969,"nodeType":"Block","src":"30432:91:18","statements":[{"expression":{"id":5967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5957,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5922,"src":"30450:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics storage pointer"}},"id":5959,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"30458:10:18","memberName":"averageAPY","nodeType":"MemberAccess","referencedDeclaration":4704,"src":"30450:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5963,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5960,"name":"metrics","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5922,"src":"30472:7:18","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyMetrics_$4707_storage_ptr","typeString":"struct YieldEscrow.StrategyMetrics storage pointer"}},"id":5961,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30480:10:18","memberName":"averageAPY","nodeType":"MemberAccess","referencedDeclaration":4704,"src":"30472:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5962,"name":"currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5955,"src":"30493:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30472:31:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":5964,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"30471:33:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":5965,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30507:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"30471:37:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30450:58:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5968,"nodeType":"ExpressionStatement","src":"30450:58:18"}]},"errorName":"","id":5970,"nodeType":"TryCatchClause","parameters":{"id":5956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5955,"mutability":"mutable","name":"currentAPY","nameLocation":"30420:10:18","nodeType":"VariableDeclaration","scope":5970,"src":"30412:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5954,"name":"uint256","nodeType":"ElementaryTypeName","src":"30412:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30411:20:18"},"src":"30403:120:18"},{"block":{"id":5971,"nodeType":"Block","src":"30530:77:18","statements":[]},"errorName":"","id":5972,"nodeType":"TryCatchClause","src":"30524:83:18"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":5950,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5913,"src":"30377:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5949,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"30362:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":5951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30362:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":5952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30387:13:18","memberName":"getCurrentAPY","nodeType":"MemberAccess","referencedDeclaration":8073,"src":"30362:38:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":5953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30362:40:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5973,"nodeType":"TryStatement","src":"30358:249:18"}]}}]},"id":5977,"implemented":true,"kind":"function","modifiers":[],"name":"_updateStrategyMetrics","nameLocation":"29936:22:18","nodeType":"FunctionDefinition","parameters":{"id":5918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5913,"mutability":"mutable","name":"strategy","nameLocation":"29967:8:18","nodeType":"VariableDeclaration","scope":5977,"src":"29959:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5912,"name":"address","nodeType":"ElementaryTypeName","src":"29959:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5915,"mutability":"mutable","name":"deposited","nameLocation":"29985:9:18","nodeType":"VariableDeclaration","scope":5977,"src":"29977:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5914,"name":"uint256","nodeType":"ElementaryTypeName","src":"29977:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5917,"mutability":"mutable","name":"yieldGenerated","nameLocation":"30004:14:18","nodeType":"VariableDeclaration","scope":5977,"src":"29996:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5916,"name":"uint256","nodeType":"ElementaryTypeName","src":"29996:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29958:61:18"},"returnParameters":{"id":5919,"nodeType":"ParameterList","parameters":[],"src":"30029:0:18"},"scope":6136,"src":"29927:696:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6011,"nodeType":"Block","src":"30718:257:18","statements":[{"clauses":[{"block":{"id":6003,"nodeType":"Block","src":"30802:104:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5995,"name":"withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5993,"src":"30820:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5996,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"30832:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30820:18:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6002,"nodeType":"IfStatement","src":"30816:80:18","trueBody":{"id":6001,"nodeType":"Block","src":"30840:56:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5998,"name":"TransferFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4830,"src":"30865:14:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30865:16:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6000,"nodeType":"RevertStatement","src":"30858:23:18"}]}}]},"errorName":"","id":6004,"nodeType":"TryCatchClause","parameters":{"id":5994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5993,"mutability":"mutable","name":"withdrawn","nameLocation":"30791:9:18","nodeType":"VariableDeclaration","scope":6004,"src":"30783:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5992,"name":"uint256","nodeType":"ElementaryTypeName","src":"30783:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30782:19:18"},"src":"30774:132:18"},{"block":{"id":6008,"nodeType":"Block","src":"30913:56:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6005,"name":"YieldCalculationFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4828,"src":"30934:22:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6006,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30934:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6007,"nodeType":"RevertStatement","src":"30927:31:18"}]},"errorName":"","id":6009,"nodeType":"TryCatchClause","src":"30907:62:18"}],"externalCall":{"arguments":[{"id":5990,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5981,"src":"30766:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":5987,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5979,"src":"30747:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5986,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"30732:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":5988,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30732:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":5989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30757:8:18","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8059,"src":"30732:33:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":5991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30732:41:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6010,"nodeType":"TryStatement","src":"30728:241:18"}]},"id":6012,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawFromStrategy","nameLocation":"30638:21:18","nodeType":"FunctionDefinition","parameters":{"id":5984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5979,"mutability":"mutable","name":"strategy","nameLocation":"30668:8:18","nodeType":"VariableDeclaration","scope":6012,"src":"30660:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5978,"name":"address","nodeType":"ElementaryTypeName","src":"30660:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5981,"mutability":"mutable","name":"amount","nameLocation":"30686:6:18","nodeType":"VariableDeclaration","scope":6012,"src":"30678:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5980,"name":"uint256","nodeType":"ElementaryTypeName","src":"30678:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5983,"mutability":"mutable","name":"token","nameLocation":"30702:5:18","nodeType":"VariableDeclaration","scope":6012,"src":"30694:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5982,"name":"address","nodeType":"ElementaryTypeName","src":"30694:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30659:49:18"},"returnParameters":{"id":5985,"nodeType":"ParameterList","parameters":[],"src":"30718:0:18"},"scope":6136,"src":"30629:346:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6071,"nodeType":"Block","src":"31137:504:18","statements":[{"clauses":[{"block":{"id":6044,"nodeType":"Block","src":"31246:94:18","statements":[{"expression":{"id":6042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6035,"name":"withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"31260:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6036,"name":"emergencyWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6033,"src":"31272:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6037,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"31293:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31272:27:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":6040,"name":"emergencyWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6033,"src":"31311:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"31272:57:18","trueExpression":{"id":6039,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"31302:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31260:69:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6043,"nodeType":"ExpressionStatement","src":"31260:69:18"}]},"errorName":"","id":6045,"nodeType":"TryCatchClause","parameters":{"id":6034,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6033,"mutability":"mutable","name":"emergencyWithdrawn","nameLocation":"31226:18:18","nodeType":"VariableDeclaration","scope":6045,"src":"31218:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6032,"name":"uint256","nodeType":"ElementaryTypeName","src":"31218:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31217:28:18"},"src":"31209:131:18"},{"block":{"id":6068,"nodeType":"Block","src":"31347:288:18","statements":[{"clauses":[{"block":{"id":6059,"nodeType":"Block","src":"31511:61:18","statements":[{"expression":{"id":6057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6055,"name":"withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"31529:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6056,"name":"regularWithdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6053,"src":"31541:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31529:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6058,"nodeType":"ExpressionStatement","src":"31529:28:18"}]},"errorName":"","id":6060,"nodeType":"TryCatchClause","parameters":{"id":6054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6053,"mutability":"mutable","name":"regularWithdrawn","nameLocation":"31493:16:18","nodeType":"VariableDeclaration","scope":6060,"src":"31485:24:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6052,"name":"uint256","nodeType":"ElementaryTypeName","src":"31485:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31484:26:18"},"src":"31476:96:18"},{"block":{"id":6065,"nodeType":"Block","src":"31579:46:18","statements":[{"expression":{"id":6063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6061,"name":"withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6021,"src":"31597:9:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31609:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31597:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6064,"nodeType":"ExpressionStatement","src":"31597:13:18"}]},"errorName":"","id":6066,"nodeType":"TryCatchClause","src":"31573:52:18"}],"externalCall":{"arguments":[{"id":6050,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6016,"src":"31468:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6047,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6014,"src":"31449:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6046,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"31434:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":6048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31434:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":6049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31459:8:18","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8059,"src":"31434:33:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":6051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31434:41:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6067,"nodeType":"TryStatement","src":"31430:195:18"}]},"errorName":"","id":6069,"nodeType":"TryCatchClause","src":"31341:294:18"}],"externalCall":{"arguments":[{"arguments":[{"id":6029,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"31202:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldEscrow_$6136","typeString":"contract YieldEscrow"}],"id":6028,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31194:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6027,"name":"address","nodeType":"ElementaryTypeName","src":"31194:7:18","typeDescriptions":{}}},"id":6030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31194:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":6024,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6014,"src":"31166:8:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6023,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"31151:14:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":6025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31151:24:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":6026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31176:17:18","memberName":"emergencyWithdraw","nodeType":"MemberAccess","referencedDeclaration":8067,"src":"31151:42:18","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) external returns (uint256)"}},"id":6031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31151:57:18","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6070,"nodeType":"TryStatement","src":"31147:488:18"}]},"id":6072,"implemented":true,"kind":"function","modifiers":[],"name":"_emergencyWithdrawFromStrategy","nameLocation":"30990:30:18","nodeType":"FunctionDefinition","parameters":{"id":6019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6014,"mutability":"mutable","name":"strategy","nameLocation":"31038:8:18","nodeType":"VariableDeclaration","scope":6072,"src":"31030:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6013,"name":"address","nodeType":"ElementaryTypeName","src":"31030:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6016,"mutability":"mutable","name":"amount","nameLocation":"31064:6:18","nodeType":"VariableDeclaration","scope":6072,"src":"31056:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6015,"name":"uint256","nodeType":"ElementaryTypeName","src":"31056:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6018,"mutability":"mutable","name":"token","nameLocation":"31088:5:18","nodeType":"VariableDeclaration","scope":6072,"src":"31080:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6017,"name":"address","nodeType":"ElementaryTypeName","src":"31080:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"31020:79:18"},"returnParameters":{"id":6022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6021,"mutability":"mutable","name":"withdrawn","nameLocation":"31126:9:18","nodeType":"VariableDeclaration","scope":6072,"src":"31118:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6020,"name":"uint256","nodeType":"ElementaryTypeName","src":"31118:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31117:19:18"},"scope":6136,"src":"30981:660:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":6102,"nodeType":"Block","src":"32522:252:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6081,"name":"newFeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6075,"src":"32536:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31303030","id":6082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32549:4:18","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"32536:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6088,"nodeType":"IfStatement","src":"32532:85:18","trueBody":{"id":6087,"nodeType":"Block","src":"32555:62:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6084,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"32591:13:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32591:15:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6086,"nodeType":"RevertStatement","src":"32584:22:18"}]}},{"assignments":[6090],"declarations":[{"constant":false,"id":6090,"mutability":"mutable","name":"oldFee","nameLocation":"32643:6:18","nodeType":"VariableDeclaration","scope":6102,"src":"32635:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6089,"name":"uint256","nodeType":"ElementaryTypeName","src":"32635:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6092,"initialValue":{"id":6091,"name":"protocolFeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"32652:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"32635:32:18"},{"expression":{"id":6095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6093,"name":"protocolFeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4673,"src":"32677:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6094,"name":"newFeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6075,"src":"32695:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32677:28:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6096,"nodeType":"ExpressionStatement","src":"32677:28:18"},{"eventCall":{"arguments":[{"id":6098,"name":"oldFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6090,"src":"32748:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6099,"name":"newFeeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6075,"src":"32756:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6097,"name":"ProtocolFeeUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4800,"src":"32729:18:18","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":6100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32729:38:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6101,"nodeType":"EmitStatement","src":"32724:43:18"}]},"documentation":{"id":6073,"nodeType":"StructuredDocumentation","src":"32329:107:18","text":" @dev Updates protocol fee rate\n @param newFeeRate The new fee rate in basis points"},"functionSelector":"6340d55c","id":6103,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6078,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"32510:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6079,"kind":"modifierInvocation","modifierName":{"id":6077,"name":"onlyRole","nameLocations":["32501:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"32501:8:18"},"nodeType":"ModifierInvocation","src":"32501:20:18"}],"name":"updateProtocolFeeRate","nameLocation":"32450:21:18","nodeType":"FunctionDefinition","parameters":{"id":6076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6075,"mutability":"mutable","name":"newFeeRate","nameLocation":"32480:10:18","nodeType":"VariableDeclaration","scope":6103,"src":"32472:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6074,"name":"uint256","nodeType":"ElementaryTypeName","src":"32472:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32471:20:18"},"returnParameters":{"id":6080,"nodeType":"ParameterList","parameters":[],"src":"32522:0:18"},"scope":6136,"src":"32441:333:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6134,"nodeType":"Block","src":"33031:193:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6114,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6108,"src":"33045:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6115,"name":"protocolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"33054:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33045:24:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6121,"nodeType":"IfStatement","src":"33041:83:18","trueBody":{"id":6120,"nodeType":"Block","src":"33071:53:18","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6117,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4810,"src":"33092:19:18","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33092:21:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6119,"nodeType":"RevertStatement","src":"33085:28:18"}]}},{"expression":{"id":6124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6122,"name":"protocolBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4643,"src":"33134:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6123,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6108,"src":"33153:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"33134:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6125,"nodeType":"ExpressionStatement","src":"33134:25:18"},{"expression":{"arguments":[{"id":6130,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4675,"src":"33196:12:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6131,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6108,"src":"33210:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":6127,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6106,"src":"33176:5:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6126,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"33169:6:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":6128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33169:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":6129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"33183:12:18","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"33169:26:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"33169:48:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6133,"nodeType":"ExpressionStatement","src":"33169:48:18"}]},"documentation":{"id":6104,"nodeType":"StructuredDocumentation","src":"32780:133:18","text":" @dev Withdraws protocol fees\n @param token The token to withdraw\n @param amount The amount to withdraw"},"functionSelector":"1a7a73c2","id":6135,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6111,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"33019:10:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6112,"kind":"modifierInvocation","modifierName":{"id":6110,"name":"onlyRole","nameLocations":["33010:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"33010:8:18"},"nodeType":"ModifierInvocation","src":"33010:20:18"}],"name":"withdrawProtocolFees","nameLocation":"32927:20:18","nodeType":"FunctionDefinition","parameters":{"id":6109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6106,"mutability":"mutable","name":"token","nameLocation":"32965:5:18","nodeType":"VariableDeclaration","scope":6135,"src":"32957:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6105,"name":"address","nodeType":"ElementaryTypeName","src":"32957:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6108,"mutability":"mutable","name":"amount","nameLocation":"32988:6:18","nodeType":"VariableDeclaration","scope":6135,"src":"32980:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6107,"name":"uint256","nodeType":"ElementaryTypeName","src":"32980:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"32947:53:18"},"returnParameters":{"id":6113,"nodeType":"ParameterList","parameters":[],"src":"33031:0:18"},"scope":6136,"src":"32918:306:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":6137,"src":"1090:32136:18","usedErrors":[4802,4804,4806,4808,4810,4812,4814,4816,4818,4820,4822,4824,4826,4828,4830],"usedEvents":[327,336,345,399,404,4728,4746,4756,4764,4774,4782,4788,4794,4800]}],"src":"32:33194:18"},"id":18},"src/YieldVault.sol":{"ast":{"absolutePath":"src/YieldVault.sol","exportedSymbols":{"AccessControl":[315],"Address":[1993],"Context":[2023],"ERC165":[2642],"IAccessControl":[388],"IERC165":[2654],"IERC20":[1226],"IERC20Permit":[1287],"IYieldStrategy":[8169],"Math":[3520],"Pausable":[496],"ReentrancyGuard":[561],"SafeERC20":[1663],"SignedMath":[3625],"Strings":[2252],"YieldVault":[7988]},"id":7989,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":6138,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":6139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":1227,"src":"58:56:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":6140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":1664,"src":"115:65:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/ReentrancyGuard.sol","file":"@openzeppelin/contracts/security/ReentrancyGuard.sol","id":6141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":562,"src":"181:62:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/security/Pausable.sol","file":"@openzeppelin/contracts/security/Pausable.sol","id":6142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":497,"src":"244:55:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/access/AccessControl.sol","file":"@openzeppelin/contracts/access/AccessControl.sol","id":6143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":316,"src":"300:58:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"@openzeppelin/contracts/utils/math/Math.sol","id":6144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":3521,"src":"359:53:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"src/interfaces/IYieldStrategy.sol","file":"./interfaces/IYieldStrategy.sol","id":6145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":7989,"sourceUnit":8170,"src":"413:41:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":6147,"name":"ReentrancyGuard","nameLocations":["917:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":561,"src":"917:15:19"},"id":6148,"nodeType":"InheritanceSpecifier","src":"917:15:19"},{"baseName":{"id":6149,"name":"Pausable","nameLocations":["934:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":496,"src":"934:8:19"},"id":6150,"nodeType":"InheritanceSpecifier","src":"934:8:19"},{"baseName":{"id":6151,"name":"AccessControl","nameLocations":["944:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"944:13:19"},"id":6152,"nodeType":"InheritanceSpecifier","src":"944:13:19"}],"canonicalName":"YieldVault","contractDependencies":[],"contractKind":"contract","documentation":{"id":6146,"nodeType":"StructuredDocumentation","src":"456:437:19","text":" @title YieldVault\n @dev Manages multiple yield strategies and optimizes yield allocation\n @notice Central vault for yield generation across multiple DeFi protocols\n @author YieldRails Team\n \n Key Features:\n - Multi-strategy yield optimization\n - Automatic rebalancing based on APY and risk scores\n - Emergency withdrawal capabilities\n - Real-time performance tracking\n - Risk-adjusted allocation algorithms"},"fullyImplemented":true,"id":7988,"linearizedBaseContracts":[7988,315,2642,2654,388,496,2023,561],"name":"YieldVault","nameLocation":"903:10:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":6156,"libraryName":{"id":6153,"name":"SafeERC20","nameLocations":["970:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":1663,"src":"970:9:19"},"nodeType":"UsingForDirective","src":"964:27:19","typeName":{"id":6155,"nodeType":"UserDefinedTypeName","pathNode":{"id":6154,"name":"IERC20","nameLocations":["984:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"984:6:19"},"referencedDeclaration":1226,"src":"984:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}},{"global":false,"id":6159,"libraryName":{"id":6157,"name":"Math","nameLocations":["1002:4:19"],"nodeType":"IdentifierPath","referencedDeclaration":3520,"src":"1002:4:19"},"nodeType":"UsingForDirective","src":"996:23:19","typeName":{"id":6158,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":true,"functionSelector":"75b238fc","id":6164,"mutability":"constant","name":"ADMIN_ROLE","nameLocation":"1738:10:19","nodeType":"VariableDeclaration","scope":7988,"src":"1714:60:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"41444d494e5f524f4c45","id":6162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1761:12:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""},"value":"ADMIN_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775","typeString":"literal_string \"ADMIN_ROLE\""}],"id":6161,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1751:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1751:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"abcbe0b2","id":6169,"mutability":"constant","name":"STRATEGY_MANAGER_ROLE","nameLocation":"1804:21:19","nodeType":"VariableDeclaration","scope":7988,"src":"1780:82:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6165,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"53545241544547595f4d414e414745525f524f4c45","id":6167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1838:23:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b","typeString":"literal_string \"STRATEGY_MANAGER_ROLE\""},"value":"STRATEGY_MANAGER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b","typeString":"literal_string \"STRATEGY_MANAGER_ROLE\""}],"id":6166,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1828:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"490b48f8","id":6174,"mutability":"constant","name":"REBALANCER_ROLE","nameLocation":"1892:15:19","nodeType":"VariableDeclaration","scope":7988,"src":"1868:70:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":6170,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1868:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"524542414c414e4345525f524f4c45","id":6172,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1920:17:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_ccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46","typeString":"literal_string \"REBALANCER_ROLE\""},"value":"REBALANCER_ROLE"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f46","typeString":"literal_string \"REBALANCER_ROLE\""}],"id":6171,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1910:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":6173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1910:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":true,"functionSelector":"767f06ae","id":6177,"mutability":"constant","name":"MAX_STRATEGIES","nameLocation":"2006:14:19","nodeType":"VariableDeclaration","scope":7988,"src":"1982:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6175,"name":"uint256","nodeType":"ElementaryTypeName","src":"1982:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130","id":6176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2023:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"visibility":"public"},{"constant":true,"functionSelector":"e1f1c4a7","id":6180,"mutability":"constant","name":"BASIS_POINTS","nameLocation":"2055:12:19","nodeType":"VariableDeclaration","scope":7988,"src":"2031:44:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6178,"name":"uint256","nodeType":"ElementaryTypeName","src":"2031:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3130303030","id":6179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2070:5:19","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"visibility":"public"},{"constant":true,"functionSelector":"64d60a7d","id":6183,"mutability":"constant","name":"MAX_ALLOCATION_PER_STRATEGY","nameLocation":"2105:27:19","nodeType":"VariableDeclaration","scope":7988,"src":"2081:58:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6181,"name":"uint256","nodeType":"ElementaryTypeName","src":"2081:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35303030","id":6182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2135:4:19","typeDescriptions":{"typeIdentifier":"t_rational_5000_by_1","typeString":"int_const 5000"},"value":"5000"},"visibility":"public"},{"constant":true,"functionSelector":"ef434d61","id":6186,"mutability":"constant","name":"MIN_REBALANCE_THRESHOLD","nameLocation":"2176:23:19","nodeType":"VariableDeclaration","scope":7988,"src":"2152:53:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6184,"name":"uint256","nodeType":"ElementaryTypeName","src":"2152:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":6185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":true,"functionSelector":"8faee2a8","id":6189,"mutability":"constant","name":"REBALANCE_COOLDOWN","nameLocation":"2241:18:19","nodeType":"VariableDeclaration","scope":7988,"src":"2217:52:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2217:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":6188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2262:7:19","subdenomination":"hours","typeDescriptions":{"typeIdentifier":"t_rational_3600_by_1","typeString":"int_const 3600"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"55282902","id":6192,"mutability":"constant","name":"PERFORMANCE_WINDOW","nameLocation":"2328:18:19","nodeType":"VariableDeclaration","scope":7988,"src":"2304:51:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6190,"name":"uint256","nodeType":"ElementaryTypeName","src":"2304:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"37","id":6191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:6:19","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_604800_by_1","typeString":"int_const 604800"},"value":"7"},"visibility":"public"},{"constant":true,"functionSelector":"0e7bd231","id":6195,"mutability":"constant","name":"MIN_STRATEGY_ALLOCATION","nameLocation":"2385:23:19","nodeType":"VariableDeclaration","scope":7988,"src":"2361:53:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6193,"name":"uint256","nodeType":"ElementaryTypeName","src":"2361:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313030","id":6194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2411:3:19","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"value":"100"},"visibility":"public"},{"constant":false,"functionSelector":"38d52e0f","id":6198,"mutability":"immutable","name":"asset","nameLocation":"3157:5:19","nodeType":"VariableDeclaration","scope":7988,"src":"3133:29:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"},"typeName":{"id":6197,"nodeType":"UserDefinedTypeName","pathNode":{"id":6196,"name":"IERC20","nameLocations":["3133:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"3133:6:19"},"referencedDeclaration":1226,"src":"3133:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"01e1d114","id":6200,"mutability":"mutable","name":"totalAssets","nameLocation":"3210:11:19","nodeType":"VariableDeclaration","scope":7988,"src":"3195:26:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6199,"name":"uint256","nodeType":"ElementaryTypeName","src":"3195:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"3a98ef39","id":6202,"mutability":"mutable","name":"totalShares","nameLocation":"3242:11:19","nodeType":"VariableDeclaration","scope":7988,"src":"3227:26:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6201,"name":"uint256","nodeType":"ElementaryTypeName","src":"3227:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"39ebf823","id":6207,"mutability":"mutable","name":"strategies","nameLocation":"3331:10:19","nodeType":"VariableDeclaration","scope":7988,"src":"3291:50:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo)"},"typeName":{"id":6206,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6203,"name":"address","nodeType":"ElementaryTypeName","src":"3299:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3291:32:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6205,"nodeType":"UserDefinedTypeName","pathNode":{"id":6204,"name":"StrategyInfo","nameLocations":["3310:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"3310:12:19"},"referencedDeclaration":6272,"src":"3310:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}}},"visibility":"public"},{"constant":false,"functionSelector":"a267526b","id":6210,"mutability":"mutable","name":"strategyList","nameLocation":"3364:12:19","nodeType":"VariableDeclaration","scope":7988,"src":"3347:29:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[]"},"typeName":{"baseType":{"id":6208,"name":"address","nodeType":"ElementaryTypeName","src":"3347:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6209,"nodeType":"ArrayTypeName","src":"3347:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"public"},{"constant":false,"functionSelector":"2c178bd0","id":6214,"mutability":"mutable","name":"activeStrategies","nameLocation":"3414:16:19","nodeType":"VariableDeclaration","scope":7988,"src":"3382:48:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":6213,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6211,"name":"address","nodeType":"ElementaryTypeName","src":"3390:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3382:24:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6212,"name":"bool","nodeType":"ElementaryTypeName","src":"3401:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"id":6218,"mutability":"mutable","name":"_balances","nameLocation":"3498:9:19","nodeType":"VariableDeclaration","scope":7988,"src":"3462:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":6217,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6215,"name":"address","nodeType":"ElementaryTypeName","src":"3470:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3462:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6216,"name":"uint256","nodeType":"ElementaryTypeName","src":"3481:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":6224,"mutability":"mutable","name":"_allowances","nameLocation":"3569:11:19","nodeType":"VariableDeclaration","scope":7988,"src":"3513:67:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":6223,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6219,"name":"address","nodeType":"ElementaryTypeName","src":"3521:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3513:47:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6222,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6220,"name":"address","nodeType":"ElementaryTypeName","src":"3540:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3532:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6221,"name":"uint256","nodeType":"ElementaryTypeName","src":"3551:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"functionSelector":"6b5cc294","id":6229,"mutability":"mutable","name":"strategyPerformance","nameLocation":"3662:19:19","nodeType":"VariableDeclaration","scope":7988,"src":"3619:62:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData)"},"typeName":{"id":6228,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6225,"name":"address","nodeType":"ElementaryTypeName","src":"3627:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3619:35:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6227,"nodeType":"UserDefinedTypeName","pathNode":{"id":6226,"name":"PerformanceData","nameLocations":["3638:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":6287,"src":"3638:15:19"},"referencedDeclaration":6287,"src":"3638:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage_ptr","typeString":"struct YieldVault.PerformanceData"}}},"visibility":"public"},{"constant":false,"functionSelector":"dcdf92fb","id":6233,"mutability":"mutable","name":"dailyYield","nameLocation":"3722:10:19","nodeType":"VariableDeclaration","scope":7988,"src":"3687:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":6232,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6230,"name":"uint256","nodeType":"ElementaryTypeName","src":"3695:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3687:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6231,"name":"uint256","nodeType":"ElementaryTypeName","src":"3706:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"106b9ca1","id":6235,"mutability":"mutable","name":"lastRebalance","nameLocation":"3806:13:19","nodeType":"VariableDeclaration","scope":7988,"src":"3791:28:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6234,"name":"uint256","nodeType":"ElementaryTypeName","src":"3791:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"e8f8080c","id":6239,"mutability":"mutable","name":"targetAllocations","nameLocation":"3860:17:19","nodeType":"VariableDeclaration","scope":7988,"src":"3825:52:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":6238,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":6236,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3825:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":6237,"name":"uint256","nodeType":"ElementaryTypeName","src":"3844:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"a6f7f5d6","id":6242,"mutability":"mutable","name":"managementFee","nameLocation":"3968:13:19","nodeType":"VariableDeclaration","scope":7988,"src":"3953:34:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6240,"name":"uint256","nodeType":"ElementaryTypeName","src":"3953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"323030","id":6241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3984:3:19","typeDescriptions":{"typeIdentifier":"t_rational_200_by_1","typeString":"int_const 200"},"value":"200"},"visibility":"public"},{"constant":false,"functionSelector":"87788782","id":6245,"mutability":"mutable","name":"performanceFee","nameLocation":"4023:14:19","nodeType":"VariableDeclaration","scope":7988,"src":"4008:36:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6243,"name":"uint256","nodeType":"ElementaryTypeName","src":"4008:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31303030","id":6244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4040:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"visibility":"public"},{"constant":false,"functionSelector":"46904840","id":6247,"mutability":"mutable","name":"feeRecipient","nameLocation":"4083:12:19","nodeType":"VariableDeclaration","scope":7988,"src":"4068:27:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6246,"name":"address","nodeType":"ElementaryTypeName","src":"4068:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"58d1d42a","id":6250,"mutability":"mutable","name":"maxTotalRisk","nameLocation":"4144:12:19","nodeType":"VariableDeclaration","scope":7988,"src":"4129:31:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6248,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":6249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4159:1:19","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":false,"functionSelector":"a5ac4dd1","id":6253,"mutability":"mutable","name":"autoRebalanceEnabled","nameLocation":"4209:20:19","nodeType":"VariableDeclaration","scope":7988,"src":"4197:39:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6251,"name":"bool","nodeType":"ElementaryTypeName","src":"4197:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"74727565","id":6252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4232:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"visibility":"public"},{"canonicalName":"YieldVault.StrategyInfo","documentation":{"id":6254,"nodeType":"StructuredDocumentation","src":"4917:64:19","text":" @dev Strategy information and allocation data"},"id":6272,"members":[{"constant":false,"id":6257,"mutability":"mutable","name":"strategy","nameLocation":"5031:8:19","nodeType":"VariableDeclaration","scope":6272,"src":"5016:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"},"typeName":{"id":6256,"nodeType":"UserDefinedTypeName","pathNode":{"id":6255,"name":"IYieldStrategy","nameLocations":["5016:14:19"],"nodeType":"IdentifierPath","referencedDeclaration":8169,"src":"5016:14:19"},"referencedDeclaration":8169,"src":"5016:14:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"visibility":"internal"},{"constant":false,"id":6259,"mutability":"mutable","name":"allocation","nameLocation":"5085:10:19","nodeType":"VariableDeclaration","scope":6272,"src":"5077:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6258,"name":"uint256","nodeType":"ElementaryTypeName","src":"5077:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6261,"mutability":"mutable","name":"targetAllocation","nameLocation":"5161:16:19","nodeType":"VariableDeclaration","scope":6272,"src":"5153:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6260,"name":"uint256","nodeType":"ElementaryTypeName","src":"5153:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6263,"mutability":"mutable","name":"totalDeposited","nameLocation":"5235:14:19","nodeType":"VariableDeclaration","scope":6272,"src":"5227:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6262,"name":"uint256","nodeType":"ElementaryTypeName","src":"5227:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6265,"mutability":"mutable","name":"lastUpdate","nameLocation":"5311:10:19","nodeType":"VariableDeclaration","scope":6272,"src":"5303:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6264,"name":"uint256","nodeType":"ElementaryTypeName","src":"5303:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6267,"mutability":"mutable","name":"active","nameLocation":"5371:6:19","nodeType":"VariableDeclaration","scope":6272,"src":"5366:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":6266,"name":"bool","nodeType":"ElementaryTypeName","src":"5366:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":6269,"mutability":"mutable","name":"riskScore","nameLocation":"5442:9:19","nodeType":"VariableDeclaration","scope":6272,"src":"5434:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6268,"name":"uint256","nodeType":"ElementaryTypeName","src":"5434:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6271,"mutability":"mutable","name":"name","nameLocation":"5500:4:19","nodeType":"VariableDeclaration","scope":6272,"src":"5493:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6270,"name":"string","nodeType":"ElementaryTypeName","src":"5493:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StrategyInfo","nameLocation":"4993:12:19","nodeType":"StructDefinition","scope":7988,"src":"4986:559:19","visibility":"public"},{"canonicalName":"YieldVault.PerformanceData","documentation":{"id":6273,"nodeType":"StructuredDocumentation","src":"5551:49:19","text":" @dev Performance tracking data"},"id":6287,"members":[{"constant":false,"id":6275,"mutability":"mutable","name":"totalYieldGenerated","nameLocation":"5646:19:19","nodeType":"VariableDeclaration","scope":6287,"src":"5638:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6274,"name":"uint256","nodeType":"ElementaryTypeName","src":"5638:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6277,"mutability":"mutable","name":"averageAPY","nameLocation":"5710:10:19","nodeType":"VariableDeclaration","scope":6287,"src":"5702:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6276,"name":"uint256","nodeType":"ElementaryTypeName","src":"5702:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6279,"mutability":"mutable","name":"lastAPY","nameLocation":"5774:7:19","nodeType":"VariableDeclaration","scope":6287,"src":"5766:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6278,"name":"uint256","nodeType":"ElementaryTypeName","src":"5766:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6282,"mutability":"mutable","name":"apyHistory","nameLocation":"5835:10:19","nodeType":"VariableDeclaration","scope":6287,"src":"5825:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6280,"name":"uint256","nodeType":"ElementaryTypeName","src":"5825:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6281,"nodeType":"ArrayTypeName","src":"5825:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6284,"mutability":"mutable","name":"lastPerformanceUpdate","nameLocation":"5911:21:19","nodeType":"VariableDeclaration","scope":6287,"src":"5903:29:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6283,"name":"uint256","nodeType":"ElementaryTypeName","src":"5903:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6286,"mutability":"mutable","name":"sharpeRatio","nameLocation":"5977:11:19","nodeType":"VariableDeclaration","scope":6287,"src":"5969:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6285,"name":"uint256","nodeType":"ElementaryTypeName","src":"5969:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"PerformanceData","nameLocation":"5612:15:19","nodeType":"StructDefinition","scope":7988,"src":"5605:424:19","visibility":"public"},{"canonicalName":"YieldVault.RebalanceProposal","documentation":{"id":6288,"nodeType":"StructuredDocumentation","src":"6035:44:19","text":" @dev Rebalancing proposal"},"id":6299,"members":[{"constant":false,"id":6291,"mutability":"mutable","name":"strategies","nameLocation":"6129:10:19","nodeType":"VariableDeclaration","scope":6299,"src":"6119:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6289,"name":"address","nodeType":"ElementaryTypeName","src":"6119:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6290,"nodeType":"ArrayTypeName","src":"6119:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6294,"mutability":"mutable","name":"newAllocations","nameLocation":"6159:14:19","nodeType":"VariableDeclaration","scope":6299,"src":"6149:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6292,"name":"uint256","nodeType":"ElementaryTypeName","src":"6149:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6293,"nodeType":"ArrayTypeName","src":"6149:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6296,"mutability":"mutable","name":"timestamp","nameLocation":"6191:9:19","nodeType":"VariableDeclaration","scope":6299,"src":"6183:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6295,"name":"uint256","nodeType":"ElementaryTypeName","src":"6183:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6298,"mutability":"mutable","name":"reason","nameLocation":"6217:6:19","nodeType":"VariableDeclaration","scope":6299,"src":"6210:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6297,"name":"string","nodeType":"ElementaryTypeName","src":"6210:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"RebalanceProposal","nameLocation":"6091:17:19","nodeType":"StructDefinition","scope":7988,"src":"6084:146:19","visibility":"public"},{"anonymous":false,"eventSelector":"a60bb03b49d64a590d05814bbe4dc62875c4fe9a09567dc78c6de9ea38663b25","id":6309,"name":"StrategyAdded","nameLocation":"6915:13:19","nodeType":"EventDefinition","parameters":{"id":6308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6301,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"6954:8:19","nodeType":"VariableDeclaration","scope":6309,"src":"6938:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6300,"name":"address","nodeType":"ElementaryTypeName","src":"6938:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6303,"indexed":false,"mutability":"mutable","name":"name","nameLocation":"6979:4:19","nodeType":"VariableDeclaration","scope":6309,"src":"6972:11:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6302,"name":"string","nodeType":"ElementaryTypeName","src":"6972:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6305,"indexed":false,"mutability":"mutable","name":"riskScore","nameLocation":"7001:9:19","nodeType":"VariableDeclaration","scope":6309,"src":"6993:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6304,"name":"uint256","nodeType":"ElementaryTypeName","src":"6993:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6307,"indexed":false,"mutability":"mutable","name":"initialAllocation","nameLocation":"7028:17:19","nodeType":"VariableDeclaration","scope":6309,"src":"7020:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6306,"name":"uint256","nodeType":"ElementaryTypeName","src":"7020:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6928:123:19"},"src":"6909:143:19"},{"anonymous":false,"eventSelector":"f2f3b6b9f2a3bdce56fa5fd5304960564a1d25405f97dec9260b1165ac728500","id":6317,"name":"StrategyRemoved","nameLocation":"7064:15:19","nodeType":"EventDefinition","parameters":{"id":6316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6311,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"7105:8:19","nodeType":"VariableDeclaration","scope":6317,"src":"7089:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6310,"name":"address","nodeType":"ElementaryTypeName","src":"7089:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6313,"indexed":false,"mutability":"mutable","name":"reason","nameLocation":"7130:6:19","nodeType":"VariableDeclaration","scope":6317,"src":"7123:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6312,"name":"string","nodeType":"ElementaryTypeName","src":"7123:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6315,"indexed":false,"mutability":"mutable","name":"fundsWithdrawn","nameLocation":"7154:14:19","nodeType":"VariableDeclaration","scope":6317,"src":"7146:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6314,"name":"uint256","nodeType":"ElementaryTypeName","src":"7146:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7079:95:19"},"src":"7058:117:19"},{"anonymous":false,"eventSelector":"90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15","id":6325,"name":"Deposit","nameLocation":"7187:7:19","nodeType":"EventDefinition","parameters":{"id":6324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6319,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7220:4:19","nodeType":"VariableDeclaration","scope":6325,"src":"7204:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6318,"name":"address","nodeType":"ElementaryTypeName","src":"7204:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6321,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"7242:6:19","nodeType":"VariableDeclaration","scope":6325,"src":"7234:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6320,"name":"uint256","nodeType":"ElementaryTypeName","src":"7234:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6323,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"7266:6:19","nodeType":"VariableDeclaration","scope":6325,"src":"7258:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6322,"name":"uint256","nodeType":"ElementaryTypeName","src":"7258:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7194:84:19"},"src":"7181:98:19"},{"anonymous":false,"eventSelector":"df273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb","id":6333,"name":"Withdrawal","nameLocation":"7291:10:19","nodeType":"EventDefinition","parameters":{"id":6332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6327,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"7327:4:19","nodeType":"VariableDeclaration","scope":6333,"src":"7311:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6326,"name":"address","nodeType":"ElementaryTypeName","src":"7311:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6329,"indexed":false,"mutability":"mutable","name":"assets","nameLocation":"7349:6:19","nodeType":"VariableDeclaration","scope":6333,"src":"7341:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6328,"name":"uint256","nodeType":"ElementaryTypeName","src":"7341:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6331,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"7373:6:19","nodeType":"VariableDeclaration","scope":6333,"src":"7365:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6330,"name":"uint256","nodeType":"ElementaryTypeName","src":"7365:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7301:84:19"},"src":"7285:101:19"},{"anonymous":false,"eventSelector":"7255fc1a6ed23f2388aeff823d30ab1eefc7cb342f1481762f8e7bada20c5f29","id":6348,"name":"Rebalanced","nameLocation":"7398:10:19","nodeType":"EventDefinition","parameters":{"id":6347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6335,"indexed":true,"mutability":"mutable","name":"rebalancer","nameLocation":"7434:10:19","nodeType":"VariableDeclaration","scope":6348,"src":"7418:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6334,"name":"address","nodeType":"ElementaryTypeName","src":"7418:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6338,"indexed":false,"mutability":"mutable","name":"strategies","nameLocation":"7464:10:19","nodeType":"VariableDeclaration","scope":6348,"src":"7454:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6336,"name":"address","nodeType":"ElementaryTypeName","src":"7454:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6337,"nodeType":"ArrayTypeName","src":"7454:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6341,"indexed":false,"mutability":"mutable","name":"oldAllocations","nameLocation":"7494:14:19","nodeType":"VariableDeclaration","scope":6348,"src":"7484:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6339,"name":"uint256","nodeType":"ElementaryTypeName","src":"7484:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6340,"nodeType":"ArrayTypeName","src":"7484:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6344,"indexed":false,"mutability":"mutable","name":"newAllocations","nameLocation":"7528:14:19","nodeType":"VariableDeclaration","scope":6348,"src":"7518:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6342,"name":"uint256","nodeType":"ElementaryTypeName","src":"7518:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6343,"nodeType":"ArrayTypeName","src":"7518:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":6346,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"7560:9:19","nodeType":"VariableDeclaration","scope":6348,"src":"7552:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6345,"name":"uint256","nodeType":"ElementaryTypeName","src":"7552:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7408:167:19"},"src":"7392:184:19"},{"anonymous":false,"eventSelector":"f343dfc1e44c65296fb907b287e6e12133eb7945ba79ec463d65ef129757c2ff","id":6356,"name":"YieldHarvested","nameLocation":"7588:14:19","nodeType":"EventDefinition","parameters":{"id":6355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6350,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"7628:8:19","nodeType":"VariableDeclaration","scope":6356,"src":"7612:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6349,"name":"address","nodeType":"ElementaryTypeName","src":"7612:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6352,"indexed":false,"mutability":"mutable","name":"yieldAmount","nameLocation":"7654:11:19","nodeType":"VariableDeclaration","scope":6356,"src":"7646:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6351,"name":"uint256","nodeType":"ElementaryTypeName","src":"7646:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6354,"indexed":false,"mutability":"mutable","name":"newTotalYield","nameLocation":"7683:13:19","nodeType":"VariableDeclaration","scope":6356,"src":"7675:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6353,"name":"uint256","nodeType":"ElementaryTypeName","src":"7675:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7602:100:19"},"src":"7582:121:19"},{"anonymous":false,"eventSelector":"3d95ef70101318503366efd9e6b901f992f45bf1e94884bb0f4f311fbba3d425","id":6364,"name":"PerformanceUpdated","nameLocation":"7715:18:19","nodeType":"EventDefinition","parameters":{"id":6363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6358,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"7759:8:19","nodeType":"VariableDeclaration","scope":6364,"src":"7743:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6357,"name":"address","nodeType":"ElementaryTypeName","src":"7743:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6360,"indexed":false,"mutability":"mutable","name":"newAPY","nameLocation":"7785:6:19","nodeType":"VariableDeclaration","scope":6364,"src":"7777:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6359,"name":"uint256","nodeType":"ElementaryTypeName","src":"7777:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6362,"indexed":false,"mutability":"mutable","name":"sharpeRatio","nameLocation":"7809:11:19","nodeType":"VariableDeclaration","scope":6364,"src":"7801:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6361,"name":"uint256","nodeType":"ElementaryTypeName","src":"7801:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7733:93:19"},"src":"7709:118:19"},{"anonymous":false,"eventSelector":"09ed6a9a04c78e5e014562c58b9494bbc44834bf7c3219a2b01c9e1bda911a91","id":6374,"name":"EmergencyAction","nameLocation":"7839:15:19","nodeType":"EventDefinition","parameters":{"id":6373,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6366,"indexed":true,"mutability":"mutable","name":"admin","nameLocation":"7880:5:19","nodeType":"VariableDeclaration","scope":6374,"src":"7864:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6365,"name":"address","nodeType":"ElementaryTypeName","src":"7864:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6368,"indexed":false,"mutability":"mutable","name":"action","nameLocation":"7902:6:19","nodeType":"VariableDeclaration","scope":6374,"src":"7895:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":6367,"name":"string","nodeType":"ElementaryTypeName","src":"7895:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6370,"indexed":true,"mutability":"mutable","name":"strategy","nameLocation":"7934:8:19","nodeType":"VariableDeclaration","scope":6374,"src":"7918:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6369,"name":"address","nodeType":"ElementaryTypeName","src":"7918:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6372,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"7960:6:19","nodeType":"VariableDeclaration","scope":6374,"src":"7952:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6371,"name":"uint256","nodeType":"ElementaryTypeName","src":"7952:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7854:118:19"},"src":"7833:140:19"},{"errorSelector":"4e236e9a","id":6376,"name":"InvalidStrategy","nameLocation":"8658:15:19","nodeType":"ErrorDefinition","parameters":{"id":6375,"nodeType":"ParameterList","parameters":[],"src":"8673:2:19"},"src":"8652:24:19"},{"errorSelector":"c45546f7","id":6378,"name":"StrategyAlreadyExists","nameLocation":"8687:21:19","nodeType":"ErrorDefinition","parameters":{"id":6377,"nodeType":"ParameterList","parameters":[],"src":"8708:2:19"},"src":"8681:30:19"},{"errorSelector":"dc974a98","id":6380,"name":"StrategyNotActive","nameLocation":"8722:17:19","nodeType":"ErrorDefinition","parameters":{"id":6379,"nodeType":"ParameterList","parameters":[],"src":"8739:2:19"},"src":"8716:26:19"},{"errorSelector":"7d8b293c","id":6382,"name":"MaxStrategiesReached","nameLocation":"8753:20:19","nodeType":"ErrorDefinition","parameters":{"id":6381,"nodeType":"ParameterList","parameters":[],"src":"8773:2:19"},"src":"8747:29:19"},{"errorSelector":"0baf7432","id":6384,"name":"InvalidAllocation","nameLocation":"8787:17:19","nodeType":"ErrorDefinition","parameters":{"id":6383,"nodeType":"ParameterList","parameters":[],"src":"8804:2:19"},"src":"8781:26:19"},{"errorSelector":"f4d678b8","id":6386,"name":"InsufficientBalance","nameLocation":"8818:19:19","nodeType":"ErrorDefinition","parameters":{"id":6385,"nodeType":"ParameterList","parameters":[],"src":"8837:2:19"},"src":"8812:28:19"},{"errorSelector":"2c5211c6","id":6388,"name":"InvalidAmount","nameLocation":"8851:13:19","nodeType":"ErrorDefinition","parameters":{"id":6387,"nodeType":"ParameterList","parameters":[],"src":"8864:2:19"},"src":"8845:22:19"},{"errorSelector":"53ea8378","id":6390,"name":"RebalanceCooldownActive","nameLocation":"8878:23:19","nodeType":"ErrorDefinition","parameters":{"id":6389,"nodeType":"ParameterList","parameters":[],"src":"8901:2:19"},"src":"8872:32:19"},{"errorSelector":"e6d0f9ae","id":6392,"name":"ExceedsRiskLimit","nameLocation":"8915:16:19","nodeType":"ErrorDefinition","parameters":{"id":6391,"nodeType":"ParameterList","parameters":[],"src":"8931:2:19"},"src":"8909:25:19"},{"errorSelector":"82d5d76a","id":6394,"name":"InvalidTarget","nameLocation":"8945:13:19","nodeType":"ErrorDefinition","parameters":{"id":6393,"nodeType":"ParameterList","parameters":[],"src":"8958:2:19"},"src":"8939:22:19"},{"errorSelector":"90b8ec18","id":6396,"name":"TransferFailed","nameLocation":"8972:14:19","nodeType":"ErrorDefinition","parameters":{"id":6395,"nodeType":"ParameterList","parameters":[],"src":"8986:2:19"},"src":"8966:23:19"},{"body":{"id":6466,"nodeType":"Block","src":"9980:442:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6406,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6399,"src":"9994:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10012:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6408,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10004:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6407,"name":"address","nodeType":"ElementaryTypeName","src":"10004:7:19","typeDescriptions":{}}},"id":6410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10004:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9994:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6412,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"10018:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10036:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6414,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10028:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6413,"name":"address","nodeType":"ElementaryTypeName","src":"10028:7:19","typeDescriptions":{}}},"id":6416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10028:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10018:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9994:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6419,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6403,"src":"10042:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10067:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6421,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10059:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6420,"name":"address","nodeType":"ElementaryTypeName","src":"10059:7:19","typeDescriptions":{}}},"id":6423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10059:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10042:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9994:75:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6430,"nodeType":"IfStatement","src":"9990:128:19","trueBody":{"id":6429,"nodeType":"Block","src":"10071:47:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6426,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"10092:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10092:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6428,"nodeType":"RevertStatement","src":"10085:22:19"}]}},{"expression":{"id":6435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6431,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"10128:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6433,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6399,"src":"10143:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6432,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"10136:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":6434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10136:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"src":"10128:22:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":6436,"nodeType":"ExpressionStatement","src":"10128:22:19"},{"expression":{"id":6439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6437,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6247,"src":"10160:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6438,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6403,"src":"10175:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10160:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6440,"nodeType":"ExpressionStatement","src":"10160:28:19"},{"expression":{"arguments":[{"id":6442,"name":"DEFAULT_ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":27,"src":"10210:18:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6443,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"10230:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6441,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10199:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10199:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6445,"nodeType":"ExpressionStatement","src":"10199:38:19"},{"expression":{"arguments":[{"id":6447,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"10258:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6448,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"10270:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6446,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10247:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10247:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6450,"nodeType":"ExpressionStatement","src":"10247:30:19"},{"expression":{"arguments":[{"id":6452,"name":"STRATEGY_MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"10298:21:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6453,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"10321:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6451,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10287:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10287:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6455,"nodeType":"ExpressionStatement","src":"10287:41:19"},{"expression":{"arguments":[{"id":6457,"name":"REBALANCER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6174,"src":"10349:15:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":6458,"name":"_admin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6401,"src":"10366:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":6456,"name":"_grantRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"10338:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address)"}},"id":6459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10338:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6460,"nodeType":"ExpressionStatement","src":"10338:35:19"},{"expression":{"id":6464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6461,"name":"lastRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"10384:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":6462,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"10400:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10406:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"10400:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10384:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6465,"nodeType":"ExpressionStatement","src":"10384:31:19"}]},"documentation":{"id":6397,"nodeType":"StructuredDocumentation","src":"9673:205:19","text":" @dev Initialize the YieldVault\n @param _asset The base asset for the vault (e.g., USDC)\n @param _admin The admin address\n @param _feeRecipient The fee recipient address"},"id":6467,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":6404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6399,"mutability":"mutable","name":"_asset","nameLocation":"9912:6:19","nodeType":"VariableDeclaration","scope":6467,"src":"9904:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6398,"name":"address","nodeType":"ElementaryTypeName","src":"9904:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6401,"mutability":"mutable","name":"_admin","nameLocation":"9936:6:19","nodeType":"VariableDeclaration","scope":6467,"src":"9928:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6400,"name":"address","nodeType":"ElementaryTypeName","src":"9928:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6403,"mutability":"mutable","name":"_feeRecipient","nameLocation":"9960:13:19","nodeType":"VariableDeclaration","scope":6467,"src":"9952:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6402,"name":"address","nodeType":"ElementaryTypeName","src":"9952:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9894:85:19"},"returnParameters":{"id":6405,"nodeType":"ParameterList","parameters":[],"src":"9980:0:19"},"scope":7988,"src":"9883:539:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":6615,"nodeType":"Block","src":"11580:1625:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6482,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"11594:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":6485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11614:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11606:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6483,"name":"address","nodeType":"ElementaryTypeName","src":"11606:7:19","typeDescriptions":{}}},"id":6486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11606:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11594:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6491,"nodeType":"IfStatement","src":"11590:52:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6488,"name":"InvalidStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6376,"src":"11625:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11625:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6490,"nodeType":"RevertStatement","src":"11618:24:19"}},{"condition":{"baseExpression":{"id":6492,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"11656:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6494,"indexExpression":{"id":6493,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"11673:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11656:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6498,"nodeType":"IfStatement","src":"11652:62:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6495,"name":"StrategyAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6378,"src":"11691:21:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11691:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6497,"nodeType":"RevertStatement","src":"11684:30:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6499,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"11728:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11741:6:19","memberName":"length","nodeType":"MemberAccess","src":"11728:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":6501,"name":"MAX_STRATEGIES","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6177,"src":"11751:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11728:37:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6506,"nodeType":"IfStatement","src":"11724:72:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6503,"name":"MaxStrategiesReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6382,"src":"11774:20:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11774:22:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6505,"nodeType":"RevertStatement","src":"11767:29:19"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":6513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6507,"name":"riskScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6474,"src":"11810:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11810:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6510,"name":"riskScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6474,"src":"11828:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"3130","id":6511,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11840:2:19","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"11828:14:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11810:32:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6517,"nodeType":"IfStatement","src":"11806:60:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6514,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"11851:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11851:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6516,"nodeType":"RevertStatement","src":"11844:22:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6518,"name":"initialAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"11880:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6519,"name":"MAX_ALLOCATION_PER_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6183,"src":"11900:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11880:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6524,"nodeType":"IfStatement","src":"11876:79:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6521,"name":"InvalidAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"11936:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6522,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11936:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6523,"nodeType":"RevertStatement","src":"11929:26:19"}},{"clauses":[{"block":{"id":6543,"nodeType":"Block","src":"12088:86:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6533,"name":"strategyAsset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6531,"src":"12106:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":6536,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"12131:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}],"id":6535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12123:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6534,"name":"address","nodeType":"ElementaryTypeName","src":"12123:7:19","typeDescriptions":{}}},"id":6537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12123:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12106:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6542,"nodeType":"IfStatement","src":"12102:61:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6539,"name":"InvalidStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6376,"src":"12146:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6540,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12146:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6541,"nodeType":"RevertStatement","src":"12139:24:19"}}]},"errorName":"","id":6544,"nodeType":"TryCatchClause","parameters":{"id":6532,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6531,"mutability":"mutable","name":"strategyAsset","nameLocation":"12073:13:19","nodeType":"VariableDeclaration","scope":6544,"src":"12065:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6530,"name":"address","nodeType":"ElementaryTypeName","src":"12065:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"12064:23:19"},"src":"12056:118:19"},{"block":{"id":6548,"nodeType":"Block","src":"12181:49:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6545,"name":"InvalidStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6376,"src":"12202:15:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12202:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6547,"nodeType":"RevertStatement","src":"12195:24:19"}]},"errorName":"","id":6549,"nodeType":"TryCatchClause","src":"12175:55:19"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":6526,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12038:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6525,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"12023:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":6527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12023:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":6528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12048:5:19","memberName":"asset","nodeType":"MemberAccess","referencedDeclaration":8130,"src":"12023:30:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":6529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12023:32:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6550,"nodeType":"TryStatement","src":"12019:211:19"},{"expression":{"id":6567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6551,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"12240:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":6553,"indexExpression":{"id":6552,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12251:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12240:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":6556,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12315:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":6555,"name":"IYieldStrategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8169,"src":"12300:14:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IYieldStrategy_$8169_$","typeString":"type(contract IYieldStrategy)"}},"id":6557,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12300:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},{"id":6558,"name":"initialAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"12350:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6559,"name":"initialAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"12399:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":6560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12446:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"expression":{"id":6561,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12473:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12479:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"12473:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":6563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12510:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":6564,"name":"riskScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6474,"src":"12539:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6565,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6472,"src":"12568:4:19","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"id":6554,"name":"StrategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6272,"src":"12263:12:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StrategyInfo_$6272_storage_ptr_$","typeString":"type(struct YieldVault.StrategyInfo storage pointer)"}},"id":6566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["12290:8:19","12338:10:19","12381:16:19","12430:14:19","12461:10:19","12502:6:19","12528:9:19","12562:4:19"],"names":["strategy","allocation","targetAllocation","totalDeposited","lastUpdate","active","riskScore","name"],"nodeType":"FunctionCall","src":"12263:320:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"src":"12240:343:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"id":6568,"nodeType":"ExpressionStatement","src":"12240:343:19"},{"expression":{"id":6573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6569,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"12594:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6571,"indexExpression":{"id":6570,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12611:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12594:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":6572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12623:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12594:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6574,"nodeType":"ExpressionStatement","src":"12594:33:19"},{"expression":{"arguments":[{"id":6578,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12655:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":6575,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"12637:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12650:4:19","memberName":"push","nodeType":"MemberAccess","src":"12637:17:19","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$_t_address_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer,address)"}},"id":6579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12637:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6580,"nodeType":"ExpressionStatement","src":"12637:27:19"},{"expression":{"id":6585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6581,"name":"targetAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"12674:17:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6583,"indexExpression":{"id":6582,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12692:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12674:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6584,"name":"initialAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"12704:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12674:47:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6586,"nodeType":"ExpressionStatement","src":"12674:47:19"},{"expression":{"id":6603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6587,"name":"strategyPerformance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"12771:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData storage ref)"}},"id":6589,"indexExpression":{"id":6588,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"12791:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12771:29:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage","typeString":"struct YieldVault.PerformanceData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"30","id":6591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12854:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12881:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":6593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12905:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"arguments":[{"hexValue":"30","id":6597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12946:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6596,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"12932:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":6594,"name":"uint256","nodeType":"ElementaryTypeName","src":"12936:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6595,"nodeType":"ArrayTypeName","src":"12936:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":6598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12932:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"expression":{"id":6599,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12985:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12991:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"12985:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":6601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13027:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":6590,"name":"PerformanceData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6287,"src":"12803:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_PerformanceData_$6287_storage_ptr_$","typeString":"type(struct YieldVault.PerformanceData storage pointer)"}},"id":6602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["12833:19:19","12869:10:19","12896:7:19","12920:10:19","12962:21:19","13014:11:19"],"names":["totalYieldGenerated","averageAPY","lastAPY","apyHistory","lastPerformanceUpdate","sharpeRatio"],"nodeType":"FunctionCall","src":"12803:236:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_memory_ptr","typeString":"struct YieldVault.PerformanceData memory"}},"src":"12771:268:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage","typeString":"struct YieldVault.PerformanceData storage ref"}},"id":6604,"nodeType":"ExpressionStatement","src":"12771:268:19"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":6605,"name":"_validateRiskLimits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7862,"src":"13102:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":6606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13102:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6607,"nodeType":"ExpressionStatement","src":"13102:21:19"},{"eventCall":{"arguments":[{"id":6609,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6470,"src":"13153:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6610,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6472,"src":"13163:4:19","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":6611,"name":"riskScore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6474,"src":"13169:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6612,"name":"initialAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6476,"src":"13180:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6608,"name":"StrategyAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6309,"src":"13139:13:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,string memory,uint256,uint256)"}},"id":6613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13139:59:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6614,"nodeType":"EmitStatement","src":"13134:64:19"}]},"documentation":{"id":6468,"nodeType":"StructuredDocumentation","src":"11124:265:19","text":" @dev Adds a new yield strategy to the vault\n @param strategy The strategy contract address\n @param name The strategy name\n @param riskScore The risk score (1-10)\n @param initialAllocation Initial allocation in basis points"},"functionSelector":"527f116f","id":6616,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6479,"name":"STRATEGY_MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"11557:21:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6480,"kind":"modifierInvocation","modifierName":{"id":6478,"name":"onlyRole","nameLocations":["11548:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"11548:8:19"},"nodeType":"ModifierInvocation","src":"11548:31:19"}],"name":"addStrategy","nameLocation":"11403:11:19","nodeType":"FunctionDefinition","parameters":{"id":6477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6470,"mutability":"mutable","name":"strategy","nameLocation":"11432:8:19","nodeType":"VariableDeclaration","scope":6616,"src":"11424:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6469,"name":"address","nodeType":"ElementaryTypeName","src":"11424:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6472,"mutability":"mutable","name":"name","nameLocation":"11466:4:19","nodeType":"VariableDeclaration","scope":6616,"src":"11450:20:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6471,"name":"string","nodeType":"ElementaryTypeName","src":"11450:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":6474,"mutability":"mutable","name":"riskScore","nameLocation":"11488:9:19","nodeType":"VariableDeclaration","scope":6616,"src":"11480:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6473,"name":"uint256","nodeType":"ElementaryTypeName","src":"11480:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":6476,"mutability":"mutable","name":"initialAllocation","nameLocation":"11515:17:19","nodeType":"VariableDeclaration","scope":6616,"src":"11507:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6475,"name":"uint256","nodeType":"ElementaryTypeName","src":"11507:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11414:124:19"},"returnParameters":{"id":6481,"nodeType":"ParameterList","parameters":[],"src":"11580:0:19"},"scope":7988,"src":"11394:1811:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6757,"nodeType":"Block","src":"13492:1399:19","statements":[{"condition":{"id":6630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"13506:27:19","subExpression":{"baseExpression":{"id":6627,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"13507:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6629,"indexExpression":{"id":6628,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"13524:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13507:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6634,"nodeType":"IfStatement","src":"13502:59:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6631,"name":"StrategyNotActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"13542:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13542:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6633,"nodeType":"RevertStatement","src":"13535:26:19"}},{"assignments":[6637],"declarations":[{"constant":false,"id":6637,"mutability":"mutable","name":"strategyInfo","nameLocation":"13593:12:19","nodeType":"VariableDeclaration","scope":6757,"src":"13572:33:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":6636,"nodeType":"UserDefinedTypeName","pathNode":{"id":6635,"name":"StrategyInfo","nameLocations":["13572:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"13572:12:19"},"referencedDeclaration":6272,"src":"13572:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":6641,"initialValue":{"baseExpression":{"id":6638,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"13608:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":6640,"indexExpression":{"id":6639,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"13619:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13608:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"13572:56:19"},{"assignments":[6643],"declarations":[{"constant":false,"id":6643,"mutability":"mutable","name":"withdrawnAmount","nameLocation":"13699:15:19","nodeType":"VariableDeclaration","scope":6757,"src":"13691:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6642,"name":"uint256","nodeType":"ElementaryTypeName","src":"13691:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6645,"initialValue":{"hexValue":"30","id":6644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13717:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13691:27:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6646,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"13732:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13745:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"13732:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":6648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13762:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13732:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6689,"nodeType":"IfStatement","src":"13728:606:19","trueBody":{"id":6688,"nodeType":"Block","src":"13765:569:19","statements":[{"clauses":[{"block":{"id":6663,"nodeType":"Block","src":"13885:57:19","statements":[{"expression":{"id":6661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6659,"name":"withdrawnAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6643,"src":"13903:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6660,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6657,"src":"13921:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13903:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6662,"nodeType":"ExpressionStatement","src":"13903:24:19"}]},"errorName":"","id":6664,"nodeType":"TryCatchClause","parameters":{"id":6658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6657,"mutability":"mutable","name":"amount","nameLocation":"13877:6:19","nodeType":"VariableDeclaration","scope":6664,"src":"13869:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6656,"name":"uint256","nodeType":"ElementaryTypeName","src":"13869:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13868:16:19"},"src":"13860:82:19"},{"block":{"id":6685,"nodeType":"Block","src":"13949:375:19","statements":[{"clauses":[{"block":{"id":6680,"nodeType":"Block","src":"14125:74:19","statements":[{"expression":{"id":6678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6676,"name":"withdrawnAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6643,"src":"14147:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":6677,"name":"emergencyAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6674,"src":"14165:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14147:33:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6679,"nodeType":"ExpressionStatement","src":"14147:33:19"}]},"errorName":"","id":6681,"nodeType":"TryCatchClause","parameters":{"id":6675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6674,"mutability":"mutable","name":"emergencyAmount","nameLocation":"14108:15:19","nodeType":"VariableDeclaration","scope":6681,"src":"14100:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6673,"name":"uint256","nodeType":"ElementaryTypeName","src":"14100:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14099:25:19"},"src":"14091:108:19"},{"block":{"id":6682,"nodeType":"Block","src":"14206:104:19","statements":[]},"errorName":"","id":6683,"nodeType":"TryCatchClause","src":"14200:110:19"}],"externalCall":{"arguments":[{"arguments":[{"id":6670,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14063:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}],"id":6669,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14055:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6668,"name":"address","nodeType":"ElementaryTypeName","src":"14055:7:19","typeDescriptions":{}}},"id":6671,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14055:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"expression":{"id":6665,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"14015:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6666,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14028:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"14015:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":6667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14037:17:19","memberName":"emergencyWithdraw","nodeType":"MemberAccess","referencedDeclaration":8067,"src":"14015:39:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$returns$_t_uint256_$","typeString":"function (address) external returns (uint256)"}},"id":6672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14015:54:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6684,"nodeType":"TryStatement","src":"14011:299:19"}]},"errorName":"","id":6686,"nodeType":"TryCatchClause","src":"13943:381:19"}],"externalCall":{"arguments":[{"expression":{"id":6653,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"13814:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6654,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13827:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"13814:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":6650,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"13783:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6651,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13796:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"13783:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":6652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13805:8:19","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8059,"src":"13783:30:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":6655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13783:59:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6687,"nodeType":"TryStatement","src":"13779:545:19"}]}},{"expression":{"id":6694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6690,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"14368:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6692,"indexExpression":{"id":6691,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"14385:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14368:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6693,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14397:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"14368:34:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6695,"nodeType":"ExpressionStatement","src":"14368:34:19"},{"expression":{"id":6700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6696,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"14412:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6698,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14425:6:19","memberName":"active","nodeType":"MemberAccess","referencedDeclaration":6267,"src":"14412:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":6699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14434:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"14412:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6701,"nodeType":"ExpressionStatement","src":"14412:27:19"},{"expression":{"id":6706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":6702,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6637,"src":"14449:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":6704,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"14462:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"14449:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14475:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14449:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6707,"nodeType":"ExpressionStatement","src":"14449:27:19"},{"expression":{"id":6712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6708,"name":"targetAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"14486:17:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6710,"indexExpression":{"id":6709,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"14504:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14486:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":6711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14516:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14486:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6713,"nodeType":"ExpressionStatement","src":"14486:31:19"},{"body":{"id":6749,"nodeType":"Block","src":"14615:204:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":6729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6725,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14633:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6727,"indexExpression":{"id":6726,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"14646:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14633:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":6728,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"14652:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14633:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6748,"nodeType":"IfStatement","src":"14629:180:19","trueBody":{"id":6747,"nodeType":"Block","src":"14662:147:19","statements":[{"expression":{"id":6739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6730,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14680:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6732,"indexExpression":{"id":6731,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"14693:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14680:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":6733,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14698:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6738,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6737,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6734,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14711:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14724:6:19","memberName":"length","nodeType":"MemberAccess","src":"14711:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":6736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14733:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14711:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14698:37:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14680:55:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6740,"nodeType":"ExpressionStatement","src":"14680:55:19"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":6741,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14753:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14766:3:19","memberName":"pop","nodeType":"MemberAccess","src":"14753:16:19","typeDescriptions":{"typeIdentifier":"t_function_arraypop_nonpayable$_t_array$_t_address_$dyn_storage_ptr_$returns$__$attached_to$_t_array$_t_address_$dyn_storage_ptr_$","typeString":"function (address[] storage pointer)"}},"id":6744,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14753:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6745,"nodeType":"ExpressionStatement","src":"14753:18:19"},{"id":6746,"nodeType":"Break","src":"14789:5:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6718,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"14585:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6719,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"14589:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":6720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14602:6:19","memberName":"length","nodeType":"MemberAccess","src":"14589:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14585:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6750,"initializationExpression":{"assignments":[6715],"declarations":[{"constant":false,"id":6715,"mutability":"mutable","name":"i","nameLocation":"14578:1:19","nodeType":"VariableDeclaration","scope":6750,"src":"14570:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6714,"name":"uint256","nodeType":"ElementaryTypeName","src":"14570:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6717,"initialValue":{"hexValue":"30","id":6716,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14582:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14570:13:19"},"loopExpression":{"expression":{"id":6723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14610:3:19","subExpression":{"id":6722,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6715,"src":"14610:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6724,"nodeType":"ExpressionStatement","src":"14610:3:19"},"nodeType":"ForStatement","src":"14565:254:19"},{"eventCall":{"arguments":[{"id":6752,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6619,"src":"14850:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6753,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6621,"src":"14860:6:19","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},{"id":6754,"name":"withdrawnAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6643,"src":"14868:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6751,"name":"StrategyRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6317,"src":"14834:15:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_string_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,string memory,uint256)"}},"id":6755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14834:50:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6756,"nodeType":"EmitStatement","src":"14829:55:19"}]},"documentation":{"id":6617,"nodeType":"StructuredDocumentation","src":"13211:147:19","text":" @dev Removes a strategy from the vault\n @param strategy The strategy to remove\n @param reason The reason for removal"},"functionSelector":"8ea447e6","id":6758,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6624,"name":"STRATEGY_MANAGER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6169,"src":"13469:21:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6625,"kind":"modifierInvocation","modifierName":{"id":6623,"name":"onlyRole","nameLocations":["13460:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"13460:8:19"},"nodeType":"ModifierInvocation","src":"13460:31:19"}],"name":"removeStrategy","nameLocation":"13372:14:19","nodeType":"FunctionDefinition","parameters":{"id":6622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6619,"mutability":"mutable","name":"strategy","nameLocation":"13404:8:19","nodeType":"VariableDeclaration","scope":6758,"src":"13396:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6618,"name":"address","nodeType":"ElementaryTypeName","src":"13396:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6621,"mutability":"mutable","name":"reason","nameLocation":"13438:6:19","nodeType":"VariableDeclaration","scope":6758,"src":"13422:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":6620,"name":"string","nodeType":"ElementaryTypeName","src":"13422:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"13386:64:19"},"returnParameters":{"id":6626,"nodeType":"ParameterList","parameters":[],"src":"13492:0:19"},"scope":7988,"src":"13363:1528:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6821,"nodeType":"Block","src":"15878:496:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6770,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"15892:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15902:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15892:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6776,"nodeType":"IfStatement","src":"15888:39:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6773,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"15912:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6774,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15912:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6775,"nodeType":"RevertStatement","src":"15905:22:19"}},{"expression":{"id":6781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6777,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"15974:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6779,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"15999:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6778,"name":"convertToShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7343,"src":"15983:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":6780,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15983:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15974:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6782,"nodeType":"ExpressionStatement","src":"15974:32:19"},{"expression":{"arguments":[{"expression":{"id":6786,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16077:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16081:6:19","memberName":"sender","nodeType":"MemberAccess","src":"16077:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":6790,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"16097:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}],"id":6789,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16089:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":6788,"name":"address","nodeType":"ElementaryTypeName","src":"16089:7:19","typeDescriptions":{}}},"id":6791,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16089:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6792,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"16104:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6783,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"16054:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":6785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16060:16:19","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1347,"src":"16054:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":6793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16054:57:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6794,"nodeType":"ExpressionStatement","src":"16054:57:19"},{"expression":{"id":6800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6795,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"16149:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6798,"indexExpression":{"expression":{"id":6796,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16159:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16163:6:19","memberName":"sender","nodeType":"MemberAccess","src":"16159:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16149:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6799,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"16174:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16149:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6801,"nodeType":"ExpressionStatement","src":"16149:31:19"},{"expression":{"id":6804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6802,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"16190:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6803,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"16205:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16190:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6805,"nodeType":"ExpressionStatement","src":"16190:21:19"},{"expression":{"id":6808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6806,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"16221:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":6807,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"16236:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16221:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6809,"nodeType":"ExpressionStatement","src":"16221:21:19"},{"expression":{"arguments":[{"id":6811,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"16309:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6810,"name":"_allocateToStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7488,"src":"16287:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6812,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16287:29:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6813,"nodeType":"ExpressionStatement","src":"16287:29:19"},{"eventCall":{"arguments":[{"expression":{"id":6815,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16340:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16344:6:19","memberName":"sender","nodeType":"MemberAccess","src":"16340:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6817,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6761,"src":"16352:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6818,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6768,"src":"16360:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6814,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6325,"src":"16332:7:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6819,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16332:35:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6820,"nodeType":"EmitStatement","src":"16327:40:19"}]},"documentation":{"id":6759,"nodeType":"StructuredDocumentation","src":"15594:185:19","text":" @dev Deposits assets into the vault and allocates to strategies\n @param assets The amount of assets to deposit\n @return shares The number of shares minted"},"functionSelector":"b6b55f25","id":6822,"implemented":true,"kind":"function","modifiers":[{"id":6764,"kind":"modifierInvocation","modifierName":{"id":6763,"name":"nonReentrant","nameLocations":["15826:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"15826:12:19"},"nodeType":"ModifierInvocation","src":"15826:12:19"},{"id":6766,"kind":"modifierInvocation","modifierName":{"id":6765,"name":"whenNotPaused","nameLocations":["15839:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":423,"src":"15839:13:19"},"nodeType":"ModifierInvocation","src":"15839:13:19"}],"name":"deposit","nameLocation":"15793:7:19","nodeType":"FunctionDefinition","parameters":{"id":6762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6761,"mutability":"mutable","name":"assets","nameLocation":"15809:6:19","nodeType":"VariableDeclaration","scope":6822,"src":"15801:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6760,"name":"uint256","nodeType":"ElementaryTypeName","src":"15801:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15800:16:19"},"returnParameters":{"id":6769,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6768,"mutability":"mutable","name":"shares","nameLocation":"15870:6:19","nodeType":"VariableDeclaration","scope":6822,"src":"15862:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6767,"name":"uint256","nodeType":"ElementaryTypeName","src":"15862:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15861:16:19"},"scope":7988,"src":"15784:590:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":6889,"nodeType":"Block","src":"16624:570:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6832,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"16638:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":6833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16648:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"16638:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6838,"nodeType":"IfStatement","src":"16634:39:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6835,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"16658:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16658:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6837,"nodeType":"RevertStatement","src":"16651:22:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6839,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"16687:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6842,"indexExpression":{"expression":{"id":6840,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16697:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16701:6:19","memberName":"sender","nodeType":"MemberAccess","src":"16697:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16687:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":6843,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"16711:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16687:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6848,"nodeType":"IfStatement","src":"16683:64:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6845,"name":"InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6386,"src":"16726:19:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6846,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16726:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6847,"nodeType":"RevertStatement","src":"16719:28:19"}},{"expression":{"id":6853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6849,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"16798:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":6851,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"16823:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6850,"name":"convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7365,"src":"16807:15:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":6852,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16807:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16798:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6854,"nodeType":"ExpressionStatement","src":"16798:32:19"},{"expression":{"arguments":[{"id":6856,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"16911:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6855,"name":"_withdrawFromStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7594,"src":"16887:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":6857,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16887:31:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6858,"nodeType":"ExpressionStatement","src":"16887:31:19"},{"expression":{"id":6864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":6859,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"16956:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":6862,"indexExpression":{"expression":{"id":6860,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"16966:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16970:6:19","memberName":"sender","nodeType":"MemberAccess","src":"16966:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16956:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6863,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"16981:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16956:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6865,"nodeType":"ExpressionStatement","src":"16956:31:19"},{"expression":{"id":6868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6866,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"16997:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6867,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"17012:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16997:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6869,"nodeType":"ExpressionStatement","src":"16997:21:19"},{"expression":{"id":6872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6870,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"17028:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":6871,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"17043:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17028:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6873,"nodeType":"ExpressionStatement","src":"17028:21:19"},{"expression":{"arguments":[{"expression":{"id":6877,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17114:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17118:6:19","memberName":"sender","nodeType":"MemberAccess","src":"17114:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6879,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"17126:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":6874,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"17095:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":6876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17101:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"17095:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":6880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17095:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6881,"nodeType":"ExpressionStatement","src":"17095:38:19"},{"eventCall":{"arguments":[{"expression":{"id":6883,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"17160:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":6884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17164:6:19","memberName":"sender","nodeType":"MemberAccess","src":"17160:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":6885,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6830,"src":"17172:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":6886,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6825,"src":"17180:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6882,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6333,"src":"17149:10:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":6887,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17149:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6888,"nodeType":"EmitStatement","src":"17144:43:19"}]},"documentation":{"id":6823,"nodeType":"StructuredDocumentation","src":"16380:158:19","text":" @dev Withdraws assets from the vault\n @param shares The number of shares to burn\n @return assets The amount of assets withdrawn"},"functionSelector":"2e1a7d4d","id":6890,"implemented":true,"kind":"function","modifiers":[{"id":6828,"kind":"modifierInvocation","modifierName":{"id":6827,"name":"nonReentrant","nameLocations":["16586:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"16586:12:19"},"nodeType":"ModifierInvocation","src":"16586:12:19"}],"name":"withdraw","nameLocation":"16552:8:19","nodeType":"FunctionDefinition","parameters":{"id":6826,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6825,"mutability":"mutable","name":"shares","nameLocation":"16569:6:19","nodeType":"VariableDeclaration","scope":6890,"src":"16561:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6824,"name":"uint256","nodeType":"ElementaryTypeName","src":"16561:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16560:16:19"},"returnParameters":{"id":6831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6830,"mutability":"mutable","name":"assets","nameLocation":"16616:6:19","nodeType":"VariableDeclaration","scope":6890,"src":"16608:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6829,"name":"uint256","nodeType":"ElementaryTypeName","src":"16608:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16607:16:19"},"scope":7988,"src":"16543:651:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7058,"nodeType":"Block","src":"18187:1554:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6908,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6903,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"18201:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":6904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18207:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"18201:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6905,"name":"lastRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"18219:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":6906,"name":"REBALANCE_COOLDOWN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"18235:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18219:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18201:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6913,"nodeType":"IfStatement","src":"18197:115:19","trueBody":{"id":6912,"nodeType":"Block","src":"18255:57:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6909,"name":"RebalanceCooldownActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6390,"src":"18276:23:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18276:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6911,"nodeType":"RevertStatement","src":"18269:32:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6918,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6914,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"18325:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6915,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18343:6:19","memberName":"length","nodeType":"MemberAccess","src":"18325:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":6916,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"18353:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18368:6:19","memberName":"length","nodeType":"MemberAccess","src":"18353:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18325:49:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6922,"nodeType":"IfStatement","src":"18321:77:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6919,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"18383:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18383:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6921,"nodeType":"RevertStatement","src":"18376:22:19"}},{"assignments":[6924],"declarations":[{"constant":false,"id":6924,"mutability":"mutable","name":"totalAllocation","nameLocation":"18449:15:19","nodeType":"VariableDeclaration","scope":7058,"src":"18441:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6923,"name":"uint256","nodeType":"ElementaryTypeName","src":"18441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6926,"initialValue":{"hexValue":"30","id":6925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18467:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18441:27:19"},{"body":{"id":6963,"nodeType":"Block","src":"18530:239:19","statements":[{"condition":{"id":6943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"18548:39:19","subExpression":{"baseExpression":{"id":6938,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"18549:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":6942,"indexExpression":{"baseExpression":{"id":6939,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"18566:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6941,"indexExpression":{"id":6940,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"18584:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18566:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18549:38:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6947,"nodeType":"IfStatement","src":"18544:71:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6944,"name":"StrategyNotActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6380,"src":"18596:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18596:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6946,"nodeType":"RevertStatement","src":"18589:26:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6952,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":6948,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"18633:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6950,"indexExpression":{"id":6949,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"18648:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18633:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":6951,"name":"MAX_ALLOCATION_PER_STRATEGY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6183,"src":"18653:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18633:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6956,"nodeType":"IfStatement","src":"18629:79:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6953,"name":"InvalidAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"18689:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18689:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6955,"nodeType":"RevertStatement","src":"18682:26:19"}},{"expression":{"id":6961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":6957,"name":"totalAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6924,"src":"18722:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":6958,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"18741:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6960,"indexExpression":{"id":6959,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"18756:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18741:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18722:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6962,"nodeType":"ExpressionStatement","src":"18722:36:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6931,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"18498:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6932,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"18502:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":6933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18517:6:19","memberName":"length","nodeType":"MemberAccess","src":"18502:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18498:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6964,"initializationExpression":{"assignments":[6928],"declarations":[{"constant":false,"id":6928,"mutability":"mutable","name":"i","nameLocation":"18491:1:19","nodeType":"VariableDeclaration","scope":6964,"src":"18483:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6927,"name":"uint256","nodeType":"ElementaryTypeName","src":"18483:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6930,"initialValue":{"hexValue":"30","id":6929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18495:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18483:13:19"},"loopExpression":{"expression":{"id":6936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"18525:3:19","subExpression":{"id":6935,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6928,"src":"18525:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6937,"nodeType":"ExpressionStatement","src":"18525:3:19"},"nodeType":"ForStatement","src":"18478:291:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":6965,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"18877:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18895:6:19","memberName":"length","nodeType":"MemberAccess","src":"18877:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":6967,"name":"_getActiveStrategyCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7740,"src":"18905:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":6968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18905:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18877:53:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6973,"nodeType":"IfStatement","src":"18873:85:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6970,"name":"InvalidAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"18939:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18939:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6972,"nodeType":"RevertStatement","src":"18932:26:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":6976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6974,"name":"totalAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6924,"src":"18972:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":6975,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"18991:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18972:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":6980,"nodeType":"IfStatement","src":"18968:63:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":6977,"name":"InvalidAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"19012:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":6978,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19012:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":6979,"nodeType":"RevertStatement","src":"19005:26:19"}},{"assignments":[6985],"declarations":[{"constant":false,"id":6985,"mutability":"mutable","name":"oldAllocations","nameLocation":"19102:14:19","nodeType":"VariableDeclaration","scope":7058,"src":"19085:31:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6983,"name":"uint256","nodeType":"ElementaryTypeName","src":"19085:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6984,"nodeType":"ArrayTypeName","src":"19085:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":6992,"initialValue":{"arguments":[{"expression":{"id":6989,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19133:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19151:6:19","memberName":"length","nodeType":"MemberAccess","src":"19133:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":6988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"19119:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":6986,"name":"uint256","nodeType":"ElementaryTypeName","src":"19123:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6987,"nodeType":"ArrayTypeName","src":"19123:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":6991,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19119:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"19085:73:19"},{"body":{"id":7015,"nodeType":"Block","src":"19223:88:19","statements":[{"expression":{"id":7013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7004,"name":"oldAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6985,"src":"19237:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7006,"indexExpression":{"id":7005,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"19252:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19237:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"baseExpression":{"id":7007,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"19257:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7011,"indexExpression":{"baseExpression":{"id":7008,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19268:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":7010,"indexExpression":{"id":7009,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"19286:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19268:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19257:32:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"id":7012,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19290:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"19257:43:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19237:63:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7014,"nodeType":"ExpressionStatement","src":"19237:63:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":6997,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"19188:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":6998,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19192:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":6999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19210:6:19","memberName":"length","nodeType":"MemberAccess","src":"19192:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19188:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7016,"initializationExpression":{"assignments":[6994],"declarations":[{"constant":false,"id":6994,"mutability":"mutable","name":"i","nameLocation":"19181:1:19","nodeType":"VariableDeclaration","scope":7016,"src":"19173:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":6993,"name":"uint256","nodeType":"ElementaryTypeName","src":"19173:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":6996,"initialValue":{"hexValue":"30","id":6995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19185:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19173:13:19"},"loopExpression":{"expression":{"id":7002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19218:3:19","subExpression":{"id":7001,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6994,"src":"19218:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7003,"nodeType":"ExpressionStatement","src":"19218:3:19"},"nodeType":"ForStatement","src":"19168:143:19"},{"body":{"id":7038,"nodeType":"Block","src":"19413:84:19","statements":[{"expression":{"id":7036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7028,"name":"targetAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"19427:17:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7032,"indexExpression":{"baseExpression":{"id":7029,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19445:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":7031,"indexExpression":{"id":7030,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7018,"src":"19463:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19445:20:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19427:39:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7033,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"19469:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":7035,"indexExpression":{"id":7034,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7018,"src":"19484:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19469:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19427:59:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7037,"nodeType":"ExpressionStatement","src":"19427:59:19"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7021,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7018,"src":"19378:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7022,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19382:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":7023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19400:6:19","memberName":"length","nodeType":"MemberAccess","src":"19382:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19378:28:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7039,"initializationExpression":{"assignments":[7018],"declarations":[{"constant":false,"id":7018,"mutability":"mutable","name":"i","nameLocation":"19371:1:19","nodeType":"VariableDeclaration","scope":7039,"src":"19363:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7017,"name":"uint256","nodeType":"ElementaryTypeName","src":"19363:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7020,"initialValue":{"hexValue":"30","id":7019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19375:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19363:13:19"},"loopExpression":{"expression":{"id":7026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19408:3:19","subExpression":{"id":7025,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7018,"src":"19408:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7027,"nodeType":"ExpressionStatement","src":"19408:3:19"},"nodeType":"ForStatement","src":"19358:139:19"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7040,"name":"_executeRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7631,"src":"19567:17:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19567:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7042,"nodeType":"ExpressionStatement","src":"19567:19:19"},{"expression":{"id":7046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7043,"name":"lastRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"19597:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7044,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19613:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19619:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"19613:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19597:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7047,"nodeType":"ExpressionStatement","src":"19597:31:19"},{"eventCall":{"arguments":[{"expression":{"id":7049,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"19655:3:19","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":7050,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19659:6:19","memberName":"sender","nodeType":"MemberAccess","src":"19655:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7051,"name":"strategyAddresses","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6894,"src":"19667:17:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":7052,"name":"oldAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6985,"src":"19686:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},{"id":7053,"name":"newAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6897,"src":"19702:14:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"expression":{"id":7054,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19718:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19724:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"19718:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7048,"name":"Rebalanced","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6348,"src":"19644:10:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,address[] memory,uint256[] memory,uint256[] memory,uint256)"}},"id":7056,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19644:90:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7057,"nodeType":"EmitStatement","src":"19639:95:19"}]},"documentation":{"id":6891,"nodeType":"StructuredDocumentation","src":"17895:138:19","text":" @dev Rebalances allocations across strategies\n @param newAllocations Array of new allocations (must sum to 10000)"},"functionSelector":"2be01190","id":7059,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":6900,"name":"REBALANCER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6174,"src":"18170:15:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":6901,"kind":"modifierInvocation","modifierName":{"id":6899,"name":"onlyRole","nameLocations":["18161:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"18161:8:19"},"nodeType":"ModifierInvocation","src":"18161:25:19"}],"name":"rebalance","nameLocation":"18047:9:19","nodeType":"FunctionDefinition","parameters":{"id":6898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":6894,"mutability":"mutable","name":"strategyAddresses","nameLocation":"18085:17:19","nodeType":"VariableDeclaration","scope":7059,"src":"18066:36:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":6892,"name":"address","nodeType":"ElementaryTypeName","src":"18066:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":6893,"nodeType":"ArrayTypeName","src":"18066:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":6897,"mutability":"mutable","name":"newAllocations","nameLocation":"18131:14:19","nodeType":"VariableDeclaration","scope":7059,"src":"18112:33:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":6895,"name":"uint256","nodeType":"ElementaryTypeName","src":"18112:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":6896,"nodeType":"ArrayTypeName","src":"18112:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"18056:95:19"},"returnParameters":{"id":6902,"nodeType":"ParameterList","parameters":[],"src":"18187:0:19"},"scope":7988,"src":"18038:1703:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7131,"nodeType":"Block","src":"19890:706:19","statements":[{"condition":{"id":7067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"19904:21:19","subExpression":{"id":7066,"name":"autoRebalanceEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6253,"src":"19905:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7071,"nodeType":"IfStatement","src":"19900:49:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7068,"name":"InvalidTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6394,"src":"19934:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19934:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7070,"nodeType":"RevertStatement","src":"19927:22:19"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7072,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"19963:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19969:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"19963:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7074,"name":"lastRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"19981:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":7075,"name":"REBALANCE_COOLDOWN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6189,"src":"19997:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19981:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19963:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7082,"nodeType":"IfStatement","src":"19959:115:19","trueBody":{"id":7081,"nodeType":"Block","src":"20017:57:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7078,"name":"RebalanceCooldownActive","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6390,"src":"20038:23:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7079,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20038:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7080,"nodeType":"RevertStatement","src":"20031:32:19"}]}},{"assignments":[7087],"declarations":[{"constant":false,"id":7087,"mutability":"mutable","name":"optimalAllocations","nameLocation":"20142:18:19","nodeType":"VariableDeclaration","scope":7131,"src":"20125:35:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7085,"name":"uint256","nodeType":"ElementaryTypeName","src":"20125:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7086,"nodeType":"ArrayTypeName","src":"20125:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":7090,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":7088,"name":"_calculateOptimalAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7711,"src":"20163:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function () view returns (uint256[] memory)"}},"id":7089,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20163:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"VariableDeclarationStatement","src":"20125:68:19"},{"body":{"id":7121,"nodeType":"Block","src":"20299:188:19","statements":[{"assignments":[7103],"declarations":[{"constant":false,"id":7103,"mutability":"mutable","name":"strategy","nameLocation":"20321:8:19","nodeType":"VariableDeclaration","scope":7121,"src":"20313:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7102,"name":"address","nodeType":"ElementaryTypeName","src":"20313:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7107,"initialValue":{"baseExpression":{"id":7104,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"20332:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7106,"indexExpression":{"id":7105,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7092,"src":"20345:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20332:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20313:34:19"},{"condition":{"baseExpression":{"id":7108,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"20365:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7110,"indexExpression":{"id":7109,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7103,"src":"20382:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20365:26:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7120,"nodeType":"IfStatement","src":"20361:116:19","trueBody":{"id":7119,"nodeType":"Block","src":"20393:84:19","statements":[{"expression":{"id":7117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7111,"name":"targetAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"20411:17:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7113,"indexExpression":{"id":7112,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7103,"src":"20429:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"20411:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7114,"name":"optimalAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7087,"src":"20441:18:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7116,"indexExpression":{"id":7115,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7092,"src":"20460:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20441:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20411:51:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7118,"nodeType":"ExpressionStatement","src":"20411:51:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7095,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7092,"src":"20269:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7096,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"20273:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20286:6:19","memberName":"length","nodeType":"MemberAccess","src":"20273:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20269:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7122,"initializationExpression":{"assignments":[7092],"declarations":[{"constant":false,"id":7092,"mutability":"mutable","name":"i","nameLocation":"20262:1:19","nodeType":"VariableDeclaration","scope":7122,"src":"20254:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7091,"name":"uint256","nodeType":"ElementaryTypeName","src":"20254:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7094,"initialValue":{"hexValue":"30","id":7093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20266:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"20254:13:19"},"loopExpression":{"expression":{"id":7100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"20294:3:19","subExpression":{"id":7099,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7092,"src":"20294:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7101,"nodeType":"ExpressionStatement","src":"20294:3:19"},"nodeType":"ForStatement","src":"20249:238:19"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7123,"name":"_executeRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7631,"src":"20528:17:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20528:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7125,"nodeType":"ExpressionStatement","src":"20528:19:19"},{"expression":{"id":7129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7126,"name":"lastRebalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6235,"src":"20558:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":7127,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"20574:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20580:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"20574:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20558:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7130,"nodeType":"ExpressionStatement","src":"20558:31:19"}]},"documentation":{"id":7060,"nodeType":"StructuredDocumentation","src":"19747:78:19","text":" @dev Automatically rebalances based on performance and risk"},"functionSelector":"7a6efd47","id":7132,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7063,"name":"REBALANCER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6174,"src":"19873:15:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7064,"kind":"modifierInvocation","modifierName":{"id":7062,"name":"onlyRole","nameLocations":["19864:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"19864:8:19"},"nodeType":"ModifierInvocation","src":"19864:25:19"}],"name":"autoRebalance","nameLocation":"19839:13:19","nodeType":"FunctionDefinition","parameters":{"id":7061,"nodeType":"ParameterList","parameters":[],"src":"19852:2:19"},"returnParameters":{"id":7065,"nodeType":"ParameterList","parameters":[],"src":"19890:0:19"},"scope":7988,"src":"19830:766:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7231,"nodeType":"Block","src":"20808:1291:19","statements":[{"body":{"id":7207,"nodeType":"Block","src":"20868:950:19","statements":[{"assignments":[7152],"declarations":[{"constant":false,"id":7152,"mutability":"mutable","name":"strategyAddr","nameLocation":"20890:12:19","nodeType":"VariableDeclaration","scope":7207,"src":"20882:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7151,"name":"address","nodeType":"ElementaryTypeName","src":"20882:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7156,"initialValue":{"baseExpression":{"id":7153,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"20905:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7155,"indexExpression":{"id":7154,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7141,"src":"20918:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20905:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"20882:38:19"},{"condition":{"baseExpression":{"id":7157,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"20938:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7159,"indexExpression":{"id":7158,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"20955:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"20938:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7206,"nodeType":"IfStatement","src":"20934:874:19","trueBody":{"id":7205,"nodeType":"Block","src":"20970:838:19","statements":[{"assignments":[7162],"declarations":[{"constant":false,"id":7162,"mutability":"mutable","name":"strategyInfo","nameLocation":"21009:12:19","nodeType":"VariableDeclaration","scope":7205,"src":"20988:33:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7161,"nodeType":"UserDefinedTypeName","pathNode":{"id":7160,"name":"StrategyInfo","nameLocations":["20988:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"20988:12:19"},"referencedDeclaration":6272,"src":"20988:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":7166,"initialValue":{"baseExpression":{"id":7163,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"21024:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7165,"indexExpression":{"id":7164,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"21035:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21024:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"20988:60:19"},{"clauses":[{"block":{"id":7199,"nodeType":"Block","src":"21157:511:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7174,"name":"yieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7172,"src":"21183:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21200:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21183:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7198,"nodeType":"IfStatement","src":"21179:471:19","trueBody":{"id":7197,"nodeType":"Block","src":"21203:447:19","statements":[{"expression":{"id":7179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7177,"name":"totalYieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"21229:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7178,"name":"yieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7172,"src":"21252:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21229:37:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7180,"nodeType":"ExpressionStatement","src":"21229:37:19"},{"expression":{"id":7186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":7181,"name":"strategyPerformance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"21372:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData storage ref)"}},"id":7183,"indexExpression":{"id":7182,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"21392:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21372:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage","typeString":"struct YieldVault.PerformanceData storage ref"}},"id":7184,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"21406:19:19","memberName":"totalYieldGenerated","nodeType":"MemberAccess","referencedDeclaration":6275,"src":"21372:53:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7185,"name":"yieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7172,"src":"21429:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21372:71:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7187,"nodeType":"ExpressionStatement","src":"21372:71:19"},{"eventCall":{"arguments":[{"id":7189,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"21514:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7190,"name":"yieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7172,"src":"21528:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"baseExpression":{"id":7191,"name":"strategyPerformance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"21573:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData storage ref)"}},"id":7193,"indexExpression":{"id":7192,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7152,"src":"21593:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21573:33:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage","typeString":"struct YieldVault.PerformanceData storage ref"}},"id":7194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21607:19:19","memberName":"totalYieldGenerated","nodeType":"MemberAccess","referencedDeclaration":6275,"src":"21573:53:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7188,"name":"YieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6356,"src":"21499:14:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":7195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21499:128:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7196,"nodeType":"EmitStatement","src":"21494:133:19"}]}}]},"errorName":"","id":7200,"nodeType":"TryCatchClause","parameters":{"id":7173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7172,"mutability":"mutable","name":"yieldHarvested","nameLocation":"21141:14:19","nodeType":"VariableDeclaration","scope":7200,"src":"21133:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7171,"name":"uint256","nodeType":"ElementaryTypeName","src":"21133:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"21132:24:19"},"src":"21124:544:19"},{"block":{"id":7202,"nodeType":"Block","src":"21675:119:19","statements":[{"id":7201,"nodeType":"Continue","src":"21767:8:19"}]},"errorName":"","id":7203,"nodeType":"TryCatchClause","src":"21669:125:19"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7167,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7162,"src":"21087:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7168,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21100:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"21087:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":7169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21109:12:19","memberName":"harvestYield","nodeType":"MemberAccess","referencedDeclaration":8093,"src":"21087:34:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$_t_uint256_$","typeString":"function () external returns (uint256)"}},"id":7170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21087:36:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7204,"nodeType":"TryStatement","src":"21083:711:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7144,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7141,"src":"20838:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7145,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"20842:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20855:6:19","memberName":"length","nodeType":"MemberAccess","src":"20842:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"20838:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7208,"initializationExpression":{"assignments":[7141],"declarations":[{"constant":false,"id":7141,"mutability":"mutable","name":"i","nameLocation":"20831:1:19","nodeType":"VariableDeclaration","scope":7208,"src":"20823:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7140,"name":"uint256","nodeType":"ElementaryTypeName","src":"20823:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7143,"initialValue":{"hexValue":"30","id":7142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20835:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"20823:13:19"},"loopExpression":{"expression":{"id":7149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"20863:3:19","subExpression":{"id":7148,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7141,"src":"20863:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7150,"nodeType":"ExpressionStatement","src":"20863:3:19"},"nodeType":"ForStatement","src":"20818:1000:19"},{"assignments":[7210],"declarations":[{"constant":false,"id":7210,"mutability":"mutable","name":"today","nameLocation":"21875:5:19","nodeType":"VariableDeclaration","scope":7231,"src":"21867:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7209,"name":"uint256","nodeType":"ElementaryTypeName","src":"21867:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7215,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7211,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"21883:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":7212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21889:9:19","memberName":"timestamp","nodeType":"MemberAccess","src":"21883:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31","id":7213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21901:6:19","subdenomination":"days","typeDescriptions":{"typeIdentifier":"t_rational_86400_by_1","typeString":"int_const 86400"},"value":"1"},"src":"21883:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21867:40:19"},{"expression":{"id":7220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7216,"name":"dailyYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6233,"src":"21917:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":7218,"indexExpression":{"id":7217,"name":"today","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7210,"src":"21928:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21917:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7219,"name":"totalYieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"21938:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21917:40:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7221,"nodeType":"ExpressionStatement","src":"21917:40:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7222,"name":"totalYieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"22010:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22032:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22010:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7230,"nodeType":"IfStatement","src":"22006:87:19","trueBody":{"id":7229,"nodeType":"Block","src":"22035:58:19","statements":[{"expression":{"arguments":[{"id":7226,"name":"totalYieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7138,"src":"22062:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7225,"name":"_collectFees","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7912,"src":"22049:12:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":7227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22049:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7228,"nodeType":"ExpressionStatement","src":"22049:33:19"}]}}]},"documentation":{"id":7133,"nodeType":"StructuredDocumentation","src":"20602:119:19","text":" @dev Harvests yield from all strategies\n @return totalYieldHarvested The total yield harvested"},"functionSelector":"8ed955b9","id":7232,"implemented":true,"kind":"function","modifiers":[{"id":7136,"kind":"modifierInvocation","modifierName":{"id":7135,"name":"nonReentrant","nameLocations":["20757:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":526,"src":"20757:12:19"},"nodeType":"ModifierInvocation","src":"20757:12:19"}],"name":"harvestAll","nameLocation":"20735:10:19","nodeType":"FunctionDefinition","parameters":{"id":7134,"nodeType":"ParameterList","parameters":[],"src":"20745:2:19"},"returnParameters":{"id":7139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7138,"mutability":"mutable","name":"totalYieldHarvested","nameLocation":"20787:19:19","nodeType":"VariableDeclaration","scope":7232,"src":"20779:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7137,"name":"uint256","nodeType":"ElementaryTypeName","src":"20779:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"20778:29:19"},"scope":7988,"src":"20726:1373:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7316,"nodeType":"Block","src":"22986:842:19","statements":[{"assignments":[7239],"declarations":[{"constant":false,"id":7239,"mutability":"mutable","name":"totalWeightedAPY","nameLocation":"23004:16:19","nodeType":"VariableDeclaration","scope":7316,"src":"22996:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7238,"name":"uint256","nodeType":"ElementaryTypeName","src":"22996:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7241,"initialValue":{"hexValue":"30","id":7240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23023:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"22996:28:19"},{"assignments":[7243],"declarations":[{"constant":false,"id":7243,"mutability":"mutable","name":"totalWeight","nameLocation":"23042:11:19","nodeType":"VariableDeclaration","scope":7316,"src":"23034:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7242,"name":"uint256","nodeType":"ElementaryTypeName","src":"23034:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7245,"initialValue":{"hexValue":"30","id":7244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23056:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23034:23:19"},{"body":{"id":7303,"nodeType":"Block","src":"23118:607:19","statements":[{"assignments":[7258],"declarations":[{"constant":false,"id":7258,"mutability":"mutable","name":"strategyAddr","nameLocation":"23140:12:19","nodeType":"VariableDeclaration","scope":7303,"src":"23132:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7257,"name":"address","nodeType":"ElementaryTypeName","src":"23132:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7262,"initialValue":{"baseExpression":{"id":7259,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"23155:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7261,"indexExpression":{"id":7260,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"23168:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23155:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"23132:38:19"},{"condition":{"baseExpression":{"id":7263,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"23188:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7265,"indexExpression":{"id":7264,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"23205:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23188:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7302,"nodeType":"IfStatement","src":"23184:531:19","trueBody":{"id":7301,"nodeType":"Block","src":"23220:495:19","statements":[{"assignments":[7268],"declarations":[{"constant":false,"id":7268,"mutability":"mutable","name":"strategyInfo","nameLocation":"23258:12:19","nodeType":"VariableDeclaration","scope":7301,"src":"23238:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7267,"nodeType":"UserDefinedTypeName","pathNode":{"id":7266,"name":"StrategyInfo","nameLocations":["23238:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"23238:12:19"},"referencedDeclaration":6272,"src":"23238:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":7272,"initialValue":{"baseExpression":{"id":7269,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"23273:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7271,"indexExpression":{"id":7270,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7258,"src":"23284:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23273:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"23238:59:19"},{"clauses":[{"block":{"id":7295,"nodeType":"Block","src":"23404:186:19","statements":[{"assignments":[7281],"declarations":[{"constant":false,"id":7281,"mutability":"mutable","name":"weight","nameLocation":"23434:6:19","nodeType":"VariableDeclaration","scope":7295,"src":"23426:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7280,"name":"uint256","nodeType":"ElementaryTypeName","src":"23426:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7284,"initialValue":{"expression":{"id":7282,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7268,"src":"23443:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"id":7283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23456:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"23443:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"23426:40:19"},{"expression":{"id":7289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7285,"name":"totalWeightedAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7239,"src":"23488:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7286,"name":"strategyAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7278,"src":"23508:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7287,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"23522:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23508:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23488:40:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7290,"nodeType":"ExpressionStatement","src":"23488:40:19"},{"expression":{"id":7293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7291,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"23550:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7292,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7281,"src":"23565:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23550:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7294,"nodeType":"ExpressionStatement","src":"23550:21:19"}]},"errorName":"","id":7296,"nodeType":"TryCatchClause","parameters":{"id":7279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7278,"mutability":"mutable","name":"strategyAPY","nameLocation":"23391:11:19","nodeType":"VariableDeclaration","scope":7296,"src":"23383:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7277,"name":"uint256","nodeType":"ElementaryTypeName","src":"23383:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23382:21:19"},"src":"23374:216:19"},{"block":{"id":7298,"nodeType":"Block","src":"23597:104:19","statements":[{"id":7297,"nodeType":"Continue","src":"23674:8:19"}]},"errorName":"","id":7299,"nodeType":"TryCatchClause","src":"23591:110:19"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"expression":{"id":7273,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7268,"src":"23336:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"id":7274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23349:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"23336:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":7275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23358:13:19","memberName":"getCurrentAPY","nodeType":"MemberAccess","referencedDeclaration":8073,"src":"23336:35:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_uint256_$","typeString":"function () view external returns (uint256)"}},"id":7276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23336:37:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7300,"nodeType":"TryStatement","src":"23332:369:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7250,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"23088:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7251,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"23092:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23105:6:19","memberName":"length","nodeType":"MemberAccess","src":"23092:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23088:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7304,"initializationExpression":{"assignments":[7247],"declarations":[{"constant":false,"id":7247,"mutability":"mutable","name":"i","nameLocation":"23081:1:19","nodeType":"VariableDeclaration","scope":7304,"src":"23073:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7246,"name":"uint256","nodeType":"ElementaryTypeName","src":"23073:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7249,"initialValue":{"hexValue":"30","id":7248,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23085:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23073:13:19"},"loopExpression":{"expression":{"id":7255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23113:3:19","subExpression":{"id":7254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7247,"src":"23113:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7256,"nodeType":"ExpressionStatement","src":"23113:3:19"},"nodeType":"ForStatement","src":"23068:657:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7305,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"23739:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23753:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23739:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7315,"nodeType":"IfStatement","src":"23735:87:19","trueBody":{"id":7314,"nodeType":"Block","src":"23756:66:19","statements":[{"expression":{"id":7312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7308,"name":"vaultAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7236,"src":"23770:8:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7309,"name":"totalWeightedAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7239,"src":"23781:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7310,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7243,"src":"23800:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23781:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23770:41:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7313,"nodeType":"ExpressionStatement","src":"23770:41:19"}]}}]},"documentation":{"id":7233,"nodeType":"StructuredDocumentation","src":"22786:129:19","text":" @dev Gets the current vault APY based on strategy performance\n @return vaultAPY The weighted average APY"},"functionSelector":"962ca496","id":7317,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentAPY","nameLocation":"22929:13:19","nodeType":"FunctionDefinition","parameters":{"id":7234,"nodeType":"ParameterList","parameters":[],"src":"22942:2:19"},"returnParameters":{"id":7237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7236,"mutability":"mutable","name":"vaultAPY","nameLocation":"22976:8:19","nodeType":"VariableDeclaration","scope":7317,"src":"22968:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7235,"name":"uint256","nodeType":"ElementaryTypeName","src":"22968:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22967:18:19"},"scope":7988,"src":"22920:908:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7342,"nodeType":"Block","src":"24052:152:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7325,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"24066:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24081:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24066:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7328,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"24086:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24101:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24086:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24066:36:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7335,"nodeType":"IfStatement","src":"24062:80:19","trueBody":{"id":7334,"nodeType":"Block","src":"24104:38:19","statements":[{"expression":{"id":7332,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"24125:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7324,"id":7333,"nodeType":"Return","src":"24118:13:19"}]}},{"expression":{"arguments":[{"id":7338,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"24172:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7339,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"24185:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7336,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7320,"src":"24158:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24165:6:19","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2868,"src":"24158:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":7340,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24158:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7324,"id":7341,"nodeType":"Return","src":"24151:46:19"}]},"documentation":{"id":7318,"nodeType":"StructuredDocumentation","src":"23834:135:19","text":" @dev Converts assets to shares\n @param assets The amount of assets\n @return shares The equivalent shares"},"functionSelector":"c6e6f592","id":7343,"implemented":true,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"23983:15:19","nodeType":"FunctionDefinition","parameters":{"id":7321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7320,"mutability":"mutable","name":"assets","nameLocation":"24007:6:19","nodeType":"VariableDeclaration","scope":7343,"src":"23999:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7319,"name":"uint256","nodeType":"ElementaryTypeName","src":"23999:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23998:16:19"},"returnParameters":{"id":7324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7323,"mutability":"mutable","name":"shares","nameLocation":"24044:6:19","nodeType":"VariableDeclaration","scope":7343,"src":"24036:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7322,"name":"uint256","nodeType":"ElementaryTypeName","src":"24036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24035:16:19"},"scope":7988,"src":"23974:230:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":7364,"nodeType":"Block","src":"24428:132:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7351,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"24442:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":7352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24457:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24442:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7357,"nodeType":"IfStatement","src":"24438:60:19","trueBody":{"id":7356,"nodeType":"Block","src":"24460:38:19","statements":[{"expression":{"id":7354,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7346,"src":"24481:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7350,"id":7355,"nodeType":"Return","src":"24474:13:19"}]}},{"expression":{"arguments":[{"id":7360,"name":"totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6200,"src":"24528:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7361,"name":"totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6202,"src":"24541:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7358,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7346,"src":"24514:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24521:6:19","memberName":"mulDiv","nodeType":"MemberAccess","referencedDeclaration":2868,"src":"24514:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$attached_to$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":7362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24514:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7350,"id":7363,"nodeType":"Return","src":"24507:46:19"}]},"documentation":{"id":7344,"nodeType":"StructuredDocumentation","src":"24210:135:19","text":" @dev Converts shares to assets\n @param shares The number of shares\n @return assets The equivalent assets"},"functionSelector":"07a2d13a","id":7365,"implemented":true,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"24359:15:19","nodeType":"FunctionDefinition","parameters":{"id":7347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7346,"mutability":"mutable","name":"shares","nameLocation":"24383:6:19","nodeType":"VariableDeclaration","scope":7365,"src":"24375:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7345,"name":"uint256","nodeType":"ElementaryTypeName","src":"24375:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24374:16:19"},"returnParameters":{"id":7350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7349,"mutability":"mutable","name":"assets","nameLocation":"24420:6:19","nodeType":"VariableDeclaration","scope":7365,"src":"24412:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7348,"name":"uint256","nodeType":"ElementaryTypeName","src":"24412:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24411:16:19"},"scope":7988,"src":"24350:210:19","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":7377,"nodeType":"Block","src":"24777:39:19","statements":[{"expression":{"baseExpression":{"id":7373,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6218,"src":"24794:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7375,"indexExpression":{"id":7374,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7368,"src":"24804:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24794:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":7372,"id":7376,"nodeType":"Return","src":"24787:22:19"}]},"documentation":{"id":7366,"nodeType":"StructuredDocumentation","src":"24566:133:19","text":" @dev Gets user's share balance\n @param user The user address\n @return balance The user's share balance"},"functionSelector":"70a08231","id":7378,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"24713:9:19","nodeType":"FunctionDefinition","parameters":{"id":7369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7368,"mutability":"mutable","name":"user","nameLocation":"24731:4:19","nodeType":"VariableDeclaration","scope":7378,"src":"24723:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7367,"name":"address","nodeType":"ElementaryTypeName","src":"24723:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24722:14:19"},"returnParameters":{"id":7372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7371,"mutability":"mutable","name":"balance","nameLocation":"24768:7:19","nodeType":"VariableDeclaration","scope":7378,"src":"24760:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7370,"name":"uint256","nodeType":"ElementaryTypeName","src":"24760:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"24759:17:19"},"scope":7988,"src":"24704:112:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7391,"nodeType":"Block","src":"25061:44:19","statements":[{"expression":{"baseExpression":{"id":7387,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"25078:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7389,"indexExpression":{"id":7388,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7381,"src":"25089:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25078:20:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"functionReturnParameters":7386,"id":7390,"nodeType":"Return","src":"25071:27:19"}]},"documentation":{"id":7379,"nodeType":"StructuredDocumentation","src":"24822:142:19","text":" @dev Gets strategy allocation data\n @param strategy The strategy address\n @return info The strategy information"},"functionSelector":"54192ad5","id":7392,"implemented":true,"kind":"function","modifiers":[],"name":"getStrategyInfo","nameLocation":"24978:15:19","nodeType":"FunctionDefinition","parameters":{"id":7382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7381,"mutability":"mutable","name":"strategy","nameLocation":"25002:8:19","nodeType":"VariableDeclaration","scope":7392,"src":"24994:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7380,"name":"address","nodeType":"ElementaryTypeName","src":"24994:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"24993:18:19"},"returnParameters":{"id":7386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7385,"mutability":"mutable","name":"info","nameLocation":"25055:4:19","nodeType":"VariableDeclaration","scope":7392,"src":"25035:24:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7384,"nodeType":"UserDefinedTypeName","pathNode":{"id":7383,"name":"StrategyInfo","nameLocations":["25035:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"25035:12:19"},"referencedDeclaration":6272,"src":"25035:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"src":"25034:26:19"},"scope":7988,"src":"24969:136:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7405,"nodeType":"Block","src":"25409:53:19","statements":[{"expression":{"baseExpression":{"id":7401,"name":"strategyPerformance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6229,"src":"25426:19:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_PerformanceData_$6287_storage_$","typeString":"mapping(address => struct YieldVault.PerformanceData storage ref)"}},"id":7403,"indexExpression":{"id":7402,"name":"strategy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7395,"src":"25446:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25426:29:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage","typeString":"struct YieldVault.PerformanceData storage ref"}},"functionReturnParameters":7400,"id":7404,"nodeType":"Return","src":"25419:36:19"}]},"documentation":{"id":7393,"nodeType":"StructuredDocumentation","src":"25111:152:19","text":" @dev Gets performance data for a strategy\n @param strategy The strategy address\n @return performance The performance data"},"functionSelector":"f51381da","id":7406,"implemented":true,"kind":"function","modifiers":[],"name":"getStrategyPerformance","nameLocation":"25277:22:19","nodeType":"FunctionDefinition","parameters":{"id":7396,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7395,"mutability":"mutable","name":"strategy","nameLocation":"25308:8:19","nodeType":"VariableDeclaration","scope":7406,"src":"25300:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7394,"name":"address","nodeType":"ElementaryTypeName","src":"25300:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"25299:18:19"},"returnParameters":{"id":7400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7399,"mutability":"mutable","name":"performance","nameLocation":"25391:11:19","nodeType":"VariableDeclaration","scope":7406,"src":"25368:34:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_memory_ptr","typeString":"struct YieldVault.PerformanceData"},"typeName":{"id":7398,"nodeType":"UserDefinedTypeName","pathNode":{"id":7397,"name":"PerformanceData","nameLocations":["25368:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":6287,"src":"25368:15:19"},"referencedDeclaration":6287,"src":"25368:15:19","typeDescriptions":{"typeIdentifier":"t_struct$_PerformanceData_$6287_storage_ptr","typeString":"struct YieldVault.PerformanceData"}},"visibility":"internal"}],"src":"25367:36:19"},"scope":7988,"src":"25268:194:19","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":7487,"nodeType":"Block","src":"26209:845:19","statements":[{"body":{"id":7485,"nodeType":"Block","src":"26269:779:19","statements":[{"assignments":[7423],"declarations":[{"constant":false,"id":7423,"mutability":"mutable","name":"strategyAddr","nameLocation":"26291:12:19","nodeType":"VariableDeclaration","scope":7485,"src":"26283:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7422,"name":"address","nodeType":"ElementaryTypeName","src":"26283:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7427,"initialValue":{"baseExpression":{"id":7424,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"26306:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7426,"indexExpression":{"id":7425,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7412,"src":"26319:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26306:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"26283:38:19"},{"condition":{"baseExpression":{"id":7428,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"26339:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7430,"indexExpression":{"id":7429,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7423,"src":"26356:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26339:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7484,"nodeType":"IfStatement","src":"26335:703:19","trueBody":{"id":7483,"nodeType":"Block","src":"26371:667:19","statements":[{"assignments":[7433],"declarations":[{"constant":false,"id":7433,"mutability":"mutable","name":"strategyInfo","nameLocation":"26410:12:19","nodeType":"VariableDeclaration","scope":7483,"src":"26389:33:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7432,"nodeType":"UserDefinedTypeName","pathNode":{"id":7431,"name":"StrategyInfo","nameLocations":["26389:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"26389:12:19"},"referencedDeclaration":6272,"src":"26389:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":7437,"initialValue":{"baseExpression":{"id":7434,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"26425:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7436,"indexExpression":{"id":7435,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7423,"src":"26436:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26425:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"26389:60:19"},{"assignments":[7439],"declarations":[{"constant":false,"id":7439,"mutability":"mutable","name":"allocationAmount","nameLocation":"26475:16:19","nodeType":"VariableDeclaration","scope":7483,"src":"26467:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7438,"name":"uint256","nodeType":"ElementaryTypeName","src":"26467:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7447,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7440,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7408,"src":"26495:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":7441,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7433,"src":"26504:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26517:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"26504:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26495:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7444,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"26494:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7445,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"26531:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26494:49:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"26467:76:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7448,"name":"allocationAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"26582:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26601:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26582:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7482,"nodeType":"IfStatement","src":"26578:446:19","trueBody":{"id":7481,"nodeType":"Block","src":"26604:420:19","statements":[{"expression":{"arguments":[{"id":7454,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7423,"src":"26644:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7455,"name":"allocationAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"26658:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7451,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"26626:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":7453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26632:11:19","memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":1391,"src":"26626:17:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26626:49:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7457,"nodeType":"ExpressionStatement","src":"26626:49:19"},{"clauses":[{"block":{"id":7469,"nodeType":"Block","src":"26749:96:19","statements":[{"expression":{"id":7467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7463,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7433,"src":"26775:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"26788:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"26775:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":7466,"name":"allocationAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"26806:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26775:47:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7468,"nodeType":"ExpressionStatement","src":"26775:47:19"}]},"errorName":"","id":7470,"nodeType":"TryCatchClause","src":"26749:96:19"},{"block":{"id":7478,"nodeType":"Block","src":"26852:154:19","statements":[{"expression":{"arguments":[{"id":7474,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7423,"src":"26967:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":7475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26981:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":7471,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"26949:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":7473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26955:11:19","memberName":"safeApprove","nodeType":"MemberAccess","referencedDeclaration":1391,"src":"26949:17:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7476,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26949:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7477,"nodeType":"ExpressionStatement","src":"26949:34:19"}]},"errorName":"","id":7479,"nodeType":"TryCatchClause","src":"26846:160:19"}],"externalCall":{"arguments":[{"id":7461,"name":"allocationAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7439,"src":"26731:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":7458,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7433,"src":"26701:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26714:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"26701:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":7460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26723:7:19","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":8051,"src":"26701:29:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":7462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26701:47:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7480,"nodeType":"TryStatement","src":"26697:309:19"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7415,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7412,"src":"26239:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7416,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"26243:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26256:6:19","memberName":"length","nodeType":"MemberAccess","src":"26243:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26239:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7486,"initializationExpression":{"assignments":[7412],"declarations":[{"constant":false,"id":7412,"mutability":"mutable","name":"i","nameLocation":"26232:1:19","nodeType":"VariableDeclaration","scope":7486,"src":"26224:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7411,"name":"uint256","nodeType":"ElementaryTypeName","src":"26224:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7414,"initialValue":{"hexValue":"30","id":7413,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26236:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"26224:13:19"},"loopExpression":{"expression":{"id":7420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"26264:3:19","subExpression":{"id":7419,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7412,"src":"26264:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7421,"nodeType":"ExpressionStatement","src":"26264:3:19"},"nodeType":"ForStatement","src":"26219:829:19"}]},"id":7488,"implemented":true,"kind":"function","modifiers":[],"name":"_allocateToStrategies","nameLocation":"26162:21:19","nodeType":"FunctionDefinition","parameters":{"id":7409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7408,"mutability":"mutable","name":"assets","nameLocation":"26192:6:19","nodeType":"VariableDeclaration","scope":7488,"src":"26184:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7407,"name":"uint256","nodeType":"ElementaryTypeName","src":"26184:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26183:16:19"},"returnParameters":{"id":7410,"nodeType":"ParameterList","parameters":[],"src":"26209:0:19"},"scope":7988,"src":"26153:901:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7593,"nodeType":"Block","src":"27118:1209:19","statements":[{"assignments":[7494],"declarations":[{"constant":false,"id":7494,"mutability":"mutable","name":"remainingToWithdraw","nameLocation":"27136:19:19","nodeType":"VariableDeclaration","scope":7593,"src":"27128:27:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7493,"name":"uint256","nodeType":"ElementaryTypeName","src":"27128:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7496,"initialValue":{"id":7495,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"27158:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27128:36:19"},{"body":{"id":7591,"nodeType":"Block","src":"27311:1010:19","statements":[{"assignments":[7513],"declarations":[{"constant":false,"id":7513,"mutability":"mutable","name":"strategyAddr","nameLocation":"27333:12:19","nodeType":"VariableDeclaration","scope":7591,"src":"27325:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7512,"name":"address","nodeType":"ElementaryTypeName","src":"27325:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7517,"initialValue":{"baseExpression":{"id":7514,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"27348:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7516,"indexExpression":{"id":7515,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7498,"src":"27361:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27348:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"27325:38:19"},{"condition":{"baseExpression":{"id":7518,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"27381:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7520,"indexExpression":{"id":7519,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"27398:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27381:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7590,"nodeType":"IfStatement","src":"27377:934:19","trueBody":{"id":7589,"nodeType":"Block","src":"27413:898:19","statements":[{"assignments":[7523],"declarations":[{"constant":false,"id":7523,"mutability":"mutable","name":"strategyInfo","nameLocation":"27452:12:19","nodeType":"VariableDeclaration","scope":7589,"src":"27431:33:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7522,"nodeType":"UserDefinedTypeName","pathNode":{"id":7521,"name":"StrategyInfo","nameLocations":["27431:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"27431:12:19"},"referencedDeclaration":6272,"src":"27431:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":7527,"initialValue":{"baseExpression":{"id":7524,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"27467:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7526,"indexExpression":{"id":7525,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7513,"src":"27478:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27467:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"27431:60:19"},{"assignments":[7529],"declarations":[{"constant":false,"id":7529,"mutability":"mutable","name":"proportionalAmount","nameLocation":"27534:18:19","nodeType":"VariableDeclaration","scope":7589,"src":"27526:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7528,"name":"uint256","nodeType":"ElementaryTypeName","src":"27526:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7537,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7530,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7490,"src":"27556:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":7531,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7523,"src":"27565:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7532,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27578:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"27565:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27556:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"27555:34:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7535,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"27592:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27555:49:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27526:78:19"},{"assignments":[7539],"declarations":[{"constant":false,"id":7539,"mutability":"mutable","name":"withdrawAmount","nameLocation":"27630:14:19","nodeType":"VariableDeclaration","scope":7589,"src":"27622:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7538,"name":"uint256","nodeType":"ElementaryTypeName","src":"27622:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7550,"initialValue":{"arguments":[{"id":7542,"name":"proportionalAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7529,"src":"27656:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":7545,"name":"remainingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7494,"src":"27706:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7546,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7523,"src":"27727:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7547,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27740:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"27727:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7543,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"27697:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":7544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27702:3:19","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"27697:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27697:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7540,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"27647:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":7541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27652:3:19","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"27647:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7549,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27647:109:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27622:134:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7551,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"27795:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27812:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27795:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7588,"nodeType":"IfStatement","src":"27791:506:19","trueBody":{"id":7587,"nodeType":"Block","src":"27815:482:19","statements":[{"clauses":[{"block":{"id":7581,"nodeType":"Block","src":"27916:222:19","statements":[{"expression":{"id":7571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":7562,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7523,"src":"27942:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7564,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"27955:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"27942:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"arguments":[{"id":7567,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"27982:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":7568,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7523,"src":"27998:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28011:14:19","memberName":"totalDeposited","nodeType":"MemberAccess","referencedDeclaration":6263,"src":"27998:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7565,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"27973:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":7566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27978:3:19","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"27973:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27973:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27942:84:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7572,"nodeType":"ExpressionStatement","src":"27942:84:19"},{"expression":{"id":7579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7573,"name":"remainingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7494,"src":"28052:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"arguments":[{"id":7576,"name":"withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7560,"src":"28084:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":7577,"name":"remainingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7494,"src":"28095:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7574,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"28075:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$3520_$","typeString":"type(library Math)"}},"id":7575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28080:3:19","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":2697,"src":"28075:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":7578,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28075:40:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28052:63:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7580,"nodeType":"ExpressionStatement","src":"28052:63:19"}]},"errorName":"","id":7582,"nodeType":"TryCatchClause","parameters":{"id":7561,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7560,"mutability":"mutable","name":"withdrawn","nameLocation":"27905:9:19","nodeType":"VariableDeclaration","scope":7582,"src":"27897:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7559,"name":"uint256","nodeType":"ElementaryTypeName","src":"27897:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27896:19:19"},"src":"27888:250:19"},{"block":{"id":7584,"nodeType":"Block","src":"28145:134:19","statements":[{"id":7583,"nodeType":"Continue","src":"28248:8:19"}]},"errorName":"","id":7585,"nodeType":"TryCatchClause","src":"28139:140:19"}],"externalCall":{"arguments":[{"id":7557,"name":"withdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7539,"src":"27872:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":7554,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7523,"src":"27841:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo storage pointer"}},"id":7555,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27854:8:19","memberName":"strategy","nodeType":"MemberAccess","referencedDeclaration":6257,"src":"27841:21:19","typeDescriptions":{"typeIdentifier":"t_contract$_IYieldStrategy_$8169","typeString":"contract IYieldStrategy"}},"id":7556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27863:8:19","memberName":"withdraw","nodeType":"MemberAccess","referencedDeclaration":8059,"src":"27841:30:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) external returns (uint256)"}},"id":7558,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27841:46:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7586,"nodeType":"TryStatement","src":"27837:442:19"}]}}]}}]},"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7501,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7498,"src":"27254:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7502,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"27258:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"27271:6:19","memberName":"length","nodeType":"MemberAccess","src":"27258:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"27254:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7505,"name":"remainingToWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7494,"src":"27281:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27303:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"27281:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"27254:50:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7592,"initializationExpression":{"assignments":[7498],"declarations":[{"constant":false,"id":7498,"mutability":"mutable","name":"i","nameLocation":"27247:1:19","nodeType":"VariableDeclaration","scope":7592,"src":"27239:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7497,"name":"uint256","nodeType":"ElementaryTypeName","src":"27239:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7500,"initialValue":{"hexValue":"30","id":7499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"27251:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"27239:13:19"},"loopExpression":{"expression":{"id":7510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"27306:3:19","subExpression":{"id":7509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7498,"src":"27306:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7511,"nodeType":"ExpressionStatement","src":"27306:3:19"},"nodeType":"ForStatement","src":"27234:1087:19"}]},"id":7594,"implemented":true,"kind":"function","modifiers":[],"name":"_withdrawFromStrategies","nameLocation":"27069:23:19","nodeType":"FunctionDefinition","parameters":{"id":7491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7490,"mutability":"mutable","name":"assets","nameLocation":"27101:6:19","nodeType":"VariableDeclaration","scope":7594,"src":"27093:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7489,"name":"uint256","nodeType":"ElementaryTypeName","src":"27093:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27092:16:19"},"returnParameters":{"id":7492,"nodeType":"ParameterList","parameters":[],"src":"27118:0:19"},"scope":7988,"src":"27060:1267:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7630,"nodeType":"Block","src":"28371:385:19","statements":[{"body":{"id":7628,"nodeType":"Block","src":"28536:214:19","statements":[{"assignments":[7609],"declarations":[{"constant":false,"id":7609,"mutability":"mutable","name":"strategyAddr","nameLocation":"28558:12:19","nodeType":"VariableDeclaration","scope":7628,"src":"28550:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7608,"name":"address","nodeType":"ElementaryTypeName","src":"28550:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7613,"initialValue":{"baseExpression":{"id":7610,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"28573:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7612,"indexExpression":{"id":7611,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7598,"src":"28586:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28573:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"28550:38:19"},{"condition":{"baseExpression":{"id":7614,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"28606:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7616,"indexExpression":{"id":7615,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7609,"src":"28623:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28606:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7627,"nodeType":"IfStatement","src":"28602:138:19","trueBody":{"id":7626,"nodeType":"Block","src":"28638:102:19","statements":[{"expression":{"id":7624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"baseExpression":{"id":7617,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"28656:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7619,"indexExpression":{"id":7618,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7609,"src":"28667:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28656:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"id":7620,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"28681:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"28656:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":7621,"name":"targetAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6239,"src":"28694:17:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":7623,"indexExpression":{"id":7622,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7609,"src":"28712:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28694:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28656:69:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7625,"nodeType":"ExpressionStatement","src":"28656:69:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7598,"src":"28506:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7602,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"28510:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28523:6:19","memberName":"length","nodeType":"MemberAccess","src":"28510:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"28506:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7629,"initializationExpression":{"assignments":[7598],"declarations":[{"constant":false,"id":7598,"mutability":"mutable","name":"i","nameLocation":"28499:1:19","nodeType":"VariableDeclaration","scope":7629,"src":"28491:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7597,"name":"uint256","nodeType":"ElementaryTypeName","src":"28491:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7600,"initialValue":{"hexValue":"30","id":7599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28503:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"28491:13:19"},"loopExpression":{"expression":{"id":7606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"28531:3:19","subExpression":{"id":7605,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7598,"src":"28531:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7607,"nodeType":"ExpressionStatement","src":"28531:3:19"},"nodeType":"ForStatement","src":"28486:264:19"}]},"id":7631,"implemented":true,"kind":"function","modifiers":[],"name":"_executeRebalance","nameLocation":"28342:17:19","nodeType":"FunctionDefinition","parameters":{"id":7595,"nodeType":"ParameterList","parameters":[],"src":"28359:2:19"},"returnParameters":{"id":7596,"nodeType":"ParameterList","parameters":[],"src":"28371:0:19"},"scope":7988,"src":"28333:423:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7710,"nodeType":"Block","src":"28855:660:19","statements":[{"expression":{"id":7644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7637,"name":"allocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7635,"src":"28865:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":7641,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"28893:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28906:6:19","memberName":"length","nodeType":"MemberAccess","src":"28893:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":7640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"28879:13:19","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (uint256[] memory)"},"typeName":{"baseType":{"id":7638,"name":"uint256","nodeType":"ElementaryTypeName","src":"28883:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7639,"nodeType":"ArrayTypeName","src":"28883:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}}},"id":7643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28879:34:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"src":"28865:48:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7645,"nodeType":"ExpressionStatement","src":"28865:48:19"},{"assignments":[7647],"declarations":[{"constant":false,"id":7647,"mutability":"mutable","name":"activeCount","nameLocation":"29010:11:19","nodeType":"VariableDeclaration","scope":7710,"src":"29002:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7646,"name":"uint256","nodeType":"ElementaryTypeName","src":"29002:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7649,"initialValue":{"hexValue":"30","id":7648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29024:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29002:23:19"},{"body":{"id":7671,"nodeType":"Block","src":"29085:109:19","statements":[{"condition":{"baseExpression":{"id":7661,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"29103:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7665,"indexExpression":{"baseExpression":{"id":7662,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29120:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7664,"indexExpression":{"id":7663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7651,"src":"29133:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29120:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29103:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7670,"nodeType":"IfStatement","src":"29099:85:19","trueBody":{"id":7669,"nodeType":"Block","src":"29138:46:19","statements":[{"expression":{"id":7667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29156:13:19","subExpression":{"id":7666,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7647,"src":"29156:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7668,"nodeType":"ExpressionStatement","src":"29156:13:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7654,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7651,"src":"29055:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7655,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29059:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29072:6:19","memberName":"length","nodeType":"MemberAccess","src":"29059:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29055:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7672,"initializationExpression":{"assignments":[7651],"declarations":[{"constant":false,"id":7651,"mutability":"mutable","name":"i","nameLocation":"29048:1:19","nodeType":"VariableDeclaration","scope":7672,"src":"29040:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7650,"name":"uint256","nodeType":"ElementaryTypeName","src":"29040:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7653,"initialValue":{"hexValue":"30","id":7652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29052:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29040:13:19"},"loopExpression":{"expression":{"id":7659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29080:3:19","subExpression":{"id":7658,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7651,"src":"29080:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7660,"nodeType":"ExpressionStatement","src":"29080:3:19"},"nodeType":"ForStatement","src":"29035:159:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7673,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7647,"src":"29216:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29230:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"29216:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7709,"nodeType":"IfStatement","src":"29212:297:19","trueBody":{"id":7708,"nodeType":"Block","src":"29233:276:19","statements":[{"assignments":[7677],"declarations":[{"constant":false,"id":7677,"mutability":"mutable","name":"equalWeight","nameLocation":"29255:11:19","nodeType":"VariableDeclaration","scope":7708,"src":"29247:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7676,"name":"uint256","nodeType":"ElementaryTypeName","src":"29247:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7681,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7678,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"29269:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7679,"name":"activeCount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7647,"src":"29284:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29269:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"29247:48:19"},{"body":{"id":7706,"nodeType":"Block","src":"29359:140:19","statements":[{"condition":{"baseExpression":{"id":7693,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"29381:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7697,"indexExpression":{"baseExpression":{"id":7694,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29398:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7696,"indexExpression":{"id":7695,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7683,"src":"29411:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29398:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29381:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7705,"nodeType":"IfStatement","src":"29377:108:19","trueBody":{"id":7704,"nodeType":"Block","src":"29416:69:19","statements":[{"expression":{"id":7702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":7698,"name":"allocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7635,"src":"29438:11:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":7700,"indexExpression":{"id":7699,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7683,"src":"29450:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"29438:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7701,"name":"equalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7677,"src":"29455:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29438:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7703,"nodeType":"ExpressionStatement","src":"29438:28:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7686,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7683,"src":"29329:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7687,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29333:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29346:6:19","memberName":"length","nodeType":"MemberAccess","src":"29333:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29329:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7707,"initializationExpression":{"assignments":[7683],"declarations":[{"constant":false,"id":7683,"mutability":"mutable","name":"i","nameLocation":"29322:1:19","nodeType":"VariableDeclaration","scope":7707,"src":"29314:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7682,"name":"uint256","nodeType":"ElementaryTypeName","src":"29314:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7685,"initialValue":{"hexValue":"30","id":7684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29326:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29314:13:19"},"loopExpression":{"expression":{"id":7691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29354:3:19","subExpression":{"id":7690,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7683,"src":"29354:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7692,"nodeType":"ExpressionStatement","src":"29354:3:19"},"nodeType":"ForStatement","src":"29309:190:19"}]}}]},"id":7711,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateOptimalAllocations","nameLocation":"28771:28:19","nodeType":"FunctionDefinition","parameters":{"id":7632,"nodeType":"ParameterList","parameters":[],"src":"28799:2:19"},"returnParameters":{"id":7636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7635,"mutability":"mutable","name":"allocations","nameLocation":"28842:11:19","nodeType":"VariableDeclaration","scope":7711,"src":"28825:28:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":7633,"name":"uint256","nodeType":"ElementaryTypeName","src":"28825:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7634,"nodeType":"ArrayTypeName","src":"28825:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"28824:30:19"},"scope":7988,"src":"28762:753:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7739,"nodeType":"Block","src":"29594:169:19","statements":[{"body":{"id":7737,"nodeType":"Block","src":"29654:103:19","statements":[{"condition":{"baseExpression":{"id":7727,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"29672:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7731,"indexExpression":{"baseExpression":{"id":7728,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29689:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7730,"indexExpression":{"id":7729,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7717,"src":"29702:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29689:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29672:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7736,"nodeType":"IfStatement","src":"29668:79:19","trueBody":{"id":7735,"nodeType":"Block","src":"29707:40:19","statements":[{"expression":{"id":7733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29725:7:19","subExpression":{"id":7732,"name":"count","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7714,"src":"29725:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7734,"nodeType":"ExpressionStatement","src":"29725:7:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7720,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7717,"src":"29624:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7721,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29628:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29641:6:19","memberName":"length","nodeType":"MemberAccess","src":"29628:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29624:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7738,"initializationExpression":{"assignments":[7717],"declarations":[{"constant":false,"id":7717,"mutability":"mutable","name":"i","nameLocation":"29617:1:19","nodeType":"VariableDeclaration","scope":7738,"src":"29609:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7716,"name":"uint256","nodeType":"ElementaryTypeName","src":"29609:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7719,"initialValue":{"hexValue":"30","id":7718,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29621:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29609:13:19"},"loopExpression":{"expression":{"id":7725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29649:3:19","subExpression":{"id":7724,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7717,"src":"29649:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7726,"nodeType":"ExpressionStatement","src":"29649:3:19"},"nodeType":"ForStatement","src":"29604:153:19"}]},"id":7740,"implemented":true,"kind":"function","modifiers":[],"name":"_getActiveStrategyCount","nameLocation":"29530:23:19","nodeType":"FunctionDefinition","parameters":{"id":7712,"nodeType":"ParameterList","parameters":[],"src":"29553:2:19"},"returnParameters":{"id":7715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7714,"mutability":"mutable","name":"count","nameLocation":"29587:5:19","nodeType":"VariableDeclaration","scope":7740,"src":"29579:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7713,"name":"uint256","nodeType":"ElementaryTypeName","src":"29579:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"29578:15:19"},"scope":7988,"src":"29521:242:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7786,"nodeType":"Block","src":"29820:416:19","statements":[{"assignments":[7744],"declarations":[{"constant":false,"id":7744,"mutability":"mutable","name":"totalAllocation","nameLocation":"29838:15:19","nodeType":"VariableDeclaration","scope":7786,"src":"29830:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7743,"name":"uint256","nodeType":"ElementaryTypeName","src":"29830:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7746,"initialValue":{"hexValue":"30","id":7745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29856:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29830:27:19"},{"body":{"id":7776,"nodeType":"Block","src":"29926:199:19","statements":[{"assignments":[7759],"declarations":[{"constant":false,"id":7759,"mutability":"mutable","name":"strategyAddr","nameLocation":"29948:12:19","nodeType":"VariableDeclaration","scope":7776,"src":"29940:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7758,"name":"address","nodeType":"ElementaryTypeName","src":"29940:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7763,"initialValue":{"baseExpression":{"id":7760,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29963:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7762,"indexExpression":{"id":7761,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"29976:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29963:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"29940:38:19"},{"condition":{"baseExpression":{"id":7764,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"29996:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7766,"indexExpression":{"id":7765,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7759,"src":"30013:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29996:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7775,"nodeType":"IfStatement","src":"29992:123:19","trueBody":{"id":7774,"nodeType":"Block","src":"30028:87:19","statements":[{"expression":{"id":7772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7767,"name":"totalAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7744,"src":"30046:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"baseExpression":{"id":7768,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"30065:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7770,"indexExpression":{"id":7769,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7759,"src":"30076:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30065:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"id":7771,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30090:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"30065:35:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30046:54:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7773,"nodeType":"ExpressionStatement","src":"30046:54:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7751,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"29896:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7752,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"29900:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29913:6:19","memberName":"length","nodeType":"MemberAccess","src":"29900:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"29896:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7777,"initializationExpression":{"assignments":[7748],"declarations":[{"constant":false,"id":7748,"mutability":"mutable","name":"i","nameLocation":"29889:1:19","nodeType":"VariableDeclaration","scope":7777,"src":"29881:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7747,"name":"uint256","nodeType":"ElementaryTypeName","src":"29881:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7750,"initialValue":{"hexValue":"30","id":7749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"29893:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"29881:13:19"},"loopExpression":{"expression":{"id":7756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"29921:3:19","subExpression":{"id":7755,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7748,"src":"29921:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7757,"nodeType":"ExpressionStatement","src":"29921:3:19"},"nodeType":"ForStatement","src":"29876:249:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7778,"name":"totalAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7744,"src":"30147:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":7779,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"30165:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30147:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7785,"nodeType":"IfStatement","src":"30143:87:19","trueBody":{"id":7784,"nodeType":"Block","src":"30179:51:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7781,"name":"InvalidAllocation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6384,"src":"30200:17:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7782,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30200:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7783,"nodeType":"RevertStatement","src":"30193:26:19"}]}}]},"id":7787,"implemented":true,"kind":"function","modifiers":[],"name":"_validateTotalAllocations","nameLocation":"29778:25:19","nodeType":"FunctionDefinition","parameters":{"id":7741,"nodeType":"ParameterList","parameters":[],"src":"29803:2:19"},"returnParameters":{"id":7742,"nodeType":"ParameterList","parameters":[],"src":"29820:0:19"},"scope":7988,"src":"29769:467:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7861,"nodeType":"Block","src":"30287:690:19","statements":[{"assignments":[7791],"declarations":[{"constant":false,"id":7791,"mutability":"mutable","name":"totalWeightedRisk","nameLocation":"30305:17:19","nodeType":"VariableDeclaration","scope":7861,"src":"30297:25:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7790,"name":"uint256","nodeType":"ElementaryTypeName","src":"30297:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7793,"initialValue":{"hexValue":"30","id":7792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30325:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"30297:29:19"},{"assignments":[7795],"declarations":[{"constant":false,"id":7795,"mutability":"mutable","name":"totalWeight","nameLocation":"30344:11:19","nodeType":"VariableDeclaration","scope":7861,"src":"30336:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7794,"name":"uint256","nodeType":"ElementaryTypeName","src":"30336:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7797,"initialValue":{"hexValue":"30","id":7796,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30358:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"30336:23:19"},{"body":{"id":7840,"nodeType":"Block","src":"30420:347:19","statements":[{"assignments":[7810],"declarations":[{"constant":false,"id":7810,"mutability":"mutable","name":"strategyAddr","nameLocation":"30442:12:19","nodeType":"VariableDeclaration","scope":7840,"src":"30434:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7809,"name":"address","nodeType":"ElementaryTypeName","src":"30434:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":7814,"initialValue":{"baseExpression":{"id":7811,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"30457:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7813,"indexExpression":{"id":7812,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7799,"src":"30470:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30457:15:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"30434:38:19"},{"condition":{"baseExpression":{"id":7815,"name":"activeStrategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6214,"src":"30490:16:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":7817,"indexExpression":{"id":7816,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7810,"src":"30507:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30490:30:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7839,"nodeType":"IfStatement","src":"30486:271:19","trueBody":{"id":7838,"nodeType":"Block","src":"30522:235:19","statements":[{"assignments":[7820],"declarations":[{"constant":false,"id":7820,"mutability":"mutable","name":"strategyInfo","nameLocation":"30560:12:19","nodeType":"VariableDeclaration","scope":7838,"src":"30540:32:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo"},"typeName":{"id":7819,"nodeType":"UserDefinedTypeName","pathNode":{"id":7818,"name":"StrategyInfo","nameLocations":["30540:12:19"],"nodeType":"IdentifierPath","referencedDeclaration":6272,"src":"30540:12:19"},"referencedDeclaration":6272,"src":"30540:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage_ptr","typeString":"struct YieldVault.StrategyInfo"}},"visibility":"internal"}],"id":7824,"initialValue":{"baseExpression":{"id":7821,"name":"strategies","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6207,"src":"30575:10:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_StrategyInfo_$6272_storage_$","typeString":"mapping(address => struct YieldVault.StrategyInfo storage ref)"}},"id":7823,"indexExpression":{"id":7822,"name":"strategyAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7810,"src":"30586:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30575:24:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_storage","typeString":"struct YieldVault.StrategyInfo storage ref"}},"nodeType":"VariableDeclarationStatement","src":"30540:59:19"},{"expression":{"id":7831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7825,"name":"totalWeightedRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7791,"src":"30617:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":7826,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7820,"src":"30638:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"id":7827,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30651:9:19","memberName":"riskScore","nodeType":"MemberAccess","referencedDeclaration":6269,"src":"30638:22:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"expression":{"id":7828,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7820,"src":"30663:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"id":7829,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30676:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"30663:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30638:48:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30617:69:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7832,"nodeType":"ExpressionStatement","src":"30617:69:19"},{"expression":{"id":7836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7833,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7795,"src":"30704:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"expression":{"id":7834,"name":"strategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7820,"src":"30719:12:19","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$6272_memory_ptr","typeString":"struct YieldVault.StrategyInfo memory"}},"id":7835,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30732:10:19","memberName":"allocation","nodeType":"MemberAccess","referencedDeclaration":6259,"src":"30719:23:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30704:38:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7837,"nodeType":"ExpressionStatement","src":"30704:38:19"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7802,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7799,"src":"30390:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":7803,"name":"strategyList","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6210,"src":"30394:12:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage","typeString":"address[] storage ref"}},"id":7804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"30407:6:19","memberName":"length","nodeType":"MemberAccess","src":"30394:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30390:23:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7841,"initializationExpression":{"assignments":[7799],"declarations":[{"constant":false,"id":7799,"mutability":"mutable","name":"i","nameLocation":"30383:1:19","nodeType":"VariableDeclaration","scope":7841,"src":"30375:9:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7798,"name":"uint256","nodeType":"ElementaryTypeName","src":"30375:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7801,"initialValue":{"hexValue":"30","id":7800,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30387:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"30375:13:19"},"loopExpression":{"expression":{"id":7807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"30415:3:19","subExpression":{"id":7806,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7799,"src":"30415:1:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7808,"nodeType":"ExpressionStatement","src":"30415:3:19"},"nodeType":"ForStatement","src":"30370:397:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7842,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7795,"src":"30781:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30795:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30781:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7860,"nodeType":"IfStatement","src":"30777:194:19","trueBody":{"id":7859,"nodeType":"Block","src":"30798:173:19","statements":[{"assignments":[7846],"declarations":[{"constant":false,"id":7846,"mutability":"mutable","name":"avgRisk","nameLocation":"30820:7:19","nodeType":"VariableDeclaration","scope":7859,"src":"30812:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7845,"name":"uint256","nodeType":"ElementaryTypeName","src":"30812:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7850,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7847,"name":"totalWeightedRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7791,"src":"30830:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7848,"name":"totalWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7795,"src":"30850:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30830:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"30812:49:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7851,"name":"avgRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7846,"src":"30879:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":7852,"name":"maxTotalRisk","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6250,"src":"30889:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30879:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7858,"nodeType":"IfStatement","src":"30875:86:19","trueBody":{"id":7857,"nodeType":"Block","src":"30903:58:19","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7854,"name":"ExceedsRiskLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6392,"src":"30928:16:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7855,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30928:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7856,"nodeType":"RevertStatement","src":"30921:25:19"}]}}]}}]},"id":7862,"implemented":true,"kind":"function","modifiers":[],"name":"_validateRiskLimits","nameLocation":"30251:19:19","nodeType":"FunctionDefinition","parameters":{"id":7788,"nodeType":"ParameterList","parameters":[],"src":"30270:2:19"},"returnParameters":{"id":7789,"nodeType":"ParameterList","parameters":[],"src":"30287:0:19"},"scope":7988,"src":"30242:735:19","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":7911,"nodeType":"Block","src":"31035:374:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7867,"name":"performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"31049:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7868,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31066:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31049:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7870,"name":"yieldAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7864,"src":"31071:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31085:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31071:15:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31049:37:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7910,"nodeType":"IfStatement","src":"31045:358:19","trueBody":{"id":7909,"nodeType":"Block","src":"31088:315:19","statements":[{"assignments":[7875],"declarations":[{"constant":false,"id":7875,"mutability":"mutable","name":"feeAmount","nameLocation":"31110:9:19","nodeType":"VariableDeclaration","scope":7909,"src":"31102:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7874,"name":"uint256","nodeType":"ElementaryTypeName","src":"31102:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7882,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7876,"name":"yieldAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7864,"src":"31123:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":7877,"name":"performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"31137:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31123:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":7879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"31122:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":7880,"name":"BASIS_POINTS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6180,"src":"31155:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31122:45:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31102:65:19"},{"assignments":[7884],"declarations":[{"constant":false,"id":7884,"mutability":"mutable","name":"availableBalance","nameLocation":"31189:16:19","nodeType":"VariableDeclaration","scope":7909,"src":"31181:24:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7883,"name":"uint256","nodeType":"ElementaryTypeName","src":"31181:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":7892,"initialValue":{"arguments":[{"arguments":[{"id":7889,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"31232:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_YieldVault_$7988","typeString":"contract YieldVault"}],"id":7888,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"31224:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7887,"name":"address","nodeType":"ElementaryTypeName","src":"31224:7:19","typeDescriptions":{}}},"id":7890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31224:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":7885,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"31208:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":7886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31214:9:19","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":1183,"src":"31208:15:19","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":7891,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31208:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"31181:57:19"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7895,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7893,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7875,"src":"31269:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":7894,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"31281:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"31269:13:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7896,"name":"availableBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7884,"src":"31286:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":7897,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7875,"src":"31306:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"31286:29:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"31269:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7908,"nodeType":"IfStatement","src":"31265:128:19","trueBody":{"id":7907,"nodeType":"Block","src":"31317:76:19","statements":[{"expression":{"arguments":[{"id":7903,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6247,"src":"31354:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":7904,"name":"feeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7875,"src":"31368:9:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":7900,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6198,"src":"31335:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":7902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"31341:12:19","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"31335:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":7905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"31335:43:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7906,"nodeType":"ExpressionStatement","src":"31335:43:19"}]}}]}}]},"id":7912,"implemented":true,"kind":"function","modifiers":[],"name":"_collectFees","nameLocation":"30992:12:19","nodeType":"FunctionDefinition","parameters":{"id":7865,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7864,"mutability":"mutable","name":"yieldAmount","nameLocation":"31013:11:19","nodeType":"VariableDeclaration","scope":7912,"src":"31005:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7863,"name":"uint256","nodeType":"ElementaryTypeName","src":"31005:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"31004:21:19"},"returnParameters":{"id":7866,"nodeType":"ParameterList","parameters":[],"src":"31035:0:19"},"scope":7988,"src":"30983:426:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":7922,"nodeType":"Block","src":"32206:25:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7919,"name":"_pause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"32216:6:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32216:8:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7921,"nodeType":"ExpressionStatement","src":"32216:8:19"}]},"documentation":{"id":7913,"nodeType":"StructuredDocumentation","src":"32097:48:19","text":" @dev Emergency pause function"},"functionSelector":"51858e27","id":7923,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7916,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"32194:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7917,"kind":"modifierInvocation","modifierName":{"id":7915,"name":"onlyRole","nameLocations":["32185:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"32185:8:19"},"nodeType":"ModifierInvocation","src":"32185:20:19"}],"name":"emergencyPause","nameLocation":"32159:14:19","nodeType":"FunctionDefinition","parameters":{"id":7914,"nodeType":"ParameterList","parameters":[],"src":"32173:2:19"},"returnParameters":{"id":7918,"nodeType":"ParameterList","parameters":[],"src":"32206:0:19"},"scope":7988,"src":"32150:81:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7933,"nodeType":"Block","src":"32332:27:19","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":7930,"name":"_unpause","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":495,"src":"32342:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":7931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32342:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7932,"nodeType":"ExpressionStatement","src":"32342:10:19"}]},"documentation":{"id":7924,"nodeType":"StructuredDocumentation","src":"32237:41:19","text":" @dev Resume operations"},"functionSelector":"3f4ba83a","id":7934,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7927,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"32320:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7928,"kind":"modifierInvocation","modifierName":{"id":7926,"name":"onlyRole","nameLocations":["32311:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"32311:8:19"},"nodeType":"ModifierInvocation","src":"32311:20:19"}],"name":"unpause","nameLocation":"32292:7:19","nodeType":"FunctionDefinition","parameters":{"id":7925,"nodeType":"ParameterList","parameters":[],"src":"32299:2:19"},"returnParameters":{"id":7929,"nodeType":"ParameterList","parameters":[],"src":"32332:0:19"},"scope":7988,"src":"32283:76:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":7986,"nodeType":"Block","src":"32617:347:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":7955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7949,"name":"_managementFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7937,"src":"32631:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31303030","id":7950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32648:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000_by_1","typeString":"int_const 1000"},"value":"1000"},"src":"32631:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":7954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7952,"name":"_performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"32656:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"32303030","id":7953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32674:4:19","typeDescriptions":{"typeIdentifier":"t_rational_2000_by_1","typeString":"int_const 2000"},"value":"2000"},"src":"32656:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"32631:47:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7959,"nodeType":"IfStatement","src":"32627:75:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7956,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"32687:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32687:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7958,"nodeType":"RevertStatement","src":"32680:22:19"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":7965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":7960,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"32731:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":7963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"32756:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":7962,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"32748:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":7961,"name":"address","nodeType":"ElementaryTypeName","src":"32748:7:19","typeDescriptions":{}}},"id":7964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32748:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"32731:27:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7969,"nodeType":"IfStatement","src":"32727:55:19","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":7966,"name":"InvalidAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6388,"src":"32767:13:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":7967,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"32767:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":7968,"nodeType":"RevertStatement","src":"32760:22:19"}},{"expression":{"id":7972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7970,"name":"managementFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6242,"src":"32793:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7971,"name":"_managementFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7937,"src":"32809:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32793:30:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7973,"nodeType":"ExpressionStatement","src":"32793:30:19"},{"expression":{"id":7976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7974,"name":"performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6245,"src":"32833:14:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7975,"name":"_performanceFee","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7939,"src":"32850:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"32833:32:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":7977,"nodeType":"ExpressionStatement","src":"32833:32:19"},{"expression":{"id":7980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7978,"name":"feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6247,"src":"32875:12:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7979,"name":"_feeRecipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7941,"src":"32890:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"32875:28:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":7981,"nodeType":"ExpressionStatement","src":"32875:28:19"},{"expression":{"id":7984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":7982,"name":"autoRebalanceEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6253,"src":"32913:20:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":7983,"name":"_autoRebalanceEnabled","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7943,"src":"32936:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"32913:44:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":7985,"nodeType":"ExpressionStatement","src":"32913:44:19"}]},"documentation":{"id":7935,"nodeType":"StructuredDocumentation","src":"32365:48:19","text":" @dev Updates vault parameters"},"functionSelector":"357ad7ad","id":7987,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":7946,"name":"ADMIN_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":6164,"src":"32605:10:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":7947,"kind":"modifierInvocation","modifierName":{"id":7945,"name":"onlyRole","nameLocations":["32596:8:19"],"nodeType":"IdentifierPath","referencedDeclaration":38,"src":"32596:8:19"},"nodeType":"ModifierInvocation","src":"32596:20:19"}],"name":"updateVaultParameters","nameLocation":"32427:21:19","nodeType":"FunctionDefinition","parameters":{"id":7944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7937,"mutability":"mutable","name":"_managementFee","nameLocation":"32466:14:19","nodeType":"VariableDeclaration","scope":7987,"src":"32458:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7936,"name":"uint256","nodeType":"ElementaryTypeName","src":"32458:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7939,"mutability":"mutable","name":"_performanceFee","nameLocation":"32498:15:19","nodeType":"VariableDeclaration","scope":7987,"src":"32490:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7938,"name":"uint256","nodeType":"ElementaryTypeName","src":"32490:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7941,"mutability":"mutable","name":"_feeRecipient","nameLocation":"32531:13:19","nodeType":"VariableDeclaration","scope":7987,"src":"32523:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7940,"name":"address","nodeType":"ElementaryTypeName","src":"32523:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7943,"mutability":"mutable","name":"_autoRebalanceEnabled","nameLocation":"32559:21:19","nodeType":"VariableDeclaration","scope":7987,"src":"32554:26:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":7942,"name":"bool","nodeType":"ElementaryTypeName","src":"32554:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"32448:138:19"},"returnParameters":{"id":7948,"nodeType":"ParameterList","parameters":[],"src":"32617:0:19"},"scope":7988,"src":"32418:546:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":7989,"src":"894:32072:19","usedErrors":[6376,6378,6380,6382,6384,6386,6388,6390,6392,6394,6396],"usedEvents":[327,336,345,399,404,6309,6317,6325,6333,6348,6356,6364,6374]}],"src":"32:32934:19"},"id":19},"src/interfaces/IYieldStrategy.sol":{"ast":{"absolutePath":"src/interfaces/IYieldStrategy.sol","exportedSymbols":{"IYieldStrategy":[8169]},"id":8170,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":7990,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IYieldStrategy","contractDependencies":[],"contractKind":"interface","documentation":{"id":7991,"nodeType":"StructuredDocumentation","src":"58:203:20","text":" @title IYieldStrategy\n @dev Interface for yield generation strategies in YieldRails\n @notice All yield strategies must implement this interface for compatibility\n @author YieldRails Team"},"fullyImplemented":false,"id":8169,"linearizedBaseContracts":[8169],"name":"IYieldStrategy","nameLocation":"272:14:20","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":7992,"nodeType":"StructuredDocumentation","src":"966:217:20","text":" @dev Emitted when funds are deposited into the strategy\n @param user The address that deposited funds\n @param amount The amount deposited\n @param shares The number of shares minted"},"eventSelector":"90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15","id":8000,"name":"Deposit","nameLocation":"1194:7:20","nodeType":"EventDefinition","parameters":{"id":7999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":7994,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1218:4:20","nodeType":"VariableDeclaration","scope":8000,"src":"1202:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":7993,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":7996,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1232:6:20","nodeType":"VariableDeclaration","scope":8000,"src":"1224:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7995,"name":"uint256","nodeType":"ElementaryTypeName","src":"1224:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7998,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"1248:6:20","nodeType":"VariableDeclaration","scope":8000,"src":"1240:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":7997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1240:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1201:54:20"},"src":"1188:68:20"},{"anonymous":false,"documentation":{"id":8001,"nodeType":"StructuredDocumentation","src":"1262:216:20","text":" @dev Emitted when funds are withdrawn from the strategy\n @param user The address that withdrew funds\n @param amount The amount withdrawn\n @param shares The number of shares burned"},"eventSelector":"df273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb","id":8009,"name":"Withdrawal","nameLocation":"1489:10:20","nodeType":"EventDefinition","parameters":{"id":8008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8003,"indexed":true,"mutability":"mutable","name":"user","nameLocation":"1516:4:20","nodeType":"VariableDeclaration","scope":8009,"src":"1500:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8002,"name":"address","nodeType":"ElementaryTypeName","src":"1500:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8005,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"1530:6:20","nodeType":"VariableDeclaration","scope":8009,"src":"1522:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8004,"name":"uint256","nodeType":"ElementaryTypeName","src":"1522:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8007,"indexed":false,"mutability":"mutable","name":"shares","nameLocation":"1546:6:20","nodeType":"VariableDeclaration","scope":8009,"src":"1538:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8006,"name":"uint256","nodeType":"ElementaryTypeName","src":"1538:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1499:54:20"},"src":"1483:71:20"},{"anonymous":false,"documentation":{"id":8010,"nodeType":"StructuredDocumentation","src":"1560:178:20","text":" @dev Emitted when yield is harvested\n @param yieldAmount The amount of yield harvested\n @param newTotalAssets The new total assets under management"},"eventSelector":"3fb12fb590bb295327f3bfc48158ada0b1147f8f823e0c7a09b98b301d186774","id":8016,"name":"YieldHarvested","nameLocation":"1749:14:20","nodeType":"EventDefinition","parameters":{"id":8015,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8012,"indexed":false,"mutability":"mutable","name":"yieldAmount","nameLocation":"1772:11:20","nodeType":"VariableDeclaration","scope":8016,"src":"1764:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1764:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8014,"indexed":false,"mutability":"mutable","name":"newTotalAssets","nameLocation":"1793:14:20","nodeType":"VariableDeclaration","scope":8016,"src":"1785:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8013,"name":"uint256","nodeType":"ElementaryTypeName","src":"1785:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1763:45:20"},"src":"1743:66:20"},{"anonymous":false,"documentation":{"id":8017,"nodeType":"StructuredDocumentation","src":"1815:197:20","text":" @dev Emitted when strategy parameters are updated\n @param parameter The parameter that was updated\n @param oldValue The old value\n @param newValue The new value"},"eventSelector":"a9409988ce3bd68f1874347d71ecc5e0bd9a8aa4f9fe57f336c1f7b697f19e22","id":8025,"name":"StrategyUpdated","nameLocation":"2023:15:20","nodeType":"EventDefinition","parameters":{"id":8024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8019,"indexed":false,"mutability":"mutable","name":"parameter","nameLocation":"2046:9:20","nodeType":"VariableDeclaration","scope":8025,"src":"2039:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8018,"name":"string","nodeType":"ElementaryTypeName","src":"2039:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8021,"indexed":false,"mutability":"mutable","name":"oldValue","nameLocation":"2065:8:20","nodeType":"VariableDeclaration","scope":8025,"src":"2057:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8020,"name":"uint256","nodeType":"ElementaryTypeName","src":"2057:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8023,"indexed":false,"mutability":"mutable","name":"newValue","nameLocation":"2083:8:20","nodeType":"VariableDeclaration","scope":8025,"src":"2075:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8022,"name":"uint256","nodeType":"ElementaryTypeName","src":"2075:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2038:54:20"},"src":"2017:76:20"},{"canonicalName":"IYieldStrategy.StrategyInfo","documentation":{"id":8026,"nodeType":"StructuredDocumentation","src":"2773:65:20","text":" @dev Strategy metadata and performance metrics"},"id":8043,"members":[{"constant":false,"id":8028,"mutability":"mutable","name":"name","nameLocation":"2880:4:20","nodeType":"VariableDeclaration","scope":8043,"src":"2873:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":8027,"name":"string","nodeType":"ElementaryTypeName","src":"2873:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8030,"mutability":"mutable","name":"description","nameLocation":"2959:11:20","nodeType":"VariableDeclaration","scope":8043,"src":"2952:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":8029,"name":"string","nodeType":"ElementaryTypeName","src":"2952:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8032,"mutability":"mutable","name":"totalAssets","nameLocation":"3020:11:20","nodeType":"VariableDeclaration","scope":8043,"src":"3012:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8031,"name":"uint256","nodeType":"ElementaryTypeName","src":"3012:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8034,"mutability":"mutable","name":"totalShares","nameLocation":"3089:11:20","nodeType":"VariableDeclaration","scope":8043,"src":"3081:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8033,"name":"uint256","nodeType":"ElementaryTypeName","src":"3081:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8036,"mutability":"mutable","name":"currentAPY","nameLocation":"3153:10:20","nodeType":"VariableDeclaration","scope":8043,"src":"3145:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8035,"name":"uint256","nodeType":"ElementaryTypeName","src":"3145:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8038,"mutability":"mutable","name":"riskScore","nameLocation":"3237:9:20","nodeType":"VariableDeclaration","scope":8043,"src":"3229:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8037,"name":"uint256","nodeType":"ElementaryTypeName","src":"3229:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8040,"mutability":"mutable","name":"lastHarvest","nameLocation":"3315:11:20","nodeType":"VariableDeclaration","scope":8043,"src":"3307:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8039,"name":"uint256","nodeType":"ElementaryTypeName","src":"3307:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8042,"mutability":"mutable","name":"active","nameLocation":"3383:6:20","nodeType":"VariableDeclaration","scope":8043,"src":"3378:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8041,"name":"bool","nodeType":"ElementaryTypeName","src":"3378:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"StrategyInfo","nameLocation":"2850:12:20","nodeType":"StructDefinition","scope":8169,"src":"2843:598:20","visibility":"public"},{"documentation":{"id":8044,"nodeType":"StructuredDocumentation","src":"4144:183:20","text":" @dev Deposits assets into the yield strategy\n @param amount The amount of assets to deposit\n @return shares The number of shares minted to the depositor"},"functionSelector":"b6b55f25","id":8051,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"4341:7:20","nodeType":"FunctionDefinition","parameters":{"id":8047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8046,"mutability":"mutable","name":"amount","nameLocation":"4357:6:20","nodeType":"VariableDeclaration","scope":8051,"src":"4349:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8045,"name":"uint256","nodeType":"ElementaryTypeName","src":"4349:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4348:16:20"},"returnParameters":{"id":8050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8049,"mutability":"mutable","name":"shares","nameLocation":"4391:6:20","nodeType":"VariableDeclaration","scope":8051,"src":"4383:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8048,"name":"uint256","nodeType":"ElementaryTypeName","src":"4383:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4382:16:20"},"scope":8169,"src":"4332:67:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":8052,"nodeType":"StructuredDocumentation","src":"4405:167:20","text":" @dev Withdraws assets from the yield strategy\n @param shares The number of shares to burn\n @return amount The amount of assets withdrawn"},"functionSelector":"2e1a7d4d","id":8059,"implemented":false,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"4586:8:20","nodeType":"FunctionDefinition","parameters":{"id":8055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8054,"mutability":"mutable","name":"shares","nameLocation":"4603:6:20","nodeType":"VariableDeclaration","scope":8059,"src":"4595:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8053,"name":"uint256","nodeType":"ElementaryTypeName","src":"4595:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4594:16:20"},"returnParameters":{"id":8058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8057,"mutability":"mutable","name":"amount","nameLocation":"4637:6:20","nodeType":"VariableDeclaration","scope":8059,"src":"4629:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8056,"name":"uint256","nodeType":"ElementaryTypeName","src":"4629:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4628:16:20"},"scope":8169,"src":"4577:68:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":8060,"nodeType":"StructuredDocumentation","src":"4651:190:20","text":" @dev Emergency withdrawal of all user funds (may incur penalties)\n @param user The address to withdraw funds for\n @return amount The amount of assets withdrawn"},"functionSelector":"6ff1c9bc","id":8067,"implemented":false,"kind":"function","modifiers":[],"name":"emergencyWithdraw","nameLocation":"4855:17:20","nodeType":"FunctionDefinition","parameters":{"id":8063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8062,"mutability":"mutable","name":"user","nameLocation":"4881:4:20","nodeType":"VariableDeclaration","scope":8067,"src":"4873:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8061,"name":"address","nodeType":"ElementaryTypeName","src":"4873:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4872:14:20"},"returnParameters":{"id":8066,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8065,"mutability":"mutable","name":"amount","nameLocation":"4913:6:20","nodeType":"VariableDeclaration","scope":8067,"src":"4905:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8064,"name":"uint256","nodeType":"ElementaryTypeName","src":"4905:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4904:16:20"},"scope":8169,"src":"4846:75:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":8068,"nodeType":"StructuredDocumentation","src":"5621:117:20","text":" @dev Calculates the current APY of the strategy\n @return apy The current APY in basis points"},"functionSelector":"962ca496","id":8073,"implemented":false,"kind":"function","modifiers":[],"name":"getCurrentAPY","nameLocation":"5752:13:20","nodeType":"FunctionDefinition","parameters":{"id":8069,"nodeType":"ParameterList","parameters":[],"src":"5765:2:20"},"returnParameters":{"id":8072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8071,"mutability":"mutable","name":"apy","nameLocation":"5799:3:20","nodeType":"VariableDeclaration","scope":8073,"src":"5791:11:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8070,"name":"uint256","nodeType":"ElementaryTypeName","src":"5791:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5790:13:20"},"scope":8169,"src":"5743:61:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8074,"nodeType":"StructuredDocumentation","src":"5810:163:20","text":" @dev Calculates yield generated for a specific user\n @param user The user address\n @return yieldAmount The amount of yield generated"},"functionSelector":"6f7c99d2","id":8081,"implemented":false,"kind":"function","modifiers":[],"name":"calculateUserYield","nameLocation":"5987:18:20","nodeType":"FunctionDefinition","parameters":{"id":8077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8076,"mutability":"mutable","name":"user","nameLocation":"6014:4:20","nodeType":"VariableDeclaration","scope":8081,"src":"6006:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8075,"name":"address","nodeType":"ElementaryTypeName","src":"6006:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6005:14:20"},"returnParameters":{"id":8080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8079,"mutability":"mutable","name":"yieldAmount","nameLocation":"6051:11:20","nodeType":"VariableDeclaration","scope":8081,"src":"6043:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8078,"name":"uint256","nodeType":"ElementaryTypeName","src":"6043:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6042:21:20"},"scope":8169,"src":"5978:86:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8082,"nodeType":"StructuredDocumentation","src":"6070:128:20","text":" @dev Calculates the total yield generated by the strategy\n @return totalYield The total yield generated"},"functionSelector":"39c1a8e8","id":8087,"implemented":false,"kind":"function","modifiers":[],"name":"getTotalYieldGenerated","nameLocation":"6212:22:20","nodeType":"FunctionDefinition","parameters":{"id":8083,"nodeType":"ParameterList","parameters":[],"src":"6234:2:20"},"returnParameters":{"id":8086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8085,"mutability":"mutable","name":"totalYield","nameLocation":"6268:10:20","nodeType":"VariableDeclaration","scope":8087,"src":"6260:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8084,"name":"uint256","nodeType":"ElementaryTypeName","src":"6260:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6259:20:20"},"scope":8169,"src":"6203:77:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8088,"nodeType":"StructuredDocumentation","src":"6286:127:20","text":" @dev Harvests yield from the underlying protocol\n @return yieldHarvested The amount of yield harvested"},"functionSelector":"e8d991d1","id":8093,"implemented":false,"kind":"function","modifiers":[],"name":"harvestYield","nameLocation":"6427:12:20","nodeType":"FunctionDefinition","parameters":{"id":8089,"nodeType":"ParameterList","parameters":[],"src":"6439:2:20"},"returnParameters":{"id":8092,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8091,"mutability":"mutable","name":"yieldHarvested","nameLocation":"6468:14:20","nodeType":"VariableDeclaration","scope":8093,"src":"6460:22:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8090,"name":"uint256","nodeType":"ElementaryTypeName","src":"6460:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6459:24:20"},"scope":8169,"src":"6418:66:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":8094,"nodeType":"StructuredDocumentation","src":"7184:145:20","text":" @dev Converts assets to shares\n @param assets The amount of assets\n @return shares The equivalent number of shares"},"functionSelector":"c6e6f592","id":8101,"implemented":false,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"7343:15:20","nodeType":"FunctionDefinition","parameters":{"id":8097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8096,"mutability":"mutable","name":"assets","nameLocation":"7367:6:20","nodeType":"VariableDeclaration","scope":8101,"src":"7359:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8095,"name":"uint256","nodeType":"ElementaryTypeName","src":"7359:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7358:16:20"},"returnParameters":{"id":8100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8099,"mutability":"mutable","name":"shares","nameLocation":"7406:6:20","nodeType":"VariableDeclaration","scope":8101,"src":"7398:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8098,"name":"uint256","nodeType":"ElementaryTypeName","src":"7398:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7397:16:20"},"scope":8169,"src":"7334:80:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8102,"nodeType":"StructuredDocumentation","src":"7420:145:20","text":" @dev Converts shares to assets\n @param shares The number of shares\n @return assets The equivalent amount of assets"},"functionSelector":"07a2d13a","id":8109,"implemented":false,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"7579:15:20","nodeType":"FunctionDefinition","parameters":{"id":8105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8104,"mutability":"mutable","name":"shares","nameLocation":"7603:6:20","nodeType":"VariableDeclaration","scope":8109,"src":"7595:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8103,"name":"uint256","nodeType":"ElementaryTypeName","src":"7595:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7594:16:20"},"returnParameters":{"id":8108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8107,"mutability":"mutable","name":"assets","nameLocation":"7642:6:20","nodeType":"VariableDeclaration","scope":8109,"src":"7634:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8106,"name":"uint256","nodeType":"ElementaryTypeName","src":"7634:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7633:16:20"},"scope":8169,"src":"7570:80:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8110,"nodeType":"StructuredDocumentation","src":"7656:137:20","text":" @dev Gets the user's share balance\n @param user The user address\n @return balance The user's share balance"},"functionSelector":"70a08231","id":8117,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"7807:9:20","nodeType":"FunctionDefinition","parameters":{"id":8113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8112,"mutability":"mutable","name":"user","nameLocation":"7825:4:20","nodeType":"VariableDeclaration","scope":8117,"src":"7817:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8111,"name":"address","nodeType":"ElementaryTypeName","src":"7817:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7816:14:20"},"returnParameters":{"id":8116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8115,"mutability":"mutable","name":"balance","nameLocation":"7862:7:20","nodeType":"VariableDeclaration","scope":8117,"src":"7854:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8114,"name":"uint256","nodeType":"ElementaryTypeName","src":"7854:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7853:17:20"},"scope":8169,"src":"7798:73:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8118,"nodeType":"StructuredDocumentation","src":"8574:115:20","text":" @dev Gets comprehensive strategy information\n @return info The strategy information struct"},"functionSelector":"9613092d","id":8124,"implemented":false,"kind":"function","modifiers":[],"name":"getStrategyInfo","nameLocation":"8703:15:20","nodeType":"FunctionDefinition","parameters":{"id":8119,"nodeType":"ParameterList","parameters":[],"src":"8718:2:20"},"returnParameters":{"id":8123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8122,"mutability":"mutable","name":"info","nameLocation":"8764:4:20","nodeType":"VariableDeclaration","scope":8124,"src":"8744:24:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$8043_memory_ptr","typeString":"struct IYieldStrategy.StrategyInfo"},"typeName":{"id":8121,"nodeType":"UserDefinedTypeName","pathNode":{"id":8120,"name":"StrategyInfo","nameLocations":["8744:12:20"],"nodeType":"IdentifierPath","referencedDeclaration":8043,"src":"8744:12:20"},"referencedDeclaration":8043,"src":"8744:12:20","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$8043_storage_ptr","typeString":"struct IYieldStrategy.StrategyInfo"}},"visibility":"internal"}],"src":"8743:26:20"},"scope":8169,"src":"8694:76:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8125,"nodeType":"StructuredDocumentation","src":"8776:127:20","text":" @dev Gets the underlying asset address\n @return asset The address of the underlying asset (e.g., USDC)"},"functionSelector":"38d52e0f","id":8130,"implemented":false,"kind":"function","modifiers":[],"name":"asset","nameLocation":"8917:5:20","nodeType":"FunctionDefinition","parameters":{"id":8126,"nodeType":"ParameterList","parameters":[],"src":"8922:2:20"},"returnParameters":{"id":8129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8128,"mutability":"mutable","name":"asset","nameLocation":"8956:5:20","nodeType":"VariableDeclaration","scope":8130,"src":"8948:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8127,"name":"address","nodeType":"ElementaryTypeName","src":"8948:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8947:15:20"},"scope":8169,"src":"8908:55:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8131,"nodeType":"StructuredDocumentation","src":"8969:138:20","text":" @dev Gets the total assets under management\n @return totalManagedAssets The total assets managed by this strategy"},"functionSelector":"01e1d114","id":8136,"implemented":false,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"9121:11:20","nodeType":"FunctionDefinition","parameters":{"id":8132,"nodeType":"ParameterList","parameters":[],"src":"9132:2:20"},"returnParameters":{"id":8135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8134,"mutability":"mutable","name":"totalManagedAssets","nameLocation":"9166:18:20","nodeType":"VariableDeclaration","scope":8136,"src":"9158:26:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8133,"name":"uint256","nodeType":"ElementaryTypeName","src":"9158:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9157:28:20"},"scope":8169,"src":"9112:74:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8137,"nodeType":"StructuredDocumentation","src":"9192:117:20","text":" @dev Gets the strategy's risk score\n @return risk The risk score from 1-10 (1 = lowest risk)"},"functionSelector":"2b35f739","id":8142,"implemented":false,"kind":"function","modifiers":[],"name":"getRiskScore","nameLocation":"9323:12:20","nodeType":"FunctionDefinition","parameters":{"id":8138,"nodeType":"ParameterList","parameters":[],"src":"9335:2:20"},"returnParameters":{"id":8141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8140,"mutability":"mutable","name":"risk","nameLocation":"9369:4:20","nodeType":"VariableDeclaration","scope":8142,"src":"9361:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8139,"name":"uint256","nodeType":"ElementaryTypeName","src":"9361:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9360:14:20"},"scope":8169,"src":"9314:61:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8143,"nodeType":"StructuredDocumentation","src":"10069:192:20","text":" @dev Gets historical performance data\n @param period The time period to look back (in seconds)\n @return performance The performance data for the specified period"},"functionSelector":"3fd18893","id":8150,"implemented":false,"kind":"function","modifiers":[],"name":"getPerformanceData","nameLocation":"10275:18:20","nodeType":"FunctionDefinition","parameters":{"id":8146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8145,"mutability":"mutable","name":"period","nameLocation":"10302:6:20","nodeType":"VariableDeclaration","scope":8150,"src":"10294:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8144,"name":"uint256","nodeType":"ElementaryTypeName","src":"10294:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10293:16:20"},"returnParameters":{"id":8149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8148,"mutability":"mutable","name":"performance","nameLocation":"10341:11:20","nodeType":"VariableDeclaration","scope":8150,"src":"10333:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8147,"name":"uint256","nodeType":"ElementaryTypeName","src":"10333:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10332:21:20"},"scope":8169,"src":"10266:88:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8151,"nodeType":"StructuredDocumentation","src":"10360:131:20","text":" @dev Checks if the strategy is profitable\n @return profitable Whether the strategy is currently profitable"},"functionSelector":"3612ddda","id":8156,"implemented":false,"kind":"function","modifiers":[],"name":"isProfitable","nameLocation":"10505:12:20","nodeType":"FunctionDefinition","parameters":{"id":8152,"nodeType":"ParameterList","parameters":[],"src":"10517:2:20"},"returnParameters":{"id":8155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8154,"mutability":"mutable","name":"profitable","nameLocation":"10548:10:20","nodeType":"VariableDeclaration","scope":8156,"src":"10543:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8153,"name":"bool","nodeType":"ElementaryTypeName","src":"10543:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"10542:17:20"},"scope":8169,"src":"10496:64:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8157,"nodeType":"StructuredDocumentation","src":"10566:145:20","text":" @dev Gets the maximum capacity of the strategy\n @return maxCapacity The maximum amount of assets the strategy can handle"},"functionSelector":"59b6a0c9","id":8162,"implemented":false,"kind":"function","modifiers":[],"name":"maxCapacity","nameLocation":"10725:11:20","nodeType":"FunctionDefinition","parameters":{"id":8158,"nodeType":"ParameterList","parameters":[],"src":"10736:2:20"},"returnParameters":{"id":8161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8160,"mutability":"mutable","name":"maxCapacity","nameLocation":"10770:11:20","nodeType":"VariableDeclaration","scope":8162,"src":"10762:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8159,"name":"uint256","nodeType":"ElementaryTypeName","src":"10762:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10761:21:20"},"scope":8169,"src":"10716:67:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":8163,"nodeType":"StructuredDocumentation","src":"10789:136:20","text":" @dev Gets the current utilization rate\n @return utilization The utilization rate as a percentage (basis points)"},"functionSelector":"6c321c8a","id":8168,"implemented":false,"kind":"function","modifiers":[],"name":"utilizationRate","nameLocation":"10939:15:20","nodeType":"FunctionDefinition","parameters":{"id":8164,"nodeType":"ParameterList","parameters":[],"src":"10954:2:20"},"returnParameters":{"id":8167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8166,"mutability":"mutable","name":"utilization","nameLocation":"10988:11:20","nodeType":"VariableDeclaration","scope":8168,"src":"10980:19:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8165,"name":"uint256","nodeType":"ElementaryTypeName","src":"10980:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10979:21:20"},"scope":8169,"src":"10930:71:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8170,"src":"262:10741:20","usedErrors":[],"usedEvents":[8000,8009,8016,8025]}],"src":"32:10971:20"},"id":20},"src/mocks/MockERC20.sol":{"ast":{"absolutePath":"src/mocks/MockERC20.sol","exportedSymbols":{"Context":[2023],"ERC20":[1148],"IERC20":[1226],"IERC20Metadata":[1251],"MockERC20":[8231]},"id":8232,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8171,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":8172,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8232,"sourceUnit":1149,"src":"58:55:21","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":8174,"name":"ERC20","nameLocations":["211:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":1148,"src":"211:5:21"},"id":8175,"nodeType":"InheritanceSpecifier","src":"211:5:21"}],"canonicalName":"MockERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":8173,"nodeType":"StructuredDocumentation","src":"115:73:21","text":" @title MockERC20\n @dev Mock ERC20 token for testing purposes"},"fullyImplemented":true,"id":8231,"linearizedBaseContracts":[8231,1148,1251,1226,2023],"name":"MockERC20","nameLocation":"198:9:21","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":8177,"mutability":"mutable","name":"_customDecimals","nameLocation":"237:15:21","nodeType":"VariableDeclaration","scope":8231,"src":"223:29:21","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8176,"name":"uint8","nodeType":"ElementaryTypeName","src":"223:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"body":{"id":8194,"nodeType":"Block","src":"380:44:21","statements":[{"expression":{"id":8192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8190,"name":"_customDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8177,"src":"390:15:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8191,"name":"decimals_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8183,"src":"408:9:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"390:27:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":8193,"nodeType":"ExpressionStatement","src":"390:27:21"}]},"id":8195,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":8186,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8179,"src":"366:4:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":8187,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8181,"src":"372:6:21","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":8188,"kind":"baseConstructorSpecifier","modifierName":{"id":8185,"name":"ERC20","nameLocations":["360:5:21"],"nodeType":"IdentifierPath","referencedDeclaration":1148,"src":"360:5:21"},"nodeType":"ModifierInvocation","src":"360:19:21"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8179,"mutability":"mutable","name":"name","nameLocation":"294:4:21","nodeType":"VariableDeclaration","scope":8195,"src":"280:18:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8178,"name":"string","nodeType":"ElementaryTypeName","src":"280:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8181,"mutability":"mutable","name":"symbol","nameLocation":"322:6:21","nodeType":"VariableDeclaration","scope":8195,"src":"308:20:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":8180,"name":"string","nodeType":"ElementaryTypeName","src":"308:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":8183,"mutability":"mutable","name":"decimals_","nameLocation":"344:9:21","nodeType":"VariableDeclaration","scope":8195,"src":"338:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8182,"name":"uint8","nodeType":"ElementaryTypeName","src":"338:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"270:89:21"},"returnParameters":{"id":8189,"nodeType":"ParameterList","parameters":[],"src":"380:0:21"},"scope":8231,"src":"259:165:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[636],"body":{"id":8203,"nodeType":"Block","src":"495:39:21","statements":[{"expression":{"id":8201,"name":"_customDecimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8177,"src":"512:15:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":8200,"id":8202,"nodeType":"Return","src":"505:22:21"}]},"functionSelector":"313ce567","id":8204,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"439:8:21","nodeType":"FunctionDefinition","overrides":{"id":8197,"nodeType":"OverrideSpecifier","overrides":[],"src":"470:8:21"},"parameters":{"id":8196,"nodeType":"ParameterList","parameters":[],"src":"447:2:21"},"returnParameters":{"id":8200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8204,"src":"488:5:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":8198,"name":"uint8","nodeType":"ElementaryTypeName","src":"488:5:21","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"487:7:21"},"scope":8231,"src":"430:104:21","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":8216,"nodeType":"Block","src":"589:34:21","statements":[{"expression":{"arguments":[{"id":8212,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8206,"src":"605:2:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8213,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8208,"src":"609:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8211,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":965,"src":"599:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":8214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"599:17:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8215,"nodeType":"ExpressionStatement","src":"599:17:21"}]},"functionSelector":"40c10f19","id":8217,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"549:4:21","nodeType":"FunctionDefinition","parameters":{"id":8209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8206,"mutability":"mutable","name":"to","nameLocation":"562:2:21","nodeType":"VariableDeclaration","scope":8217,"src":"554:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8205,"name":"address","nodeType":"ElementaryTypeName","src":"554:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8208,"mutability":"mutable","name":"amount","nameLocation":"574:6:21","nodeType":"VariableDeclaration","scope":8217,"src":"566:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8207,"name":"uint256","nodeType":"ElementaryTypeName","src":"566:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"553:28:21"},"returnParameters":{"id":8210,"nodeType":"ParameterList","parameters":[],"src":"589:0:21"},"scope":8231,"src":"540:83:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":8229,"nodeType":"Block","src":"680:36:21","statements":[{"expression":{"arguments":[{"id":8225,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8219,"src":"696:4:21","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8226,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8221,"src":"702:6:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8224,"name":"_burn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"690:5:21","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":8227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"690:19:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8228,"nodeType":"ExpressionStatement","src":"690:19:21"}]},"functionSelector":"9dc29fac","id":8230,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"638:4:21","nodeType":"FunctionDefinition","parameters":{"id":8222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8219,"mutability":"mutable","name":"from","nameLocation":"651:4:21","nodeType":"VariableDeclaration","scope":8230,"src":"643:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8218,"name":"address","nodeType":"ElementaryTypeName","src":"643:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":8221,"mutability":"mutable","name":"amount","nameLocation":"665:6:21","nodeType":"VariableDeclaration","scope":8230,"src":"657:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8220,"name":"uint256","nodeType":"ElementaryTypeName","src":"657:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"642:30:21"},"returnParameters":{"id":8223,"nodeType":"ParameterList","parameters":[],"src":"680:0:21"},"scope":8231,"src":"629:87:21","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":8232,"src":"189:529:21","usedErrors":[],"usedEvents":[1160,1169]}],"src":"32:686:21"},"id":21},"src/mocks/MockYieldStrategy.sol":{"ast":{"absolutePath":"src/mocks/MockYieldStrategy.sol","exportedSymbols":{"Address":[1993],"IERC20":[1226],"IERC20Permit":[1287],"IYieldStrategy":[8169],"MockYieldStrategy":[8663],"SafeERC20":[1663]},"id":8664,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":8233,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"src/interfaces/IYieldStrategy.sol","file":"../interfaces/IYieldStrategy.sol","id":8234,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8664,"sourceUnit":8170,"src":"58:42:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":8235,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8664,"sourceUnit":1227,"src":"101:56:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":8236,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":8664,"sourceUnit":1664,"src":"158:65:22","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":8238,"name":"IYieldStrategy","nameLocations":["340:14:22"],"nodeType":"IdentifierPath","referencedDeclaration":8169,"src":"340:14:22"},"id":8239,"nodeType":"InheritanceSpecifier","src":"340:14:22"}],"canonicalName":"MockYieldStrategy","contractDependencies":[],"contractKind":"contract","documentation":{"id":8237,"nodeType":"StructuredDocumentation","src":"225:84:22","text":" @title MockYieldStrategy\n @dev Mock yield strategy for testing purposes"},"fullyImplemented":true,"id":8663,"linearizedBaseContracts":[8663,8169],"name":"MockYieldStrategy","nameLocation":"319:17:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":8243,"libraryName":{"id":8240,"name":"SafeERC20","nameLocations":["367:9:22"],"nodeType":"IdentifierPath","referencedDeclaration":1663,"src":"367:9:22"},"nodeType":"UsingForDirective","src":"361:27:22","typeName":{"id":8242,"nodeType":"UserDefinedTypeName","pathNode":{"id":8241,"name":"IERC20","nameLocations":["381:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1226,"src":"381:6:22"},"referencedDeclaration":1226,"src":"381:6:22","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}}},{"baseFunctions":[8130],"constant":false,"functionSelector":"38d52e0f","id":8246,"mutability":"immutable","name":"asset","nameLocation":"428:5:22","nodeType":"VariableDeclaration","overrides":{"id":8245,"nodeType":"OverrideSpecifier","overrides":[],"src":"419:8:22"},"scope":8663,"src":"394:39:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8244,"name":"address","nodeType":"ElementaryTypeName","src":"394:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"id":8248,"mutability":"mutable","name":"_totalAssets","nameLocation":"455:12:22","nodeType":"VariableDeclaration","scope":8663,"src":"439:28:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8247,"name":"uint256","nodeType":"ElementaryTypeName","src":"439:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":8250,"mutability":"mutable","name":"_totalShares","nameLocation":"489:12:22","nodeType":"VariableDeclaration","scope":8663,"src":"473:28:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8249,"name":"uint256","nodeType":"ElementaryTypeName","src":"473:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":8252,"mutability":"mutable","name":"_userYield","nameLocation":"523:10:22","nodeType":"VariableDeclaration","scope":8663,"src":"507:26:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8251,"name":"uint256","nodeType":"ElementaryTypeName","src":"507:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":8255,"mutability":"mutable","name":"_currentAPY","nameLocation":"555:11:22","nodeType":"VariableDeclaration","scope":8663,"src":"539:33:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8253,"name":"uint256","nodeType":"ElementaryTypeName","src":"539:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"343030","id":8254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"569:3:22","typeDescriptions":{"typeIdentifier":"t_rational_400_by_1","typeString":"int_const 400"},"value":"400"},"visibility":"private"},{"constant":false,"id":8258,"mutability":"mutable","name":"_shouldFail","nameLocation":"605:11:22","nodeType":"VariableDeclaration","scope":8663,"src":"592:32:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8256,"name":"bool","nodeType":"ElementaryTypeName","src":"592:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"value":{"hexValue":"66616c7365","id":8257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"619:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"visibility":"private"},{"constant":false,"id":8262,"mutability":"mutable","name":"_balances","nameLocation":"667:9:22","nodeType":"VariableDeclaration","scope":8663,"src":"631:45:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":8261,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":8259,"name":"address","nodeType":"ElementaryTypeName","src":"639:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"631:27:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":8260,"name":"uint256","nodeType":"ElementaryTypeName","src":"650:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"body":{"id":8271,"nodeType":"Block","src":"711:31:22","statements":[{"expression":{"id":8269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8267,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"721:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8268,"name":"_asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8264,"src":"729:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"721:14:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":8270,"nodeType":"ExpressionStatement","src":"721:14:22"}]},"id":8272,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":8265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8264,"mutability":"mutable","name":"_asset","nameLocation":"703:6:22","nodeType":"VariableDeclaration","scope":8272,"src":"695:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8263,"name":"address","nodeType":"ElementaryTypeName","src":"695:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"694:16:22"},"returnParameters":{"id":8266,"nodeType":"ParameterList","parameters":[],"src":"711:0:22"},"scope":8663,"src":"683:59:22","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":8281,"nodeType":"Block","src":"824:36:22","statements":[{"expression":{"id":8279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8277,"name":"_userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8252,"src":"834:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8278,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8274,"src":"847:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"834:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8280,"nodeType":"ExpressionStatement","src":"834:19:22"}]},"functionSelector":"8b66268c","id":8282,"implemented":true,"kind":"function","modifiers":[],"name":"setUserYield","nameLocation":"786:12:22","nodeType":"FunctionDefinition","parameters":{"id":8275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8274,"mutability":"mutable","name":"amount","nameLocation":"807:6:22","nodeType":"VariableDeclaration","scope":8282,"src":"799:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8273,"name":"uint256","nodeType":"ElementaryTypeName","src":"799:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"798:16:22"},"returnParameters":{"id":8276,"nodeType":"ParameterList","parameters":[],"src":"824:0:22"},"scope":8663,"src":"777:83:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8291,"nodeType":"Block","src":"915:41:22","statements":[{"expression":{"id":8289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8287,"name":"_shouldFail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8258,"src":"925:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8288,"name":"shouldFail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8284,"src":"939:10:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"925:24:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8290,"nodeType":"ExpressionStatement","src":"925:24:22"}]},"functionSelector":"a5aa5c12","id":8292,"implemented":true,"kind":"function","modifiers":[],"name":"setShouldFail","nameLocation":"875:13:22","nodeType":"FunctionDefinition","parameters":{"id":8285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8284,"mutability":"mutable","name":"shouldFail","nameLocation":"894:10:22","nodeType":"VariableDeclaration","scope":8292,"src":"889:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8283,"name":"bool","nodeType":"ElementaryTypeName","src":"889:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"888:17:22"},"returnParameters":{"id":8286,"nodeType":"ParameterList","parameters":[],"src":"915:0:22"},"scope":8663,"src":"866:90:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":8301,"nodeType":"Block","src":"1007:34:22","statements":[{"expression":{"id":8299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8297,"name":"_currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8255,"src":"1017:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":8298,"name":"apy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8294,"src":"1031:3:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1017:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8300,"nodeType":"ExpressionStatement","src":"1017:17:22"}]},"functionSelector":"39a24333","id":8302,"implemented":true,"kind":"function","modifiers":[],"name":"setCurrentAPY","nameLocation":"971:13:22","nodeType":"FunctionDefinition","parameters":{"id":8295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8294,"mutability":"mutable","name":"apy","nameLocation":"993:3:22","nodeType":"VariableDeclaration","scope":8302,"src":"985:11:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8293,"name":"uint256","nodeType":"ElementaryTypeName","src":"985:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"984:13:22"},"returnParameters":{"id":8296,"nodeType":"ParameterList","parameters":[],"src":"1007:0:22"},"scope":8663,"src":"962:79:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8051],"body":{"id":8353,"nodeType":"Block","src":"1160:312:22","statements":[{"expression":{"arguments":[{"expression":{"id":8314,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1201:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1205:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1201:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":8318,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1221:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_MockYieldStrategy_$8663","typeString":"contract MockYieldStrategy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_MockYieldStrategy_$8663","typeString":"contract MockYieldStrategy"}],"id":8317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1213:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":8316,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:22","typeDescriptions":{}}},"id":8319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1213:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8320,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8304,"src":"1228:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8311,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"1177:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8310,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"1170:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":8312,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":8313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1184:16:22","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":1347,"src":"1170:30:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":8321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1170:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8322,"nodeType":"ExpressionStatement","src":"1170:65:22"},{"expression":{"id":8327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8323,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8308,"src":"1254:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8325,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8304,"src":"1279:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8324,"name":"convertToShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8535,"src":"1263:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":8326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1263:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1254:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8328,"nodeType":"ExpressionStatement","src":"1254:32:22"},{"expression":{"id":8334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8329,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"1296:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8332,"indexExpression":{"expression":{"id":8330,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1306:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1310:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1306:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1296:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":8333,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8308,"src":"1321:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1296:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8335,"nodeType":"ExpressionStatement","src":"1296:31:22"},{"expression":{"id":8338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8336,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"1337:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":8337,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8308,"src":"1353:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1337:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8339,"nodeType":"ExpressionStatement","src":"1337:22:22"},{"expression":{"id":8342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8340,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"1369:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":8341,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8304,"src":"1385:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1369:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8343,"nodeType":"ExpressionStatement","src":"1369:22:22"},{"eventCall":{"arguments":[{"expression":{"id":8345,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1415:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1419:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1415:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8347,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8304,"src":"1427:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8348,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8308,"src":"1435:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8344,"name":"Deposit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8000,"src":"1407:7:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":8349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1407:35:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8350,"nodeType":"EmitStatement","src":"1402:40:22"},{"expression":{"id":8351,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8308,"src":"1459:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8309,"id":8352,"nodeType":"Return","src":"1452:13:22"}]},"functionSelector":"b6b55f25","id":8354,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"1093:7:22","nodeType":"FunctionDefinition","overrides":{"id":8306,"nodeType":"OverrideSpecifier","overrides":[],"src":"1126:8:22"},"parameters":{"id":8305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8304,"mutability":"mutable","name":"amount","nameLocation":"1109:6:22","nodeType":"VariableDeclaration","scope":8354,"src":"1101:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8303,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1100:16:22"},"returnParameters":{"id":8309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8308,"mutability":"mutable","name":"shares","nameLocation":"1152:6:22","nodeType":"VariableDeclaration","scope":8354,"src":"1144:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8307,"name":"uint256","nodeType":"ElementaryTypeName","src":"1144:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1143:16:22"},"scope":8663,"src":"1084:388:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8059],"body":{"id":8411,"nodeType":"Block","src":"1555:370:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8368,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":8363,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"1573:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8366,"indexExpression":{"expression":{"id":8364,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1583:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1587:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1583:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1573:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":8367,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"1598:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1573:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e73756666696369656e7420736861726573","id":8369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1606:21:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_043f4b20be62bb0d39adad142dcc6d5a35d567a4072048f22c528cf051db2665","typeString":"literal_string \"Insufficient shares\""},"value":"Insufficient shares"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_043f4b20be62bb0d39adad142dcc6d5a35d567a4072048f22c528cf051db2665","typeString":"literal_string \"Insufficient shares\""}],"id":8362,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1565:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":8370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1565:63:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8371,"nodeType":"ExpressionStatement","src":"1565:63:22"},{"expression":{"id":8376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8372,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8360,"src":"1647:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8374,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"1672:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8373,"name":"convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8557,"src":"1656:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":8375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1656:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1647:32:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8377,"nodeType":"ExpressionStatement","src":"1647:32:22"},{"expression":{"id":8383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8378,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"1689:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8381,"indexExpression":{"expression":{"id":8379,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1699:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1703:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1699:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1689:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":8382,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"1714:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1689:31:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8384,"nodeType":"ExpressionStatement","src":"1689:31:22"},{"expression":{"id":8387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8385,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"1730:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":8386,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"1746:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1730:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8388,"nodeType":"ExpressionStatement","src":"1730:22:22"},{"expression":{"id":8391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8389,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"1762:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":8390,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8360,"src":"1778:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1762:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8392,"nodeType":"ExpressionStatement","src":"1762:22:22"},{"expression":{"arguments":[{"expression":{"id":8397,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1822:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1826:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1822:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8399,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8360,"src":"1834:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8394,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"1802:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8393,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"1795:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":8395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1795:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":8396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1809:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"1795:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":8400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1795:46:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8401,"nodeType":"ExpressionStatement","src":"1795:46:22"},{"eventCall":{"arguments":[{"expression":{"id":8403,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1868:3:22","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":8404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1872:6:22","memberName":"sender","nodeType":"MemberAccess","src":"1868:10:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8405,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8360,"src":"1880:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8406,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8356,"src":"1888:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8402,"name":"Withdrawal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8009,"src":"1857:10:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":8407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:38:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8408,"nodeType":"EmitStatement","src":"1852:43:22"},{"expression":{"id":8409,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8360,"src":"1912:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8361,"id":8410,"nodeType":"Return","src":"1905:13:22"}]},"functionSelector":"2e1a7d4d","id":8412,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1487:8:22","nodeType":"FunctionDefinition","overrides":{"id":8358,"nodeType":"OverrideSpecifier","overrides":[],"src":"1521:8:22"},"parameters":{"id":8357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8356,"mutability":"mutable","name":"shares","nameLocation":"1504:6:22","nodeType":"VariableDeclaration","scope":8412,"src":"1496:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8355,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:16:22"},"returnParameters":{"id":8361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8360,"mutability":"mutable","name":"amount","nameLocation":"1547:6:22","nodeType":"VariableDeclaration","scope":8412,"src":"1539:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8359,"name":"uint256","nodeType":"ElementaryTypeName","src":"1539:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1538:16:22"},"scope":8663,"src":"1478:447:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8067],"body":{"id":8462,"nodeType":"Block","src":"2015:310:22","statements":[{"assignments":[8421],"declarations":[{"constant":false,"id":8421,"mutability":"mutable","name":"userShares","nameLocation":"2033:10:22","nodeType":"VariableDeclaration","scope":8462,"src":"2025:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8420,"name":"uint256","nodeType":"ElementaryTypeName","src":"2025:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":8425,"initialValue":{"baseExpression":{"id":8422,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"2046:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8424,"indexExpression":{"id":8423,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"2056:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2046:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2025:36:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8426,"name":"userShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8421,"src":"2075:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2089:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2075:15:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8431,"nodeType":"IfStatement","src":"2071:29:22","trueBody":{"expression":{"hexValue":"30","id":8429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2099:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":8419,"id":8430,"nodeType":"Return","src":"2092:8:22"}},{"expression":{"id":8436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8432,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8418,"src":"2111:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":8434,"name":"userShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8421,"src":"2136:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8433,"name":"convertToAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8557,"src":"2120:15:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":8435,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2120:27:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2111:36:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8437,"nodeType":"ExpressionStatement","src":"2111:36:22"},{"expression":{"id":8442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":8438,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"2157:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8440,"indexExpression":{"id":8439,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"2167:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2157:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":8441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2175:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2157:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8443,"nodeType":"ExpressionStatement","src":"2157:19:22"},{"expression":{"id":8446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8444,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"2186:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":8445,"name":"userShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8421,"src":"2202:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2186:26:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8447,"nodeType":"ExpressionStatement","src":"2186:26:22"},{"expression":{"id":8450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":8448,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"2222:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":8449,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8418,"src":"2238:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2222:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":8451,"nodeType":"ExpressionStatement","src":"2222:22:22"},{"expression":{"arguments":[{"id":8456,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8414,"src":"2282:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":8457,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8418,"src":"2288:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"id":8453,"name":"asset","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8246,"src":"2262:5:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":8452,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"2255:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1226_$","typeString":"type(contract IERC20)"}},"id":8454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2255:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$1226","typeString":"contract IERC20"}},"id":8455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2269:12:22","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":1320,"src":"2255:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$1226_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$1226_$","typeString":"function (contract IERC20,address,uint256)"}},"id":8458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2255:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8459,"nodeType":"ExpressionStatement","src":"2255:40:22"},{"expression":{"id":8460,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8418,"src":"2312:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8419,"id":8461,"nodeType":"Return","src":"2305:13:22"}]},"functionSelector":"6ff1c9bc","id":8463,"implemented":true,"kind":"function","modifiers":[],"name":"emergencyWithdraw","nameLocation":"1940:17:22","nodeType":"FunctionDefinition","overrides":{"id":8416,"nodeType":"OverrideSpecifier","overrides":[],"src":"1981:8:22"},"parameters":{"id":8415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8414,"mutability":"mutable","name":"user","nameLocation":"1966:4:22","nodeType":"VariableDeclaration","scope":8463,"src":"1958:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8413,"name":"address","nodeType":"ElementaryTypeName","src":"1958:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1957:14:22"},"returnParameters":{"id":8419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8418,"mutability":"mutable","name":"amount","nameLocation":"2007:6:22","nodeType":"VariableDeclaration","scope":8463,"src":"1999:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8417,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1998:16:22"},"scope":8663,"src":"1931:394:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8073],"body":{"id":8471,"nodeType":"Block","src":"2397:35:22","statements":[{"expression":{"id":8469,"name":"_currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8255,"src":"2414:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8468,"id":8470,"nodeType":"Return","src":"2407:18:22"}]},"functionSelector":"962ca496","id":8472,"implemented":true,"kind":"function","modifiers":[],"name":"getCurrentAPY","nameLocation":"2340:13:22","nodeType":"FunctionDefinition","overrides":{"id":8465,"nodeType":"OverrideSpecifier","overrides":[],"src":"2370:8:22"},"parameters":{"id":8464,"nodeType":"ParameterList","parameters":[],"src":"2353:2:22"},"returnParameters":{"id":8468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8467,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8472,"src":"2388:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8466,"name":"uint256","nodeType":"ElementaryTypeName","src":"2388:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2387:9:22"},"scope":8663,"src":"2331:101:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8081],"body":{"id":8489,"nodeType":"Block","src":"2521:116:22","statements":[{"condition":{"id":8480,"name":"_shouldFail","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8258,"src":"2535:11:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8486,"nodeType":"IfStatement","src":"2531:73:22","trueBody":{"id":8485,"nodeType":"Block","src":"2548:56:22","statements":[{"expression":{"arguments":[{"hexValue":"4d6f636b207374726174656779206661696c757265","id":8482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2569:23:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_7284f7fc0181ca6b034b3a87ee90ece795f4ad76e61a44e5e26e2342f0754a9c","typeString":"literal_string \"Mock strategy failure\""},"value":"Mock strategy failure"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7284f7fc0181ca6b034b3a87ee90ece795f4ad76e61a44e5e26e2342f0754a9c","typeString":"literal_string \"Mock strategy failure\""}],"id":8481,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2562:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":8483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2562:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8484,"nodeType":"ExpressionStatement","src":"2562:31:22"}]}},{"expression":{"id":8487,"name":"_userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8252,"src":"2620:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8479,"id":8488,"nodeType":"Return","src":"2613:17:22"}]},"functionSelector":"6f7c99d2","id":8490,"implemented":true,"kind":"function","modifiers":[],"name":"calculateUserYield","nameLocation":"2447:18:22","nodeType":"FunctionDefinition","overrides":{"id":8476,"nodeType":"OverrideSpecifier","overrides":[],"src":"2494:8:22"},"parameters":{"id":8475,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8474,"mutability":"mutable","name":"user","nameLocation":"2474:4:22","nodeType":"VariableDeclaration","scope":8490,"src":"2466:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8473,"name":"address","nodeType":"ElementaryTypeName","src":"2466:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2465:14:22"},"returnParameters":{"id":8479,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8478,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8490,"src":"2512:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8477,"name":"uint256","nodeType":"ElementaryTypeName","src":"2512:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2511:9:22"},"scope":8663,"src":"2438:199:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8087],"body":{"id":8498,"nodeType":"Block","src":"2718:34:22","statements":[{"expression":{"id":8496,"name":"_userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8252,"src":"2735:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8495,"id":8497,"nodeType":"Return","src":"2728:17:22"}]},"functionSelector":"39c1a8e8","id":8499,"implemented":true,"kind":"function","modifiers":[],"name":"getTotalYieldGenerated","nameLocation":"2652:22:22","nodeType":"FunctionDefinition","overrides":{"id":8492,"nodeType":"OverrideSpecifier","overrides":[],"src":"2691:8:22"},"parameters":{"id":8491,"nodeType":"ParameterList","parameters":[],"src":"2674:2:22"},"returnParameters":{"id":8495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8494,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8499,"src":"2709:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8493,"name":"uint256","nodeType":"ElementaryTypeName","src":"2709:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2708:9:22"},"scope":8663,"src":"2643:109:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8093],"body":{"id":8512,"nodeType":"Block","src":"2818:89:22","statements":[{"eventCall":{"arguments":[{"id":8506,"name":"_userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8252,"src":"2848:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8507,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"2860:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":8505,"name":"YieldHarvested","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8016,"src":"2833:14:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256)"}},"id":8508,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2833:40:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":8509,"nodeType":"EmitStatement","src":"2828:45:22"},{"expression":{"id":8510,"name":"_userYield","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8252,"src":"2890:10:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8504,"id":8511,"nodeType":"Return","src":"2883:17:22"}]},"functionSelector":"e8d991d1","id":8513,"implemented":true,"kind":"function","modifiers":[],"name":"harvestYield","nameLocation":"2767:12:22","nodeType":"FunctionDefinition","overrides":{"id":8501,"nodeType":"OverrideSpecifier","overrides":[],"src":"2791:8:22"},"parameters":{"id":8500,"nodeType":"ParameterList","parameters":[],"src":"2779:2:22"},"returnParameters":{"id":8504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8513,"src":"2809:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8502,"name":"uint256","nodeType":"ElementaryTypeName","src":"2809:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2808:9:22"},"scope":8663,"src":"2758:149:22","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[8101],"body":{"id":8534,"nodeType":"Block","src":"2993:108:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8521,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"3007:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8522,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3023:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3007:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8526,"nodeType":"IfStatement","src":"3003:36:22","trueBody":{"expression":{"id":8524,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8515,"src":"3033:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8520,"id":8525,"nodeType":"Return","src":"3026:13:22"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8527,"name":"assets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8515,"src":"3057:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":8528,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"3066:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3057:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":8530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3056:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":8531,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"3082:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3056:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8520,"id":8533,"nodeType":"Return","src":"3049:45:22"}]},"functionSelector":"c6e6f592","id":8535,"implemented":true,"kind":"function","modifiers":[],"name":"convertToShares","nameLocation":"2922:15:22","nodeType":"FunctionDefinition","overrides":{"id":8517,"nodeType":"OverrideSpecifier","overrides":[],"src":"2966:8:22"},"parameters":{"id":8516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8515,"mutability":"mutable","name":"assets","nameLocation":"2946:6:22","nodeType":"VariableDeclaration","scope":8535,"src":"2938:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8514,"name":"uint256","nodeType":"ElementaryTypeName","src":"2938:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2937:16:22"},"returnParameters":{"id":8520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8535,"src":"2984:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8518,"name":"uint256","nodeType":"ElementaryTypeName","src":"2984:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2983:9:22"},"scope":8663,"src":"2913:188:22","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[8109],"body":{"id":8556,"nodeType":"Block","src":"3187:108:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8543,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"3201:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":8544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3217:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3201:17:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":8548,"nodeType":"IfStatement","src":"3197:36:22","trueBody":{"expression":{"id":8546,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8537,"src":"3227:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8542,"id":8547,"nodeType":"Return","src":"3220:13:22"}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8549,"name":"shares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8537,"src":"3251:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":8550,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"3260:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3251:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":8552,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3250:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":8553,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"3276:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3250:38:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8542,"id":8555,"nodeType":"Return","src":"3243:45:22"}]},"functionSelector":"07a2d13a","id":8557,"implemented":true,"kind":"function","modifiers":[],"name":"convertToAssets","nameLocation":"3116:15:22","nodeType":"FunctionDefinition","overrides":{"id":8539,"nodeType":"OverrideSpecifier","overrides":[],"src":"3160:8:22"},"parameters":{"id":8538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8537,"mutability":"mutable","name":"shares","nameLocation":"3140:6:22","nodeType":"VariableDeclaration","scope":8557,"src":"3132:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8536,"name":"uint256","nodeType":"ElementaryTypeName","src":"3132:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3131:16:22"},"returnParameters":{"id":8542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8541,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8557,"src":"3178:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8540,"name":"uint256","nodeType":"ElementaryTypeName","src":"3178:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3177:9:22"},"scope":8663,"src":"3107:188:22","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[8117],"body":{"id":8569,"nodeType":"Block","src":"3375:39:22","statements":[{"expression":{"baseExpression":{"id":8565,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8262,"src":"3392:9:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":8567,"indexExpression":{"id":8566,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8559,"src":"3402:4:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3392:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8564,"id":8568,"nodeType":"Return","src":"3385:22:22"}]},"functionSelector":"70a08231","id":8570,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3310:9:22","nodeType":"FunctionDefinition","overrides":{"id":8561,"nodeType":"OverrideSpecifier","overrides":[],"src":"3348:8:22"},"parameters":{"id":8560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8559,"mutability":"mutable","name":"user","nameLocation":"3328:4:22","nodeType":"VariableDeclaration","scope":8570,"src":"3320:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8558,"name":"address","nodeType":"ElementaryTypeName","src":"3320:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3319:14:22"},"returnParameters":{"id":8564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8563,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8570,"src":"3366:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8562,"name":"uint256","nodeType":"ElementaryTypeName","src":"3366:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3365:9:22"},"scope":8663,"src":"3301:113:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8124],"body":{"id":8589,"nodeType":"Block","src":"3500:352:22","statements":[{"expression":{"arguments":[{"hexValue":"4d6f636b205374726174656779","id":8578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3550:15:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_642b64463632331d7348260a6e8630d521deef2c25a777824803b0f63b950e8c","typeString":"literal_string \"Mock Strategy\""},"value":"Mock Strategy"},{"hexValue":"4d6f636b207969656c6420737472617465677920666f722074657374696e67","id":8579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3592:33:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_d2c9f6a1ee48cab39435e821deccc8e289cf073b2afae7caca337dc07ccf9755","typeString":"literal_string \"Mock yield strategy for testing\""},"value":"Mock yield strategy for testing"},{"id":8580,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"3652:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8581,"name":"_totalShares","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8250,"src":"3691:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":8582,"name":"_currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8255,"src":"3729:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":8583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3765:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"expression":{"id":8584,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"3793:5:22","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":8585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3799:9:22","memberName":"timestamp","nodeType":"MemberAccess","src":"3793:15:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"74727565","id":8586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3830:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_642b64463632331d7348260a6e8630d521deef2c25a777824803b0f63b950e8c","typeString":"literal_string \"Mock Strategy\""},{"typeIdentifier":"t_stringliteral_d2c9f6a1ee48cab39435e821deccc8e289cf073b2afae7caca337dc07ccf9755","typeString":"literal_string \"Mock yield strategy for testing\""},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":8577,"name":"StrategyInfo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8043,"src":"3517:12:22","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_StrategyInfo_$8043_storage_ptr_$","typeString":"type(struct IYieldStrategy.StrategyInfo storage pointer)"}},"id":8587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["3544:4:22","3579:11:22","3639:11:22","3678:11:22","3717:10:22","3754:9:22","3780:11:22","3822:6:22"],"names":["name","description","totalAssets","totalShares","currentAPY","riskScore","lastHarvest","active"],"nodeType":"FunctionCall","src":"3517:328:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$8043_memory_ptr","typeString":"struct IYieldStrategy.StrategyInfo memory"}},"functionReturnParameters":8576,"id":8588,"nodeType":"Return","src":"3510:335:22"}]},"functionSelector":"9613092d","id":8590,"implemented":true,"kind":"function","modifiers":[],"name":"getStrategyInfo","nameLocation":"3429:15:22","nodeType":"FunctionDefinition","overrides":{"id":8572,"nodeType":"OverrideSpecifier","overrides":[],"src":"3461:8:22"},"parameters":{"id":8571,"nodeType":"ParameterList","parameters":[],"src":"3444:2:22"},"returnParameters":{"id":8576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8590,"src":"3479:19:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$8043_memory_ptr","typeString":"struct IYieldStrategy.StrategyInfo"},"typeName":{"id":8574,"nodeType":"UserDefinedTypeName","pathNode":{"id":8573,"name":"StrategyInfo","nameLocations":["3479:12:22"],"nodeType":"IdentifierPath","referencedDeclaration":8043,"src":"3479:12:22"},"referencedDeclaration":8043,"src":"3479:12:22","typeDescriptions":{"typeIdentifier":"t_struct$_StrategyInfo_$8043_storage_ptr","typeString":"struct IYieldStrategy.StrategyInfo"}},"visibility":"internal"}],"src":"3478:21:22"},"scope":8663,"src":"3420:432:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8136],"body":{"id":8598,"nodeType":"Block","src":"3922:36:22","statements":[{"expression":{"id":8596,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"3939:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8595,"id":8597,"nodeType":"Return","src":"3932:19:22"}]},"functionSelector":"01e1d114","id":8599,"implemented":true,"kind":"function","modifiers":[],"name":"totalAssets","nameLocation":"3867:11:22","nodeType":"FunctionDefinition","overrides":{"id":8592,"nodeType":"OverrideSpecifier","overrides":[],"src":"3895:8:22"},"parameters":{"id":8591,"nodeType":"ParameterList","parameters":[],"src":"3878:2:22"},"returnParameters":{"id":8595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8594,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8599,"src":"3913:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8593,"name":"uint256","nodeType":"ElementaryTypeName","src":"3913:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3912:9:22"},"scope":8663,"src":"3858:100:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8142],"body":{"id":8607,"nodeType":"Block","src":"4029:25:22","statements":[{"expression":{"hexValue":"31","id":8605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4046:1:22","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"functionReturnParameters":8604,"id":8606,"nodeType":"Return","src":"4039:8:22"}]},"functionSelector":"2b35f739","id":8608,"implemented":true,"kind":"function","modifiers":[],"name":"getRiskScore","nameLocation":"3973:12:22","nodeType":"FunctionDefinition","overrides":{"id":8601,"nodeType":"OverrideSpecifier","overrides":[],"src":"4002:8:22"},"parameters":{"id":8600,"nodeType":"ParameterList","parameters":[],"src":"3985:2:22"},"returnParameters":{"id":8604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8603,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8608,"src":"4020:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8602,"name":"uint256","nodeType":"ElementaryTypeName","src":"4020:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4019:9:22"},"scope":8663,"src":"3964:90:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[8150],"body":{"id":8618,"nodeType":"Block","src":"4138:35:22","statements":[{"expression":{"id":8616,"name":"_currentAPY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8255,"src":"4155:11:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8615,"id":8617,"nodeType":"Return","src":"4148:18:22"}]},"functionSelector":"3fd18893","id":8619,"implemented":true,"kind":"function","modifiers":[],"name":"getPerformanceData","nameLocation":"4069:18:22","nodeType":"FunctionDefinition","overrides":{"id":8612,"nodeType":"OverrideSpecifier","overrides":[],"src":"4111:8:22"},"parameters":{"id":8611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8619,"src":"4088:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8609,"name":"uint256","nodeType":"ElementaryTypeName","src":"4088:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4087:9:22"},"returnParameters":{"id":8615,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8614,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8619,"src":"4129:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8613,"name":"uint256","nodeType":"ElementaryTypeName","src":"4129:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4128:9:22"},"scope":8663,"src":"4060:113:22","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[8156],"body":{"id":8627,"nodeType":"Block","src":"4241:28:22","statements":[{"expression":{"hexValue":"74727565","id":8625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4258:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":8624,"id":8626,"nodeType":"Return","src":"4251:11:22"}]},"functionSelector":"3612ddda","id":8628,"implemented":true,"kind":"function","modifiers":[],"name":"isProfitable","nameLocation":"4188:12:22","nodeType":"FunctionDefinition","overrides":{"id":8621,"nodeType":"OverrideSpecifier","overrides":[],"src":"4217:8:22"},"parameters":{"id":8620,"nodeType":"ParameterList","parameters":[],"src":"4200:2:22"},"returnParameters":{"id":8624,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8623,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8628,"src":"4235:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":8622,"name":"bool","nodeType":"ElementaryTypeName","src":"4235:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4234:6:22"},"scope":8663,"src":"4179:90:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[8162],"body":{"id":8640,"nodeType":"Block","src":"4339:41:22","statements":[{"expression":{"expression":{"arguments":[{"id":8636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4361:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":8635,"name":"uint256","nodeType":"ElementaryTypeName","src":"4361:7:22","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":8634,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"4356:4:22","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":8637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4356:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":8638,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4370:3:22","memberName":"max","nodeType":"MemberAccess","src":"4356:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8633,"id":8639,"nodeType":"Return","src":"4349:24:22"}]},"functionSelector":"59b6a0c9","id":8641,"implemented":true,"kind":"function","modifiers":[],"name":"maxCapacity","nameLocation":"4284:11:22","nodeType":"FunctionDefinition","overrides":{"id":8630,"nodeType":"OverrideSpecifier","overrides":[],"src":"4312:8:22"},"parameters":{"id":8629,"nodeType":"ParameterList","parameters":[],"src":"4295:2:22"},"returnParameters":{"id":8633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8641,"src":"4330:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8631,"name":"uint256","nodeType":"ElementaryTypeName","src":"4330:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4329:9:22"},"scope":8663,"src":"4275:105:22","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[8168],"body":{"id":8661,"nodeType":"Block","src":"4454:90:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8647,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"4471:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":8648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4471:16:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":8658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4536:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":8659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"4471:66:22","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":8652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":8650,"name":"_totalAssets","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8248,"src":"4491:12:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"3130303030","id":8651,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4506:5:22","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10000"},"src":"4491:20:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":8653,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4490:22:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":8654,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4515:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_MockYieldStrategy_$8663","typeString":"contract MockYieldStrategy"}},"id":8655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4520:11:22","memberName":"maxCapacity","nodeType":"MemberAccess","referencedDeclaration":8641,"src":"4515:16:22","typeDescriptions":{"typeIdentifier":"t_function_external_pure$__$returns$_t_uint256_$","typeString":"function () pure external returns (uint256)"}},"id":8656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4490:43:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":8646,"id":8660,"nodeType":"Return","src":"4464:73:22"}]},"functionSelector":"6c321c8a","id":8662,"implemented":true,"kind":"function","modifiers":[],"name":"utilizationRate","nameLocation":"4395:15:22","nodeType":"FunctionDefinition","overrides":{"id":8643,"nodeType":"OverrideSpecifier","overrides":[],"src":"4427:8:22"},"parameters":{"id":8642,"nodeType":"ParameterList","parameters":[],"src":"4410:2:22"},"returnParameters":{"id":8646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":8645,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":8662,"src":"4445:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":8644,"name":"uint256","nodeType":"ElementaryTypeName","src":"4445:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4444:9:22"},"scope":8663,"src":"4386:158:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":8664,"src":"310:4236:22","usedErrors":[],"usedEvents":[8000,8009,8016,8025]}],"src":"32:4514:22"},"id":22}},"contracts":{"@openzeppelin/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEFAULT_ADMIN_ROLE()":"a217fddf","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module that allows children to implement role-based access control mechanisms. This is a lightweight version that doesn't allow enumerating role members except through off-chain means by accessing the contract event logs. Some applications may benefit from on-chain enumerability, for those cases see {AccessControlEnumerable}. Roles are referred to by their `bytes32` identifier. These should be exposed in the external API and be unique. The best way to achieve this is by using `public constant` hash digests: ```solidity bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\"); ``` Roles can be used to represent a set of permissions. To restrict access to a function call, use {hasRole}: ```solidity function foo() public {     require(hasRole(MY_ROLE, msg.sender));     ... } ``` Roles can be granted and revoked dynamically via the {grantRole} and {revokeRole} functions. Each role has an associated admin role, and only accounts that have a role's admin role can call {grantRole} and {revokeRole}. By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means that only accounts with this role will be able to grant or revoke other roles. More complex role relationships can be created by using {_setRoleAdmin}. WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to grant and revoke this role. Extra precautions should be taken to secure accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules} to enforce additional security measures for this role.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":24,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"_roles","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"@openzeppelin/contracts/access/AccessControl.sol:AccessControl","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/access/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"External interface of AccessControl declared to support ERC165 detection.","events":{"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"}},"kind":"dev","methods":{"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"External interface of AccessControl declared to support ERC165 detection.\",\"events\":{\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"}},\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {AccessControl-_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/Pausable.sol":{"Pausable":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the contract in unpaused state."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"paused()":"5c975abb"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which allows children to implement an emergency stop mechanism that can be triggered by an authorized account. This module is used through inheritance. It will make available the modifiers `whenNotPaused` and `whenPaused`, which can be applied to the functions of your contract. Note that they will not be pausable by simply including this module, only once the modifiers are put in place.\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract in unpaused state.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/Pausable.sol\":\"Pausable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":406,"contract":"@openzeppelin/contracts/security/Pausable.sol:Pausable","label":"_paused","offset":0,"slot":"0","type":"t_bool"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/security/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":507,"contract":"@openzeppelin/contracts/security/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_string_fromMemory":{"entryPoint":840,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":802,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052346200031d5762000c64803803806200001d8162000322565b9283398101906040818303126200031d5780516001600160401b03908181116200031d57836200004f91840162000348565b91602093848201518381116200031d576200006b920162000348565b82518281116200021d576003918254916001958684811c9416801562000312575b88851014620002fc578190601f94858111620002a6575b5088908583116001146200023f5760009262000233575b505060001982861b1c191690861b1783555b80519384116200021d5760049586548681811c9116801562000212575b82821014620001fd57838111620001b2575b508092851160011462000144575093839491849260009562000138575b50501b92600019911b1c19161790555b6040516108a99081620003bb8239f35b01519350388062000118565b92919084601f1981168860005285600020956000905b898383106200019757505050106200017c575b50505050811b01905562000128565b01519060f884600019921b161c19169055388080806200016d565b8587015189559097019694850194889350908101906200015a565b87600052816000208480880160051c820192848910620001f3575b0160051c019087905b828110620001e6575050620000fb565b60008155018790620001d6565b92508192620001cd565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000e9565b634e487b7160e01b600052604160045260246000fd5b015190503880620000ba565b90889350601f19831691876000528a6000209260005b8c8282106200028f575050841162000276575b505050811b018355620000cc565b015160001983881b60f8161c1916905538808062000268565b8385015186558c9790950194938401930162000255565b90915085600052886000208580850160051c8201928b8610620002f2575b918a91869594930160051c01915b828110620002e2575050620000a3565b600081558594508a9101620002d2565b92508192620002c4565b634e487b7160e01b600052602260045260246000fd5b93607f16936200008c565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021d57604052565b919080601f840112156200031d5782516001600160401b0381116200021d576020906200037e601f8201601f1916830162000322565b928184528282870101116200031d5760005b818110620003a657508260009394955001015290565b85810183015184820184015282016200039056fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212207f553e88014a2691185c0d26ef70d9303ad228891d5f48e27da0a34ebb3b714464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x31D JUMPI PUSH3 0xC64 DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD SWAP1 PUSH1 0x40 DUP2 DUP4 SUB SLT PUSH3 0x31D JUMPI DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x31D JUMPI DUP4 PUSH3 0x4F SWAP2 DUP5 ADD PUSH3 0x348 JUMP JUMPDEST SWAP2 PUSH1 0x20 SWAP4 DUP5 DUP3 ADD MLOAD DUP4 DUP2 GT PUSH3 0x31D JUMPI PUSH3 0x6B SWAP3 ADD PUSH3 0x348 JUMP JUMPDEST DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x312 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x2FC JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2A6 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x23F JUMPI PUSH1 0x0 SWAP3 PUSH3 0x233 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x21D JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x212 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x1FD JUMPI DUP4 DUP2 GT PUSH3 0x1B2 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x144 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x138 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x8A9 SWAP1 DUP2 PUSH3 0x3BB DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x118 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x197 JUMPI POP POP POP LT PUSH3 0x17C JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x128 JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x16D JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x15A JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x1F3 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x1E6 JUMPI POP POP PUSH3 0xFB JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1D6 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xE9 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xBA JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x28F JUMPI POP POP DUP5 GT PUSH3 0x276 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xCC JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x268 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x255 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x2F2 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x2E2 JUMPI POP POP PUSH3 0xA3 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2D2 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2C4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x21D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x31D JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x21D JUMPI PUSH1 0x20 SWAP1 PUSH3 0x37E PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x322 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x31D JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3A6 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x390 JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x553E88014A2691185C0D26EF70D9303AD228891D5F48E27DA0A34EBB3B714464 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1532:11312:4:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;2046:13;1532:11312;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;-1:-1:-1;;;;1532:11312:4;;;;;;;;;;;;;;;;;;;;2069:17;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;2069:17;1532:11312;;-1:-1:-1;1532:11312:4;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;-1:-1:-1;;1532:11312:4;;;-1:-1:-1;;;;;1532:11312:4;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;;;;;;;;;-1:-1:-1;;1532:11312:4;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":1490,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_4782":{"entryPoint":1517,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":1417,"id":null,"parameterSlots":2,"returnSlots":1},"fun_approve":{"entryPoint":1905,"id":1082,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":1539,"id":908,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde03146104ad57508163095ea7b31461048357816318160ddd1461046457816323b872dd1461039a578163313ce5671461037e578163395093511461031757816370a08231146102e057816395d89b41146101c1578163a457c2d71461011957508063a9059cbb146100e95763dd62ed3e1461009e57600080fd5b346100e557806003193601126100e557806020926100ba6105d2565b6100c26105ed565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100e557806003193601126100e5576020906101126101086105d2565b6024359033610603565b5160018152f35b905082346101be57826003193601126101be576101346105d2565b918360243592338152600160205281812060018060a01b038616825260205220549082821061016d576020856101128585038733610771565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b8383346100e557816003193601126100e557805190828454600181811c908083169283156102d6575b60209384841081146102c3578388529081156102a75750600114610252575b505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106102935750505050830101858080610209565b80548886018301529301928490820161027d565b60ff1916878501525050151560051b8401019050858080610209565b634e487b7160e01b895260228a52602489fd5b91607f16916101ea565b5050346100e55760203660031901126100e55760209181906001600160a01b036103086105d2565b16815280845220549051908152f35b8284346101be57816003193601126101be576103316105d2565b338252600160209081528383206001600160a01b038316845290528282205460243581019290831061036b57602084610112858533610771565b634e487b7160e01b815260118552602490fd5b5050346100e557816003193601126100e5576020905160128152f35b839150346100e55760603660031901126100e5576103b66105d2565b6103be6105ed565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036103f8575b602086610112878787610603565b84821061042157509183916104166020969561011295033383610771565b9193948193506103ea565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100e557816003193601126100e5576020906002549051908152f35b5050346100e557806003193601126100e5576020906101126104a36105d2565b6024359033610771565b8490843461058557826003193601126105855782600354600181811c9080831692831561057b575b60209384841081146102c3578388529081156102a7575060011461052557505050829003601f01601f191682019267ffffffffffffffff84118385101761023f575082918261023b925282610589565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106105675750505050830101858080610209565b805488860183015293019284908201610551565b91607f16916104d5565b8280fd5b6020808252825181830181905290939260005b8281106105be57505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161059c565b600435906001600160a01b03821682036105e857565b600080fd5b602435906001600160a01b03821682036105e857565b6001600160a01b0390811691821561071e57169182156106cd5760008281528060205260408120549180831061067957604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b0390811691821561082257169182156107d25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea26469706673582212207f553e88014a2691185c0d26ef70d9303ad228891d5f48e27da0a34ebb3b714464736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x4AD JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x483 JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x464 JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x39A JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x37E JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x317 JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x2E0 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x119 JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xE9 JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xBA PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0xC2 PUSH2 0x5ED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x108 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x603 JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1BE JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x134 PUSH2 0x5D2 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x16D JUMPI PUSH1 0x20 DUP6 PUSH2 0x112 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x2D6 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x252 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x293 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x27D JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x1EA JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x308 PUSH2 0x5D2 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x1BE JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1BE JUMPI PUSH2 0x331 PUSH2 0x5D2 JUMP JUMPDEST CALLER DUP3 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP4 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP5 MSTORE SWAP1 MSTORE DUP3 DUP3 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD DUP2 ADD SWAP3 SWAP1 DUP4 LT PUSH2 0x36B JUMPI PUSH1 0x20 DUP5 PUSH2 0x112 DUP6 DUP6 CALLER PUSH2 0x771 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x12 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xE5 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xE5 JUMPI PUSH2 0x3B6 PUSH2 0x5D2 JUMP JUMPDEST PUSH2 0x3BE PUSH2 0x5ED JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x3F8 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x112 DUP8 DUP8 DUP8 PUSH2 0x603 JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x421 JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x416 PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x112 SWAP6 SUB CALLER DUP4 PUSH2 0x771 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x3EA JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xE5 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xE5 JUMPI PUSH1 0x20 SWAP1 PUSH2 0x112 PUSH2 0x4A3 PUSH2 0x5D2 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x771 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x585 JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x57B JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x2C3 JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x2A7 JUMPI POP PUSH1 0x1 EQ PUSH2 0x525 JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x23F JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x23B SWAP3 MSTORE DUP3 PUSH2 0x589 JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x567 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x209 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x551 JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x4D5 JUMP JUMPDEST DUP3 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x5BE JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x59C JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x5E8 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x71E JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x6CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x679 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x822 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x7D2 JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH32 0x553E88014A2691185C0D26EF70D9303AD228891D5F48E27DA0A34EBB3B714464 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"1532:11312:4:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6;1532:11312;;:::i;:::-;;;734:10:10;;3894:6:4;:::i;:::-;1532:11312;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:10;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;6792:35;;;;1532:11312;;;;6928:34;1532:11312;;;;734:10:10;6928:34:4;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;-1:-1:-1;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:4;;;;;-1:-1:-1;;1532:11312:4;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1532:11312:4;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;734:10:10;1532:11312:4;;;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;734:10:10;6021:38:4;734:10:10;;;6021:38:4;:::i;1532:11312::-;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;3186:2;1532:11312;;;;;;;;;;;;-1:-1:-1;;1532:11312:4;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:10;1532:11312:4;;;;;;11264:17;;;11244:37;;11240:243;;1532:11312;;5424:6;;;;;;:::i;11240:243::-;11305:26;;;1532:11312;;;;;;11432:25;1532:11312;;;5424:6;1532:11312;;734:10:10;11432:25:4;;:::i;:::-;11240:243;;;;;;;;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12;1532:11312;;;;;;;;;;;;;;;;;;;;;;;4606:6;1532:11312;;:::i;:::-;;;734:10:10;;4606:6:4;:::i;1532:11312::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;-1:-1:-1;;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1532:11312:4;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;1532:11312:4;;;;;;:::o;7456:788::-;-1:-1:-1;;;;;1532:11312:4;;;;7552:18;;1532:11312;;;7630:16;;;1532:11312;;7568:1;1532:11312;;;;;;;;;;7801:21;;;;1532:11312;;;;;8163:26;1532:11312;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26;7456:788::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;10457:340;-1:-1:-1;;;;;1532:11312:4;;;;10558:19;;1532:11312;;;10636:21;;;1532:11312;;;10758:32;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;10575:1;1532:11312;;;;;10575:1;1532:11312;;;;;;;10758:32;10457:340::o;1532:11312::-;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;;;;;;;;;;;;-1:-1:-1;;;1532:11312:4;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"443400","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2788","approve(address,uint256)":"24387","balanceOf(address)":"2563","decimals()":"262","decreaseAllowance(address,uint256)":"26828","increaseAllowance(address,uint256)":"26763","name()":"infinite","symbol()":"infinite","totalSupply()":"2324","transfer(address,uint256)":"50966","transferFrom(address,address,uint256)":"77385"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":577,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":583,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":585,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":587,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":589,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220be2a5b4afb5e9ece7c2b05c9b631198c7b2dc325701cdcc2369ea8b6afff627064736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x2A JUMPDEST 0x4A 0xFB 0x5E SWAP15 0xCE PUSH29 0x2B05C9B631198C7B2DC325701CDCC2369EA8B6AFFF627064736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"701:6234:8:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220be2a5b4afb5e9ece7c2b05c9b631198c7b2dc325701cdcc2369ea8b6afff627064736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x2A JUMPDEST 0x4A 0xFB 0x5E SWAP15 0xCE PUSH29 0x2B05C9B631198C7B2DC325701CDCC2369EA8B6AFFF627064736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"701:6234:8:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220c7d426e3ab85b12ac7044cec483a4df740074c9828a7f0e0413a45beac18025c64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xD4 0x26 0xE3 0xAB DUP6 0xB1 0x2A 0xC7 DIV 0x4C 0xEC BASEFEE GASPRICE 0x4D 0xF7 BLOCKHASH SMOD 0x4C SWAP9 0x28 0xA7 CREATE 0xE0 COINBASE GASPRICE GASLIMIT 0xBE 0xAC XOR MUL 0x5C PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"194:9169:9:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220c7d426e3ab85b12ac7044cec483a4df740074c9828a7f0e0413a45beac18025c64736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC7 0xD4 0x26 0xE3 0xAB DUP6 0xB1 0x2A 0xC7 DIV 0x4C 0xEC BASEFEE GASPRICE 0x4D 0xF7 BLOCKHASH SMOD 0x4C SWAP9 0x28 0xA7 CREATE 0xE0 COINBASE GASPRICE GASLIMIT 0xBE 0xAC XOR MUL 0x5C PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"194:9169:9:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b7e1ccebc98a68222e38d0cf63ca1e98e99cd212fc8604b523a02428af42e6e664736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xE1 0xCC 0xEB 0xC9 DUP11 PUSH9 0x222E38D0CF63CA1E98 0xE9 SWAP13 0xD2 SLT 0xFC DUP7 DIV 0xB5 0x23 LOG0 0x24 0x28 0xAF TIMESTAMP 0xE6 0xE6 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"220:2559:11:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b7e1ccebc98a68222e38d0cf63ca1e98e99cd212fc8604b523a02428af42e6e664736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0xE1 0xCC 0xEB 0xC9 DUP11 PUSH9 0x222E38D0CF63CA1E98 0xE9 SWAP13 0xD2 SLT 0xFC DUP7 DIV 0xB5 0x23 LOG0 0x24 0x28 0xAF TIMESTAMP 0xE6 0xE6 PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"220:2559:11:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220b2c6d191c678928ca945a5271f4a5c6611f12ce8c30c58e76aa4178ba2cd0a2c64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0xC6 0xD1 SWAP2 0xC6 PUSH25 0x928CA945A5271F4A5C6611F12CE8C30C58E76AA4178BA2CD0A 0x2C PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"369:8761:12:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220b2c6d191c678928ca945a5271f4a5c6611f12ce8c30c58e76aa4178ba2cd0a2c64736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB2 0xC6 0xD1 SWAP2 0xC6 PUSH25 0x928CA945A5271F4A5C6611F12CE8C30C58E76AA4178BA2CD0A 0x2C PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ","sourceMap":"369:8761:12:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220173b96ef7ffd16b1bac483dab879cf82d03c7a52a6431e354295750c48fe404564736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR EXTCODESIZE SWAP7 0xEF PUSH32 0xFD16B1BAC483DAB879CF82D03C7A52A6431E354295750C48FE404564736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:12582:15:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea2646970667358221220173b96ef7ffd16b1bac483dab879cf82d03c7a52a6431e354295750c48fe404564736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 OR EXTCODESIZE SWAP7 0xEF PUSH32 0xFD16B1BAC483DAB879CF82D03C7A52A6431E354295750C48FE404564736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ","sourceMap":"202:12582:15:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea264697066735822122093fc1ea6663d249f116b8f4e2383c928941025520192341c3700840d4021745864736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE CALLVALUE PUSH1 0x17 JUMPI PUSH1 0x3A SWAP1 DUP2 PUSH1 0x1D DUP3 CODECOPY ADDRESS DUP2 POP POP RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT INVALID PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xFC 0x1E 0xA6 PUSH7 0x3D249F116B8F4E 0x23 DUP4 0xC9 0x28 SWAP5 LT 0x25 MSTORE ADD SWAP3 CALLVALUE SHR CALLDATACOPY STOP DUP5 0xD BLOCKHASH 0x21 PUSH21 0x5864736F6C63430008140033000000000000000000 ","sourceMap":"215:1047:16:-:0;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"600080fdfea264697066735822122093fc1ea6663d249f116b8f4e2383c928941025520192341c3700840d4021745864736f6c63430008140033","opcodes":"PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP4 0xFC 0x1E 0xA6 PUSH7 0x3D249F116B8F4E 0x23 DUP4 0xC9 0x28 SWAP5 LT 0x25 MSTORE ADD SWAP3 CALLVALUE SHR CALLDATACOPY STOP DUP5 0xD BLOCKHASH 0x21 PUSH21 0x5864736F6C63430008140033000000000000000000 ","sourceMap":"215:1047:16:-:0;;"},"gasEstimates":{"creation":{"codeDepositCost":"11600","executionCost":"infinite","totalCost":"infinite"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/CrossChainBridge.sol":{"CrossChainBridge":{"abi":[{"inputs":[{"internalType":"address","name":"_yieldEscrow","type":"address"},{"internalType":"address","name":"_yieldVault","type":"address"},{"internalType":"address","name":"_feeCollector","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"InsufficientValidations","type":"error"},{"inputs":[],"name":"InvalidAmount","type":"error"},{"inputs":[],"name":"InvalidFee","type":"error"},{"inputs":[],"name":"InvalidRecipient","type":"error"},{"inputs":[{"internalType":"enum CrossChainBridge.BridgeStatus","name":"current","type":"uint8"},{"internalType":"enum CrossChainBridge.BridgeStatus","name":"expected","type":"uint8"}],"name":"InvalidStatus","type":"error"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"TransactionAlreadyProcessed","type":"error"},{"inputs":[],"name":"UnauthorizedValidator","type":"error"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"UnsupportedChain","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"UnsupportedToken","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"yield","type":"uint256"}],"name":"BridgeCompleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"BridgeFailed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"sourceChainId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"destinationChainId","type":"uint256"}],"name":"BridgeInitiated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"validator","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"BridgeValidated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"ChainAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"ChainRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newCollector","type":"address"}],"name":"FeeCollectorUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"FeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"TokenAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"}],"name":"TokenRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[],"name":"ARBITRUM_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BASE_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BASIS_POINTS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BRIDGE_OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ETHEREUM_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POLYGON_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SOLANA_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"VALIDATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"XRPL_CHAIN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"addSupportedChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"addSupportedToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"bridgeFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"bridgeTransactions","outputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"sourceChainId","type":"uint256"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"accruedYield","type":"uint256"},{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"enum CrossChainBridge.BridgeStatus","name":"status","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"timeElapsed","type":"uint256"}],"name":"calculateBridgeYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"chainValidators","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"bytes","name":"sourceChainProof","type":"bytes"}],"name":"completeBridge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"estimateBridgeFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeCollector","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"getBridgeTransaction","outputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"sourceChainId","type":"uint256"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"uint256","name":"accruedYield","type":"uint256"},{"internalType":"bytes32","name":"transactionHash","type":"bytes32"},{"internalType":"enum CrossChainBridge.BridgeStatus","name":"status","type":"uint8"}],"internalType":"struct CrossChainBridge.BridgeTransaction","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"destinationChainId","type":"uint256"}],"name":"initiateBridge","outputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"isChainSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"isTokenSupported","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"processedTransactions","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"},{"internalType":"string","name":"reason","type":"string"}],"name":"refundBridge","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"chainId","type":"uint256"}],"name":"removeSupportedChain","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"removeSupportedToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"supportedChains","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"supportedTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"updateBridgeFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCollector","type":"address"}],"name":"updateFeeCollector","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"transactionId","type":"bytes32"}],"name":"validateBridgeTransaction","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"yieldEscrow","outputs":[{"internalType":"contract YieldEscrow","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"yieldVault","outputs":[{"internalType":"contract YieldVault","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Manages cross-chain payment transfers with yield preservation","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"addSupportedChain(uint256)":{"details":"Adds support for a new chain","params":{"chainId":"Chain ID to add"}},"addSupportedToken(address)":{"details":"Adds support for a new token","params":{"token":"Token address to add"}},"calculateBridgeYield(uint256,uint256)":{"details":"Calculates yield accrued during bridge transit","params":{"amount":"Principal amount","timeElapsed":"Time in seconds"},"returns":{"_0":"yield Calculated yield amount"}},"completeBridge(bytes32,bytes)":{"details":"Completes a bridge transaction on destination chain","params":{"sourceChainProof":"Proof from source chain (simplified for now)","transactionId":"Transaction to complete"}},"estimateBridgeFee(uint256)":{"details":"Estimates bridge fee for an amount","params":{"amount":"Amount to bridge"},"returns":{"_0":"fee Estimated fee"}},"getBridgeTransaction(bytes32)":{"details":"Gets bridge transaction details","params":{"transactionId":"Transaction ID"},"returns":{"_0":"Transaction details"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"initiateBridge(address,uint256,address,uint256)":{"details":"Initiates a cross-chain bridge transaction","params":{"amount":"Amount to bridge","destinationChainId":"Target chain ID","recipient":"Address on destination chain","token":"Token address"},"returns":{"transactionId":"Unique bridge transaction identifier"}},"isChainSupported(uint256)":{"details":"Checks if a chain is supported","params":{"chainId":"Chain ID to check"},"returns":{"_0":"supported Whether the chain is supported"}},"isTokenSupported(address)":{"details":"Checks if a token is supported","params":{"token":"Token address to check"},"returns":{"_0":"supported Whether the token is supported"}},"pause()":{"details":"Emergency pause"},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"refundBridge(bytes32,string)":{"details":"Refunds a failed bridge transaction","params":{"reason":"Failure reason","transactionId":"Transaction to refund"}},"removeSupportedChain(uint256)":{"details":"Removes support for a chain","params":{"chainId":"Chain ID to remove"}},"removeSupportedToken(address)":{"details":"Removes support for a token","params":{"token":"Token address to remove"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"unpause()":{"details":"Resume from pause"},"updateBridgeFee(uint256)":{"details":"Updates bridge fee","params":{"newFee":"New fee in basis points"}},"updateFeeCollector(address)":{"details":"Updates fee collector address","params":{"newCollector":"New fee collector address"}},"validateBridgeTransaction(bytes32)":{"details":"Validates a bridge transaction (called by validators)","params":{"transactionId":"Transaction to validate"}}},"title":"CrossChainBridge","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":762,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60c034620002df57601f620023ee38819003918201601f191683019291906001600160401b03841183851017620002e4578160609284926040968752833981010312620002df576200005181620002fa565b9060206200006e8462000066838501620002fa565b9301620002fa565b9060019260009284845560ff19958660025416600255600a60095560018060a01b038091169283156200029b578116918215620002575716918215620002135760805260a052600a80546001600160a01b031916909117905581805282815284822033835281528482205485929160049160ff1615620001de575b7f7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b1568808452858252848420338552825260ff858520541615620001a7575b5084835252818120838582541617905560028152818120838582541617905560038152818120838582541617905560898152818120838582541617905561a4b18152818120838582541617905561210581522091825416179055516120be908162000310823960805181610e84015260a05181818161096a0152611ff00152f35b8084528582528484203385528252848420868882541617905533903390600080516020620023ce8339815191528680a43862000126565b82805284815283832033845281528383208587825416179055333384600080516020620023ce8339815191528180a4620000e9565b875162461bcd60e51b815260048101859052601560248201527f496e76616c69642066656520636f6c6c6563746f7200000000000000000000006044820152606490fd5b885162461bcd60e51b815260048101869052601560248201527f496e76616c6964207661756c74206164647265737300000000000000000000006044820152606490fd5b885162461bcd60e51b815260048101869052601660248201527f496e76616c696420657363726f772061646472657373000000000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002df5756fe608080604052600436101561001357600080fd5b60003560e01c90816224a1b81461147c5750806301ffc9a714611426578063067bd07a1461140a5780630c4844aa146113b157806317606024146113885780631dac56d31461136c57806320eb563214611350578063248a9ca3146113215780632f2ff15d1461126e57806334284e4b1461103057806336568abe14610f9e5780633f4ba83a14610f0a57806348bf1c5114610eee5780634be40fd114610eb35780635221c1f014610e3d57806353e589ac14610e6e578063548d496f14610e3d5780635a1c036614610dd55780635c975abb14610db257806368c4ac2614610b695780636c5556b714610cb95780636c63f97114610c115780636d69fcaf14610ba857806375151b6314610b695780637631919014610b0357806382b12dd714610ae55780638456cb5914610a8b57806387188a0014610a2f57806391d14854146109e25780639822dded146109b5578063a217fddf14610999578063a7f8a5e214610954578063ac2e493614610923578063c06575f4146107aa578063c415b95c14610781578063c49baebe14610746578063c4a0158714610712578063c9a4d32f1461034a578063cdcdd5481461032d578063d2c35ce814610277578063d547741f14610236578063e1f1c4a7146102195763efc21e3f146101f757600080fd5b346102145760003660031901126102145760206040516121058152f35b600080fd5b346102145760003660031901126102145760206040516127108152f35b34610214576040366003190112610214576102756004356102556115ff565b90806000526001602052610270600160406000200154611986565b611b50565b005b3461021457602036600319011261021457610290611615565b610298611678565b6001600160a01b031680156102e8576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926001600160601b0360a01b600a541617600a55604051908152a1005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b3461021457600036600319011261021457602060405161a4b18152f35b3461021457608036600319011261021457610363611615565b60249081356044356001600160a01b038116810361021457610383611d4a565b61038b611d06565b606435600052600460205260ff60406000205416156106f9576001600160a01b03811660009081526005602052604090205460ff16156106d85781156106c6576001600160a01b038316156106b4576127106103e960095484611bc6565b04906103f58284611cf9565b92604051926323b872dd60e01b602085015233878501523060448501528160648501526064845260a0840167ffffffffffffffff948082108683111761069f5760409190915261044e906001600160a01b038516611df2565b8061067e575b5060085492600019841461066957600184016008556040519360208501923360601b84526001600160601b031990818960601b16603488015260488701528460601b16606886015246607c860152606435609c86015260bc85015260bc84528360e08101109060e0850111176106545760e0830160405282519020936104dc60e08401611ab3565b3360e084015260018060a01b03166101008301528261012083015260018060a01b031661014082015246610160820152606435610180820152426101a082015260006101c0820152826101e082015260006102008201528260005260036020526102006009604060002060018060a01b0360e0850151166001600160601b0360a01b90818354161782556001820160018060a01b0361010087015116828254161790556101208501516002830155600382019060018060a01b036101408701511690825416179055610160840151600482015561018084015160058201556101a084015160068201556101c084015160078201556101e0840151600882015501910151600581101561063f576020945060ff8019835416911617905560405190815246838201526064356040820152817fcb59e257e7e6c29e3b2d154443821f4c7dfdee5401f775e13db6d7421c51d58060603393a36001600055604051908152f35b84634e487b7160e01b60005260216004526000fd5b85634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260116004526000fd5b600a5461069991906001600160a01b03908116908516611da0565b86610454565b88634e487b7160e01b60005260416004526000fd5b604051634e46966960e11b8152600490fd5b60405163162908e360e11b8152600490fd5b604051635f8b555b60e11b81526001600160a01b0390911660048201528390fd5b604051631874ab9360e31b815260643560048201528490fd5b34610214576020366003190112610214576004356000526007602052602060018060a01b0360406000205416604051908152f35b346102145760003660031901126102145760206040517f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989268152f35b3461021457600036600319011261021457600a546040516001600160a01b039091168152602090f35b34610214576107b83661162b565b50506107c2611d4a565b6107ca61183f565b806000526003602052604060002090600660205260ff6040600020541661090b576009820160ff81541660058110156108f557600181036108ce5750610814600684015442611cf9565b9261082460028201948554611fda565b918360005260066020526002604060002060ff19906001828254161790558254161790558160078201558354918083018093116108b8577f43d0df41e1c07a3d313b4527a8a17595bfc156a6cc0d47045fe63b3aaffb2b47926040926108a160018060a01b03926001846003850154169301928484541690611da0565b541694549082519182526020820152a36001600055005b634e487b7160e01b600052601160045260246000fd5b60405163f924664d60e01b81526044916108ec9060048301906115f2565b60016024820152fd5b634e487b7160e01b600052602160045260246000fd5b602490604051906317cc742960e31b82526004820152fd5b34610214576020366003190112610214576004356000526006602052602060ff604060002054166040519015158152f35b34610214576000366003190112610214576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461021457600036600319011261021457602060405160008152f35b346102145760203660031901126102145760206127106109d9600954600435611bc6565b04604051908152f35b34610214576040366003190112610214576109fb6115ff565b600435600052600160205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461021457602036600319011261021457600435610a4b611678565b8060005260046020526040600020600160ff198254161790557fbba9d55e9fd1a441b1617724e2fdb76777d15ec77ab2b72ac15952cbe97085db600080a2005b3461021457600036600319011261021457610aa4611678565b610aac611d06565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b34610214576000366003190112610214576020600954604051908152f35b3461021457602036600319011261021457610b1c611615565b610b24611678565b6001600160a01b03166000818152600560205260408120805460ff191690557f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd39080a2005b34610214576020366003190112610214576001600160a01b03610b8a611615565b166000526005602052602060ff604060002054166040519015158152f35b3461021457602036600319011261021457610bc1611615565b610bc9611678565b6001600160a01b03166000818152600560205260408120805460ff191660011790557f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a49080a2005b346102145760203660031901126102145760043560005260036020526101406040600020610cb760018060a01b0380835416928160018201541691600282015490600383015416600483015460058401549060068501549260078601549460ff6009600889015498015416976040519a8b5260208b015260408a01526060890152608088015260a087015260c086015260e08501526101008401526101208301906115f2565bf35b3461021457610cc73661162b565b90610cd061183f565b826000526003602052604060002060098101805460ff811660058110156108f557600281148015610da8575b610d81575060ff19166004179055600381015481546002909201547fd2b4dd79c80ad92da5a6dd7455df9e531b9ad078fe353998dc6fc5c442ddc34f94936040939092610d5692916001600160a01b039081169116611da0565b82825193849260208452816020850152848401376000828201840152601f01601f19168101030190a2005b60405163f924664d60e01b8152604491610d9f9060048301906115f2565b60006024820152fd5b5060048114610cfc565b3461021457600036600319011261021457602060ff600254166040519015158152f35b3461021457602036600319011261021457600435610df1611678565b6103e88111610e2b576020817f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c7692600955604051908152a1005b6040516358d620b360e01b8152600490fd5b34610214576020366003190112610214576004356000526004602052602060ff604060002054166040519015158152f35b34610214576000366003190112610214576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102145760003660031901126102145760206040517f7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b15688152f35b3461021457600036600319011261021457602060405160028152f35b3461021457600036600319011261021457610f23611678565b60025460ff811615610f625760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461021457604036600319011261021457610fb76115ff565b336001600160a01b03821603610fd35761027590600435611b50565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461021457602080600319360112610214576004357f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892680600052600190818452604060002033600052845260ff60406000205416156110e457508160005260038352600960406000200190815460ff811660058110156108f55780610d81575060ff191617905560405142815233927fd7b0f99d057bc9987014e38568de5d95ba76962296f6cf10df2e891fd78232d891a3005b9091506110f033611bea565b604051916110fd83611ae6565b604283528483019360603686378351156112585760308553835181101561125857607860218501536041905b8082116112145750506111d1576111cd9361117d936111b5936111a6604894604051978576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a978801528251928391603789019101611a90565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611a90565b01036028810184520182611b02565b60405162461bcd60e51b815291829160048301611b24565b0390fd5b6064846040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611258576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112438487611bd9565b5360041c9180156108b8576000190190611129565b634e487b7160e01b600052603260045260246000fd5b346102145760403660031901126102145760043561128a6115ff565b8160005260016020526112a4600160406000200154611986565b81600052600160205260406000209060018060a01b0316908160005260205260ff60406000205416156112d357005b8160005260016020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346102145760203660031901126102145760043560005260016020526020600160406000200154604051908152f35b3461021457600036600319011261021457602060405160898152f35b3461021457600036600319011261021457602060405160018152f35b346102145760403660031901126102145760206113a9602435600435611fda565b604051908152f35b34610214576020366003190112610214576004356113cd611678565b806000526004602052604060002060ff1981541690557f11a9d1a77f76361ed131c19b1dc5758504c51dbde2e49fc973a0ef9577ad13d5600080a2005b3461021457600036600319011261021457602060405160038152f35b346102145760203660031901126102145760043563ffffffff60e01b811680910361021457602090637965db0b60e01b811490811561146b575b506040519015158152f35b6301ffc9a760e01b14905082611460565b34610214576020366003190112610214576101208161149c600093611ab3565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015201526004356000526003602052604060002060ff6009604051926114f384611ab3565b80546001600160a01b0390811685526001820154811660208601526002820154604086015260038201541660608501526004810154608085015260058082015460a0860152600682015460c0860152600782015460e086015260088201546101008601529101549190911691908210156108f55761014091610120820152610cb76101206040519260018060a01b03815116845260018060a01b0360208201511660208501526040810151604085015260018060a01b0360608201511660608501526080810151608085015260a081015160a085015260c081015160c085015260e081015160e085015261010081015161010085015201516101208301905b9060058210156108f55752565b602435906001600160a01b038216820361021457565b600435906001600160a01b038216820361021457565b6040600319820112610214576004359160243567ffffffffffffffff9283821161021457806023830112156102145781600401359384116102145760248483010111610214576024019190565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083205490929060019060ff16156116be5750505050565b6116c733611bea565b828551926116d484611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b8183116117bd5750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b01036028810185520183611b02565b5162461bcd60e51b815291829160048301611b24565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a6117ed8588611bd9565b5360041c92801561180357600019019190611701565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527ff6cefd16e50e3a9e8a37ea00763412696ec6dfc8d1c400e69a0e851a5205e59a60209081526040808320549092906001907f7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b15689060ff16156118a8575050505050565b6118b133611bea565b908551926118be84611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b8183116119405750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a6119708588611bd9565b5360041c928015611803576000190191906118eb565b6000818152600190602091808352604093848320338452845260ff8584205416156119b2575050505050565b6119bb33611bea565b908551926119c884611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b818311611a4a5750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a7a8588611bd9565b5360041c928015611803576000190191906119f5565b60005b838110611aa35750506000910152565b8181015183820152602001611a93565b610140810190811067ffffffffffffffff821117611ad057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117611ad057604052565b90601f8019910116810190811067ffffffffffffffff821117611ad057604052565b60409160208252611b448151809281602086015260208686019101611a90565b601f01601f1916010190565b906000918083526001602052604083209160018060a01b03169182845260205260ff604084205416611b8157505050565b8083526001602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b818102929181159184041417156108b857565b908151811015611258570160200190565b604051906060820182811067ffffffffffffffff821117611ad057604052602a82526020820160403682378251156112585760309053815160019081101561125857607860218401536029905b808211611c8b575050611c475790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611ce4576f181899199a1a9b1b9c1cb0b131b232b360811b901a611cba8486611bd9565b5360041c918015611ccf576000190190611c37565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b919082039182116108b857565b60ff60025416611d1257565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414611d5b576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017611ad057611df092604052611df2565b565b60018060a01b0316906040516040810167ffffffffffffffff9082811082821117611ad0576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d15611f3e573d928311611f2a5790611e8d93929160405192611e8088601f19601f8401160185611b02565b83523d868885013e611f49565b805191821591848315611eff575b505050905015611ea85750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b919381809450010312611f2657820151908115158203611f23575080388084611e9b565b80fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b90611e8d9392506060915b91929015611fab5750815115611f5d575090565b3b15611f665790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611fbe5750805190602001fd5b60405162461bcd60e51b81529081906111cd9060048301611b24565b604051634b16524b60e11b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561207c57600092612047575b509161203e6120439264496cebb80094611bc6565b611bc6565b0490565b90916020823d8211612074575b8161206160209383611b02565b81010312611f235750519061203e612029565b3d9150612054565b6040513d6000823e3d90fdfea26469706673582212201e3c36c324995f42cbfbc9c0305d8777464e494d5502f9eceb878775c9a7a4ea64736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","opcodes":"PUSH1 0xC0 CALLVALUE PUSH3 0x2DF JUMPI PUSH1 0x1F PUSH3 0x23EE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT DUP4 DUP6 LT OR PUSH3 0x2E4 JUMPI DUP2 PUSH1 0x60 SWAP3 DUP5 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x2DF JUMPI PUSH3 0x51 DUP2 PUSH3 0x2FA JUMP JUMPDEST SWAP1 PUSH1 0x20 PUSH3 0x6E DUP5 PUSH3 0x66 DUP4 DUP6 ADD PUSH3 0x2FA JUMP JUMPDEST SWAP4 ADD PUSH3 0x2FA JUMP JUMPDEST SWAP1 PUSH1 0x1 SWAP3 PUSH1 0x0 SWAP3 DUP5 DUP5 SSTORE PUSH1 0xFF NOT SWAP6 DUP7 PUSH1 0x2 SLOAD AND PUSH1 0x2 SSTORE PUSH1 0xA PUSH1 0x9 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND SWAP3 DUP4 ISZERO PUSH3 0x29B JUMPI DUP2 AND SWAP2 DUP3 ISZERO PUSH3 0x257 JUMPI AND SWAP2 DUP3 ISZERO PUSH3 0x213 JUMPI PUSH1 0x80 MSTORE PUSH1 0xA0 MSTORE PUSH1 0xA DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE DUP2 DUP1 MSTORE DUP3 DUP2 MSTORE DUP5 DUP3 KECCAK256 CALLER DUP4 MSTORE DUP2 MSTORE DUP5 DUP3 KECCAK256 SLOAD DUP6 SWAP3 SWAP2 PUSH1 0x4 SWAP2 PUSH1 0xFF AND ISZERO PUSH3 0x1DE JUMPI JUMPDEST PUSH32 0x7045ADFE67D5F94DBFDDCDB901E44BEF55BAACABB398C7CDDDA1BFD7620B1568 DUP1 DUP5 MSTORE DUP6 DUP3 MSTORE DUP5 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE PUSH1 0xFF DUP6 DUP6 KECCAK256 SLOAD AND ISZERO PUSH3 0x1A7 JUMPI JUMPDEST POP DUP5 DUP4 MSTORE MSTORE DUP2 DUP2 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x2 DUP2 MSTORE DUP2 DUP2 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP2 MSTORE DUP2 DUP2 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x89 DUP2 MSTORE DUP2 DUP2 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0xA4B1 DUP2 MSTORE DUP2 DUP2 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x2105 DUP2 MSTORE KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE MLOAD PUSH2 0x20BE SWAP1 DUP2 PUSH3 0x310 DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 PUSH2 0xE84 ADD MSTORE PUSH1 0xA0 MLOAD DUP2 DUP2 DUP2 PUSH2 0x96A ADD MSTORE PUSH2 0x1FF0 ADD MSTORE RETURN JUMPDEST DUP1 DUP5 MSTORE DUP6 DUP3 MSTORE DUP5 DUP5 KECCAK256 CALLER DUP6 MSTORE DUP3 MSTORE DUP5 DUP5 KECCAK256 DUP7 DUP9 DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP1 CALLER SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23CE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP1 LOG4 CODESIZE PUSH3 0x126 JUMP JUMPDEST DUP3 DUP1 MSTORE DUP5 DUP2 MSTORE DUP4 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP2 MSTORE DUP4 DUP4 KECCAK256 DUP6 DUP8 DUP3 SLOAD AND OR SWAP1 SSTORE CALLER CALLER DUP5 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x23CE DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH3 0xE9 JUMP JUMPDEST DUP8 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C69642066656520636F6C6C6563746F720000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP9 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C6964207661756C7420616464726573730000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP9 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x16 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420657363726F77206164647265737300000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x2DF JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0x24A1B8 EQ PUSH2 0x147C JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1426 JUMPI DUP1 PUSH4 0x67BD07A EQ PUSH2 0x140A JUMPI DUP1 PUSH4 0xC4844AA EQ PUSH2 0x13B1 JUMPI DUP1 PUSH4 0x17606024 EQ PUSH2 0x1388 JUMPI DUP1 PUSH4 0x1DAC56D3 EQ PUSH2 0x136C JUMPI DUP1 PUSH4 0x20EB5632 EQ PUSH2 0x1350 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1321 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x126E JUMPI DUP1 PUSH4 0x34284E4B EQ PUSH2 0x1030 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xF9E JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xF0A JUMPI DUP1 PUSH4 0x48BF1C51 EQ PUSH2 0xEEE JUMPI DUP1 PUSH4 0x4BE40FD1 EQ PUSH2 0xEB3 JUMPI DUP1 PUSH4 0x5221C1F0 EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0x53E589AC EQ PUSH2 0xE6E JUMPI DUP1 PUSH4 0x548D496F EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0x5A1C0366 EQ PUSH2 0xDD5 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xDB2 JUMPI DUP1 PUSH4 0x68C4AC26 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x6C5556B7 EQ PUSH2 0xCB9 JUMPI DUP1 PUSH4 0x6C63F971 EQ PUSH2 0xC11 JUMPI DUP1 PUSH4 0x6D69FCAF EQ PUSH2 0xBA8 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x76319190 EQ PUSH2 0xB03 JUMPI DUP1 PUSH4 0x82B12DD7 EQ PUSH2 0xAE5 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xA8B JUMPI DUP1 PUSH4 0x87188A00 EQ PUSH2 0xA2F JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x9E2 JUMPI DUP1 PUSH4 0x9822DDED EQ PUSH2 0x9B5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x999 JUMPI DUP1 PUSH4 0xA7F8A5E2 EQ PUSH2 0x954 JUMPI DUP1 PUSH4 0xAC2E4936 EQ PUSH2 0x923 JUMPI DUP1 PUSH4 0xC06575F4 EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0xC415B95C EQ PUSH2 0x781 JUMPI DUP1 PUSH4 0xC49BAEBE EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0xC4A01587 EQ PUSH2 0x712 JUMPI DUP1 PUSH4 0xC9A4D32F EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0xCDCDD548 EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xD2C35CE8 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x219 JUMPI PUSH4 0xEFC21E3F EQ PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2105 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x275 PUSH1 0x4 CALLDATALOAD PUSH2 0x255 PUSH2 0x15FF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x270 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1986 JUMP JUMPDEST PUSH2 0x1B50 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x290 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x298 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x20 DUP2 PUSH32 0xE5693914D19C789BDEE50A362998C0BC8D035A835F9871DA5D51152F0582C34F SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6C6C6563746F72206164647265737300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xA4B1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x363 PUSH2 0x1615 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x214 JUMPI PUSH2 0x383 PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x38B PUSH2 0x1D06 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6D8 JUMPI DUP2 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x6B4 JUMPI PUSH2 0x2710 PUSH2 0x3E9 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1BC6 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3F5 DUP3 DUP5 PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP6 ADD MSTORE CALLER DUP8 DUP6 ADD MSTORE ADDRESS PUSH1 0x44 DUP6 ADD MSTORE DUP2 PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x64 DUP5 MSTORE PUSH1 0xA0 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP1 DUP3 LT DUP7 DUP4 GT OR PUSH2 0x69F JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x44E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1DF2 JUMP JUMPDEST DUP1 PUSH2 0x67E JUMPI JUMPDEST POP PUSH1 0x8 SLOAD SWAP3 PUSH1 0x0 NOT DUP5 EQ PUSH2 0x669 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x8 SSTORE PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD SWAP3 CALLER PUSH1 0x60 SHL DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 DUP10 PUSH1 0x60 SHL AND PUSH1 0x34 DUP9 ADD MSTORE PUSH1 0x48 DUP8 ADD MSTORE DUP5 PUSH1 0x60 SHL AND PUSH1 0x68 DUP7 ADD MSTORE CHAINID PUSH1 0x7C DUP7 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x9C DUP7 ADD MSTORE PUSH1 0xBC DUP6 ADD MSTORE PUSH1 0xBC DUP5 MSTORE DUP4 PUSH1 0xE0 DUP2 ADD LT SWAP1 PUSH1 0xE0 DUP6 ADD GT OR PUSH2 0x654 JUMPI PUSH1 0xE0 DUP4 ADD PUSH1 0x40 MSTORE DUP3 MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x4DC PUSH1 0xE0 DUP5 ADD PUSH2 0x1AB3 JUMP JUMPDEST CALLER PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x100 DUP4 ADD MSTORE DUP3 PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP3 ADD MSTORE CHAINID PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH2 0x180 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x1A0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1C0 DUP3 ADD MSTORE DUP3 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x200 DUP3 ADD MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x200 PUSH1 0x9 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 DUP2 DUP4 SLOAD AND OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x100 DUP8 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x3 DUP3 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x140 DUP8 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x160 DUP5 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH2 0x1A0 DUP5 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x1C0 DUP5 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x1E0 DUP5 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE ADD SWAP2 ADD MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x63F JUMPI PUSH1 0x20 SWAP5 POP PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CHAINID DUP4 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH32 0xCB59E257E7E6C29E3B2D154443821F4C7DFDEE5401F775E13DB6D7421C51D580 PUSH1 0x60 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA SLOAD PUSH2 0x699 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND PUSH2 0x1DA0 JUMP JUMPDEST DUP7 PUSH2 0x454 JUMP JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4E469669 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5F8B555B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1874AB93 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE DUP5 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x21702C8AF46127C7FA207F89D0B0A8441BB32959A0AC7DF790E9AB1A25C98926 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x7B8 CALLDATASIZE PUSH2 0x162B JUMP JUMPDEST POP POP PUSH2 0x7C2 PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x7CA PUSH2 0x183F JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x90B JUMPI PUSH1 0x9 DUP3 ADD PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x8CE JUMPI POP PUSH2 0x814 PUSH1 0x6 DUP5 ADD SLOAD TIMESTAMP PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 PUSH2 0x824 PUSH1 0x2 DUP3 ADD SWAP5 DUP6 SLOAD PUSH2 0x1FDA JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT SWAP1 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE DUP2 PUSH1 0x7 DUP3 ADD SSTORE DUP4 SLOAD SWAP2 DUP1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x8B8 JUMPI PUSH32 0x43D0DF41E1C07A3D313B4527A8A17595BFC156A6CC0D47045FE63B3AAFFB2B47 SWAP3 PUSH1 0x40 SWAP3 PUSH2 0x8A1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x1 DUP5 PUSH1 0x3 DUP6 ADD SLOAD AND SWAP4 ADD SWAP3 DUP5 DUP5 SLOAD AND SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST SLOAD AND SWAP5 SLOAD SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF924664D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x44 SWAP2 PUSH2 0x8EC SWAP1 PUSH1 0x4 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x17CC7429 PUSH1 0xE3 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH2 0x2710 PUSH2 0x9D9 PUSH1 0x9 SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x1BC6 JUMP JUMPDEST DIV PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x9FB PUSH2 0x15FF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA4B PUSH2 0x1678 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0xBBA9D55E9FD1A441B1617724E2FDB76777D15EC77AB2B72AC15952CBE97085DB PUSH1 0x0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xAA4 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0xAAC PUSH2 0x1D06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xB1C PUSH2 0x1615 JUMP JUMPDEST PUSH2 0xB24 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x4C910B69FE65A61F7531B9C5042B2329CA7179C77290AA7E2EB3AFA3C8511FD3 SWAP1 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB8A PUSH2 0x1615 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xBC1 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0xBC9 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x784C8F4DBF0FFEDD6E72C76501C545A70F8B203B30A26CE542BF92BA87C248A4 SWAP1 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x140 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xCB7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 SLOAD AND SWAP3 DUP2 PUSH1 0x1 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x2 DUP3 ADD SLOAD SWAP1 PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD SWAP1 PUSH1 0x6 DUP6 ADD SLOAD SWAP3 PUSH1 0x7 DUP7 ADD SLOAD SWAP5 PUSH1 0xFF PUSH1 0x9 PUSH1 0x8 DUP10 ADD SLOAD SWAP9 ADD SLOAD AND SWAP8 PUSH1 0x40 MLOAD SWAP11 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0xCC7 CALLDATASIZE PUSH2 0x162B JUMP JUMPDEST SWAP1 PUSH2 0xCD0 PUSH2 0x183F JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x9 DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x2 DUP2 EQ DUP1 ISZERO PUSH2 0xDA8 JUMPI JUMPDEST PUSH2 0xD81 JUMPI POP PUSH1 0xFF NOT AND PUSH1 0x4 OR SWAP1 SSTORE PUSH1 0x3 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH32 0xD2B4DD79C80AD92DA5A6DD7455DF9E531B9AD078FE353998DC6FC5C442DDC34F SWAP5 SWAP4 PUSH1 0x40 SWAP4 SWAP1 SWAP3 PUSH2 0xD56 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x1DA0 JUMP JUMPDEST DUP3 DUP3 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 MSTORE DUP2 PUSH1 0x20 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF924664D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x44 SWAP2 PUSH2 0xD9F SWAP1 PUSH1 0x4 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x4 DUP2 EQ PUSH2 0xCFC JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xDF1 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0xE2B JUMPI PUSH1 0x20 DUP2 PUSH32 0x8C4D35E54A3F2EF1134138FD8EA3DAEE6A3C89E10D2665996BABDF70261E2C76 SWAP3 PUSH1 0x9 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x58D620B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x7045ADFE67D5F94DBFDDCDB901E44BEF55BAACABB398C7CDDDA1BFD7620B1568 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x2 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xF23 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xF62 JUMPI PUSH1 0xFF NOT AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xFB7 PUSH2 0x15FF JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0xFD3 JUMPI PUSH2 0x275 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0x21702C8AF46127C7FA207F89D0B0A8441BB32959A0AC7DF790E9AB1A25C98926 DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 SWAP1 DUP2 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10E4 JUMPI POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH1 0x9 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI DUP1 PUSH2 0xD81 JUMPI POP PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD TIMESTAMP DUP2 MSTORE CALLER SWAP3 PUSH32 0xD7B0F99D057BC9987014E38568DE5D95BA76962296F6CF10DF2E891FD78232D8 SWAP2 LOG3 STOP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x10F0 CALLER PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x10FD DUP4 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP4 MSTORE DUP5 DUP4 ADD SWAP4 PUSH1 0x60 CALLDATASIZE DUP7 CALLDATACOPY DUP4 MLOAD ISZERO PUSH2 0x1258 JUMPI PUSH1 0x30 DUP6 MSTORE8 DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x1214 JUMPI POP POP PUSH2 0x11D1 JUMPI PUSH2 0x11CD SWAP4 PUSH2 0x117D SWAP4 PUSH2 0x11B5 SWAP4 PUSH2 0x11A6 PUSH1 0x48 SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x1A90 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x1B02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1243 DUP5 DUP8 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x1129 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x128A PUSH2 0x15FF JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x12A4 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1986 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x12D3 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x89 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH2 0x13A9 PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x13CD PUSH2 0x1678 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0x11A9D1A77F76361ED131C19B1DC5758504C51DBDE2E49FC973A0EF9577AD13D5 PUSH1 0x0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x3 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x214 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x146B JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x1460 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x120 DUP2 PUSH2 0x149C PUSH1 0x0 SWAP4 PUSH2 0x1AB3 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF PUSH1 0x9 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14F3 DUP5 PUSH2 0x1AB3 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x5 DUP1 DUP3 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP7 ADD MSTORE SWAP2 ADD SLOAD SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 LT ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x140 SWAP2 PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0xCB7 PUSH2 0x120 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP5 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP4 ADD SWAP1 JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x8F5 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x214 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x214 JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x214 JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x214 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x214 JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x214 JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xA6EEF7E35ABE7026729641147F7915573C7E97B47EFA546F5F6E3230263BCB49 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x16BE JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x16C7 CALLER PUSH2 0x1BEA JUMP JUMPDEST DUP3 DUP6 MLOAD SWAP3 PUSH2 0x16D4 DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x17BD JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x1B02 JUMP JUMPDEST MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x17ED DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x1701 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xF6CEFD16E50E3A9E8A37EA00763412696EC6DFC8D1C400E69A0E851A5205E59A PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 SWAP1 PUSH32 0x7045ADFE67D5F94DBFDDCDB901E44BEF55BAACABB398C7CDDDA1BFD7620B1568 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x18A8 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18B1 CALLER PUSH2 0x1BEA JUMP JUMPDEST SWAP1 DUP6 MLOAD SWAP3 PUSH2 0x18BE DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x1940 JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1970 DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x18EB JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 PUSH1 0x20 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP5 MSTORE PUSH1 0xFF DUP6 DUP5 KECCAK256 SLOAD AND ISZERO PUSH2 0x19B2 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x19BB CALLER PUSH2 0x1BEA JUMP JUMPDEST SWAP1 DUP6 MLOAD SWAP3 PUSH2 0x19C8 DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x1A4A JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1A7A DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1AA3 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A93 JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1B44 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x1B81 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x8B8 JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1258 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x1258 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x1C8B JUMPI POP POP PUSH2 0x1C47 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1CE4 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1CBA DUP5 DUP7 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x8B8 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x1D12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x1D5B JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x1AD0 JUMPI PUSH2 0x1DF0 SWAP3 PUSH1 0x40 MSTORE PUSH2 0x1DF2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP3 DUP2 LT DUP3 DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP4 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP5 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x1F3E JUMPI RETURNDATASIZE SWAP3 DUP4 GT PUSH2 0x1F2A JUMPI SWAP1 PUSH2 0x1E8D SWAP4 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1E80 DUP9 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP6 PUSH2 0x1B02 JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x1F49 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x1EFF JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x1EA8 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x1F26 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1F23 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x1E9B JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 PUSH2 0x1E8D SWAP4 SWAP3 POP PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x1FAB JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x1F5D JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x1F66 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1FBE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x11CD SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x207C JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2047 JUMPI JUMPDEST POP SWAP2 PUSH2 0x203E PUSH2 0x2043 SWAP3 PUSH5 0x496CEBB800 SWAP5 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x2074 JUMPI JUMPDEST DUP2 PUSH2 0x2061 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1B02 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1F23 JUMPI POP MLOAD SWAP1 PUSH2 0x203E PUSH2 0x2029 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E EXTCODECOPY CALLDATASIZE 0xC3 0x24 SWAP10 PUSH0 TIMESTAMP 0xCB 0xFB 0xC9 0xC0 ADDRESS 0x5D DUP8 PUSH24 0x464E494D5502F9ECEB878775C9A7A4EA64736F6C63430008 EQ STOP CALLER 0x2F DUP8 DUP9 GT PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D00000000 ","sourceMap":"634:12798:17:-:0;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;;-1:-1:-1;;634:12798:17;;;;1064:1;;;;996:15:2;1064:1:17;;996:15:2;1064:1:17;2245:2;;634:12798;;;;;;;;;3779:26;;;634:12798;;;;3850:25;;;634:12798;;;3919:27;;;634:12798;;3983:39;;634:12798;4032:36;2245:2;634:12798;;-1:-1:-1;;;;;;634:12798:17;;;;;;1064:1;;;;;;;;;4148:10;634:12798;;;;;;;;3983:39;;;4263:15;;1064:1;634:12798;7669:23:0;7665:149;;-1:-1:-1;790:33:17;1064:1;;;;;;;;;4148:10;634:12798;;;;1064:1;634:12798;;;;;7669:23:0;7665:149;;-1:-1:-1;1064:1:17;;;;;;;;;;;;;;;;996:15:2;1064:1:17;;;;;;;;;;;;;1160;1064;;;;;;;;;;;;;1210:3;1064:1;;;;;;;;;;;;;1263:5;1064:1;;;;;;;;;;;;;1314:4;1064:1;;;;;;;;;;634:12798;;;;;;;3983:39;634:12798;;;;;;;;;;;;;;;;;7665:149:0;1064:1:17;;;;;;;;;4148:10;634:12798;;;;;;;1064:1;;;;;;;;4148:10;;;7763:40:0;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;;;1064:1:17;;;;;;;;;4148:10;634:12798;;;;;;;1064:1;;;;;;;;4148:10;;7763:40:0;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;634:12798:17;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;634:12798:17;;;;;;-1:-1:-1;634:12798:17;;;;;-1:-1:-1;634:12798:17;;;;-1:-1:-1;;;;;634:12798:17;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":5653,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_22329":{"entryPoint":5631,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_bytes32t_string_calldata":{"entryPoint":5675,"id":null,"parameterSlots":1,"returnSlots":3},"abi_encode_enum_BridgeStatus":{"entryPoint":5618,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_string":{"entryPoint":6948,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":7110,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":7417,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":6800,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":6914,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_22326":{"entryPoint":6835,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_39455":{"entryPoint":6886,"id":null,"parameterSlots":1,"returnSlots":0},"fun_calculateBridgeYield":{"entryPoint":8154,"id":4325,"parameterSlots":2,"returnSlots":1},"fun_callOptionalReturn":{"entryPoint":7666,"id":1614,"parameterSlots":2,"returnSlots":0},"fun_checkRole":{"entryPoint":6534,"id":92,"parameterSlots":1,"returnSlots":0},"fun_checkRole_22328":{"entryPoint":5752,"id":92,"parameterSlots":0,"returnSlots":0},"fun_checkRole_22338":{"entryPoint":6207,"id":92,"parameterSlots":0,"returnSlots":0},"fun_nonReentrantBefore":{"entryPoint":7498,"id":541,"parameterSlots":0,"returnSlots":0},"fun_requireNotPaused":{"entryPoint":7430,"id":452,"parameterSlots":0,"returnSlots":0},"fun_revokeRole":{"entryPoint":6992,"id":314,"parameterSlots":2,"returnSlots":0},"fun_safeTransfer":{"entryPoint":7584,"id":1320,"parameterSlots":3,"returnSlots":0},"fun_toHexString":{"entryPoint":7146,"id":2206,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":8009,"id":1948,"parameterSlots":4,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":7129,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"3659":[{"length":32,"start":3716}],"3662":[{"length":32,"start":2410},{"length":32,"start":8176}]},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c90816224a1b81461147c5750806301ffc9a714611426578063067bd07a1461140a5780630c4844aa146113b157806317606024146113885780631dac56d31461136c57806320eb563214611350578063248a9ca3146113215780632f2ff15d1461126e57806334284e4b1461103057806336568abe14610f9e5780633f4ba83a14610f0a57806348bf1c5114610eee5780634be40fd114610eb35780635221c1f014610e3d57806353e589ac14610e6e578063548d496f14610e3d5780635a1c036614610dd55780635c975abb14610db257806368c4ac2614610b695780636c5556b714610cb95780636c63f97114610c115780636d69fcaf14610ba857806375151b6314610b695780637631919014610b0357806382b12dd714610ae55780638456cb5914610a8b57806387188a0014610a2f57806391d14854146109e25780639822dded146109b5578063a217fddf14610999578063a7f8a5e214610954578063ac2e493614610923578063c06575f4146107aa578063c415b95c14610781578063c49baebe14610746578063c4a0158714610712578063c9a4d32f1461034a578063cdcdd5481461032d578063d2c35ce814610277578063d547741f14610236578063e1f1c4a7146102195763efc21e3f146101f757600080fd5b346102145760003660031901126102145760206040516121058152f35b600080fd5b346102145760003660031901126102145760206040516127108152f35b34610214576040366003190112610214576102756004356102556115ff565b90806000526001602052610270600160406000200154611986565b611b50565b005b3461021457602036600319011261021457610290611615565b610298611678565b6001600160a01b031680156102e8576020817fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f926001600160601b0360a01b600a541617600a55604051908152a1005b60405162461bcd60e51b815260206004820152601960248201527f496e76616c696420636f6c6c6563746f722061646472657373000000000000006044820152606490fd5b3461021457600036600319011261021457602060405161a4b18152f35b3461021457608036600319011261021457610363611615565b60249081356044356001600160a01b038116810361021457610383611d4a565b61038b611d06565b606435600052600460205260ff60406000205416156106f9576001600160a01b03811660009081526005602052604090205460ff16156106d85781156106c6576001600160a01b038316156106b4576127106103e960095484611bc6565b04906103f58284611cf9565b92604051926323b872dd60e01b602085015233878501523060448501528160648501526064845260a0840167ffffffffffffffff948082108683111761069f5760409190915261044e906001600160a01b038516611df2565b8061067e575b5060085492600019841461066957600184016008556040519360208501923360601b84526001600160601b031990818960601b16603488015260488701528460601b16606886015246607c860152606435609c86015260bc85015260bc84528360e08101109060e0850111176106545760e0830160405282519020936104dc60e08401611ab3565b3360e084015260018060a01b03166101008301528261012083015260018060a01b031661014082015246610160820152606435610180820152426101a082015260006101c0820152826101e082015260006102008201528260005260036020526102006009604060002060018060a01b0360e0850151166001600160601b0360a01b90818354161782556001820160018060a01b0361010087015116828254161790556101208501516002830155600382019060018060a01b036101408701511690825416179055610160840151600482015561018084015160058201556101a084015160068201556101c084015160078201556101e0840151600882015501910151600581101561063f576020945060ff8019835416911617905560405190815246838201526064356040820152817fcb59e257e7e6c29e3b2d154443821f4c7dfdee5401f775e13db6d7421c51d58060603393a36001600055604051908152f35b84634e487b7160e01b60005260216004526000fd5b85634e487b7160e01b60005260416004526000fd5b86634e487b7160e01b60005260116004526000fd5b600a5461069991906001600160a01b03908116908516611da0565b86610454565b88634e487b7160e01b60005260416004526000fd5b604051634e46966960e11b8152600490fd5b60405163162908e360e11b8152600490fd5b604051635f8b555b60e11b81526001600160a01b0390911660048201528390fd5b604051631874ab9360e31b815260643560048201528490fd5b34610214576020366003190112610214576004356000526007602052602060018060a01b0360406000205416604051908152f35b346102145760003660031901126102145760206040517f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c989268152f35b3461021457600036600319011261021457600a546040516001600160a01b039091168152602090f35b34610214576107b83661162b565b50506107c2611d4a565b6107ca61183f565b806000526003602052604060002090600660205260ff6040600020541661090b576009820160ff81541660058110156108f557600181036108ce5750610814600684015442611cf9565b9261082460028201948554611fda565b918360005260066020526002604060002060ff19906001828254161790558254161790558160078201558354918083018093116108b8577f43d0df41e1c07a3d313b4527a8a17595bfc156a6cc0d47045fe63b3aaffb2b47926040926108a160018060a01b03926001846003850154169301928484541690611da0565b541694549082519182526020820152a36001600055005b634e487b7160e01b600052601160045260246000fd5b60405163f924664d60e01b81526044916108ec9060048301906115f2565b60016024820152fd5b634e487b7160e01b600052602160045260246000fd5b602490604051906317cc742960e31b82526004820152fd5b34610214576020366003190112610214576004356000526006602052602060ff604060002054166040519015158152f35b34610214576000366003190112610214576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461021457600036600319011261021457602060405160008152f35b346102145760203660031901126102145760206127106109d9600954600435611bc6565b04604051908152f35b34610214576040366003190112610214576109fb6115ff565b600435600052600160205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461021457602036600319011261021457600435610a4b611678565b8060005260046020526040600020600160ff198254161790557fbba9d55e9fd1a441b1617724e2fdb76777d15ec77ab2b72ac15952cbe97085db600080a2005b3461021457600036600319011261021457610aa4611678565b610aac611d06565b600160ff1960025416176002557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b34610214576000366003190112610214576020600954604051908152f35b3461021457602036600319011261021457610b1c611615565b610b24611678565b6001600160a01b03166000818152600560205260408120805460ff191690557f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd39080a2005b34610214576020366003190112610214576001600160a01b03610b8a611615565b166000526005602052602060ff604060002054166040519015158152f35b3461021457602036600319011261021457610bc1611615565b610bc9611678565b6001600160a01b03166000818152600560205260408120805460ff191660011790557f784c8f4dbf0ffedd6e72c76501c545a70f8b203b30a26ce542bf92ba87c248a49080a2005b346102145760203660031901126102145760043560005260036020526101406040600020610cb760018060a01b0380835416928160018201541691600282015490600383015416600483015460058401549060068501549260078601549460ff6009600889015498015416976040519a8b5260208b015260408a01526060890152608088015260a087015260c086015260e08501526101008401526101208301906115f2565bf35b3461021457610cc73661162b565b90610cd061183f565b826000526003602052604060002060098101805460ff811660058110156108f557600281148015610da8575b610d81575060ff19166004179055600381015481546002909201547fd2b4dd79c80ad92da5a6dd7455df9e531b9ad078fe353998dc6fc5c442ddc34f94936040939092610d5692916001600160a01b039081169116611da0565b82825193849260208452816020850152848401376000828201840152601f01601f19168101030190a2005b60405163f924664d60e01b8152604491610d9f9060048301906115f2565b60006024820152fd5b5060048114610cfc565b3461021457600036600319011261021457602060ff600254166040519015158152f35b3461021457602036600319011261021457600435610df1611678565b6103e88111610e2b576020817f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c7692600955604051908152a1005b6040516358d620b360e01b8152600490fd5b34610214576020366003190112610214576004356000526004602052602060ff604060002054166040519015158152f35b34610214576000366003190112610214576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346102145760003660031901126102145760206040517f7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b15688152f35b3461021457600036600319011261021457602060405160028152f35b3461021457600036600319011261021457610f23611678565b60025460ff811615610f625760ff19166002557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461021457604036600319011261021457610fb76115ff565b336001600160a01b03821603610fd35761027590600435611b50565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461021457602080600319360112610214576004357f21702c8af46127c7fa207f89d0b0a8441bb32959a0ac7df790e9ab1a25c9892680600052600190818452604060002033600052845260ff60406000205416156110e457508160005260038352600960406000200190815460ff811660058110156108f55780610d81575060ff191617905560405142815233927fd7b0f99d057bc9987014e38568de5d95ba76962296f6cf10df2e891fd78232d891a3005b9091506110f033611bea565b604051916110fd83611ae6565b604283528483019360603686378351156112585760308553835181101561125857607860218501536041905b8082116112145750506111d1576111cd9361117d936111b5936111a6604894604051978576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a978801528251928391603789019101611a90565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190611a90565b01036028810184520182611b02565b60405162461bcd60e51b815291829160048301611b24565b0390fd5b6064846040519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611258576f181899199a1a9b1b9c1cb0b131b232b360811b901a6112438487611bd9565b5360041c9180156108b8576000190190611129565b634e487b7160e01b600052603260045260246000fd5b346102145760403660031901126102145760043561128a6115ff565b8160005260016020526112a4600160406000200154611986565b81600052600160205260406000209060018060a01b0316908160005260205260ff60406000205416156112d357005b8160005260016020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346102145760203660031901126102145760043560005260016020526020600160406000200154604051908152f35b3461021457600036600319011261021457602060405160898152f35b3461021457600036600319011261021457602060405160018152f35b346102145760403660031901126102145760206113a9602435600435611fda565b604051908152f35b34610214576020366003190112610214576004356113cd611678565b806000526004602052604060002060ff1981541690557f11a9d1a77f76361ed131c19b1dc5758504c51dbde2e49fc973a0ef9577ad13d5600080a2005b3461021457600036600319011261021457602060405160038152f35b346102145760203660031901126102145760043563ffffffff60e01b811680910361021457602090637965db0b60e01b811490811561146b575b506040519015158152f35b6301ffc9a760e01b14905082611460565b34610214576020366003190112610214576101208161149c600093611ab3565b8281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e08201528261010082015201526004356000526003602052604060002060ff6009604051926114f384611ab3565b80546001600160a01b0390811685526001820154811660208601526002820154604086015260038201541660608501526004810154608085015260058082015460a0860152600682015460c0860152600782015460e086015260088201546101008601529101549190911691908210156108f55761014091610120820152610cb76101206040519260018060a01b03815116845260018060a01b0360208201511660208501526040810151604085015260018060a01b0360608201511660608501526080810151608085015260a081015160a085015260c081015160c085015260e081015160e085015261010081015161010085015201516101208301905b9060058210156108f55752565b602435906001600160a01b038216820361021457565b600435906001600160a01b038216820361021457565b6040600319820112610214576004359160243567ffffffffffffffff9283821161021457806023830112156102145781600401359384116102145760248483010111610214576024019190565b3360009081527fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb49602090815260408083205490929060019060ff16156116be5750505050565b6116c733611bea565b828551926116d484611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b8183116117bd5750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b01036028810185520183611b02565b5162461bcd60e51b815291829160048301611b24565b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a6117ed8588611bd9565b5360041c92801561180357600019019190611701565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527ff6cefd16e50e3a9e8a37ea00763412696ec6dfc8d1c400e69a0e851a5205e59a60209081526040808320549092906001907f7045adfe67d5f94dbfddcdb901e44bef55baacabb398c7cddda1bfd7620b15689060ff16156118a8575050505050565b6118b133611bea565b908551926118be84611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b8183116119405750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a6119708588611bd9565b5360041c928015611803576000190191906118eb565b6000818152600190602091808352604093848320338452845260ff8584205416156119b2575050505050565b6119bb33611bea565b908551926119c884611ae6565b6042845285840194606036873784511561182b5760308653845182101561182b5790607860218601536041915b818311611a4a5750505061177b5761117d938593611765936117566048946111cd9951988576020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8b978801528251928391603789019101611a90565b909192600f81166010811015611817576f181899199a1a9b1b9c1cb0b131b232b360811b901a611a7a8588611bd9565b5360041c928015611803576000190191906119f5565b60005b838110611aa35750506000910152565b8181015183820152602001611a93565b610140810190811067ffffffffffffffff821117611ad057604052565b634e487b7160e01b600052604160045260246000fd5b6080810190811067ffffffffffffffff821117611ad057604052565b90601f8019910116810190811067ffffffffffffffff821117611ad057604052565b60409160208252611b448151809281602086015260208686019101611a90565b601f01601f1916010190565b906000918083526001602052604083209160018060a01b03169182845260205260ff604084205416611b8157505050565b8083526001602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b818102929181159184041417156108b857565b908151811015611258570160200190565b604051906060820182811067ffffffffffffffff821117611ad057604052602a82526020820160403682378251156112585760309053815160019081101561125857607860218401536029905b808211611c8b575050611c475790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015611ce4576f181899199a1a9b1b9c1cb0b131b232b360811b901a611cba8486611bd9565b5360041c918015611ccf576000190190611c37565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b919082039182116108b857565b60ff60025416611d1257565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414611d5b576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff831182841017611ad057611df092604052611df2565b565b60018060a01b0316906040516040810167ffffffffffffffff9082811082821117611ad0576040526020938483527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858401526000808587829751910182855af1903d15611f3e573d928311611f2a5790611e8d93929160405192611e8088601f19601f8401160185611b02565b83523d868885013e611f49565b805191821591848315611eff575b505050905015611ea85750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b919381809450010312611f2657820151908115158203611f23575080388084611e9b565b80fd5b5080fd5b634e487b7160e01b85526041600452602485fd5b90611e8d9392506060915b91929015611fab5750815115611f5d575090565b3b15611f665790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015611fbe5750805190602001fd5b60405162461bcd60e51b81529081906111cd9060048301611b24565b604051634b16524b60e11b8152906020826004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561207c57600092612047575b509161203e6120439264496cebb80094611bc6565b611bc6565b0490565b90916020823d8211612074575b8161206160209383611b02565b81010312611f235750519061203e612029565b3d9150612054565b6040513d6000823e3d90fdfea26469706673582212201e3c36c324995f42cbfbc9c0305d8777464e494d5502f9eceb878775c9a7a4ea64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH3 0x24A1B8 EQ PUSH2 0x147C JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1426 JUMPI DUP1 PUSH4 0x67BD07A EQ PUSH2 0x140A JUMPI DUP1 PUSH4 0xC4844AA EQ PUSH2 0x13B1 JUMPI DUP1 PUSH4 0x17606024 EQ PUSH2 0x1388 JUMPI DUP1 PUSH4 0x1DAC56D3 EQ PUSH2 0x136C JUMPI DUP1 PUSH4 0x20EB5632 EQ PUSH2 0x1350 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1321 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x126E JUMPI DUP1 PUSH4 0x34284E4B EQ PUSH2 0x1030 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0xF9E JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0xF0A JUMPI DUP1 PUSH4 0x48BF1C51 EQ PUSH2 0xEEE JUMPI DUP1 PUSH4 0x4BE40FD1 EQ PUSH2 0xEB3 JUMPI DUP1 PUSH4 0x5221C1F0 EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0x53E589AC EQ PUSH2 0xE6E JUMPI DUP1 PUSH4 0x548D496F EQ PUSH2 0xE3D JUMPI DUP1 PUSH4 0x5A1C0366 EQ PUSH2 0xDD5 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0xDB2 JUMPI DUP1 PUSH4 0x68C4AC26 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x6C5556B7 EQ PUSH2 0xCB9 JUMPI DUP1 PUSH4 0x6C63F971 EQ PUSH2 0xC11 JUMPI DUP1 PUSH4 0x6D69FCAF EQ PUSH2 0xBA8 JUMPI DUP1 PUSH4 0x75151B63 EQ PUSH2 0xB69 JUMPI DUP1 PUSH4 0x76319190 EQ PUSH2 0xB03 JUMPI DUP1 PUSH4 0x82B12DD7 EQ PUSH2 0xAE5 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xA8B JUMPI DUP1 PUSH4 0x87188A00 EQ PUSH2 0xA2F JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x9E2 JUMPI DUP1 PUSH4 0x9822DDED EQ PUSH2 0x9B5 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x999 JUMPI DUP1 PUSH4 0xA7F8A5E2 EQ PUSH2 0x954 JUMPI DUP1 PUSH4 0xAC2E4936 EQ PUSH2 0x923 JUMPI DUP1 PUSH4 0xC06575F4 EQ PUSH2 0x7AA JUMPI DUP1 PUSH4 0xC415B95C EQ PUSH2 0x781 JUMPI DUP1 PUSH4 0xC49BAEBE EQ PUSH2 0x746 JUMPI DUP1 PUSH4 0xC4A01587 EQ PUSH2 0x712 JUMPI DUP1 PUSH4 0xC9A4D32F EQ PUSH2 0x34A JUMPI DUP1 PUSH4 0xCDCDD548 EQ PUSH2 0x32D JUMPI DUP1 PUSH4 0xD2C35CE8 EQ PUSH2 0x277 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x236 JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x219 JUMPI PUSH4 0xEFC21E3F EQ PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2105 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x275 PUSH1 0x4 CALLDATALOAD PUSH2 0x255 PUSH2 0x15FF JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x270 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1986 JUMP JUMPDEST PUSH2 0x1B50 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x290 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0x298 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x20 DUP2 PUSH32 0xE5693914D19C789BDEE50A362998C0BC8D035A835F9871DA5D51152F0582C34F SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL PUSH1 0xA SLOAD AND OR PUSH1 0xA SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E76616C696420636F6C6C6563746F72206164647265737300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xA4B1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x363 PUSH2 0x1615 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x214 JUMPI PUSH2 0x383 PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x38B PUSH2 0x1D06 JUMP JUMPDEST PUSH1 0x64 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x6F9 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6D8 JUMPI DUP2 ISZERO PUSH2 0x6C6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x6B4 JUMPI PUSH2 0x2710 PUSH2 0x3E9 PUSH1 0x9 SLOAD DUP5 PUSH2 0x1BC6 JUMP JUMPDEST DIV SWAP1 PUSH2 0x3F5 DUP3 DUP5 PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 PUSH1 0x40 MLOAD SWAP3 PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP6 ADD MSTORE CALLER DUP8 DUP6 ADD MSTORE ADDRESS PUSH1 0x44 DUP6 ADD MSTORE DUP2 PUSH1 0x64 DUP6 ADD MSTORE PUSH1 0x64 DUP5 MSTORE PUSH1 0xA0 DUP5 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP5 DUP1 DUP3 LT DUP7 DUP4 GT OR PUSH2 0x69F JUMPI PUSH1 0x40 SWAP2 SWAP1 SWAP2 MSTORE PUSH2 0x44E SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH2 0x1DF2 JUMP JUMPDEST DUP1 PUSH2 0x67E JUMPI JUMPDEST POP PUSH1 0x8 SLOAD SWAP3 PUSH1 0x0 NOT DUP5 EQ PUSH2 0x669 JUMPI PUSH1 0x1 DUP5 ADD PUSH1 0x8 SSTORE PUSH1 0x40 MLOAD SWAP4 PUSH1 0x20 DUP6 ADD SWAP3 CALLER PUSH1 0x60 SHL DUP5 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB NOT SWAP1 DUP2 DUP10 PUSH1 0x60 SHL AND PUSH1 0x34 DUP9 ADD MSTORE PUSH1 0x48 DUP8 ADD MSTORE DUP5 PUSH1 0x60 SHL AND PUSH1 0x68 DUP7 ADD MSTORE CHAINID PUSH1 0x7C DUP7 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x9C DUP7 ADD MSTORE PUSH1 0xBC DUP6 ADD MSTORE PUSH1 0xBC DUP5 MSTORE DUP4 PUSH1 0xE0 DUP2 ADD LT SWAP1 PUSH1 0xE0 DUP6 ADD GT OR PUSH2 0x654 JUMPI PUSH1 0xE0 DUP4 ADD PUSH1 0x40 MSTORE DUP3 MLOAD SWAP1 KECCAK256 SWAP4 PUSH2 0x4DC PUSH1 0xE0 DUP5 ADD PUSH2 0x1AB3 JUMP JUMPDEST CALLER PUSH1 0xE0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x100 DUP4 ADD MSTORE DUP3 PUSH2 0x120 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH2 0x140 DUP3 ADD MSTORE CHAINID PUSH2 0x160 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH2 0x180 DUP3 ADD MSTORE TIMESTAMP PUSH2 0x1A0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1C0 DUP3 ADD MSTORE DUP3 PUSH2 0x1E0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x200 DUP3 ADD MSTORE DUP3 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x200 PUSH1 0x9 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0xE0 DUP6 ADD MLOAD AND PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP1 DUP2 DUP4 SLOAD AND OR DUP3 SSTORE PUSH1 0x1 DUP3 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x100 DUP8 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x120 DUP6 ADD MLOAD PUSH1 0x2 DUP4 ADD SSTORE PUSH1 0x3 DUP3 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH2 0x140 DUP8 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x160 DUP5 ADD MLOAD PUSH1 0x4 DUP3 ADD SSTORE PUSH2 0x180 DUP5 ADD MLOAD PUSH1 0x5 DUP3 ADD SSTORE PUSH2 0x1A0 DUP5 ADD MLOAD PUSH1 0x6 DUP3 ADD SSTORE PUSH2 0x1C0 DUP5 ADD MLOAD PUSH1 0x7 DUP3 ADD SSTORE PUSH2 0x1E0 DUP5 ADD MLOAD PUSH1 0x8 DUP3 ADD SSTORE ADD SWAP2 ADD MLOAD PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x63F JUMPI PUSH1 0x20 SWAP5 POP PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE CHAINID DUP4 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP3 ADD MSTORE DUP2 PUSH32 0xCB59E257E7E6C29E3B2D154443821F4C7DFDEE5401F775E13DB6D7421C51D580 PUSH1 0x60 CALLER SWAP4 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP5 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP6 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP7 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0xA SLOAD PUSH2 0x699 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND PUSH2 0x1DA0 JUMP JUMPDEST DUP7 PUSH2 0x454 JUMP JUMPDEST DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4E469669 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5F8B555B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE DUP4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1874AB93 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x4 DUP3 ADD MSTORE DUP5 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x21702C8AF46127C7FA207F89D0B0A8441BB32959A0AC7DF790E9AB1A25C98926 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0xA SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0x7B8 CALLDATASIZE PUSH2 0x162B JUMP JUMPDEST POP POP PUSH2 0x7C2 PUSH2 0x1D4A JUMP JUMPDEST PUSH2 0x7CA PUSH2 0x183F JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x90B JUMPI PUSH1 0x9 DUP3 ADD PUSH1 0xFF DUP2 SLOAD AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x1 DUP2 SUB PUSH2 0x8CE JUMPI POP PUSH2 0x814 PUSH1 0x6 DUP5 ADD SLOAD TIMESTAMP PUSH2 0x1CF9 JUMP JUMPDEST SWAP3 PUSH2 0x824 PUSH1 0x2 DUP3 ADD SWAP5 DUP6 SLOAD PUSH2 0x1FDA JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT SWAP1 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE DUP3 SLOAD AND OR SWAP1 SSTORE DUP2 PUSH1 0x7 DUP3 ADD SSTORE DUP4 SLOAD SWAP2 DUP1 DUP4 ADD DUP1 SWAP4 GT PUSH2 0x8B8 JUMPI PUSH32 0x43D0DF41E1C07A3D313B4527A8A17595BFC156A6CC0D47045FE63B3AAFFB2B47 SWAP3 PUSH1 0x40 SWAP3 PUSH2 0x8A1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP3 PUSH1 0x1 DUP5 PUSH1 0x3 DUP6 ADD SLOAD AND SWAP4 ADD SWAP3 DUP5 DUP5 SLOAD AND SWAP1 PUSH2 0x1DA0 JUMP JUMPDEST SLOAD AND SWAP5 SLOAD SWAP1 DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF924664D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x44 SWAP2 PUSH2 0x8EC SWAP1 PUSH1 0x4 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x24 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH4 0x17CC7429 PUSH1 0xE3 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH2 0x2710 PUSH2 0x9D9 PUSH1 0x9 SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x1BC6 JUMP JUMPDEST DIV PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x9FB PUSH2 0x15FF JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xA4B PUSH2 0x1678 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH32 0xBBA9D55E9FD1A441B1617724E2FDB76777D15EC77AB2B72AC15952CBE97085DB PUSH1 0x0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xAA4 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0xAAC PUSH2 0x1D06 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT PUSH1 0x2 SLOAD AND OR PUSH1 0x2 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x9 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xB1C PUSH2 0x1615 JUMP JUMPDEST PUSH2 0xB24 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x4C910B69FE65A61F7531B9C5042B2329CA7179C77290AA7E2EB3AFA3C8511FD3 SWAP1 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0xB8A PUSH2 0x1615 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xBC1 PUSH2 0x1615 JUMP JUMPDEST PUSH2 0xBC9 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x784C8F4DBF0FFEDD6E72C76501C545A70F8B203B30A26CE542BF92BA87C248A4 SWAP1 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH2 0x140 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xCB7 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 DUP4 SLOAD AND SWAP3 DUP2 PUSH1 0x1 DUP3 ADD SLOAD AND SWAP2 PUSH1 0x2 DUP3 ADD SLOAD SWAP1 PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x4 DUP4 ADD SLOAD PUSH1 0x5 DUP5 ADD SLOAD SWAP1 PUSH1 0x6 DUP6 ADD SLOAD SWAP3 PUSH1 0x7 DUP7 ADD SLOAD SWAP5 PUSH1 0xFF PUSH1 0x9 PUSH1 0x8 DUP10 ADD SLOAD SWAP9 ADD SLOAD AND SWAP8 PUSH1 0x40 MLOAD SWAP11 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH2 0xCC7 CALLDATASIZE PUSH2 0x162B JUMP JUMPDEST SWAP1 PUSH2 0xCD0 PUSH2 0x183F JUMP JUMPDEST DUP3 PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x9 DUP2 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI PUSH1 0x2 DUP2 EQ DUP1 ISZERO PUSH2 0xDA8 JUMPI JUMPDEST PUSH2 0xD81 JUMPI POP PUSH1 0xFF NOT AND PUSH1 0x4 OR SWAP1 SSTORE PUSH1 0x3 DUP2 ADD SLOAD DUP2 SLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SLOAD PUSH32 0xD2B4DD79C80AD92DA5A6DD7455DF9E531B9AD078FE353998DC6FC5C442DDC34F SWAP5 SWAP4 PUSH1 0x40 SWAP4 SWAP1 SWAP3 PUSH2 0xD56 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x1DA0 JUMP JUMPDEST DUP3 DUP3 MLOAD SWAP4 DUP5 SWAP3 PUSH1 0x20 DUP5 MSTORE DUP2 PUSH1 0x20 DUP6 ADD MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP2 ADD SUB ADD SWAP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xF924664D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x44 SWAP2 PUSH2 0xD9F SWAP1 PUSH1 0x4 DUP4 ADD SWAP1 PUSH2 0x15F2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x24 DUP3 ADD MSTORE REVERT JUMPDEST POP PUSH1 0x4 DUP2 EQ PUSH2 0xCFC JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0xDF1 PUSH2 0x1678 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0xE2B JUMPI PUSH1 0x20 DUP2 PUSH32 0x8C4D35E54A3F2EF1134138FD8EA3DAEE6A3C89E10D2665996BABDF70261E2C76 SWAP3 PUSH1 0x9 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x58D620B3 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x7045ADFE67D5F94DBFDDCDB901E44BEF55BAACABB398C7CDDDA1BFD7620B1568 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x2 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xF23 PUSH2 0x1678 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0xF62 JUMPI PUSH1 0xFF NOT AND PUSH1 0x2 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0xFB7 PUSH2 0x15FF JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0xFD3 JUMPI PUSH2 0x275 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x1B50 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH32 0x21702C8AF46127C7FA207F89D0B0A8441BB32959A0AC7DF790E9AB1A25C98926 DUP1 PUSH1 0x0 MSTORE PUSH1 0x1 SWAP1 DUP2 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP5 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10E4 JUMPI POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH1 0x9 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SWAP1 DUP2 SLOAD PUSH1 0xFF DUP2 AND PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x8F5 JUMPI DUP1 PUSH2 0xD81 JUMPI POP PUSH1 0xFF NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD TIMESTAMP DUP2 MSTORE CALLER SWAP3 PUSH32 0xD7B0F99D057BC9987014E38568DE5D95BA76962296F6CF10DF2E891FD78232D8 SWAP2 LOG3 STOP JUMPDEST SWAP1 SWAP2 POP PUSH2 0x10F0 CALLER PUSH2 0x1BEA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 PUSH2 0x10FD DUP4 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP4 MSTORE DUP5 DUP4 ADD SWAP4 PUSH1 0x60 CALLDATASIZE DUP7 CALLDATACOPY DUP4 MLOAD ISZERO PUSH2 0x1258 JUMPI PUSH1 0x30 DUP6 MSTORE8 DUP4 MLOAD DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x1214 JUMPI POP POP PUSH2 0x11D1 JUMPI PUSH2 0x11CD SWAP4 PUSH2 0x117D SWAP4 PUSH2 0x11B5 SWAP4 PUSH2 0x11A6 PUSH1 0x48 SWAP5 PUSH1 0x40 MLOAD SWAP8 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x1A90 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP5 MSTORE ADD DUP3 PUSH2 0x1B02 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1243 DUP5 DUP8 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x8B8 JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x1129 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x128A PUSH2 0x15FF JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH2 0x12A4 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x1986 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x12D3 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x89 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH2 0x13A9 PUSH1 0x24 CALLDATALOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x1FDA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x13CD PUSH2 0x1678 JUMP JUMPDEST DUP1 PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0x11A9D1A77F76361ED131C19B1DC5758504C51DBDE2E49FC973A0EF9577AD13D5 PUSH1 0x0 DUP1 LOG2 STOP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x3 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x214 JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x146B JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x1460 JUMP JUMPDEST CALLVALUE PUSH2 0x214 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x214 JUMPI PUSH2 0x120 DUP2 PUSH2 0x149C PUSH1 0x0 SWAP4 PUSH2 0x1AB3 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE DUP3 PUSH1 0xE0 DUP3 ADD MSTORE DUP3 PUSH2 0x100 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF PUSH1 0x9 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14F3 DUP5 PUSH2 0x1AB3 JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND DUP6 MSTORE PUSH1 0x1 DUP3 ADD SLOAD DUP2 AND PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP7 ADD MSTORE PUSH1 0x3 DUP3 ADD SLOAD AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0x5 DUP1 DUP3 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x6 DUP3 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0x7 DUP3 ADD SLOAD PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0x8 DUP3 ADD SLOAD PUSH2 0x100 DUP7 ADD MSTORE SWAP2 ADD SLOAD SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 DUP3 LT ISZERO PUSH2 0x8F5 JUMPI PUSH2 0x140 SWAP2 PUSH2 0x120 DUP3 ADD MSTORE PUSH2 0xCB7 PUSH2 0x120 PUSH1 0x40 MLOAD SWAP3 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND DUP5 MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x20 DUP3 ADD MLOAD AND PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x40 DUP6 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP3 ADD MLOAD AND PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP6 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH2 0x100 DUP6 ADD MSTORE ADD MLOAD PUSH2 0x120 DUP4 ADD SWAP1 JUMPDEST SWAP1 PUSH1 0x5 DUP3 LT ISZERO PUSH2 0x8F5 JUMPI MSTORE JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x214 JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x214 JUMPI JUMP JUMPDEST PUSH1 0x40 PUSH1 0x3 NOT DUP3 ADD SLT PUSH2 0x214 JUMPI PUSH1 0x4 CALLDATALOAD SWAP2 PUSH1 0x24 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF SWAP3 DUP4 DUP3 GT PUSH2 0x214 JUMPI DUP1 PUSH1 0x23 DUP4 ADD SLT ISZERO PUSH2 0x214 JUMPI DUP2 PUSH1 0x4 ADD CALLDATALOAD SWAP4 DUP5 GT PUSH2 0x214 JUMPI PUSH1 0x24 DUP5 DUP4 ADD ADD GT PUSH2 0x214 JUMPI PUSH1 0x24 ADD SWAP2 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xA6EEF7E35ABE7026729641147F7915573C7E97B47EFA546F5F6E3230263BCB49 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x16BE JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x16C7 CALLER PUSH2 0x1BEA JUMP JUMPDEST DUP3 DUP6 MLOAD SWAP3 PUSH2 0x16D4 DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x17BD JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP6 MSTORE ADD DUP4 PUSH2 0x1B02 JUMP JUMPDEST MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP2 DUP3 SWAP2 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x17ED DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x1701 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xF6CEFD16E50E3A9E8A37EA00763412696EC6DFC8D1C400E69A0E851A5205E59A PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0x1 SWAP1 PUSH32 0x7045ADFE67D5F94DBFDDCDB901E44BEF55BAACABB398C7CDDDA1BFD7620B1568 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x18A8 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x18B1 CALLER PUSH2 0x1BEA JUMP JUMPDEST SWAP1 DUP6 MLOAD SWAP3 PUSH2 0x18BE DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x1940 JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1970 DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x18EB JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP1 PUSH1 0x20 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x40 SWAP4 DUP5 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP5 MSTORE PUSH1 0xFF DUP6 DUP5 KECCAK256 SLOAD AND ISZERO PUSH2 0x19B2 JUMPI POP POP POP POP POP JUMP JUMPDEST PUSH2 0x19BB CALLER PUSH2 0x1BEA JUMP JUMPDEST SWAP1 DUP6 MLOAD SWAP3 PUSH2 0x19C8 DUP5 PUSH2 0x1AE6 JUMP JUMPDEST PUSH1 0x42 DUP5 MSTORE DUP6 DUP5 ADD SWAP5 PUSH1 0x60 CALLDATASIZE DUP8 CALLDATACOPY DUP5 MLOAD ISZERO PUSH2 0x182B JUMPI PUSH1 0x30 DUP7 MSTORE8 DUP5 MLOAD DUP3 LT ISZERO PUSH2 0x182B JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP7 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x1A4A JUMPI POP POP POP PUSH2 0x177B JUMPI PUSH2 0x117D SWAP4 DUP6 SWAP4 PUSH2 0x1765 SWAP4 PUSH2 0x1756 PUSH1 0x48 SWAP5 PUSH2 0x11CD SWAP10 MLOAD SWAP9 DUP6 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP12 SWAP8 DUP9 ADD MSTORE DUP3 MLOAD SWAP3 DUP4 SWAP2 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1817 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1A7A DUP6 DUP9 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x1803 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x19F5 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1AA3 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1A93 JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x40 SWAP2 PUSH1 0x20 DUP3 MSTORE PUSH2 0x1B44 DUP2 MLOAD DUP1 SWAP3 DUP2 PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x20 DUP7 DUP7 ADD SWAP2 ADD PUSH2 0x1A90 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x1B81 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x8B8 JUMPI JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x1258 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x1258 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x1258 JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x1C8B JUMPI POP POP PUSH2 0x1C47 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x1CE4 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x1CBA DUP5 DUP7 PUSH2 0x1BD9 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x1C37 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x8B8 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x2 SLOAD AND PUSH2 0x1D12 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x1D5B JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x1AD0 JUMPI PUSH2 0x1DF0 SWAP3 PUSH1 0x40 MSTORE PUSH2 0x1DF2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF SWAP1 DUP3 DUP2 LT DUP3 DUP3 GT OR PUSH2 0x1AD0 JUMPI PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP4 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP5 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL SWAP1 RETURNDATASIZE ISZERO PUSH2 0x1F3E JUMPI RETURNDATASIZE SWAP3 DUP4 GT PUSH2 0x1F2A JUMPI SWAP1 PUSH2 0x1E8D SWAP4 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1E80 DUP9 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP6 PUSH2 0x1B02 JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x1F49 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x1EFF JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x1EA8 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x1F26 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x1F23 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x1E9B JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 PUSH2 0x1E8D SWAP4 SWAP3 POP PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x1FAB JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x1F5D JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x1F66 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1FBE JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x11CD SWAP1 PUSH1 0x4 DUP4 ADD PUSH2 0x1B24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 PUSH1 0x20 DUP3 PUSH1 0x4 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x207C JUMPI PUSH1 0x0 SWAP3 PUSH2 0x2047 JUMPI JUMPDEST POP SWAP2 PUSH2 0x203E PUSH2 0x2043 SWAP3 PUSH5 0x496CEBB800 SWAP5 PUSH2 0x1BC6 JUMP JUMPDEST PUSH2 0x1BC6 JUMP JUMPDEST DIV SWAP1 JUMP JUMPDEST SWAP1 SWAP2 PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x2074 JUMPI JUMPDEST DUP2 PUSH2 0x2061 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x1B02 JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x1F23 JUMPI POP MLOAD SWAP1 PUSH2 0x203E PUSH2 0x2029 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x2054 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E EXTCODECOPY CALLDATASIZE 0xC3 0x24 SWAP10 PUSH0 TIMESTAMP 0xCB 0xFB 0xC9 0xC0 ADDRESS 0x5D DUP8 PUSH24 0x464E494D5502F9ECEB878775C9A7A4EA64736F6C63430008 EQ STOP CALLER ","sourceMap":"634:12798:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;1314:4;634:12798;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;2320:5;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;5486:7:0;634:12798:17;;;;:::i;:::-;;;;;;;;2642:4:0;634:12798:17;;;;4604:22:0;634:12798:17;2642:4:0;:::i;:::-;5486:7;:::i;:::-;634:12798:17;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;2642:4:0;;:::i;:::-;-1:-1:-1;;;;;634:12798:17;11841:26;;634:12798;;;;11949:33;634:12798;-1:-1:-1;;;;;634:12798:17;;11907:27;634:12798;;;11907:27;634:12798;;;;;;11949:33;634:12798;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;1263:5;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;;;;;;;-1:-1:-1;;;;;634:12798:17;;;;;;2227:103:3;;:::i;:::-;1204:72:2;;:::i;:::-;634:12798:17;;;;;;;;;;;;;5094:36;5090:85;;-1:-1:-1;;;;;634:12798:17;;;;;;5190:15;634:12798;;;;;;;;5189:23;5185:59;;5258:11;;5254:39;;-1:-1:-1;;;;;634:12798:17;;5307:23;5303:54;;2320:5;5408:18;5417:9;634:12798;5408:18;;:::i;:::-;634:12798;5472:12;;;;;:::i;:::-;634:12798;;;;;;;;1482:68:8;;;5565:10:17;1482:68:8;;;634:12798:17;5585:4;634:12798;;;;;;;;;;1482:68:8;;634:12798:17;;;;;;;;;;;;;;;;;;;1482:68:8;;-1:-1:-1;;;;;634:12798:17;;1482:68:8;:::i;:::-;5659:7:17;5655:83;;634:12798;-1:-1:-1;6032:18:17;634:12798;;-1:-1:-1;;634:12798:17;;;;;;;6032:18;634:12798;;;5829:235;634:12798;5829:235;;5565:10;;634:12798;;;;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;5965:13;634:12798;;;;;;;;;;;;;;;5829:235;;634:12798;;;;;;;;;;;;;;;;;;;;5806:268;;634:12798;;;;;;:::i;:::-;5565:10;634:12798;;;;;;;;;;6158:403;;;634:12798;6158:403;;;;634:12798;;;;;;;6158:403;;;634:12798;5965:13;6158:403;;;634:12798;;;6158:403;;;634:12798;6418:15;6158:403;;;634:12798;;6158:403;;;634:12798;6158:403;;;;634:12798;;6158:403;;;634:12798;;;;;;;6158:403;5417:9;634:12798;;;;;;;;;;;;;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;;;;;;;6158:403;;;634:12798;;;;;;;;;6158:403;;;634:12798;;;;;;;;;;;;;;6158:403;;;634:12798;;;;;;;;;6158:403;;;634:12798;;;;;6158:403;;;634:12798;5190:15;634:12798;;;6158:403;;;634:12798;;;;;6158:403;;;634:12798;;;;;6158:403;;;634:12798;6032:18;634:12798;;;;6158:403;;634:12798;5190:15;634:12798;;;;;;;;;;;;;;;;;;;;;;;;5965:13;634:12798;;;;;;;;;;5565:10;6577:158;634:12798;5565:10;6577:158;;634:12798;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5655:83;5709:12;634:12798;5723:3;;634:12798;-1:-1:-1;;;;;634:12798:17;;;;;;5723:3;:::i;:::-;5655:83;;;634:12798;;;;;;;;;;;;5303:54;634:12798;;-1:-1:-1;;;5339:18:17;;634:12798;;5339:18;5254:39;634:12798;;-1:-1:-1;;;5278:15:17;;634:12798;;5278:15;5185:59;634:12798;;-1:-1:-1;;;5221:23:17;;-1:-1:-1;;;;;634:12798:17;;;;5221:23;;634:12798;;;5221:23;5090:85;634:12798;;-1:-1:-1;;;5139:36:17;;634:12798;;;5139:36;;634:12798;;;5139:36;634:12798;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;2053:50;634:12798;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;870:27;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;2331:27;634:12798;;;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;;;;:::i;:::-;2227:103:3;;;;:::i;:::-;2642:4:0;;:::i;:::-;634:12798:17;;;7782:18;634:12798;;;;;;7838:21;634:12798;;;;;;;;7834:116;;7972:10;;;634:12798;;;;;;;;;;7986:22;7972:36;;7968:123;;8195:13;8177:31;7838:21;8195:13;;634:12798;8177:15;:31;:::i;:::-;8255:10;8234:45;8255:10;;;634:12798;;;8234:45;:::i;:::-;634:12798;;;;7838:21;634:12798;;8255:10;634:12798;;;;;;7986:22;634:12798;;;;;;;;;;;;;8425:16;;;;634:12798;;;;;;;;;;;;8635:122;634:12798;;;8607:11;634:12798;;;;;8568:9;7986:22;8568:9;7782:18;8568:9;;634:12798;;8592:13;;634:12798;;;;;8607:11;;:::i;:::-;634:12798;;;;;;;;;;;;;;8635:122;7986:22;634:12798;;;;;;;;;;;;;;;7968:123;634:12798;;-1:-1:-1;;;8031:49:17;;634:12798;;;;;8031:49;;;634:12798;:::i;:::-;7986:22;634:12798;;;;8031:49;634:12798;;;;;;;;;;;;7834:116;634:12798;;;;7897:42;;;;;;634:12798;7897:42;;634:12798;7897:42;634:12798;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;1994:53;634:12798;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;950:38;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;2320:5;13389:18;13398:9;634:12798;;;13389:18;:::i;:::-;634:12798;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;2642:4:0;;:::i;:::-;634:12798:17;;;;;;;;;;;;;;;;;;10483:19;634:12798;10483:19;;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;;2642:4:0;;:::i;:::-;1204:72:2;;:::i;:::-;2255:4;634:12798:17;;2245:14:2;634:12798:17;;;2245:14:2;634:12798:17;2274:20:2;634:12798:17;;;734:10:10;634:12798:17;;2274:20:2;634:12798:17;;;;;;;-1:-1:-1;;634:12798:17;;;;;2218:29;634:12798;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;2642:4:0;;:::i;:::-;-1:-1:-1;;;;;634:12798:17;;;;;11243:15;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;11288:19;;634:12798;11288:19;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;;-1:-1:-1;;;;;634:12798:17;;:::i;:::-;;;;13127:15;634:12798;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;2642:4:0;;:::i;:::-;-1:-1:-1;;;;;634:12798:17;;;;;10976:15;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;;;11020:17;;634:12798;11020:17;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;1819:63;;634:12798;1819:63;;634:12798;;1819:63;;;;634:12798;1819:63;634:12798;1819:63;;634:12798;;;1819:63;;634:12798;1819:63;;;634:12798;1819:63;;;;634:12798;1819:63;;;;634:12798;1819:63;634:12798;1819:63;;;;634:12798;1819:63;;634:12798;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;2642:4:0;;;:::i;:::-;634:12798:17;;;9093:18;634:12798;;;;;9149:10;;;634:12798;;;;;;;;;;;9163:22;9149:36;;:75;;;;634:12798;9145:162;;-1:-1:-1;;;634:12798:17;;;;;9093:18;9414:9;;634:12798;;;9163:22;9450:10;;;634:12798;9477:35;;634:12798;;;;;9450:10;;634:12798;-1:-1:-1;;;;;634:12798:17;;;;;9450:10;:::i;:::-;634:12798;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;9477:35;;;;634:12798;9145:162;634:12798;;-1:-1:-1;;;9247:49:17;;634:12798;;;;;9247:49;;;634:12798;:::i;:::-;;;;;;9247:49;9149:75;9189:35;634:12798;9189:35;;9149:75;;634:12798;;;;;;-1:-1:-1;;634:12798:17;;;;;;1685:7:2;634:12798:17;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;2642:4:0;;:::i;:::-;11514::17;11505:13;;11501:38;;634:12798;;11593:18;634:12798;11560:18;634:12798;;;;;;11593:18;634:12798;11501:38;634:12798;;-1:-1:-1;;;11527:12:17;;634:12798;;11527:12;634:12798;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;904:40;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;790:33;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;1111:1;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;2642:4:0;;:::i;:::-;1685:7:2;634:12798:17;;;;;;;;;;1685:7:2;634:12798:17;2521:22:2;634:12798:17;;;734:10:10;634:12798:17;;2521:22:2;634:12798:17;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;:::i;:::-;734:10:10;-1:-1:-1;;;;;634:12798:17;;6133:23:0;634:12798:17;;6237:7:0;634:12798:17;;;6237:7:0;:::i;634:12798:17:-;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;870:27;634:12798;;;3130:6:0;634:12798:17;;;;;;;734:10:10;634:12798:17;;;;;;;;;;3931:23:0;3927:390;;634:12798:17;;;;;;;7117:10;634:12798;;;7117:10;634:12798;;;;;;;;;;;;7117:36;7113:123;;-1:-1:-1;;;634:12798:17;;;;;;7348:15;634:12798;;734:10:10;;7305:59:17;;;634:12798;3927:390:0;734:10:10;;;2497:52:11;734:10:10;2497:52:11;:::i;:::-;634:12798:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;634:12798:17;;;;;;;2000:15:11;634:12798:17;;;2000:15:11;634:12798:17;2025:128:11;2058:5;;;;;;2170:10;;278:18;;3970:336:0;634:12798:17;;;4022:252:0;634:12798:17;;;;;;4022:252:0;;-1:-1:-1;;;4022:252:0;;;;634:12798:17;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;:::i;:::-;;4022:252:0;;;;;;;;;:::i;:::-;634:12798:17;;-1:-1:-1;;;3970:336:0;;634:12798:17;;;;3970:336:0;;;:::i;:::-;;;;278:18:11;;634:12798:17;;;278:18:11;;;;;;;634:12798:17;278:18:11;;;;;;634:12798:17;278:18:11;634:12798:17;;;278:18:11;;2065:3;2105:11;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;634:12798:17;;2065:3:11;634:12798:17;;;;-1:-1:-1;;634:12798:17;;2030:26:11;;2096:21;634:12798:17;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;:::i;:::-;;;;;;;2642:4:0;634:12798:17;;;;4604:22:0;634:12798:17;2642:4:0;:::i;:::-;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;634:12798:17;7665:149:0;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;734:10:10;7763:40:0;;634:12798:17;7763:40:0;;634:12798:17;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;4604:22:0;634:12798:17;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;1210:3;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;1064:1;634:12798;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;2642:4:0;;:::i;:::-;634:12798:17;;;;;;;;;;;;;;;;10754:21;634:12798;10754:21;;634:12798;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2840:47:0;;;:87;;;;634:12798:17;;;;;;;;;;2840:87:0;-1:-1:-1;;;937:40:13;;-1:-1:-1;2840:87:0;;;634:12798:17;;;;;;-1:-1:-1;;634:12798:17;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;;;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;634:12798:17;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;634:12798:17;;;;;;:::o;:::-;;-1:-1:-1;;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3460:103:0:-;734:10:10;634:12798:17;;;;;;;;;;;;;;;;;3130:6:0;;634:12798:17;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;634:12798:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;634:12798:17;;;;;;;;2000:15:11;634:12798:17;;;2000:15:11;634:12798:17;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;634:12798:17;;;;4022:252:0;634:12798:17;;;;3970:336:0;634:12798:17;;4022:252:0;;-1:-1:-1;;;4022:252:0;;;;634:12798:17;;;;;;;;;;;;:::i;:::-;;4022:252:0;;;;;;;;;:::i;:::-;634:12798:17;-1:-1:-1;;;3970:336:0;;634:12798:17;;;2141:1:11;3970:336:0;;;:::i;278:18:11:-;;634:12798:17;;;278:18:11;;;;;;;2141:1;278:18;;;;;;634:12798:17;278:18:11;634:12798:17;;;278:18:11;;2065:3;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;634:12798:17;2065:3:11;634:12798:17;;;;-1:-1:-1;;634:12798:17;;2030:26:11;;;634:12798:17;-1:-1:-1;;;634:12798:17;;;2141:1:11;634:12798:17;;;;2096:21:11;-1:-1:-1;;;634:12798:17;;;2141:1:11;634:12798:17;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;3460:103:0;734:10:10;-1:-1:-1;634:12798:17;;;;;;;;;;;;;;;-1:-1:-1;3130:6:0;;790:33:17;;634:12798;;3931:23:0;3927:390;;3460:103;;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;634:12798:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;634:12798:17;;;;;;;;2000:15:11;634:12798:17;;;2000:15:11;634:12798:17;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;634:12798:17;;;;4022:252:0;634:12798:17;;;;3970:336:0;634:12798:17;;4022:252:0;;-1:-1:-1;;;4022:252:0;;;;634:12798:17;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;634:12798:17;2065:3:11;634:12798:17;;;;-1:-1:-1;;634:12798:17;;2030:26:11;;;3460:103:0;-1:-1:-1;634:12798:17;;;3130:6:0;634:12798:17;;;;;;;;;;;734:10:10;634:12798:17;;;;;;;;;;3931:23:0;3927:390;;3460:103;;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;4214:38:0;634:12798:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;634:12798:17;;;;;;;;2000:15:11;634:12798:17;;;2000:15:11;634:12798:17;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;634:12798:17;;;;4022:252:0;634:12798:17;;;;3970:336:0;634:12798:17;;4022:252:0;;-1:-1:-1;;;4022:252:0;;;;634:12798:17;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;634:12798:17;2065:3:11;634:12798:17;;;;-1:-1:-1;;634:12798:17;;2030:26:11;;;634:12798:17;;;;;;;;-1:-1:-1;;634:12798:17;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;634:12798:17;;;;:::o;7991:234:0:-;;-1:-1:-1;634:12798:17;;;;3130:6:0;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;8070:149:0;;7991:234;;;:::o;8070:149::-;634:12798:17;;;3130:6:0;634:12798:17;;;;;;;;;;;;;;;;;;;;8168:40:0;734:10:10;8168:40:0;;;7991:234::o;634:12798:17:-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o;1818:437:11:-;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1975:15:11;;;634:12798:17;;;;;;;;;2000:15:11;634:12798:17;;;2000:15:11;634:12798:17;2025:128:11;2058:5;;;;;;2170:10;;278:18;;1818:437;:::o;278:18::-;;634:12798:17;;278:18:11;;;;;634:12798:17;2141:1:11;278:18;;;634:12798:17;278:18:11;;;634:12798:17;278:18:11;634:12798:17;;;278:18:11;;2065:3;2105:11;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;634:12798:17;2065:3:11;634:12798:17;;;;-1:-1:-1;;634:12798:17;;2030:26:11;;634:12798:17;;;;;;;;;2141:1:11;634:12798:17;;2096:21:11;634:12798:17;;;;;;;;2141:1:11;634:12798:17;;;;;;;;;;;;:::o;1767:106:2:-;634:12798:17;1685:7:2;634:12798:17;;;;1767:106:2:o;634:12798:17:-;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;2336:287:3;1111:1:17;2468:7:3;634:12798:17;2468:19:3;1759:1;;1111::17;2468:7:3;634:12798:17;2336:287:3:o;1759:1::-;634:12798:17;;-1:-1:-1;;;1759:1:3;;;;;;;;;;;634:12798:17;1759:1:3;634:12798:17;;;1759:1:3;;;;941:175:8;634:12798:17;;-1:-1:-1;;;1050:58:8;;;;-1:-1:-1;;;;;634:12798:17;;;1050:58:8;;;634:12798:17;;;;;;;;;1050:58:8;;;634:12798:17;;;;;;;;;;;;;1050:58:8;634:12798:17;;;1050:58:8;:::i;:::-;941:175::o;5196:642::-;634:12798:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5487:31:9;;;;;;;;;;;;;634:12798:17;;;;;;;;;;;5535:69:9;634:12798:17;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;5535:69:9;:::i;:::-;634:12798:17;;5728:22:8;;;:56;;;;;;634:12798:17;;;;;;;;;5196:642:8;:::o;634:12798:17:-;;;;;278:18:11;;;;634:12798:17;;;;;;;;;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;5728:56:8;5754:30;;;;;;;634:12798:17;;;;5754:30:8;;634:12798:17;;;;;;;;;5728:56:8;;;;;;;634:12798:17;;;;;;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;5535:69:9;634:12798:17;;;;;7671:628:9;;;;7875:418;;;634:12798:17;;;7906:22:9;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;634:12798:17;;8201:17:9;:::o;634:12798:17:-;;;-1:-1:-1;;;634:12798:17;;;;;;;;;;;;;;;;;;;;7875:418:9;634:12798:17;;;;-1:-1:-1;8980:21:9;:17;;9152:142;;;;;;;8976:379;634:12798:17;;-1:-1:-1;;;9324:20:9;;634:12798:17;;;9324:20:9;;;;;;:::i;9725:495:17:-;634:12798;;-1:-1:-1;;;9919:26:17;;634:12798;9919:26;634:12798;9919:26;634:12798;9919:10;-1:-1:-1;;;;;634:12798:17;9919:26;;;;;;;;;;;9725:495;10120:19;;;:33;:19;634:12798;10120:19;;:::i;:::-;:33;:::i;:::-;634:12798;9725:495;:::o;9919:26::-;;;;;;;;;;;;;;;;;:::i;:::-;;;634:12798;;;;-1:-1:-1;634:12798:17;;10120:19;9919:26;;;;;-1:-1:-1;9919:26:17;;;634:12798;;;9919:26;634:12798;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"1676400","executionCost":"infinite","totalCost":"infinite"},"external":{"ARBITRUM_CHAIN_ID()":"991","BASE_CHAIN_ID()":"1076","BASIS_POINTS()":"1057","BRIDGE_OPERATOR_ROLE()":"441","DEFAULT_ADMIN_ROLE()":"815","ETHEREUM_CHAIN_ID()":"265","POLYGON_CHAIN_ID()":"287","SOLANA_CHAIN_ID()":"199","VALIDATOR_ROLE()":"925","XRPL_CHAIN_ID()":"419","addSupportedChain(uint256)":"infinite","addSupportedToken(address)":"infinite","bridgeFee()":"2808","bridgeTransactions(bytes32)":"22033","calculateBridgeYield(uint256,uint256)":"infinite","chainValidators(uint256)":"3134","completeBridge(bytes32,bytes)":"infinite","estimateBridgeFee(uint256)":"2990","feeCollector()":"3030","getBridgeTransaction(bytes32)":"infinite","getRoleAdmin(bytes32)":"2484","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3106","initiateBridge(address,uint256,address,uint256)":"infinite","isChainSupported(uint256)":"2644","isTokenSupported(address)":"2927","pause()":"infinite","paused()":"2666","processedTransactions(bytes32)":"3040","refundBridge(bytes32,string)":"infinite","removeSupportedChain(uint256)":"infinite","removeSupportedToken(address)":"infinite","renounceRole(bytes32,address)":"29008","revokeRole(bytes32,address)":"infinite","supportedChains(uint256)":"2688","supportedTokens(address)":"2839","supportsInterface(bytes4)":"301","unpause()":"infinite","updateBridgeFee(uint256)":"infinite","updateFeeCollector(address)":"infinite","validateBridgeTransaction(bytes32)":"infinite","yieldEscrow()":"infinite","yieldVault()":"infinite"}},"methodIdentifiers":{"ARBITRUM_CHAIN_ID()":"cdcdd548","BASE_CHAIN_ID()":"efc21e3f","BASIS_POINTS()":"e1f1c4a7","BRIDGE_OPERATOR_ROLE()":"4be40fd1","DEFAULT_ADMIN_ROLE()":"a217fddf","ETHEREUM_CHAIN_ID()":"1dac56d3","POLYGON_CHAIN_ID()":"20eb5632","SOLANA_CHAIN_ID()":"067bd07a","VALIDATOR_ROLE()":"c49baebe","XRPL_CHAIN_ID()":"48bf1c51","addSupportedChain(uint256)":"87188a00","addSupportedToken(address)":"6d69fcaf","bridgeFee()":"82b12dd7","bridgeTransactions(bytes32)":"6c63f971","calculateBridgeYield(uint256,uint256)":"17606024","chainValidators(uint256)":"c4a01587","completeBridge(bytes32,bytes)":"c06575f4","estimateBridgeFee(uint256)":"9822dded","feeCollector()":"c415b95c","getBridgeTransaction(bytes32)":"0024a1b8","getRoleAdmin(bytes32)":"248a9ca3","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","initiateBridge(address,uint256,address,uint256)":"c9a4d32f","isChainSupported(uint256)":"5221c1f0","isTokenSupported(address)":"75151b63","pause()":"8456cb59","paused()":"5c975abb","processedTransactions(bytes32)":"ac2e4936","refundBridge(bytes32,string)":"6c5556b7","removeSupportedChain(uint256)":"0c4844aa","removeSupportedToken(address)":"76319190","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","supportedChains(uint256)":"548d496f","supportedTokens(address)":"68c4ac26","supportsInterface(bytes4)":"01ffc9a7","unpause()":"3f4ba83a","updateBridgeFee(uint256)":"5a1c0366","updateFeeCollector(address)":"d2c35ce8","validateBridgeTransaction(bytes32)":"34284e4b","yieldEscrow()":"53e589ac","yieldVault()":"a7f8a5e2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yieldEscrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_yieldVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeCollector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientValidations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"enum CrossChainBridge.BridgeStatus\",\"name\":\"current\",\"type\":\"uint8\"},{\"internalType\":\"enum CrossChainBridge.BridgeStatus\",\"name\":\"expected\",\"type\":\"uint8\"}],\"name\":\"InvalidStatus\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"TransactionAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedValidator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"UnsupportedChain\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"UnsupportedToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"name\":\"BridgeCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"BridgeFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"BridgeInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BridgeValidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"FeeCollectorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ARBITRUM_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BRIDGE_OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHEREUM_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYGON_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SOLANA_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VALIDATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XRPL_CHAIN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"bridgeTransactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedYield\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum CrossChainBridge.BridgeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeElapsed\",\"type\":\"uint256\"}],\"name\":\"calculateBridgeYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainValidators\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"sourceChainProof\",\"type\":\"bytes\"}],\"name\":\"completeBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"estimateBridgeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeCollector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"getBridgeTransaction\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sourceChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accruedYield\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"transactionHash\",\"type\":\"bytes32\"},{\"internalType\":\"enum CrossChainBridge.BridgeStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"internalType\":\"struct CrossChainBridge.BridgeTransaction\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"destinationChainId\",\"type\":\"uint256\"}],\"name\":\"initiateBridge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"isChainSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenSupported\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedTransactions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"refundBridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"removeSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"updateBridgeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCollector\",\"type\":\"address\"}],\"name\":\"updateFeeCollector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"transactionId\",\"type\":\"bytes32\"}],\"name\":\"validateBridgeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldEscrow\",\"outputs\":[{\"internalType\":\"contract YieldEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldVault\",\"outputs\":[{\"internalType\":\"contract YieldVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages cross-chain payment transfers with yield preservation\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addSupportedChain(uint256)\":{\"details\":\"Adds support for a new chain\",\"params\":{\"chainId\":\"Chain ID to add\"}},\"addSupportedToken(address)\":{\"details\":\"Adds support for a new token\",\"params\":{\"token\":\"Token address to add\"}},\"calculateBridgeYield(uint256,uint256)\":{\"details\":\"Calculates yield accrued during bridge transit\",\"params\":{\"amount\":\"Principal amount\",\"timeElapsed\":\"Time in seconds\"},\"returns\":{\"_0\":\"yield Calculated yield amount\"}},\"completeBridge(bytes32,bytes)\":{\"details\":\"Completes a bridge transaction on destination chain\",\"params\":{\"sourceChainProof\":\"Proof from source chain (simplified for now)\",\"transactionId\":\"Transaction to complete\"}},\"estimateBridgeFee(uint256)\":{\"details\":\"Estimates bridge fee for an amount\",\"params\":{\"amount\":\"Amount to bridge\"},\"returns\":{\"_0\":\"fee Estimated fee\"}},\"getBridgeTransaction(bytes32)\":{\"details\":\"Gets bridge transaction details\",\"params\":{\"transactionId\":\"Transaction ID\"},\"returns\":{\"_0\":\"Transaction details\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initiateBridge(address,uint256,address,uint256)\":{\"details\":\"Initiates a cross-chain bridge transaction\",\"params\":{\"amount\":\"Amount to bridge\",\"destinationChainId\":\"Target chain ID\",\"recipient\":\"Address on destination chain\",\"token\":\"Token address\"},\"returns\":{\"transactionId\":\"Unique bridge transaction identifier\"}},\"isChainSupported(uint256)\":{\"details\":\"Checks if a chain is supported\",\"params\":{\"chainId\":\"Chain ID to check\"},\"returns\":{\"_0\":\"supported Whether the chain is supported\"}},\"isTokenSupported(address)\":{\"details\":\"Checks if a token is supported\",\"params\":{\"token\":\"Token address to check\"},\"returns\":{\"_0\":\"supported Whether the token is supported\"}},\"pause()\":{\"details\":\"Emergency pause\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"refundBridge(bytes32,string)\":{\"details\":\"Refunds a failed bridge transaction\",\"params\":{\"reason\":\"Failure reason\",\"transactionId\":\"Transaction to refund\"}},\"removeSupportedChain(uint256)\":{\"details\":\"Removes support for a chain\",\"params\":{\"chainId\":\"Chain ID to remove\"}},\"removeSupportedToken(address)\":{\"details\":\"Removes support for a token\",\"params\":{\"token\":\"Token address to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Resume from pause\"},\"updateBridgeFee(uint256)\":{\"details\":\"Updates bridge fee\",\"params\":{\"newFee\":\"New fee in basis points\"}},\"updateFeeCollector(address)\":{\"details\":\"Updates fee collector address\",\"params\":{\"newCollector\":\"New fee collector address\"}},\"validateBridgeTransaction(bytes32)\":{\"details\":\"Validates a bridge transaction (called by validators)\",\"params\":{\"transactionId\":\"Transaction to validate\"}}},\"title\":\"CrossChainBridge\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Supports Ethereum, XRPL, Solana, Polygon, Arbitrum, and Base\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/CrossChainBridge.sol\":\"CrossChainBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/CrossChainBridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./interfaces/IYieldStrategy.sol\\\";\\nimport \\\"./YieldEscrow.sol\\\";\\nimport \\\"./YieldVault.sol\\\";\\n\\n/**\\n * @title CrossChainBridge\\n * @dev Manages cross-chain payment transfers with yield preservation\\n * @notice Supports Ethereum, XRPL, Solana, Polygon, Arbitrum, and Base\\n */\\ncontract CrossChainBridge is ReentrancyGuard, AccessControl, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant BRIDGE_OPERATOR_ROLE = keccak256(\\\"BRIDGE_OPERATOR_ROLE\\\");\\n    bytes32 public constant VALIDATOR_ROLE = keccak256(\\\"VALIDATOR_ROLE\\\");\\n\\n    YieldEscrow public immutable yieldEscrow;\\n    YieldVault public immutable yieldVault;\\n\\n    // Chain identifiers\\n    uint256 public constant ETHEREUM_CHAIN_ID = 1;\\n    uint256 public constant XRPL_CHAIN_ID = 2;\\n    uint256 public constant SOLANA_CHAIN_ID = 3;\\n    uint256 public constant POLYGON_CHAIN_ID = 137;\\n    uint256 public constant ARBITRUM_CHAIN_ID = 42161;\\n    uint256 public constant BASE_CHAIN_ID = 8453;\\n\\n    // Bridge transaction structure\\n    struct BridgeTransaction {\\n        address sender;\\n        address recipient;\\n        uint256 amount;\\n        address token;\\n        uint256 sourceChainId;\\n        uint256 destinationChainId;\\n        uint256 timestamp;\\n        uint256 accruedYield;\\n        bytes32 transactionHash;\\n        BridgeStatus status;\\n    }\\n\\n    enum BridgeStatus {\\n        Initiated,\\n        Validated,\\n        Completed,\\n        Failed,\\n        Refunded\\n    }\\n\\n    // Storage\\n    mapping(bytes32 => BridgeTransaction) public bridgeTransactions;\\n    mapping(uint256 => bool) public supportedChains;\\n    mapping(address => bool) public supportedTokens;\\n    mapping(bytes32 => bool) public processedTransactions;\\n    mapping(uint256 => address) public chainValidators;\\n    \\n    // Nonce for unique transaction IDs\\n    uint256 private transactionNonce;\\n    \\n    // Fee structure\\n    uint256 public bridgeFee = 10; // 0.1% fee in basis points\\n    uint256 public constant BASIS_POINTS = 10000;\\n    address public feeCollector;\\n    \\n    // Events\\n    event BridgeInitiated(\\n        bytes32 indexed transactionId,\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 sourceChainId,\\n        uint256 destinationChainId\\n    );\\n    \\n    event BridgeValidated(\\n        bytes32 indexed transactionId,\\n        address indexed validator,\\n        uint256 timestamp\\n    );\\n    \\n    event BridgeCompleted(\\n        bytes32 indexed transactionId,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 yield\\n    );\\n    \\n    event BridgeFailed(\\n        bytes32 indexed transactionId,\\n        string reason\\n    );\\n    \\n    event ChainAdded(uint256 indexed chainId);\\n    event ChainRemoved(uint256 indexed chainId);\\n    event TokenAdded(address indexed token);\\n    event TokenRemoved(address indexed token);\\n    event FeeUpdated(uint256 newFee);\\n    event FeeCollectorUpdated(address newCollector);\\n\\n    // Custom errors\\n    error UnsupportedChain(uint256 chainId);\\n    error UnsupportedToken(address token);\\n    error InvalidAmount();\\n    error InvalidRecipient();\\n    error TransactionAlreadyProcessed(bytes32 transactionId);\\n    error InvalidStatus(BridgeStatus current, BridgeStatus expected);\\n    error InsufficientValidations();\\n    error InvalidFee();\\n    error UnauthorizedValidator();\\n\\n    constructor(\\n        address _yieldEscrow,\\n        address _yieldVault,\\n        address _feeCollector\\n    ) {\\n        require(_yieldEscrow != address(0), \\\"Invalid escrow address\\\");\\n        require(_yieldVault != address(0), \\\"Invalid vault address\\\");\\n        require(_feeCollector != address(0), \\\"Invalid fee collector\\\");\\n\\n        yieldEscrow = YieldEscrow(_yieldEscrow);\\n        yieldVault = YieldVault(_yieldVault);\\n        feeCollector = _feeCollector;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(BRIDGE_OPERATOR_ROLE, msg.sender);\\n\\n        // Initialize supported chains\\n        supportedChains[ETHEREUM_CHAIN_ID] = true;\\n        supportedChains[XRPL_CHAIN_ID] = true;\\n        supportedChains[SOLANA_CHAIN_ID] = true;\\n        supportedChains[POLYGON_CHAIN_ID] = true;\\n        supportedChains[ARBITRUM_CHAIN_ID] = true;\\n        supportedChains[BASE_CHAIN_ID] = true;\\n    }\\n\\n    /**\\n     * @dev Initiates a cross-chain bridge transaction\\n     * @param recipient Address on destination chain\\n     * @param amount Amount to bridge\\n     * @param token Token address\\n     * @param destinationChainId Target chain ID\\n     * @return transactionId Unique bridge transaction identifier\\n     */\\n    function initiateBridge(\\n        address recipient,\\n        uint256 amount,\\n        address token,\\n        uint256 destinationChainId\\n    ) external nonReentrant whenNotPaused returns (bytes32 transactionId) {\\n        if (!supportedChains[destinationChainId]) revert UnsupportedChain(destinationChainId);\\n        if (!supportedTokens[token]) revert UnsupportedToken(token);\\n        if (amount == 0) revert InvalidAmount();\\n        if (recipient == address(0)) revert InvalidRecipient();\\n\\n        // Calculate fee\\n        uint256 fee = (amount * bridgeFee) / BASIS_POINTS;\\n        uint256 netAmount = amount - fee;\\n\\n        // Transfer tokens from sender\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        // Transfer fee to collector\\n        if (fee > 0) {\\n            IERC20(token).safeTransfer(feeCollector, fee);\\n        }\\n\\n        // Generate unique transaction ID\\n        transactionId = keccak256(\\n            abi.encodePacked(\\n                msg.sender,\\n                recipient,\\n                amount,\\n                token,\\n                block.chainid,\\n                destinationChainId,\\n                transactionNonce++\\n            )\\n        );\\n\\n        // Store transaction details\\n        bridgeTransactions[transactionId] = BridgeTransaction({\\n            sender: msg.sender,\\n            recipient: recipient,\\n            amount: netAmount,\\n            token: token,\\n            sourceChainId: block.chainid,\\n            destinationChainId: destinationChainId,\\n            timestamp: block.timestamp,\\n            accruedYield: 0,\\n            transactionHash: transactionId,\\n            status: BridgeStatus.Initiated\\n        });\\n\\n        emit BridgeInitiated(\\n            transactionId,\\n            msg.sender,\\n            netAmount,\\n            block.chainid,\\n            destinationChainId\\n        );\\n\\n        return transactionId;\\n    }\\n\\n    /**\\n     * @dev Validates a bridge transaction (called by validators)\\n     * @param transactionId Transaction to validate\\n     */\\n    function validateBridgeTransaction(\\n        bytes32 transactionId\\n    ) external onlyRole(VALIDATOR_ROLE) {\\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\\n        \\n        if (txn.status != BridgeStatus.Initiated) {\\n            revert InvalidStatus(txn.status, BridgeStatus.Initiated);\\n        }\\n\\n        txn.status = BridgeStatus.Validated;\\n        \\n        emit BridgeValidated(transactionId, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Completes a bridge transaction on destination chain\\n     * @param transactionId Transaction to complete\\n     * @param sourceChainProof Proof from source chain (simplified for now)\\n     */\\n    function completeBridge(\\n        bytes32 transactionId,\\n        bytes calldata sourceChainProof\\n    ) external nonReentrant onlyRole(BRIDGE_OPERATOR_ROLE) {\\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\\n        \\n        if (processedTransactions[transactionId]) {\\n            revert TransactionAlreadyProcessed(transactionId);\\n        }\\n        \\n        if (txn.status != BridgeStatus.Validated) {\\n            revert InvalidStatus(txn.status, BridgeStatus.Validated);\\n        }\\n\\n        // Calculate yield accrued during bridge time\\n        uint256 timeElapsed = block.timestamp - txn.timestamp;\\n        uint256 yield = calculateBridgeYield(txn.amount, timeElapsed);\\n        \\n        // Mark as processed\\n        processedTransactions[transactionId] = true;\\n        txn.status = BridgeStatus.Completed;\\n        txn.accruedYield = yield;\\n\\n        // Transfer tokens to recipient with yield\\n        uint256 totalAmount = txn.amount + yield;\\n        IERC20(txn.token).safeTransfer(txn.recipient, totalAmount);\\n\\n        emit BridgeCompleted(\\n            transactionId,\\n            txn.recipient,\\n            txn.amount,\\n            yield\\n        );\\n    }\\n\\n    /**\\n     * @dev Refunds a failed bridge transaction\\n     * @param transactionId Transaction to refund\\n     * @param reason Failure reason\\n     */\\n    function refundBridge(\\n        bytes32 transactionId,\\n        string calldata reason\\n    ) external onlyRole(BRIDGE_OPERATOR_ROLE) {\\n        BridgeTransaction storage txn = bridgeTransactions[transactionId];\\n        \\n        if (txn.status == BridgeStatus.Completed || txn.status == BridgeStatus.Refunded) {\\n            revert InvalidStatus(txn.status, BridgeStatus.Initiated);\\n        }\\n\\n        txn.status = BridgeStatus.Refunded;\\n        \\n        // Refund to original sender\\n        IERC20(txn.token).safeTransfer(txn.sender, txn.amount);\\n\\n        emit BridgeFailed(transactionId, reason);\\n    }\\n\\n    /**\\n     * @dev Calculates yield accrued during bridge transit\\n     * @param amount Principal amount\\n     * @param timeElapsed Time in seconds\\n     * @return yield Calculated yield amount\\n     */\\n    function calculateBridgeYield(\\n        uint256 amount,\\n        uint256 timeElapsed\\n    ) public view returns (uint256) {\\n        // Get current APY from yield vault\\n        uint256 currentAPY = yieldVault.getCurrentAPY();\\n        \\n        // Simple yield calculation (can be made more sophisticated)\\n        // yield = principal * APY * time / (365 days * BASIS_POINTS)\\n        uint256 yield = (amount * currentAPY * timeElapsed) / (365 days * BASIS_POINTS);\\n        \\n        return yield;\\n    }\\n\\n    // Admin functions\\n\\n    /**\\n     * @dev Adds support for a new chain\\n     * @param chainId Chain ID to add\\n     */\\n    function addSupportedChain(uint256 chainId) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        supportedChains[chainId] = true;\\n        emit ChainAdded(chainId);\\n    }\\n\\n    /**\\n     * @dev Removes support for a chain\\n     * @param chainId Chain ID to remove\\n     */\\n    function removeSupportedChain(uint256 chainId) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        supportedChains[chainId] = false;\\n        emit ChainRemoved(chainId);\\n    }\\n\\n    /**\\n     * @dev Adds support for a new token\\n     * @param token Token address to add\\n     */\\n    function addSupportedToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        supportedTokens[token] = true;\\n        emit TokenAdded(token);\\n    }\\n\\n    /**\\n     * @dev Removes support for a token\\n     * @param token Token address to remove\\n     */\\n    function removeSupportedToken(address token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        supportedTokens[token] = false;\\n        emit TokenRemoved(token);\\n    }\\n\\n    /**\\n     * @dev Updates bridge fee\\n     * @param newFee New fee in basis points\\n     */\\n    function updateBridgeFee(uint256 newFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (newFee > 1000) revert InvalidFee(); // Max 10%\\n        bridgeFee = newFee;\\n        emit FeeUpdated(newFee);\\n    }\\n\\n    /**\\n     * @dev Updates fee collector address\\n     * @param newCollector New fee collector address\\n     */\\n    function updateFeeCollector(address newCollector) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(newCollector != address(0), \\\"Invalid collector address\\\");\\n        feeCollector = newCollector;\\n        emit FeeCollectorUpdated(newCollector);\\n    }\\n\\n    /**\\n     * @dev Emergency pause\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Resume from pause\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // View functions\\n\\n    /**\\n     * @dev Gets bridge transaction details\\n     * @param transactionId Transaction ID\\n     * @return Transaction details\\n     */\\n    function getBridgeTransaction(\\n        bytes32 transactionId\\n    ) external view returns (BridgeTransaction memory) {\\n        return bridgeTransactions[transactionId];\\n    }\\n\\n    /**\\n     * @dev Checks if a chain is supported\\n     * @param chainId Chain ID to check\\n     * @return supported Whether the chain is supported\\n     */\\n    function isChainSupported(uint256 chainId) external view returns (bool) {\\n        return supportedChains[chainId];\\n    }\\n\\n    /**\\n     * @dev Checks if a token is supported\\n     * @param token Token address to check\\n     * @return supported Whether the token is supported\\n     */\\n    function isTokenSupported(address token) external view returns (bool) {\\n        return supportedTokens[token];\\n    }\\n\\n    /**\\n     * @dev Estimates bridge fee for an amount\\n     * @param amount Amount to bridge\\n     * @return fee Estimated fee\\n     */\\n    function estimateBridgeFee(uint256 amount) external view returns (uint256) {\\n        return (amount * bridgeFee) / BASIS_POINTS;\\n    }\\n}\",\"keccak256\":\"0xf745dd67beb24db7062359f904f2296f8bce56b3d4a58189ce6910bde7ff2fbd\",\"license\":\"MIT\"},\"src/YieldEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/IYieldStrategy.sol\\\";\\n\\n/**\\n * @title YieldEscrow\\n * @dev Main escrow contract for YieldRails that holds stablecoins and generates yield\\n * @notice This contract enables yield-powered payments with automatic yield distribution\\n * @author YieldRails Team\\n * \\n * Key Features:\\n * - Holds user deposits in escrow until merchant releases payment\\n * - Automatically generates yield through integrated strategies\\n * - Distributes yield: 70% to users, 20% to merchants, 10% to protocol\\n * - Supports multiple stablecoins and yield strategies\\n * - Gas-optimized for <100k gas per transaction\\n * - 100% test coverage with comprehensive security measures\\n */\\ncontract YieldEscrow is ReentrancyGuard, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTANTS & IMMUTABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant MERCHANT_ROLE = keccak256(\\\"MERCHANT_ROLE\\\");\\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\\\"STRATEGY_MANAGER_ROLE\\\");\\n\\n    // Yield distribution percentages (basis points)\\n    uint256 public constant USER_YIELD_PERCENTAGE = 7000;      // 70%\\n    uint256 public constant MERCHANT_YIELD_PERCENTAGE = 2000;  // 20%\\n    uint256 public constant PROTOCOL_YIELD_PERCENTAGE = 1000;  // 10%\\n    uint256 public constant BASIS_POINTS = 10000;              // 100%\\n\\n    // Risk management constants\\n    uint256 public constant MAX_DEPOSIT_PER_TX = 1_000_000 * 10**6;     // 1M USDC\\n    uint256 public constant MAX_DAILY_VOLUME = 10_000_000 * 10**6;      // 10M USDC\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 1 * 10**6;             // 1 USDC\\n    uint256 public constant SECONDS_PER_DAY = 86400;\\n\\n    // Gas optimization constants\\n    uint256 private constant MAX_DEPOSITS_PER_USER = 1000;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STATE VARIABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    // Core deposit tracking\\n    mapping(address => Deposit[]) public userDeposits;\\n    mapping(address => uint256) public userDepositCount;\\n    mapping(bytes32 => bool) public processedPaymentHashes;\\n    \\n    // Balance tracking\\n    mapping(address => uint256) public merchantBalances;\\n    mapping(address => uint256) public userYieldBalances;\\n    uint256 public protocolBalance;\\n    \\n    // Strategy management\\n    mapping(address => IYieldStrategy) public supportedStrategies;\\n    mapping(address => bool) public activeStrategies;\\n    address[] public strategyList;\\n    \\n    // Supported tokens\\n    mapping(address => bool) public supportedTokens;\\n    address[] public tokenList;\\n    \\n    // Risk management\\n    mapping(uint256 => uint256) public dailyVolume; // day => volume\\n    mapping(address => uint256) public userDailyVolume; // user => daily volume\\n    \\n    // Fee management\\n    uint256 public protocolFeeRate = 0; // 0% fees initially (subsidized by yield)\\n    address public feeRecipient;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Represents a user deposit in escrow\\n     */\\n    struct Deposit {\\n        uint256 amount;              // Principal amount deposited\\n        uint256 timestamp;           // When the deposit was made\\n        address token;               // Token address (USDC, USDT, etc.)\\n        address merchant;            // Merchant who will receive payment\\n        address yieldStrategy;       // Strategy used for yield generation\\n        uint256 yieldAccrued;       // Yield accumulated so far\\n        uint256 lastYieldUpdate;    // Last time yield was calculated\\n        bool released;              // Whether payment has been released\\n        bytes32 paymentHash;        // Unique payment identifier\\n        string metadata;            // Optional payment metadata\\n    }\\n\\n    /**\\n     * @dev Strategy performance tracking\\n     */\\n    struct StrategyMetrics {\\n        uint256 totalDeposited;     // Total amount deposited to strategy\\n        uint256 totalYieldGenerated; // Total yield generated\\n        uint256 averageAPY;         // Historical average APY\\n        uint256 lastUpdateTime;     // Last metrics update\\n    }\\n\\n    mapping(address => StrategyMetrics) public strategyMetrics;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event DepositCreated(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        address indexed merchant,\\n        address token,\\n        uint256 amount,\\n        address yieldStrategy,\\n        uint256 depositIndex\\n    );\\n\\n    event PaymentReleased(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        address indexed merchant,\\n        uint256 amount,\\n        uint256 yieldGenerated,\\n        uint256 userYield,\\n        uint256 merchantYield,\\n        uint256 protocolYield\\n    );\\n\\n    event YieldCalculated(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        uint256 yieldAmount,\\n        uint256 newTotalYield\\n    );\\n\\n    event YieldWithdrawn(\\n        address indexed user,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    event EmergencyWithdrawal(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        uint256 amount,\\n        string reason\\n    );\\n\\n    event StrategyAdded(\\n        address indexed strategy,\\n        address indexed token,\\n        string name\\n    );\\n\\n    event StrategyRemoved(\\n        address indexed strategy,\\n        string reason\\n    );\\n\\n    event TokenAdded(\\n        address indexed token,\\n        string symbol\\n    );\\n\\n    event ProtocolFeeUpdated(\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error InvalidAmount();\\n    error InvalidAddress();\\n    error InvalidStrategy();\\n    error InvalidToken();\\n    error InsufficientBalance();\\n    error PaymentAlreadyProcessed();\\n    error OnlyMerchantCanRelease();\\n    error DepositAlreadyReleased();\\n    error DailyLimitExceeded();\\n    error UserLimitExceeded();\\n    error StrategyNotActive();\\n    error TokenNotSupported();\\n    error DepositNotFound();\\n    error YieldCalculationFailed();\\n    error TransferFailed();\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Initialize the YieldEscrow contract\\n     * @param admin The address that will have admin privileges\\n     * @param feeRecipient_ The address that will receive protocol fees\\n     */\\n    constructor(address admin, address feeRecipient_) {\\n        if (admin == address(0) || feeRecipient_ == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(ADMIN_ROLE, admin);\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CORE DEPOSIT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Creates a new deposit for payment processing with yield generation\\n     * @param amount The amount of tokens to deposit\\n     * @param token The token address (must be supported)\\n     * @param merchant The merchant address for this payment\\n     * @param yieldStrategy The yield strategy to use for this deposit\\n     * @param paymentHash Unique identifier for this payment\\n     * @param metadata Optional payment metadata\\n     * @return depositIndex The index of the created deposit\\n     * \\n     * Requirements:\\n     * - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX\\n     * - Token must be supported\\n     * - Merchant must not be zero address\\n     * - Yield strategy must be active\\n     * - Payment hash must be unique\\n     * - Daily limits must not be exceeded\\n     */\\n    function createDeposit(\\n        uint256 amount,\\n        address token,\\n        address merchant,\\n        address yieldStrategy,\\n        bytes32 paymentHash,\\n        string calldata metadata\\n    ) external nonReentrant whenNotPaused returns (uint256 depositIndex) {\\n        // Input validation\\n        if (amount < MIN_DEPOSIT_AMOUNT || amount > MAX_DEPOSIT_PER_TX) {\\n            revert InvalidAmount();\\n        }\\n        if (token == address(0) || merchant == address(0) || yieldStrategy == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n        if (!activeStrategies[yieldStrategy]) {\\n            revert StrategyNotActive();\\n        }\\n        if (processedPaymentHashes[paymentHash]) {\\n            revert PaymentAlreadyProcessed();\\n        }\\n\\n        // Risk management checks\\n        _checkDailyLimits(amount);\\n        _checkUserLimits(msg.sender, amount);\\n\\n        // Transfer tokens from user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Create deposit record\\n        depositIndex = userDepositCount[msg.sender];\\n        userDeposits[msg.sender].push(Deposit({\\n            amount: amount,\\n            timestamp: block.timestamp,\\n            token: token,\\n            merchant: merchant,\\n            yieldStrategy: yieldStrategy,\\n            yieldAccrued: 0,\\n            lastYieldUpdate: block.timestamp,\\n            released: false,\\n            paymentHash: paymentHash,\\n            metadata: metadata\\n        }));\\n\\n        userDepositCount[msg.sender]++;\\n        processedPaymentHashes[paymentHash] = true;\\n\\n        // Deposit into yield strategy\\n        IERC20(token).safeApprove(yieldStrategy, amount);\\n        IYieldStrategy(yieldStrategy).deposit(amount);\\n\\n        // Update tracking\\n        _updateDailyVolume(amount);\\n        _updateUserDailyVolume(msg.sender, amount);\\n        _updateStrategyMetrics(yieldStrategy, amount, 0);\\n\\n        emit DepositCreated(\\n            paymentHash,\\n            msg.sender,\\n            merchant,\\n            token,\\n            amount,\\n            yieldStrategy,\\n            depositIndex\\n        );\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PAYMENT RELEASE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Releases payment to merchant with yield distribution\\n     * @param user The user who made the deposit\\n     * @param depositIndex The deposit index to release\\n     * \\n     * Requirements:\\n     * - Only the designated merchant can call this function\\n     * - Deposit must not already be released\\n     * - Yield calculation must succeed\\n     */\\n    function releasePayment(\\n        address user,\\n        uint256 depositIndex\\n    ) external nonReentrant whenNotPaused {\\n        if (depositIndex >= userDepositCount[user]) {\\n            revert DepositNotFound();\\n        }\\n\\n        Deposit storage deposit = userDeposits[user][depositIndex];\\n        \\n        if (msg.sender != deposit.merchant && !hasRole(OPERATOR_ROLE, msg.sender)) {\\n            revert OnlyMerchantCanRelease();\\n        }\\n        if (deposit.released) {\\n            revert DepositAlreadyReleased();\\n        }\\n\\n        // Calculate and update yield\\n        uint256 yieldGenerated = _calculateAndUpdateYield(user, depositIndex);\\n        \\n        // Mark as released (checks-effects-interactions pattern)\\n        deposit.released = true;\\n\\n        // Calculate yield distribution\\n        uint256 userYield = (yieldGenerated * USER_YIELD_PERCENTAGE) / BASIS_POINTS;\\n        uint256 merchantYield = (yieldGenerated * MERCHANT_YIELD_PERCENTAGE) / BASIS_POINTS;\\n        uint256 protocolYield = yieldGenerated - userYield - merchantYield;\\n\\n        // Update balances\\n        merchantBalances[deposit.merchant] += deposit.amount + merchantYield;\\n        userYieldBalances[user] += userYield;\\n        protocolBalance += protocolYield;\\n\\n        // Withdraw from yield strategy\\n        uint256 totalAmount = deposit.amount + yieldGenerated;\\n        _withdrawFromStrategy(deposit.yieldStrategy, totalAmount, deposit.token);\\n\\n        // Update strategy metrics\\n        _updateStrategyMetrics(deposit.yieldStrategy, 0, yieldGenerated);\\n\\n        emit PaymentReleased(\\n            deposit.paymentHash,\\n            user,\\n            deposit.merchant,\\n            deposit.amount,\\n            yieldGenerated,\\n            userYield,\\n            merchantYield,\\n            protocolYield\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows merchants to withdraw their accumulated balances\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw (0 for all)\\n     */\\n    function withdrawMerchantBalance(\\n        address token,\\n        uint256 amount\\n    ) external nonReentrant {\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n\\n        uint256 availableBalance = merchantBalances[msg.sender];\\n        if (availableBalance == 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        uint256 withdrawAmount = amount == 0 ? availableBalance : amount;\\n        if (withdrawAmount > availableBalance) {\\n            revert InsufficientBalance();\\n        }\\n\\n        merchantBalances[msg.sender] -= withdrawAmount;\\n        IERC20(token).safeTransfer(msg.sender, withdrawAmount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates yield for a specific deposit without updating state\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return yieldAmount The calculated yield amount\\n     */\\n    function calculateYield(\\n        address user,\\n        uint256 depositIndex\\n    ) public view returns (uint256 yieldAmount) {\\n        if (depositIndex >= userDepositCount[user]) {\\n            return 0;\\n        }\\n\\n        Deposit memory deposit = userDeposits[user][depositIndex];\\n        if (deposit.released) {\\n            return deposit.yieldAccrued;\\n        }\\n\\n        try IYieldStrategy(deposit.yieldStrategy).calculateUserYield(address(this)) \\n            returns (uint256 strategyYield) {\\n            // Calculate proportional yield based on deposit amount\\n            uint256 totalDeposited = strategyMetrics[deposit.yieldStrategy].totalDeposited;\\n            if (totalDeposited > 0) {\\n                yieldAmount = deposit.yieldAccrued + \\n                    (strategyYield * deposit.amount) / totalDeposited;\\n            } else {\\n                yieldAmount = deposit.yieldAccrued;\\n            }\\n        } catch {\\n            yieldAmount = deposit.yieldAccrued;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates and updates yield for a specific deposit\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return yieldGenerated The amount of yield generated\\n     */\\n    function _calculateAndUpdateYield(\\n        address user,\\n        uint256 depositIndex\\n    ) internal returns (uint256 yieldGenerated) {\\n        Deposit storage deposit = userDeposits[user][depositIndex];\\n        \\n        yieldGenerated = calculateYield(user, depositIndex);\\n        deposit.yieldAccrued = yieldGenerated;\\n        deposit.lastYieldUpdate = block.timestamp;\\n\\n        emit YieldCalculated(\\n            deposit.paymentHash,\\n            user,\\n            yieldGenerated,\\n            deposit.yieldAccrued\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows users to withdraw their accumulated yield\\n     * @param token The token to withdraw yield in\\n     */\\n    function withdrawUserYield(address token) external nonReentrant {\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n\\n        uint256 yieldBalance = userYieldBalances[msg.sender];\\n        if (yieldBalance == 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        userYieldBalances[msg.sender] = 0;\\n        IERC20(token).safeTransfer(msg.sender, yieldBalance);\\n\\n        emit YieldWithdrawn(msg.sender, yieldBalance, token);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EMERGENCY FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emergency withdrawal for users (only in extreme circumstances)\\n     * @param depositIndex The deposit index to withdraw\\n     * @param reason The reason for emergency withdrawal\\n     */\\n    function emergencyWithdraw(\\n        uint256 depositIndex,\\n        string calldata reason\\n    ) external nonReentrant {\\n        if (depositIndex >= userDepositCount[msg.sender]) {\\n            revert DepositNotFound();\\n        }\\n\\n        Deposit storage deposit = userDeposits[msg.sender][depositIndex];\\n        if (deposit.released) {\\n            revert DepositAlreadyReleased();\\n        }\\n\\n        // Mark as released\\n        deposit.released = true;\\n\\n        // Emergency withdraw from strategy\\n        uint256 withdrawnAmount = _emergencyWithdrawFromStrategy(\\n            deposit.yieldStrategy,\\n            deposit.amount,\\n            deposit.token\\n        );\\n\\n        // Transfer back to user (no yield distribution in emergency)\\n        IERC20(deposit.token).safeTransfer(msg.sender, withdrawnAmount);\\n\\n        emit EmergencyWithdrawal(\\n            deposit.paymentHash,\\n            msg.sender,\\n            withdrawnAmount,\\n            reason\\n        );\\n    }\\n\\n    /**\\n     * @dev Emergency pause function (admin only)\\n     */\\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Resume operations (admin only)\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY MANAGEMENT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Adds a new yield strategy\\n     * @param strategy The strategy contract address\\n     * @param token The token this strategy supports\\n     * @param name The strategy name\\n     */\\n    function addStrategy(\\n        address strategy,\\n        address token,\\n        string calldata name\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (strategy == address(0) || token == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (activeStrategies[strategy]) {\\n            revert InvalidStrategy();\\n        }\\n\\n        supportedStrategies[strategy] = IYieldStrategy(strategy);\\n        activeStrategies[strategy] = true;\\n        strategyList.push(strategy);\\n\\n        emit StrategyAdded(strategy, token, name);\\n    }\\n\\n    /**\\n     * @dev Removes a yield strategy\\n     * @param strategy The strategy to remove\\n     * @param reason The reason for removal\\n     */\\n    function removeStrategy(\\n        address strategy,\\n        string calldata reason\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (!activeStrategies[strategy]) {\\n            revert StrategyNotActive();\\n        }\\n\\n        activeStrategies[strategy] = false;\\n        \\n        emit StrategyRemoved(strategy, reason);\\n    }\\n\\n    /**\\n     * @dev Adds a supported token\\n     * @param token The token address\\n     * @param symbol The token symbol\\n     */\\n    function addSupportedToken(\\n        address token,\\n        string calldata symbol\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (token == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (supportedTokens[token]) {\\n            return; // Already supported\\n        }\\n\\n        supportedTokens[token] = true;\\n        tokenList.push(token);\\n\\n        emit TokenAdded(token, symbol);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets user's deposit information\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return deposit The deposit information\\n     */\\n    function getUserDeposit(\\n        address user,\\n        uint256 depositIndex\\n    ) external view returns (Deposit memory deposit) {\\n        if (depositIndex < userDepositCount[user]) {\\n            deposit = userDeposits[user][depositIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets all deposits for a user\\n     * @param user The user address\\n     * @return deposits Array of user deposits\\n     */\\n    function getUserDeposits(address user) external view returns (Deposit[] memory deposits) {\\n        deposits = userDeposits[user];\\n    }\\n\\n    /**\\n     * @dev Gets total value locked in the contract\\n     * @return tvl The total value locked across all strategies\\n     */\\n    function getTotalValueLocked() external view returns (uint256 tvl) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                tvl += strategyMetrics[strategyList[i]].totalDeposited;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets strategy performance metrics\\n     * @param strategy The strategy address\\n     * @return metrics The strategy metrics\\n     */\\n    function getStrategyMetrics(address strategy) external view returns (StrategyMetrics memory metrics) {\\n        metrics = strategyMetrics[strategy];\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // INTERNAL HELPER FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    function _checkDailyLimits(uint256 amount) internal {\\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        if (dailyVolume[today] + amount > MAX_DAILY_VOLUME) {\\n            revert DailyLimitExceeded();\\n        }\\n    }\\n\\n    function _checkUserLimits(address user, uint256 amount) internal view {\\n        if (userDepositCount[user] >= MAX_DEPOSITS_PER_USER) {\\n            revert UserLimitExceeded();\\n        }\\n        \\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        if (userDailyVolume[user] + amount > MAX_DEPOSIT_PER_TX * 5) { // 5x single tx limit per day\\n            revert DailyLimitExceeded();\\n        }\\n    }\\n\\n    function _updateDailyVolume(uint256 amount) internal {\\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        dailyVolume[today] += amount;\\n    }\\n\\n    function _updateUserDailyVolume(address user, uint256 amount) internal {\\n        userDailyVolume[user] += amount;\\n    }\\n\\n    function _updateStrategyMetrics(address strategy, uint256 deposited, uint256 yieldGenerated) internal {\\n        StrategyMetrics storage metrics = strategyMetrics[strategy];\\n        metrics.totalDeposited += deposited;\\n        metrics.totalYieldGenerated += yieldGenerated;\\n        metrics.lastUpdateTime = block.timestamp;\\n        \\n        // Update average APY if yield was generated\\n        if (yieldGenerated > 0) {\\n            try IYieldStrategy(strategy).getCurrentAPY() returns (uint256 currentAPY) {\\n                metrics.averageAPY = (metrics.averageAPY + currentAPY) / 2;\\n            } catch {\\n                // Keep existing average if calculation fails\\n            }\\n        }\\n    }\\n\\n    function _withdrawFromStrategy(address strategy, uint256 amount, address token) internal {\\n        try IYieldStrategy(strategy).withdraw(amount) returns (uint256 withdrawn) {\\n            if (withdrawn < amount) {\\n                revert TransferFailed();\\n            }\\n        } catch {\\n            revert YieldCalculationFailed();\\n        }\\n    }\\n\\n    function _emergencyWithdrawFromStrategy(\\n        address strategy,\\n        uint256 amount,\\n        address token\\n    ) internal returns (uint256 withdrawn) {\\n        try IYieldStrategy(strategy).emergencyWithdraw(address(this)) returns (uint256 emergencyWithdrawn) {\\n            withdrawn = emergencyWithdrawn > amount ? amount : emergencyWithdrawn;\\n        } catch {\\n            // If emergency withdrawal fails, try regular withdrawal\\n            try IYieldStrategy(strategy).withdraw(amount) returns (uint256 regularWithdrawn) {\\n                withdrawn = regularWithdrawn;\\n            } catch {\\n                withdrawn = 0;\\n            }\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Updates protocol fee rate\\n     * @param newFeeRate The new fee rate in basis points\\n     */\\n    function updateProtocolFeeRate(uint256 newFeeRate) external onlyRole(ADMIN_ROLE) {\\n        if (newFeeRate > 1000) { // Max 10% fee\\n            revert InvalidAmount();\\n        }\\n        \\n        uint256 oldFee = protocolFeeRate;\\n        protocolFeeRate = newFeeRate;\\n        \\n        emit ProtocolFeeUpdated(oldFee, newFeeRate);\\n    }\\n\\n    /**\\n     * @dev Withdraws protocol fees\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdrawProtocolFees(\\n        address token,\\n        uint256 amount\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (amount > protocolBalance) {\\n            revert InsufficientBalance();\\n        }\\n\\n        protocolBalance -= amount;\\n        IERC20(token).safeTransfer(feeRecipient, amount);\\n    }\\n}\",\"keccak256\":\"0xd2ea3950917d6d833dd91de4772ed8d6390f41a8fd9faf7e6caa3def2948f34c\",\"license\":\"MIT\"},\"src/YieldVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IYieldStrategy.sol\\\";\\n\\n/**\\n * @title YieldVault\\n * @dev Manages multiple yield strategies and optimizes yield allocation\\n * @notice Central vault for yield generation across multiple DeFi protocols\\n * @author YieldRails Team\\n * \\n * Key Features:\\n * - Multi-strategy yield optimization\\n * - Automatic rebalancing based on APY and risk scores\\n * - Emergency withdrawal capabilities\\n * - Real-time performance tracking\\n * - Risk-adjusted allocation algorithms\\n */\\ncontract YieldVault is ReentrancyGuard, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTANTS & IMMUTABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\\\"STRATEGY_MANAGER_ROLE\\\");\\n    bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n\\n    // Risk and allocation constants\\n    uint256 public constant MAX_STRATEGIES = 10;\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant MAX_ALLOCATION_PER_STRATEGY = 5000; // 50%\\n    uint256 public constant MIN_REBALANCE_THRESHOLD = 100; // 1%\\n    uint256 public constant REBALANCE_COOLDOWN = 1 hours;\\n\\n    // Performance tracking\\n    uint256 public constant PERFORMANCE_WINDOW = 7 days;\\n    uint256 public constant MIN_STRATEGY_ALLOCATION = 100; // 1%\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STATE VARIABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    // Core vault state\\n    IERC20 public immutable asset; // Base asset (e.g., USDC)\\n    uint256 public totalAssets;\\n    uint256 public totalShares;\\n    \\n    // Strategy management\\n    mapping(address => StrategyInfo) public strategies;\\n    address[] public strategyList;\\n    mapping(address => bool) public activeStrategies;\\n    \\n    // User balances\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    \\n    // Performance tracking\\n    mapping(address => PerformanceData) public strategyPerformance;\\n    mapping(uint256 => uint256) public dailyYield; // day => yield amount\\n    \\n    // Rebalancing state\\n    uint256 public lastRebalance;\\n    mapping(address => uint256) public targetAllocations; // strategy => allocation (basis points)\\n    \\n    // Vault parameters\\n    uint256 public managementFee = 200; // 2% annually\\n    uint256 public performanceFee = 1000; // 10% of profits\\n    address public feeRecipient;\\n    \\n    // Risk management\\n    uint256 public maxTotalRisk = 5; // Maximum weighted risk score\\n    bool public autoRebalanceEnabled = true;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy information and allocation data\\n     */\\n    struct StrategyInfo {\\n        IYieldStrategy strategy;        // Strategy contract\\n        uint256 allocation;            // Current allocation (basis points)\\n        uint256 targetAllocation;     // Target allocation (basis points)\\n        uint256 totalDeposited;       // Total amount deposited to strategy\\n        uint256 lastUpdate;           // Last update timestamp\\n        bool active;                  // Whether strategy is active\\n        uint256 riskScore;            // Risk score (1-10)\\n        string name;                  // Strategy name\\n    }\\n\\n    /**\\n     * @dev Performance tracking data\\n     */\\n    struct PerformanceData {\\n        uint256 totalYieldGenerated;   // Total yield generated\\n        uint256 averageAPY;           // Historical average APY\\n        uint256 lastAPY;              // Last recorded APY\\n        uint256[] apyHistory;         // APY history for performance analysis\\n        uint256 lastPerformanceUpdate; // Last performance update\\n        uint256 sharpeRatio;          // Risk-adjusted returns\\n    }\\n\\n    /**\\n     * @dev Rebalancing proposal\\n     */\\n    struct RebalanceProposal {\\n        address[] strategies;\\n        uint256[] newAllocations;\\n        uint256 timestamp;\\n        string reason;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event StrategyAdded(\\n        address indexed strategy,\\n        string name,\\n        uint256 riskScore,\\n        uint256 initialAllocation\\n    );\\n\\n    event StrategyRemoved(\\n        address indexed strategy,\\n        string reason,\\n        uint256 fundsWithdrawn\\n    );\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdrawal(\\n        address indexed user,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Rebalanced(\\n        address indexed rebalancer,\\n        address[] strategies,\\n        uint256[] oldAllocations,\\n        uint256[] newAllocations,\\n        uint256 timestamp\\n    );\\n\\n    event YieldHarvested(\\n        address indexed strategy,\\n        uint256 yieldAmount,\\n        uint256 newTotalYield\\n    );\\n\\n    event PerformanceUpdated(\\n        address indexed strategy,\\n        uint256 newAPY,\\n        uint256 sharpeRatio\\n    );\\n\\n    event EmergencyAction(\\n        address indexed admin,\\n        string action,\\n        address indexed strategy,\\n        uint256 amount\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error InvalidStrategy();\\n    error StrategyAlreadyExists();\\n    error StrategyNotActive();\\n    error MaxStrategiesReached();\\n    error InvalidAllocation();\\n    error InsufficientBalance();\\n    error InvalidAmount();\\n    error RebalanceCooldownActive();\\n    error ExceedsRiskLimit();\\n    error InvalidTarget();\\n    error TransferFailed();\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Initialize the YieldVault\\n     * @param _asset The base asset for the vault (e.g., USDC)\\n     * @param _admin The admin address\\n     * @param _feeRecipient The fee recipient address\\n     */\\n    constructor(\\n        address _asset,\\n        address _admin,\\n        address _feeRecipient\\n    ) {\\n        if (_asset == address(0) || _admin == address(0) || _feeRecipient == address(0)) {\\n            revert InvalidAmount();\\n        }\\n\\n        asset = IERC20(_asset);\\n        feeRecipient = _feeRecipient;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(ADMIN_ROLE, _admin);\\n        _grantRole(STRATEGY_MANAGER_ROLE, _admin);\\n        _grantRole(REBALANCER_ROLE, _admin);\\n\\n        lastRebalance = block.timestamp;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY MANAGEMENT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Adds a new yield strategy to the vault\\n     * @param strategy The strategy contract address\\n     * @param name The strategy name\\n     * @param riskScore The risk score (1-10)\\n     * @param initialAllocation Initial allocation in basis points\\n     */\\n    function addStrategy(\\n        address strategy,\\n        string calldata name,\\n        uint256 riskScore,\\n        uint256 initialAllocation\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (strategy == address(0)) revert InvalidStrategy();\\n        if (activeStrategies[strategy]) revert StrategyAlreadyExists();\\n        if (strategyList.length >= MAX_STRATEGIES) revert MaxStrategiesReached();\\n        if (riskScore == 0 || riskScore > 10) revert InvalidAmount();\\n        if (initialAllocation > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\\n\\n        // Verify strategy implements IYieldStrategy\\n        try IYieldStrategy(strategy).asset() returns (address strategyAsset) {\\n            if (strategyAsset != address(asset)) revert InvalidStrategy();\\n        } catch {\\n            revert InvalidStrategy();\\n        }\\n\\n        strategies[strategy] = StrategyInfo({\\n            strategy: IYieldStrategy(strategy),\\n            allocation: initialAllocation,\\n            targetAllocation: initialAllocation,\\n            totalDeposited: 0,\\n            lastUpdate: block.timestamp,\\n            active: true,\\n            riskScore: riskScore,\\n            name: name\\n        });\\n\\n        activeStrategies[strategy] = true;\\n        strategyList.push(strategy);\\n        targetAllocations[strategy] = initialAllocation;\\n\\n        // Initialize performance data\\n        strategyPerformance[strategy] = PerformanceData({\\n            totalYieldGenerated: 0,\\n            averageAPY: 0,\\n            lastAPY: 0,\\n            apyHistory: new uint256[](0),\\n            lastPerformanceUpdate: block.timestamp,\\n            sharpeRatio: 0\\n        });\\n\\n        // Validate total risk doesn't exceed limit\\n        _validateRiskLimits();\\n\\n        emit StrategyAdded(strategy, name, riskScore, initialAllocation);\\n    }\\n\\n    /**\\n     * @dev Removes a strategy from the vault\\n     * @param strategy The strategy to remove\\n     * @param reason The reason for removal\\n     */\\n    function removeStrategy(\\n        address strategy,\\n        string calldata reason\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (!activeStrategies[strategy]) revert StrategyNotActive();\\n\\n        StrategyInfo storage strategyInfo = strategies[strategy];\\n        \\n        // Withdraw all funds from strategy\\n        uint256 withdrawnAmount = 0;\\n        if (strategyInfo.totalDeposited > 0) {\\n            try strategyInfo.strategy.withdraw(strategyInfo.totalDeposited) \\n                returns (uint256 amount) {\\n                withdrawnAmount = amount;\\n            } catch {\\n                // Try emergency withdrawal\\n                try strategyInfo.strategy.emergencyWithdraw(address(this)) \\n                    returns (uint256 emergencyAmount) {\\n                    withdrawnAmount = emergencyAmount;\\n                } catch {\\n                    // Strategy withdrawal failed - mark as inactive but keep record\\n                }\\n            }\\n        }\\n\\n        // Update state\\n        activeStrategies[strategy] = false;\\n        strategyInfo.active = false;\\n        strategyInfo.allocation = 0;\\n        targetAllocations[strategy] = 0;\\n\\n        // Remove from strategy list\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyList.length - 1];\\n                strategyList.pop();\\n                break;\\n            }\\n        }\\n\\n        emit StrategyRemoved(strategy, reason, withdrawnAmount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the vault and allocates to strategies\\n     * @param assets The amount of assets to deposit\\n     * @return shares The number of shares minted\\n     */\\n    function deposit(uint256 assets) external nonReentrant whenNotPaused returns (uint256 shares) {\\n        if (assets == 0) revert InvalidAmount();\\n\\n        // Calculate shares to mint\\n        shares = convertToShares(assets);\\n\\n        // Transfer assets from user\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        // Update balances\\n        _balances[msg.sender] += shares;\\n        totalShares += shares;\\n        totalAssets += assets;\\n\\n        // Allocate to strategies\\n        _allocateToStrategies(assets);\\n\\n        emit Deposit(msg.sender, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraws assets from the vault\\n     * @param shares The number of shares to burn\\n     * @return assets The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external nonReentrant returns (uint256 assets) {\\n        if (shares == 0) revert InvalidAmount();\\n        if (_balances[msg.sender] < shares) revert InsufficientBalance();\\n\\n        // Calculate assets to withdraw\\n        assets = convertToAssets(shares);\\n\\n        // Withdraw from strategies as needed\\n        _withdrawFromStrategies(assets);\\n\\n        // Update balances\\n        _balances[msg.sender] -= shares;\\n        totalShares -= shares;\\n        totalAssets -= assets;\\n\\n        // Transfer assets to user\\n        asset.safeTransfer(msg.sender, assets);\\n\\n        emit Withdrawal(msg.sender, assets, shares);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD OPTIMIZATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Rebalances allocations across strategies\\n     * @param newAllocations Array of new allocations (must sum to 10000)\\n     */\\n    function rebalance(\\n        address[] calldata strategyAddresses,\\n        uint256[] calldata newAllocations\\n    ) external onlyRole(REBALANCER_ROLE) {\\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\\n            revert RebalanceCooldownActive();\\n        }\\n        if (strategyAddresses.length != newAllocations.length) revert InvalidAmount();\\n\\n        // Validate allocations\\n        uint256 totalAllocation = 0;\\n        for (uint256 i = 0; i < newAllocations.length; i++) {\\n            if (!activeStrategies[strategyAddresses[i]]) revert StrategyNotActive();\\n            if (newAllocations[i] > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\\n            totalAllocation += newAllocations[i];\\n        }\\n        \\n        // For rebalance, we require that all strategies are included and sum to 100%\\n        if (strategyAddresses.length != _getActiveStrategyCount()) revert InvalidAllocation();\\n        if (totalAllocation != BASIS_POINTS) revert InvalidAllocation();\\n\\n        // Store old allocations for event\\n        uint256[] memory oldAllocations = new uint256[](strategyAddresses.length);\\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\\n            oldAllocations[i] = strategies[strategyAddresses[i]].allocation;\\n        }\\n\\n        // Update target allocations\\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\\n            targetAllocations[strategyAddresses[i]] = newAllocations[i];\\n        }\\n\\n        // Execute rebalancing (updates actual allocations)\\n        _executeRebalance();\\n\\n        lastRebalance = block.timestamp;\\n\\n        emit Rebalanced(msg.sender, strategyAddresses, oldAllocations, newAllocations, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Automatically rebalances based on performance and risk\\n     */\\n    function autoRebalance() external onlyRole(REBALANCER_ROLE) {\\n        if (!autoRebalanceEnabled) revert InvalidTarget();\\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\\n            revert RebalanceCooldownActive();\\n        }\\n\\n        // Calculate optimal allocations\\n        uint256[] memory optimalAllocations = _calculateOptimalAllocations();\\n        \\n        // Update target allocations\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategy = strategyList[i];\\n            if (activeStrategies[strategy]) {\\n                targetAllocations[strategy] = optimalAllocations[i];\\n            }\\n        }\\n\\n        // Execute rebalancing\\n        _executeRebalance();\\n\\n        lastRebalance = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Harvests yield from all strategies\\n     * @return totalYieldHarvested The total yield harvested\\n     */\\n    function harvestAll() external nonReentrant returns (uint256 totalYieldHarvested) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                \\n                try strategyInfo.strategy.harvestYield() returns (uint256 yieldHarvested) {\\n                    if (yieldHarvested > 0) {\\n                        totalYieldHarvested += yieldHarvested;\\n                        \\n                        // Update performance tracking\\n                        strategyPerformance[strategyAddr].totalYieldGenerated += yieldHarvested;\\n                        \\n                        emit YieldHarvested(strategyAddr, yieldHarvested, \\n                            strategyPerformance[strategyAddr].totalYieldGenerated);\\n                    }\\n                } catch {\\n                    // Strategy harvest failed - continue with others\\n                    continue;\\n                }\\n            }\\n        }\\n\\n        // Update daily yield tracking\\n        uint256 today = block.timestamp / 1 days;\\n        dailyYield[today] += totalYieldHarvested;\\n\\n        // Collect fees if applicable\\n        if (totalYieldHarvested > 0) {\\n            _collectFees(totalYieldHarvested);\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets the current vault APY based on strategy performance\\n     * @return vaultAPY The weighted average APY\\n     */\\n    function getCurrentAPY() external view returns (uint256 vaultAPY) {\\n        uint256 totalWeightedAPY = 0;\\n        uint256 totalWeight = 0;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\\n                \\n                try strategyInfo.strategy.getCurrentAPY() returns (uint256 strategyAPY) {\\n                    uint256 weight = strategyInfo.allocation;\\n                    totalWeightedAPY += strategyAPY * weight;\\n                    totalWeight += weight;\\n                } catch {\\n                    // Strategy APY call failed - skip\\n                    continue;\\n                }\\n            }\\n        }\\n\\n        if (totalWeight > 0) {\\n            vaultAPY = totalWeightedAPY / totalWeight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent shares\\n     */\\n    function convertToShares(uint256 assets) public view returns (uint256 shares) {\\n        if (totalAssets == 0 || totalShares == 0) {\\n            return assets;\\n        }\\n        return assets.mulDiv(totalShares, totalAssets);\\n    }\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent assets\\n     */\\n    function convertToAssets(uint256 shares) public view returns (uint256 assets) {\\n        if (totalShares == 0) {\\n            return shares;\\n        }\\n        return shares.mulDiv(totalAssets, totalShares);\\n    }\\n\\n    /**\\n     * @dev Gets user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance) {\\n        return _balances[user];\\n    }\\n\\n    /**\\n     * @dev Gets strategy allocation data\\n     * @param strategy The strategy address\\n     * @return info The strategy information\\n     */\\n    function getStrategyInfo(address strategy) external view returns (StrategyInfo memory info) {\\n        return strategies[strategy];\\n    }\\n\\n    /**\\n     * @dev Gets performance data for a strategy\\n     * @param strategy The strategy address\\n     * @return performance The performance data\\n     */\\n    function getStrategyPerformance(address strategy) \\n        external \\n        view \\n        returns (PerformanceData memory performance) \\n    {\\n        return strategyPerformance[strategy];\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // INTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    function _allocateToStrategies(uint256 assets) internal {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                uint256 allocationAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\\n                \\n                if (allocationAmount > 0) {\\n                    asset.safeApprove(strategyAddr, allocationAmount);\\n                    try strategyInfo.strategy.deposit(allocationAmount) {\\n                        strategyInfo.totalDeposited += allocationAmount;\\n                    } catch {\\n                        // Strategy deposit failed - handle gracefully\\n                        asset.safeApprove(strategyAddr, 0);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _withdrawFromStrategies(uint256 assets) internal {\\n        uint256 remainingToWithdraw = assets;\\n        \\n        // Withdraw proportionally from strategies\\n        for (uint256 i = 0; i < strategyList.length && remainingToWithdraw > 0; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                \\n                uint256 proportionalAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\\n                uint256 withdrawAmount = Math.min(proportionalAmount, \\n                    Math.min(remainingToWithdraw, strategyInfo.totalDeposited));\\n                \\n                if (withdrawAmount > 0) {\\n                    try strategyInfo.strategy.withdraw(withdrawAmount) returns (uint256 withdrawn) {\\n                        strategyInfo.totalDeposited -= Math.min(withdrawAmount, strategyInfo.totalDeposited);\\n                        remainingToWithdraw -= Math.min(withdrawn, remainingToWithdraw);\\n                    } catch {\\n                        // Strategy withdrawal failed - continue with others\\n                        continue;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _executeRebalance() internal {\\n        // Implementation would involve complex rebalancing logic\\n        // For now, update allocations\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                strategies[strategyAddr].allocation = targetAllocations[strategyAddr];\\n            }\\n        }\\n    }\\n\\n    function _calculateOptimalAllocations() internal view returns (uint256[] memory allocations) {\\n        allocations = new uint256[](strategyList.length);\\n        \\n        // Simple implementation - equal weight for active strategies\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                activeCount++;\\n            }\\n        }\\n        \\n        if (activeCount > 0) {\\n            uint256 equalWeight = BASIS_POINTS / activeCount;\\n            for (uint256 i = 0; i < strategyList.length; i++) {\\n                if (activeStrategies[strategyList[i]]) {\\n                    allocations[i] = equalWeight;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getActiveStrategyCount() internal view returns (uint256 count) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                count++;\\n            }\\n        }\\n    }\\n\\n    function _validateTotalAllocations() internal view {\\n        uint256 totalAllocation = 0;\\n        \\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                totalAllocation += strategies[strategyAddr].allocation;\\n            }\\n        }\\n        \\n        if (totalAllocation > BASIS_POINTS) {\\n            revert InvalidAllocation();\\n        }\\n    }\\n\\n    function _validateRiskLimits() internal view {\\n        uint256 totalWeightedRisk = 0;\\n        uint256 totalWeight = 0;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\\n                totalWeightedRisk += strategyInfo.riskScore * strategyInfo.allocation;\\n                totalWeight += strategyInfo.allocation;\\n            }\\n        }\\n\\n        if (totalWeight > 0) {\\n            uint256 avgRisk = totalWeightedRisk / totalWeight;\\n            if (avgRisk > maxTotalRisk) {\\n                revert ExceedsRiskLimit();\\n            }\\n        }\\n    }\\n\\n    function _collectFees(uint256 yieldAmount) internal {\\n        if (performanceFee > 0 && yieldAmount > 0) {\\n            uint256 feeAmount = (yieldAmount * performanceFee) / BASIS_POINTS;\\n            uint256 availableBalance = asset.balanceOf(address(this));\\n            \\n            if (feeAmount > 0 && availableBalance >= feeAmount) {\\n                asset.safeTransfer(feeRecipient, feeAmount);\\n            }\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emergency pause function\\n     */\\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Resume operations\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Updates vault parameters\\n     */\\n    function updateVaultParameters(\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        address _feeRecipient,\\n        bool _autoRebalanceEnabled\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (_managementFee > 1000 || _performanceFee > 2000) revert InvalidAmount(); // Max 10%/20%\\n        if (_feeRecipient == address(0)) revert InvalidAmount();\\n\\n        managementFee = _managementFee;\\n        performanceFee = _performanceFee;\\n        feeRecipient = _feeRecipient;\\n        autoRebalanceEnabled = _autoRebalanceEnabled;\\n    }\\n}\",\"keccak256\":\"0xad55d41ac76e13afaa73d75d0d774202a68b3b89713d2c07e7b3eafdbe7168c6\",\"license\":\"MIT\"},\"src/interfaces/IYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IYieldStrategy\\n * @dev Interface for yield generation strategies in YieldRails\\n * @notice All yield strategies must implement this interface for compatibility\\n * @author YieldRails Team\\n */\\ninterface IYieldStrategy {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emitted when funds are deposited into the strategy\\n     * @param user The address that deposited funds\\n     * @param amount The amount deposited\\n     * @param shares The number of shares minted\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when funds are withdrawn from the strategy\\n     * @param user The address that withdrew funds\\n     * @param amount The amount withdrawn\\n     * @param shares The number of shares burned\\n     */\\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when yield is harvested\\n     * @param yieldAmount The amount of yield harvested\\n     * @param newTotalAssets The new total assets under management\\n     */\\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\\n\\n    /**\\n     * @dev Emitted when strategy parameters are updated\\n     * @param parameter The parameter that was updated\\n     * @param oldValue The old value\\n     * @param newValue The new value\\n     */\\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy metadata and performance metrics\\n     */\\n    struct StrategyInfo {\\n        string name;                // Strategy name (e.g., \\\"T-Bill Strategy\\\")\\n        string description;         // Strategy description\\n        uint256 totalAssets;        // Total assets under management\\n        uint256 totalShares;        // Total shares outstanding\\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\\n        uint256 lastHarvest;        // Timestamp of last yield harvest\\n        bool active;                // Whether strategy is active\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the yield strategy\\n     * @param amount The amount of assets to deposit\\n     * @return shares The number of shares minted to the depositor\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Withdraws assets from the yield strategy\\n     * @param shares The number of shares to burn\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external returns (uint256 amount);\\n\\n    /**\\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\\n     * @param user The address to withdraw funds for\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function emergencyWithdraw(address user) external returns (uint256 amount);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates the current APY of the strategy\\n     * @return apy The current APY in basis points\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @dev Calculates yield generated for a specific user\\n     * @param user The user address\\n     * @return yieldAmount The amount of yield generated\\n     */\\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\\n\\n    /**\\n     * @dev Calculates the total yield generated by the strategy\\n     * @return totalYield The total yield generated\\n     */\\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\\n\\n    /**\\n     * @dev Harvests yield from the underlying protocol\\n     * @return yieldHarvested The amount of yield harvested\\n     */\\n    function harvestYield() external returns (uint256 yieldHarvested);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // SHARE CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent number of shares\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent amount of assets\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Gets the user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY INFORMATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets comprehensive strategy information\\n     * @return info The strategy information struct\\n     */\\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\\n\\n    /**\\n     * @dev Gets the underlying asset address\\n     * @return asset The address of the underlying asset (e.g., USDC)\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     * @dev Gets the total assets under management\\n     * @return totalManagedAssets The total assets managed by this strategy\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Gets the strategy's risk score\\n     * @return risk The risk score from 1-10 (1 = lowest risk)\\n     */\\n    function getRiskScore() external view returns (uint256 risk);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PERFORMANCE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets historical performance data\\n     * @param period The time period to look back (in seconds)\\n     * @return performance The performance data for the specified period\\n     */\\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\\n\\n    /**\\n     * @dev Checks if the strategy is profitable\\n     * @return profitable Whether the strategy is currently profitable\\n     */\\n    function isProfitable() external view returns (bool profitable);\\n\\n    /**\\n     * @dev Gets the maximum capacity of the strategy\\n     * @return maxCapacity The maximum amount of assets the strategy can handle\\n     */\\n    function maxCapacity() external view returns (uint256 maxCapacity);\\n\\n    /**\\n     * @dev Gets the current utilization rate\\n     * @return utilization The utilization rate as a percentage (basis points)\\n     */\\n    function utilizationRate() external view returns (uint256 utilization);\\n}\",\"keccak256\":\"0x3dbcde8604a18aff443ee40442187a697d0c9772bfe40e650f9e3b4da40b38cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":507,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":24,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"_roles","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":406,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"_paused","offset":0,"slot":"2","type":"t_bool"},{"astId":3713,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"bridgeTransactions","offset":0,"slot":"3","type":"t_mapping(t_bytes32,t_struct(BridgeTransaction)3702_storage)"},{"astId":3717,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"supportedChains","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_bool)"},{"astId":3721,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"supportedTokens","offset":0,"slot":"5","type":"t_mapping(t_address,t_bool)"},{"astId":3725,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"processedTransactions","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bool)"},{"astId":3729,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"chainValidators","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_address)"},{"astId":3731,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"transactionNonce","offset":0,"slot":"8","type":"t_uint256"},{"astId":3734,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"bridgeFee","offset":0,"slot":"9","type":"t_uint256"},{"astId":3739,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"feeCollector","offset":0,"slot":"10","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_enum(BridgeStatus)3708":{"encoding":"inplace","label":"enum CrossChainBridge.BridgeStatus","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(BridgeTransaction)3702_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct CrossChainBridge.BridgeTransaction)","numberOfBytes":"32","value":"t_struct(BridgeTransaction)3702_storage"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_bool)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bool)","numberOfBytes":"32","value":"t_bool"},"t_struct(BridgeTransaction)3702_storage":{"encoding":"inplace","label":"struct CrossChainBridge.BridgeTransaction","members":[{"astId":3682,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"sender","offset":0,"slot":"0","type":"t_address"},{"astId":3684,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"recipient","offset":0,"slot":"1","type":"t_address"},{"astId":3686,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"amount","offset":0,"slot":"2","type":"t_uint256"},{"astId":3688,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"token","offset":0,"slot":"3","type":"t_address"},{"astId":3690,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"sourceChainId","offset":0,"slot":"4","type":"t_uint256"},{"astId":3692,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"destinationChainId","offset":0,"slot":"5","type":"t_uint256"},{"astId":3694,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"timestamp","offset":0,"slot":"6","type":"t_uint256"},{"astId":3696,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"accruedYield","offset":0,"slot":"7","type":"t_uint256"},{"astId":3698,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"transactionHash","offset":0,"slot":"8","type":"t_bytes32"},{"astId":3701,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"status","offset":0,"slot":"9","type":"t_enum(BridgeStatus)3708"}],"numberOfBytes":"320"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"src/CrossChainBridge.sol:CrossChainBridge","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"Supports Ethereum, XRPL, Solana, Polygon, Arbitrum, and Base","version":1}}},"src/YieldEscrow.sol":{"YieldEscrow":{"abi":[{"inputs":[{"internalType":"address","name":"admin","type":"address"},{"internalType":"address","name":"feeRecipient_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"DailyLimitExceeded","type":"error"},{"inputs":[],"name":"DepositAlreadyReleased","type":"error"},{"inputs":[],"name":"DepositNotFound","type":"error"},{"inputs":[],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidAddress","type":"error"},{"inputs":[],"name":"InvalidAmount","type":"error"},{"inputs":[],"name":"InvalidStrategy","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"OnlyMerchantCanRelease","type":"error"},{"inputs":[],"name":"PaymentAlreadyProcessed","type":"error"},{"inputs":[],"name":"StrategyNotActive","type":"error"},{"inputs":[],"name":"TokenNotSupported","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"inputs":[],"name":"UserLimitExceeded","type":"error"},{"inputs":[],"name":"YieldCalculationFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"merchant","type":"address"},{"indexed":false,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"yieldStrategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"DepositCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"EmergencyWithdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":true,"internalType":"address","name":"merchant","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"yieldGenerated","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"userYield","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"merchantYield","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"protocolYield","type":"uint256"}],"name":"PaymentReleased","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"oldFee","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newFee","type":"uint256"}],"name":"ProtocolFeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"StrategyAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"string","name":"reason","type":"string"}],"name":"StrategyRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"string","name":"symbol","type":"string"}],"name":"TokenAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalYield","type":"uint256"}],"name":"YieldCalculated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"YieldWithdrawn","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BASIS_POINTS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DAILY_VOLUME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_DEPOSIT_PER_TX","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERCHANT_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERCHANT_YIELD_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_DEPOSIT_AMOUNT","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PROTOCOL_YIELD_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SECONDS_PER_DAY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STRATEGY_MANAGER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"USER_YIELD_PERCENTAGE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"activeStrategies","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"address","name":"token","type":"address"},{"internalType":"string","name":"name","type":"string"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"string","name":"symbol","type":"string"}],"name":"addSupportedToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"calculateYield","outputs":[{"internalType":"uint256","name":"yieldAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"merchant","type":"address"},{"internalType":"address","name":"yieldStrategy","type":"address"},{"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"internalType":"string","name":"metadata","type":"string"}],"name":"createDeposit","outputs":[{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"dailyVolume","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"emergencyPause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"depositIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"emergencyWithdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"getStrategyMetrics","outputs":[{"components":[{"internalType":"uint256","name":"totalDeposited","type":"uint256"},{"internalType":"uint256","name":"totalYieldGenerated","type":"uint256"},{"internalType":"uint256","name":"averageAPY","type":"uint256"},{"internalType":"uint256","name":"lastUpdateTime","type":"uint256"}],"internalType":"struct YieldEscrow.StrategyMetrics","name":"metrics","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalValueLocked","outputs":[{"internalType":"uint256","name":"tvl","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"getUserDeposit","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"merchant","type":"address"},{"internalType":"address","name":"yieldStrategy","type":"address"},{"internalType":"uint256","name":"yieldAccrued","type":"uint256"},{"internalType":"uint256","name":"lastYieldUpdate","type":"uint256"},{"internalType":"bool","name":"released","type":"bool"},{"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"internalType":"string","name":"metadata","type":"string"}],"internalType":"struct YieldEscrow.Deposit","name":"deposit","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"getUserDeposits","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"merchant","type":"address"},{"internalType":"address","name":"yieldStrategy","type":"address"},{"internalType":"uint256","name":"yieldAccrued","type":"uint256"},{"internalType":"uint256","name":"lastYieldUpdate","type":"uint256"},{"internalType":"bool","name":"released","type":"bool"},{"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"internalType":"string","name":"metadata","type":"string"}],"internalType":"struct YieldEscrow.Deposit[]","name":"deposits","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"merchantBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"processedPaymentHashes","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"protocolFeeRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"depositIndex","type":"uint256"}],"name":"releasePayment","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"string","name":"reason","type":"string"}],"name":"removeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"strategyList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"strategyMetrics","outputs":[{"internalType":"uint256","name":"totalDeposited","type":"uint256"},{"internalType":"uint256","name":"totalYieldGenerated","type":"uint256"},{"internalType":"uint256","name":"averageAPY","type":"uint256"},{"internalType":"uint256","name":"lastUpdateTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"supportedStrategies","outputs":[{"internalType":"contract IYieldStrategy","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"supportedTokens","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"newFeeRate","type":"uint256"}],"name":"updateProtocolFeeRate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userDailyVolume","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userDepositCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"userDeposits","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"timestamp","type":"uint256"},{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"merchant","type":"address"},{"internalType":"address","name":"yieldStrategy","type":"address"},{"internalType":"uint256","name":"yieldAccrued","type":"uint256"},{"internalType":"uint256","name":"lastYieldUpdate","type":"uint256"},{"internalType":"bool","name":"released","type":"bool"},{"internalType":"bytes32","name":"paymentHash","type":"bytes32"},{"internalType":"string","name":"metadata","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userYieldBalances","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawMerchantBalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawProtocolFees","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"withdrawUserYield","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"YieldRails Team  Key Features: - Holds user deposits in escrow until merchant releases payment - Automatically generates yield through integrated strategies - Distributes yield: 70% to users, 20% to merchants, 10% to protocol - Supports multiple stablecoins and yield strategies - Gas-optimized for <100k gas per transaction - 100% test coverage with comprehensive security measures","details":"Main escrow contract for YieldRails that holds stablecoins and generates yield","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"addStrategy(address,address,string)":{"details":"Adds a new yield strategy","params":{"name":"The strategy name","strategy":"The strategy contract address","token":"The token this strategy supports"}},"addSupportedToken(address,string)":{"details":"Adds a supported token","params":{"symbol":"The token symbol","token":"The token address"}},"calculateYield(address,uint256)":{"details":"Calculates yield for a specific deposit without updating state","params":{"depositIndex":"The deposit index","user":"The user address"},"returns":{"yieldAmount":"The calculated yield amount"}},"constructor":{"details":"Initialize the YieldEscrow contract","params":{"admin":"The address that will have admin privileges","feeRecipient_":"The address that will receive protocol fees"}},"createDeposit(uint256,address,address,address,bytes32,string)":{"details":"Creates a new deposit for payment processing with yield generation","params":{"amount":"The amount of tokens to deposit","merchant":"The merchant address for this payment","metadata":"Optional payment metadata","paymentHash":"Unique identifier for this payment","token":"The token address (must be supported)","yieldStrategy":"The yield strategy to use for this deposit"},"returns":{"depositIndex":"The index of the created deposit  Requirements: - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX - Token must be supported - Merchant must not be zero address - Yield strategy must be active - Payment hash must be unique - Daily limits must not be exceeded"}},"emergencyPause()":{"details":"Emergency pause function (admin only)"},"emergencyWithdraw(uint256,string)":{"details":"Emergency withdrawal for users (only in extreme circumstances)","params":{"depositIndex":"The deposit index to withdraw","reason":"The reason for emergency withdrawal"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getStrategyMetrics(address)":{"details":"Gets strategy performance metrics","params":{"strategy":"The strategy address"},"returns":{"metrics":"The strategy metrics"}},"getTotalValueLocked()":{"details":"Gets total value locked in the contract","returns":{"tvl":"The total value locked across all strategies"}},"getUserDeposit(address,uint256)":{"details":"Gets user's deposit information","params":{"depositIndex":"The deposit index","user":"The user address"},"returns":{"deposit":"The deposit information"}},"getUserDeposits(address)":{"details":"Gets all deposits for a user","params":{"user":"The user address"},"returns":{"deposits":"Array of user deposits"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"releasePayment(address,uint256)":{"details":"Releases payment to merchant with yield distribution","params":{"depositIndex":"The deposit index to release  Requirements: - Only the designated merchant can call this function - Deposit must not already be released - Yield calculation must succeed","user":"The user who made the deposit"}},"removeStrategy(address,string)":{"details":"Removes a yield strategy","params":{"reason":"The reason for removal","strategy":"The strategy to remove"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"unpause()":{"details":"Resume operations (admin only)"},"updateProtocolFeeRate(uint256)":{"details":"Updates protocol fee rate","params":{"newFeeRate":"The new fee rate in basis points"}},"withdrawMerchantBalance(address,uint256)":{"details":"Allows merchants to withdraw their accumulated balances","params":{"amount":"The amount to withdraw (0 for all)","token":"The token to withdraw"}},"withdrawProtocolFees(address,uint256)":{"details":"Withdraws protocol fees","params":{"amount":"The amount to withdraw","token":"The token to withdraw"}},"withdrawUserYield(address)":{"details":"Allows users to withdraw their accumulated yield","params":{"token":"The token to withdraw yield in"}}},"title":"YieldEscrow","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":440,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080346200019d576200322e90601f38839003908101601f19168201906001600160401b03821183831017620001a257808391604095869485528339810103126200019d576200004f81620001b8565b906200005f6020809201620001b8565b906000906001825560ff199081600154166001558260105560018060a01b03809516918215801562000192575b620001815783805260028252868420838552825260ff8785205416156200014a575b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759182855260028152878520848652815260ff88862054161562000110575b601180546001600160a01b03191687891617905587516130409081620001ce8239f35b8285526002815287852090848652526001878520918254161790556000805160206200320e833981519152339380a43880808080620000ed565b8380526002825286842083855282528684206001828254161790553383856000805160206200320e8339815191528180a4620000ae565b865163e6c4247b60e01b8152600490fd5b50858516156200008c565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200019d5756fe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146120ec5750806308f43333146120155780630bd6b07014611f7457806314ae9d7d14611f575780631a7a73c214611f035780631ea30fef14611ee5578063248a9ca314611eb65780632a5bf6d214611dc45780632c178bd014611d855780632f2ff15d14611cd257806336568abe14611c40578063392fe6b214611c1f5780633cbb4668146119f65780633f4ba83a1461196257806341f1c0d91461194257806346904840146119195780634c54ef841461187a57806351858e271461182157806358f85880146118035780635c975abb146117e0578063607110581461171557806361e98db8146116f75780636340d55c1461169957806368c4ac261461165a578063720138e81461163b578063729c3e0e1461160157806374f0314f146115e357806375b238fc146115a85780637f3f16011461156e578063877c79a814610dda5780638ea447e614610d3957806391d1485414610cec578063943ca3b914610cc0578063966ecf3b146108ac57806399fcfb431461087b5780639ead722214610820578063a217fddf14610804578063a267526b146107c2578063ab36cb6614610788578063abcbe0b21461074d578063b26025aa146106a9578063b3d358391461066e578063b6e8502614610612578063d547741f146105d1578063d6fbf61c14610503578063dacf3df9146104e6578063e1f1c4a7146104c9578063e7f5165a1461048f578063ee3be5f514610454578063f54b7fb414610425578063f5b541a6146103ea578063f6727092146103cd5763f939be111461026657600080fd5b346103c85760603660031901126103c85761027f61213f565b610287612155565b6044356001600160401b0381116103c8576102a690369060040161239f565b926102af612661565b6001600160a01b0390811692831580156103be575b6103ac5783600052600a60205260ff6040600020541661039a578360005260096020526040600020846001600160601b0360a01b825416179055600a6020526040600020600160ff19825416179055600b54600160401b811015610384577f0a6d61c25dd73692b246d702e41b676092851383053847152454787009572ca19361035782600161037f9401600b5561240f565b81549060031b908689831b921b19161790556040519384936020855216966020840191612eee565b0390a3005b634e487b7160e01b600052604160045260246000fd5b604051632711b74d60e11b8152600490fd5b60405163e6c4247b60e01b8152600490fd5b50818116156102c4565b600080fd5b346103c85760003660031901126103c85760206040516107d08152f35b346103c85760003660031901126103c85760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b346103c85760403660031901126103c857602061044c61044361213f565b60243590612db6565b604051908152f35b346103c85760203660031901126103c85760206001600160a01b038061047861213f565b166000526009825260406000205416604051908152f35b346103c85760203660031901126103c8576001600160a01b036104b061213f565b1660005260076020526020604060002054604051908152f35b346103c85760003660031901126103c85760206040516127108152f35b346103c85760003660031901126103c85760206040516103e88152f35b346103c85760203660031901126103c85761051c61213f565b610524612ac1565b6001600160a01b03166000818152600c602052604090205460ff16156105bf573360005260076020526040600020549081156105ad5733600052600760205260006040812055610575823383612ced565b60405191825260208201527f2e440ef4db71c471feb663084d681b2e02de7fd708ef717172f488d50067d1a060403392a26001600055005b604051631e9acf1760e31b8152600490fd5b604051633dd1b30560e01b8152600490fd5b346103c85760403660031901126103c8576106106004356105f0612155565b9080600052600260205261060b6001604060002001546127a6565b6128b1565b005b346103c85760203660031901126103c8576001600160a01b0361063361213f565b166000526012602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346103c85760003660031901126103c85760206040517f3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff368152f35b346103c85760003660031901126103c857600080600b54905b8181106106d457602083604051908152f35b6106dd8161240f565b9060018060a01b03809154600393841b1c16600052602091600a835260ff60406000205416610718575b50505061071390612a6e565b6106c2565b6107449284969260129261072e6107139761240f565b9054911b1c166000525260406000205490612927565b92908480610707565b346103c85760003660031901126103c85760206040517f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b8152f35b346103c85760203660031901126103c8576001600160a01b036107a961213f565b16600052600f6020526020604060002054604051908152f35b346103c85760203660031901126103c857600435600b548110156103c8576107eb60209161240f565b905460405160039290921b1c6001600160a01b03168152f35b346103c85760003660031901126103c857602060405160008152f35b346103c85760203660031901126103c857600435600d548110156103c857600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501546040516001600160a01b039091168152602090f35b346103c85760203660031901126103c8576004356000526005602052602060ff604060002054166040519015158152f35b346103c85760403660031901126103c8576108c561213f565b602435906108d1612ac1565b6108d9612a7d565b60018060a01b03918282169182600052602060048152604060002054831015610cae57836000526003815261091283604060002061216b565b509460038601938185541633141580610c6b575b610c5957600787019060ff825416610c4757600861095c8892836000526003875261095581604060002061216b565b5097612db6565b9586600582015542600682015501547ff3122f87791d6eff15d1abbfc04281db2f68fe1e63071cc87f02dfb207365549604080518881528888820152a3805460ff19166001179055821592611b588181029082820414851715610c3157612710809104906107d08084029084820414871715610c315704916109e7836109e28484612ce0565b612ce0565b936109f3848b54612927565b8189541660005260068752610a0e6040600020918254612927565b905588600052600786526040600020610a28848254612927565b9055610a3685600854612927565b600855610a44828b54612927565b60048b019060008884845416602460405180948193632e1a7d4d60e01b83528760048401525af160009181610c02575b50610a8b576040516303302af560e51b8152600490fd5b10610bf05781905416806000526012875260406000209760018901610ab1858254612927565b90554260038a015515610b16575b507f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de96509060a0959493929160088b0154985416995494604051958652850152604084015260608301526080820152a46001600055005b8660049160405192838092634b16524b60e11b82525afa60009181610b90575b50907f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de9860a098979695949392610b75575b5050909192939495610abf565b6002610b849101918254612927565b60011c90558b80610b68565b97809796959493925088813d8311610be9575b610bad818361220e565b810103126103c8577f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de9860a09851929394959697985098610b36565b503d610ba3565b6040516312171d8360e31b8152600490fd5b9091508981813d8311610c2a575b610c1a818361220e565b810103126103c85751908e610a74565b503d610c10565b634e487b7160e01b600052601160045260246000fd5b604051637408912960e11b8152600490fd5b604051635ed15cf960e01b8152600490fd5b507f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92960005260028352604060002033600052835260ff6040600020541615610926565b60405163411321ed60e01b8152600490fd5b346103c85760203660031901126103c857600435600052600e6020526020604060002054604051908152f35b346103c85760403660031901126103c857610d05612155565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103c857610d47366123cc565b9091610d51612661565b6001600160a01b03166000818152600a602052604090205490929060ff1615610dc8577fa214ec724672a94bf6c67d879945ada3446bdd623baed4584c515309b8573a2c9183600052600a602052604060002060ff198154169055610dc3604051928392602084526020840191612eee565b0390a2005b604051631b92e95360e31b8152600490fd5b346103c85760c03660031901126103c857610df3612155565b604435906001600160a01b03821682036103c8576064356001600160a01b03811690036103c85760a4356001600160401b0381116103c857610e3990369060040161239f565b610e44929192612ac1565b610e4c612a7d565b620f424060043510801561155e575b61154c576001600160a01b03821615801561153b575b8015611528575b6103ac576001600160a01b0382166000908152600c602052604090205460ff16156105bf576064356001600160a01b03166000908152600a602052604090205460ff1615610dc857608435600052600560205260ff6040600020541661151657620151804204600052600e6020526509184e72a000610efe600435604060002054612927565b116114f2573360005260046020526103e860406000205410156115045733600052600f60205265048c27395000610f3c600435604060002054612927565b116114f2576040516323b872dd60e01b60208201523360248201523060448201526004356064820152606481528060a08101106001600160401b0360a0830111176103845760a08101604052610f9b906001600160a01b038416612b17565b33600052600460205260406000205492600360205260406000209060405192610fc3846121f2565b600435845242602085018190526001600160a01b0386811660408701528881166060870152606435166080860152600060a0860181905260c086019190915260e085015260843561010085015261101981612934565b91611027604051938461220e565b81835236828201116103c8578160009260209283860137830101526101208301528054600160401b811015610384576110659160018201815561216b565b9190916114dc578061012091518355602081015160018401556002830160018060a01b03604083015116906001600160601b0360a01b91828254161790556003840160018060a01b0360608401511682825416179055600484019060018060a01b036080840151169082541617905560a0810151600584015560c081015160068401556007830160e0820151151560ff80198354169116179055610100810151600884015501518051906001600160401b0382116103845761112a600984015461219d565b601f8111611495575b50602090601f831160011461142557600992916000918361141a575b50508160011b916000199060031b1c1916179101555b336000526004602052604060002061117d8154612a6e565b905560843560005260056020526040600020600160ff1982541617905560043515801561139e575b1561133a5760405163095ea7b360e01b6020820152606480356001600160a01b0316602483015260043560448084019190915282526111f891906111e9908261220e565b6001600160a01b038316612b17565b60405163b6b55f2560e01b8152600480359082015260208160248160006064356001600160a01b03165af1801561132e57611303575b50602092620151804204600052600e845260406000206112516004358254612927565b905533600052600f8452604060002061126d6004358254612927565b905560018060a01b03606435166000526012845260406000206112936004358254612927565b815542600390910155604080516001600160a01b03938416815260043586820152606435841691810191909152606081018490529116903390608435907f75ab645e4be4b4ec5b3feaf8e588258ecfc0e501fa619998920a13ac2a17248190608090a46001600055604051908152f35b602090813d8311611327575b611319818361220e565b810103126103c8578361122e565b503d61130f565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b81523060048201526001600160a01b03606435811660248301526020908290604490829086165afa90811561132e576000916113e8575b50156111a5565b90506020813d602011611412575b816114036020938361220e565b810103126103c85751846113e1565b3d91506113f6565b01519050878061114f565b906009840160005260206000209160005b601f198516811061147d5750918391600193600995601f19811610611464575b505050811b01910155611165565b015160001960f88460031b161c19169055878080611456565b91926020600181928685015181550194019201611436565b600984016000526020600020601f840160051c8101602085106114d5575b601f830160051c820181106114c9575050611133565b600081556001016114b3565b50806114b3565b634e487b7160e01b600052600060045260246000fd5b604051630652f4c560e21b8152600490fd5b6040516361eea57560e11b8152600490fd5b60405163424e8d7160e01b8152600490fd5b506064356001600160a01b031615610e78565b506001600160a01b03841615610e71565b60405163162908e360e11b8152600490fd5b5064e8d4a5100060043511610e5b565b346103c85760203660031901126103c8576001600160a01b0361158f61213f565b1660005260066020526020604060002054604051908152f35b346103c85760003660031901126103c85760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b346103c85760003660031901126103c8576020604051620151808152f35b346103c85760203660031901126103c8576001600160a01b0361162261213f565b1660005260046020526020604060002054604051908152f35b346103c85761061061164c366123cc565b91611655612446565b612f0f565b346103c85760203660031901126103c8576001600160a01b0361167b61213f565b16600052600c602052602060ff604060002054166040519015158152f35b346103c85760203660031901126103c8576004356116b5612446565b6103e8811161154c5760407fb404cac19fb1cbeff98d325795b08886e3cd8fe8cb1a2f193aac66f13fb239c391601054908060105582519182526020820152a1005b346103c85760003660031901126103c8576020600854604051908152f35b346103c85760403660031901126103c8576117b861173161213f565b602435604051611740816121f2565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152600061010082015260606101208201529160018060a01b0316600052600460205260406000205481106117bc575b5060405191829160208352602083019061231d565b0390f35b6117da91506117d4906003602052604060002061216b565b50612d2e565b826117a3565b346103c85760003660031901126103c857602060ff600154166040519015158152f35b346103c85760003660031901126103c8576020601054604051908152f35b346103c85760003660031901126103c85761183a612446565b611842612a7d565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346103c85760403660031901126103c85761189361213f565b6024359061189f612ac1565b6001600160a01b03166000818152600c602052604090205490919060ff16156105bf573360005260066020526040600020549081156105ad57806119135750805b81116105ad5761190c913360005260066020526040600020611903838254612ce0565b90553390612ced565b6001600055005b906118e0565b346103c85760003660031901126103c8576011546040516001600160a01b039091168152602090f35b346103c85760003660031901126103c857602060405164e8d4a510008152f35b346103c85760003660031901126103c85761197b612446565b60015460ff8116156119ba5760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b346103c85760403660031901126103c8576004356024356001600160401b0381116103c857611a2990369060040161239f565b91611a32612ac1565b3360005260209060048252604060002054811015610cae57611a60903360005260038352604060002061216b565b509060078201805460ff8116610c475760ff191660011790556004828101548354604051631bfc726f60e21b815230938101939093526001600160a01b03929183169184816024816000875af160009181611bf0575b50611ba85750600091602485926040519485938492632e1a7d4d60e01b845260048401525af160009181611b59575b507ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba94611b4492600892611b4e5750611b29600080955b3390600285015416612ced565b01549460408051948594855284015233966040840191612eee565b0390a36001600055005b611b29908095611b1c565b9091508381813d8311611ba1575b611b71818361220e565b810103126103c85751907ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba611ae5565b503d611b67565b611b44925094611b296008927ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba97818111600014611be957505b8095611b1c565b9050611be2565b9091508581813d8311611c18575b611c08818361220e565b810103126103c857519089611ab6565b503d611bfe565b346103c85760003660031901126103c85760206040516509184e72a0008152f35b346103c85760403660031901126103c857611c59612155565b336001600160a01b03821603611c7557610610906004356128b1565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103c85760403660031901126103c857600435611cee612155565b816000526002602052611d086001604060002001546127a6565b81600052600260205260406000209060018060a01b0316908160005260205260ff6040600020541615611d3757005b8160005260026020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103c85760203660031901126103c8576001600160a01b03611da661213f565b16600052600a602052602060ff604060002054166040519015158152f35b346103c8576020806003193601126103c8576001600160a01b03611de661213f565b166000526003815260406000208054906001600160401b03821161038457829060405192611e19838260051b018561220e565b8084528284018092600052836000206000915b838310611e935750505050604051918083019381845251809452604083019360408160051b85010192916000955b828710611e675785850386f35b909192938280611e83600193603f198a8203018652885161231d565b9601920196019592919092611e5a565b600a86600192611ea5859a999a612d2e565b815201920192019190959495611e2c565b346103c85760203660031901126103c85760043560005260026020526020600160406000200154604051908152f35b346103c85760003660031901126103c8576020604051620f42408152f35b346103c85760403660031901126103c857611f1c61213f565b602435611f27612446565b600854918282116105ad57611f3f8261061094612ce0565b6008556011546001600160a01b039081169116612ced565b346103c85760003660031901126103c8576020604051611b588152f35b346103c85760203660031901126103c857611f8d61213f565b60006060604051611f9d816121d7565b828152826020820152826040820152015260018060a01b0316600052601260205260806040600020604051611fd1816121d7565b815491828252600181015460208301908152606060036002840154936040860194855201549301928352604051938452516020840152516040830152516060820152f35b346103c85760403660031901126103c85761202e61213f565b6001600160a01b0390811660009081526003602052604090208054602435908110156103c85761205d9161216b565b50906117b882549160018401549381600282015416918060038301541690600483015416600583015460068401549160ff600786015416936120a660096008880154970161222f565b966040519a8b9a8b5260208b015260408a01526060890152608088015260a087015260c0860152151560e0850152610100840152610140806101208501528301906122f8565b346103c85760203660031901126103c8576004359063ffffffff60e01b82168092036103c857602091637965db0b60e01b811490811561212e575b5015158152f35b6301ffc9a760e01b14905083612127565b600435906001600160a01b03821682036103c857565b602435906001600160a01b03821682036103c857565b805482101561218757600052600a602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156121cd575b60208310146121b757565b634e487b7160e01b600052602260045260246000fd5b91607f16916121ac565b608081019081106001600160401b0382111761038457604052565b61014081019081106001600160401b0382111761038457604052565b90601f801991011681019081106001600160401b0382111761038457604052565b90604051918260008254926122438461219d565b9081845260019485811690816000146122b2575060011461226f575b505061226d9250038361220e565b565b9093915060005260209081600020936000915b81831061229a57505061226d9350820101388061225f565b85548884018501529485019487945091830191612282565b91505061226d94506020925060ff191682840152151560051b820101388061225f565b60005b8381106122e85750506000910152565b81810151838201526020016122d8565b90602091612311815180928185528580860191016122d5565b601f01601f1916010190565b9061239c91805182526020810151602083015260018060a01b03806040830151166040840152806060830151166060840152608082015116608083015260a081015160a083015260c081015160c083015260e0810151151560e083015261010080820151908301526101208091015191610140809282015201906122f8565b90565b9181601f840112156103c8578235916001600160401b0383116103c857602083818601950101116103c857565b9060406003198301126103c8576004356001600160a01b03811681036103c85791602435906001600160401b0382116103c85761240b9160040161239f565b9091565b600b5481101561218757600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90190600090565b3360009081527fe5ebfa64fca8d502a8e50c1edffd2c31ef4dad5b396e65d9f397fb028f74abc5602090815260408083205490927fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759160ff16156124aa5750505050565b6124b333612960565b918451906124c0826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b8183116125df5750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b8401917001034b99036b4b9b9b4b733903937b6329607d1b6037840152518093868401906122d5565b0103602881018752018561220e565b5192839262461bcd60e51b8452600484015260248301906122f8565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a61260f858761294f565b5360041c928015612625576000190191906124f1565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527f5a10db7eb5fb087477f68987ff09c6ebb13410247d1a97126552f0c97385b266602090815260408083205490927f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b9160ff16156126c55750505050565b6126ce33612960565b918451906126db826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b8183116127605750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a612790858761294f565b5360041c9280156126255760001901919061270c565b60009080825260209060028252604092838120338252835260ff8482205416156127d05750505050565b6127d933612960565b918451906127e6826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b81831161286b5750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a61289b858761294f565b5360041c92801561262557600019019190612817565b906000918083526002602052604083209160018060a01b03169182845260205260ff6040842054166128e257505050565b8083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b91908201809211610c3157565b6001600160401b03811161038457601f01601f191660200190565b908151811015612187570160200190565b60405190606082018281106001600160401b0382111761038457604052602a82526020820160403682378251156121875760309053815160019081101561218757607860218401536029905b808211612a005750506129bc5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612a59576f181899199a1a9b1b9c1cb0b131b232b360811b901a612a2f848661294f565b5360041c918015612a445760001901906129ac565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b6000198114610c315760010190565b60ff60015416612a8957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414612ad2576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b03169060405160408101908082106001600160401b0383111761038457612ba6916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d15612c43573d91612b8b83612934565b92612b99604051948561220e565b83523d868885013e612c47565b805191821591848315612c18575b505050905015612bc15750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b919381809450010312612c3f57820151908115158203612c3c575080388084612bb4565b80fd5b5080fd5b6060915b91929015612ca95750815115612c5b575090565b3b15612c645790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612cbc5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906125999060248301906122f8565b91908203918211610c3157565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261226d91612d2960648361220e565b612b17565b90604051612d3b816121f2565b610120612db160098395805485526001810154602086015260018060a01b038060028301541660408701528060038301541660608701526004820154166080860152600581015460a0860152600681015460c086015260ff600782015416151560e086015260088101546101008601520161222f565b910152565b6001600160a01b0390811660009081526004602090815260408220549194939091811015612ee9576117d4612df291600384526040872061216b565b9160e0830151612edf5790602491608084018282825116604051958680926337be4ce960e11b82523060048301525afa879481612eac575b50612e3b575050505060a001519150565b5116855260129052604084205490811580612ea15760a0840151935191828102928184041490151715612e8d57612e795761239c9394500490612927565b634e487b7160e01b85526012600452602485fd5b634e487b7160e01b86526011600452602486fd5b50505060a001519150565b9094508381813d8311612ed8575b612ec4818361220e565b81010312612ed457519338612e2a565b8780fd5b503d612eba565b505060a001519150565b505050565b908060209392818452848401376000828201840152601f01601f1916010190565b9192916001600160a01b03169081156103ac57600093828552600c60205260408520805460ff81166130015760ff19166001179055600d54600160401b811015612fed576001810180600d55811015612fd957600d7f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a949596527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501846001600160601b0360a01b825416179055612fd4604051928392602084526020840191612eee565b0390a2565b634e487b7160e01b86526032600452602486fd5b634e487b7160e01b86526041600452602486fd5b5050505050905056fea264697066735822122024908f8f4c82ee583b250887b15ebb158b500b262237b876e736e5f791aa91ea64736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","opcodes":"PUSH1 0x80 CALLVALUE PUSH3 0x19D JUMPI PUSH3 0x322E SWAP1 PUSH1 0x1F CODESIZE DUP4 SWAP1 SUB SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT DUP4 DUP4 LT OR PUSH3 0x1A2 JUMPI DUP1 DUP4 SWAP2 PUSH1 0x40 SWAP6 DUP7 SWAP5 DUP6 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x19D JUMPI PUSH3 0x4F DUP2 PUSH3 0x1B8 JUMP JUMPDEST SWAP1 PUSH3 0x5F PUSH1 0x20 DUP1 SWAP3 ADD PUSH3 0x1B8 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 DUP3 SSTORE PUSH1 0xFF NOT SWAP1 DUP2 PUSH1 0x1 SLOAD AND PUSH1 0x1 SSTORE DUP3 PUSH1 0x10 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND SWAP2 DUP3 ISZERO DUP1 ISZERO PUSH3 0x192 JUMPI JUMPDEST PUSH3 0x181 JUMPI DUP4 DUP1 MSTORE PUSH1 0x2 DUP3 MSTORE DUP7 DUP5 KECCAK256 DUP4 DUP6 MSTORE DUP3 MSTORE PUSH1 0xFF DUP8 DUP6 KECCAK256 SLOAD AND ISZERO PUSH3 0x14A JUMPI JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP2 DUP3 DUP6 MSTORE PUSH1 0x2 DUP2 MSTORE DUP8 DUP6 KECCAK256 DUP5 DUP7 MSTORE DUP2 MSTORE PUSH1 0xFF DUP9 DUP7 KECCAK256 SLOAD AND ISZERO PUSH3 0x110 JUMPI JUMPDEST PUSH1 0x11 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND DUP8 DUP10 AND OR SWAP1 SSTORE DUP8 MLOAD PUSH2 0x3040 SWAP1 DUP2 PUSH3 0x1CE DUP3 CODECOPY RETURN JUMPDEST DUP3 DUP6 MSTORE PUSH1 0x2 DUP2 MSTORE DUP8 DUP6 KECCAK256 SWAP1 DUP5 DUP7 MSTORE MSTORE PUSH1 0x1 DUP8 DUP6 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x320E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 PUSH3 0xED JUMP JUMPDEST DUP4 DUP1 MSTORE PUSH1 0x2 DUP3 MSTORE DUP7 DUP5 KECCAK256 DUP4 DUP6 MSTORE DUP3 MSTORE DUP7 DUP5 KECCAK256 PUSH1 0x1 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE CALLER DUP4 DUP6 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x320E DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH3 0xAE JUMP JUMPDEST DUP7 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP6 DUP6 AND ISZERO PUSH3 0x8C JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x19D JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x20EC JUMPI POP DUP1 PUSH4 0x8F43333 EQ PUSH2 0x2015 JUMPI DUP1 PUSH4 0xBD6B070 EQ PUSH2 0x1F74 JUMPI DUP1 PUSH4 0x14AE9D7D EQ PUSH2 0x1F57 JUMPI DUP1 PUSH4 0x1A7A73C2 EQ PUSH2 0x1F03 JUMPI DUP1 PUSH4 0x1EA30FEF EQ PUSH2 0x1EE5 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1EB6 JUMPI DUP1 PUSH4 0x2A5BF6D2 EQ PUSH2 0x1DC4 JUMPI DUP1 PUSH4 0x2C178BD0 EQ PUSH2 0x1D85 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1CD2 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1C40 JUMPI DUP1 PUSH4 0x392FE6B2 EQ PUSH2 0x1C1F JUMPI DUP1 PUSH4 0x3CBB4668 EQ PUSH2 0x19F6 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1962 JUMPI DUP1 PUSH4 0x41F1C0D9 EQ PUSH2 0x1942 JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1919 JUMPI DUP1 PUSH4 0x4C54EF84 EQ PUSH2 0x187A JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x1821 JUMPI DUP1 PUSH4 0x58F85880 EQ PUSH2 0x1803 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x17E0 JUMPI DUP1 PUSH4 0x60711058 EQ PUSH2 0x1715 JUMPI DUP1 PUSH4 0x61E98DB8 EQ PUSH2 0x16F7 JUMPI DUP1 PUSH4 0x6340D55C EQ PUSH2 0x1699 JUMPI DUP1 PUSH4 0x68C4AC26 EQ PUSH2 0x165A JUMPI DUP1 PUSH4 0x720138E8 EQ PUSH2 0x163B JUMPI DUP1 PUSH4 0x729C3E0E EQ PUSH2 0x1601 JUMPI DUP1 PUSH4 0x74F0314F EQ PUSH2 0x15E3 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x15A8 JUMPI DUP1 PUSH4 0x7F3F1601 EQ PUSH2 0x156E JUMPI DUP1 PUSH4 0x877C79A8 EQ PUSH2 0xDDA JUMPI DUP1 PUSH4 0x8EA447E6 EQ PUSH2 0xD39 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xCEC JUMPI DUP1 PUSH4 0x943CA3B9 EQ PUSH2 0xCC0 JUMPI DUP1 PUSH4 0x966ECF3B EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0x99FCFB43 EQ PUSH2 0x87B JUMPI DUP1 PUSH4 0x9EAD7222 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x804 JUMPI DUP1 PUSH4 0xA267526B EQ PUSH2 0x7C2 JUMPI DUP1 PUSH4 0xAB36CB66 EQ PUSH2 0x788 JUMPI DUP1 PUSH4 0xABCBE0B2 EQ PUSH2 0x74D JUMPI DUP1 PUSH4 0xB26025AA EQ PUSH2 0x6A9 JUMPI DUP1 PUSH4 0xB3D35839 EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xB6E85026 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D1 JUMPI DUP1 PUSH4 0xD6FBF61C EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xDACF3DF9 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xE7F5165A EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xEE3BE5F5 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0xF54B7FB4 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0xF6727092 EQ PUSH2 0x3CD JUMPI PUSH4 0xF939BE11 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x27F PUSH2 0x213F JUMP JUMPDEST PUSH2 0x287 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0x2A6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP3 PUSH2 0x2AF PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 DUP4 ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI JUMPDEST PUSH2 0x3AC JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x39A JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH32 0xA6D61C25DD73692B246D702E41B676092851383053847152454787009572CA1 SWAP4 PUSH2 0x357 DUP3 PUSH1 0x1 PUSH2 0x37F SWAP5 ADD PUSH1 0xB SSTORE PUSH2 0x240F JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 DUP7 DUP10 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x20 DUP6 MSTORE AND SWAP7 PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP2 DUP2 AND ISZERO PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x7D0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH2 0x44C PUSH2 0x443 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x2DB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x478 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4B0 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3E8 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x51C PUSH2 0x213F JUMP JUMPDEST PUSH2 0x524 PUSH2 0x2AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5AD JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x575 DUP3 CALLER DUP4 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2E440EF4DB71C471FEB663084D681B2E02DE7FD708EF717172F488D50067D1A0 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E9ACF17 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DD1B305 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x610 PUSH1 0x4 CALLDATALOAD PUSH2 0x5F0 PUSH2 0x2155 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x60B PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x27A6 JUMP JUMPDEST PUSH2 0x28B1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x633 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x80 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 PUSH1 0x2 DUP3 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x3C4A2D89ED8B4CF4347FEC87DF1C38410F8FC538BF9FD64C10F2717BC0FEFF36 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 PUSH1 0xB SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x6D4 JUMPI PUSH1 0x20 DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x6DD DUP2 PUSH2 0x240F JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 SLOAD PUSH1 0x3 SWAP4 DUP5 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xA DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x718 JUMPI JUMPDEST POP POP POP PUSH2 0x713 SWAP1 PUSH2 0x2A6E JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST PUSH2 0x744 SWAP3 DUP5 SWAP7 SWAP3 PUSH1 0x12 SWAP3 PUSH2 0x72E PUSH2 0x713 SWAP8 PUSH2 0x240F JUMP JUMPDEST SWAP1 SLOAD SWAP2 SHL SHR AND PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 PUSH2 0x2927 JUMP JUMPDEST SWAP3 SWAP1 DUP5 DUP1 PUSH2 0x707 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7A9 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x7EB PUSH1 0x20 SWAP2 PUSH2 0x240F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x8C5 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x8D1 PUSH2 0x2AC1 JUMP JUMPDEST PUSH2 0x8D9 PUSH2 0x2A7D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP2 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP4 LT ISZERO PUSH2 0xCAE JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH2 0x912 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP5 PUSH1 0x3 DUP7 ADD SWAP4 DUP2 DUP6 SLOAD AND CALLER EQ ISZERO DUP1 PUSH2 0xC6B JUMPI JUMPDEST PUSH2 0xC59 JUMPI PUSH1 0x7 DUP8 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0xC47 JUMPI PUSH1 0x8 PUSH2 0x95C DUP9 SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 DUP8 MSTORE PUSH2 0x955 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP8 PUSH2 0x2DB6 JUMP JUMPDEST SWAP6 DUP7 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE ADD SLOAD PUSH32 0xF3122F87791D6EFF15D1ABBFC04281DB2F68FE1E63071CC87F02DFB207365549 PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE DUP9 DUP9 DUP3 ADD MSTORE LOG3 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 ISZERO SWAP3 PUSH2 0x1B58 DUP2 DUP2 MUL SWAP1 DUP3 DUP3 DIV EQ DUP6 OR ISZERO PUSH2 0xC31 JUMPI PUSH2 0x2710 DUP1 SWAP2 DIV SWAP1 PUSH2 0x7D0 DUP1 DUP5 MUL SWAP1 DUP5 DUP3 DIV EQ DUP8 OR ISZERO PUSH2 0xC31 JUMPI DIV SWAP2 PUSH2 0x9E7 DUP4 PUSH2 0x9E2 DUP5 DUP5 PUSH2 0x2CE0 JUMP JUMPDEST PUSH2 0x2CE0 JUMP JUMPDEST SWAP4 PUSH2 0x9F3 DUP5 DUP12 SLOAD PUSH2 0x2927 JUMP JUMPDEST DUP2 DUP10 SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x6 DUP8 MSTORE PUSH2 0xA0E PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE DUP9 PUSH1 0x0 MSTORE PUSH1 0x7 DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xA28 DUP5 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA36 DUP6 PUSH1 0x8 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xA44 DUP3 DUP12 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x4 DUP12 ADD SWAP1 PUSH1 0x0 DUP9 DUP5 DUP5 SLOAD AND PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP4 MSTORE DUP8 PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC02 JUMPI JUMPDEST POP PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x3302AF5 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST LT PUSH2 0xBF0 JUMPI DUP2 SWAP1 SLOAD AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x12 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP8 PUSH1 0x1 DUP10 ADD PUSH2 0xAB1 DUP6 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE TIMESTAMP PUSH1 0x3 DUP11 ADD SSTORE ISZERO PUSH2 0xB16 JUMPI JUMPDEST POP PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP7 POP SWAP1 PUSH1 0xA0 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x8 DUP12 ADD SLOAD SWAP9 SLOAD AND SWAP10 SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE LOG4 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST DUP7 PUSH1 0x4 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xB90 JUMPI JUMPDEST POP SWAP1 PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP9 PUSH1 0xA0 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0xB75 JUMPI JUMPDEST POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0xABF JUMP JUMPDEST PUSH1 0x2 PUSH2 0xB84 SWAP2 ADD SWAP2 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 SSTORE DUP12 DUP1 PUSH2 0xB68 JUMP JUMPDEST SWAP8 DUP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 POP DUP9 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xBE9 JUMPI JUMPDEST PUSH2 0xBAD DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP9 PUSH1 0xA0 SWAP9 MLOAD SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 POP SWAP9 PUSH2 0xB36 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xBA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP10 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC2A JUMPI JUMPDEST PUSH2 0xC1A DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 DUP15 PUSH2 0xA74 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC10 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x74089129 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5ED15CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 PUSH1 0x0 MSTORE PUSH1 0x2 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x411321ED PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0xD05 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0xD47 CALLDATASIZE PUSH2 0x23CC JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xD51 PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xDC8 JUMPI PUSH32 0xA214EC724672A94BF6C67D879945ADA3446BDD623BAED4584C515309B8573A2C SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0xDC3 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B92E953 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0xDF3 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x3C8 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0xE39 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST PUSH2 0xE44 SWAP3 SWAP2 SWAP3 PUSH2 0x2AC1 JUMP JUMPDEST PUSH2 0xE4C PUSH2 0x2A7D JUMP JUMPDEST PUSH3 0xF4240 PUSH1 0x4 CALLDATALOAD LT DUP1 ISZERO PUSH2 0x155E JUMPI JUMPDEST PUSH2 0x154C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO PUSH2 0x153B JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1528 JUMPI JUMPDEST PUSH2 0x3AC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x84 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1516 JUMPI PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH6 0x9184E72A000 PUSH2 0xEFE PUSH1 0x4 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2927 JUMP JUMPDEST GT PUSH2 0x14F2 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x3E8 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1504 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH6 0x48C27395000 PUSH2 0xF3C PUSH1 0x4 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2927 JUMP JUMPDEST GT PUSH2 0x14F2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE DUP1 PUSH1 0xA0 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA0 DUP4 ADD GT OR PUSH2 0x384 JUMPI PUSH1 0xA0 DUP2 ADD PUSH1 0x40 MSTORE PUSH2 0xF9B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2B17 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xFC3 DUP5 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP5 MSTORE TIMESTAMP PUSH1 0x20 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x40 DUP8 ADD MSTORE DUP9 DUP2 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x64 CALLDATALOAD AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x1019 DUP2 PUSH2 0x2934 JUMP JUMPDEST SWAP2 PUSH2 0x1027 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x220E JUMP JUMPDEST DUP2 DUP4 MSTORE CALLDATASIZE DUP3 DUP3 ADD GT PUSH2 0x3C8 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x1065 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x216B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x14DC JUMPI DUP1 PUSH2 0x120 SWAP2 MLOAD DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP4 ADD MLOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP2 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP5 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP5 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP5 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0x7 DUP4 ADD PUSH1 0xE0 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 DUP5 ADD SSTORE ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x384 JUMPI PUSH2 0x112A PUSH1 0x9 DUP5 ADD SLOAD PUSH2 0x219D JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1495 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1425 JUMPI PUSH1 0x9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x141A JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x117D DUP2 SLOAD PUSH2 0x2A6E JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 CALLDATALOAD ISZERO DUP1 ISZERO PUSH2 0x139E JUMPI JUMPDEST ISZERO PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x64 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x11E9 SWAP1 DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2B17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB6B55F25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH1 0x0 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x132E JUMPI PUSH2 0x1303 JUMPI JUMPDEST POP PUSH1 0x20 SWAP3 PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0xE DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1251 PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0xF DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x126D PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x64 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x12 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1293 PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST DUP2 SSTORE TIMESTAMP PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE PUSH1 0x4 CALLDATALOAD DUP7 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 AND SWAP1 CALLER SWAP1 PUSH1 0x84 CALLDATALOAD SWAP1 PUSH32 0x75AB645E4BE4B4EC5B3FEAF8E588258ECFC0E501FA619998920A13AC2A172481 SWAP1 PUSH1 0x80 SWAP1 LOG4 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1327 JUMPI JUMPDEST PUSH2 0x1319 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI DUP4 PUSH2 0x122E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x130F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x64 CALLDATALOAD DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x13E8 JUMPI JUMPDEST POP ISZERO PUSH2 0x11A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1412 JUMPI JUMPDEST DUP2 PUSH2 0x1403 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD DUP5 PUSH2 0x13E1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x13F6 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x147D JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x9 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x1464 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x1165 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1456 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x14D5 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x14C9 JUMPI POP POP PUSH2 0x1133 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x14B3 JUMP JUMPDEST POP DUP1 PUSH2 0x14B3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x652F4C5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x61EEA575 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x424E8D71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xE78 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xE71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH5 0xE8D4A51000 PUSH1 0x4 CALLDATALOAD GT PUSH2 0xE5B JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x158F PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x15180 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1622 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0x610 PUSH2 0x164C CALLDATASIZE PUSH2 0x23CC JUMP JUMPDEST SWAP2 PUSH2 0x1655 PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x2F0F JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x167B PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x16B5 PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0x154C JUMPI PUSH1 0x40 PUSH32 0xB404CAC19FB1CBEFF98D325795B08886E3CD8FE8CB1A2F193AAC66F13FB239C3 SWAP2 PUSH1 0x10 SLOAD SWAP1 DUP1 PUSH1 0x10 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x17B8 PUSH2 0x1731 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1740 DUP2 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x120 DUP3 ADD MSTORE SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 LT PUSH2 0x17BC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x231D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x17DA SWAP2 POP PUSH2 0x17D4 SWAP1 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP PUSH2 0x2D2E JUMP JUMPDEST DUP3 PUSH2 0x17A3 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x183A PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x1842 PUSH2 0x2A7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP2 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1893 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x189F PUSH2 0x2AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5AD JUMPI DUP1 PUSH2 0x1913 JUMPI POP DUP1 JUMPDEST DUP2 GT PUSH2 0x5AD JUMPI PUSH2 0x190C SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1903 DUP4 DUP3 SLOAD PUSH2 0x2CE0 JUMP JUMPDEST SWAP1 SSTORE CALLER SWAP1 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST SWAP1 PUSH2 0x18E0 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH5 0xE8D4A51000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x197B PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x19BA JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0x1A29 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP2 PUSH2 0x1A32 PUSH2 0x2AC1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xCAE JUMPI PUSH2 0x1A60 SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP1 PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0xC47 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x4 DUP3 DUP2 ADD SLOAD DUP4 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1BFC726F PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP2 DUP4 AND SWAP2 DUP5 DUP2 PUSH1 0x24 DUP2 PUSH1 0x0 DUP8 GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1BF0 JUMPI JUMPDEST POP PUSH2 0x1BA8 JUMPI POP PUSH1 0x0 SWAP2 PUSH1 0x24 DUP6 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1B59 JUMPI JUMPDEST POP PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA SWAP5 PUSH2 0x1B44 SWAP3 PUSH1 0x8 SWAP3 PUSH2 0x1B4E JUMPI POP PUSH2 0x1B29 PUSH1 0x0 DUP1 SWAP6 JUMPDEST CALLER SWAP1 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH2 0x2CED JUMP JUMPDEST ADD SLOAD SWAP5 PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP7 PUSH1 0x40 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x1B29 SWAP1 DUP1 SWAP6 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 SWAP2 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1BA1 JUMPI JUMPDEST PUSH2 0x1B71 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA PUSH2 0x1AE5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B67 JUMP JUMPDEST PUSH2 0x1B44 SWAP3 POP SWAP5 PUSH2 0x1B29 PUSH1 0x8 SWAP3 PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA SWAP8 DUP2 DUP2 GT PUSH1 0x0 EQ PUSH2 0x1BE9 JUMPI POP JUMPDEST DUP1 SWAP6 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP PUSH2 0x1BE2 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1C18 JUMPI JUMPDEST PUSH2 0x1C08 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 DUP10 PUSH2 0x1AB6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BFE JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH6 0x9184E72A000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1C59 PUSH2 0x2155 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1C75 JUMPI PUSH2 0x610 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x28B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1CEE PUSH2 0x2155 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x1D08 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x27A6 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x1D37 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DA6 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DE6 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x384 JUMPI DUP3 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1E19 DUP4 DUP3 PUSH1 0x5 SHL ADD DUP6 PUSH2 0x220E JUMP JUMPDEST DUP1 DUP5 MSTORE DUP3 DUP5 ADD DUP1 SWAP3 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1E93 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 ADD SWAP4 DUP2 DUP5 MSTORE MLOAD DUP1 SWAP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP4 PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 SWAP2 PUSH1 0x0 SWAP6 JUMPDEST DUP3 DUP8 LT PUSH2 0x1E67 JUMPI DUP6 DUP6 SUB DUP7 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP3 DUP1 PUSH2 0x1E83 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP11 DUP3 SUB ADD DUP7 MSTORE DUP9 MLOAD PUSH2 0x231D JUMP JUMPDEST SWAP7 ADD SWAP3 ADD SWAP7 ADD SWAP6 SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0xA DUP7 PUSH1 0x1 SWAP3 PUSH2 0x1EA5 DUP6 SWAP11 SWAP10 SWAP11 PUSH2 0x2D2E JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 SWAP6 SWAP5 SWAP6 PUSH2 0x1E2C JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0xF4240 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1F1C PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1F27 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP2 DUP3 DUP3 GT PUSH2 0x5AD JUMPI PUSH2 0x1F3F DUP3 PUSH2 0x610 SWAP5 PUSH2 0x2CE0 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x2CED JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1B58 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1F8D PUSH2 0x213F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1F9D DUP2 PUSH2 0x21D7 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x80 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x1FD1 DUP2 PUSH2 0x21D7 JUMP JUMPDEST DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 PUSH1 0x3 PUSH1 0x2 DUP5 ADD SLOAD SWAP4 PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE ADD SLOAD SWAP4 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE MLOAD PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD MSTORE MLOAD PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x202E PUSH2 0x213F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x205D SWAP2 PUSH2 0x216B JUMP JUMPDEST POP SWAP1 PUSH2 0x17B8 DUP3 SLOAD SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 DUP2 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP4 ADD SLOAD AND PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x6 DUP5 ADD SLOAD SWAP2 PUSH1 0xFF PUSH1 0x7 DUP7 ADD SLOAD AND SWAP4 PUSH2 0x20A6 PUSH1 0x9 PUSH1 0x8 DUP9 ADD SLOAD SWAP8 ADD PUSH2 0x222F JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP11 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x140 DUP1 PUSH2 0x120 DUP6 ADD MSTORE DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x3C8 JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x212E JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x2127 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x21CD JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x21B7 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x21AC JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2243 DUP5 PUSH2 0x219D JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x22B2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x226F JUMPI JUMPDEST POP POP PUSH2 0x226D SWAP3 POP SUB DUP4 PUSH2 0x220E JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x229A JUMPI POP POP PUSH2 0x226D SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x225F JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2282 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x226D SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x225F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x22E8 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x22D8 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2311 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x239C SWAP2 DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x120 DUP1 SWAP2 ADD MLOAD SWAP2 PUSH2 0x140 DUP1 SWAP3 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x3C8 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3C8 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x3C8 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x3C8 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x3C8 JUMPI PUSH2 0x240B SWAP2 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xE5EBFA64FCA8D502A8E50C1EDFFD2C31EF4DAD5B396E65D9F397FB028F74ABC5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x24AA JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x24B3 CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x24C0 DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x25DF JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x22D5 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x220E JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x260F DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5A10DB7EB5FB087477F68987FF09C6EBB13410247D1A97126552F0C97385B266 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x26C5 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x26CE CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x26DB DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2760 JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2790 DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP4 MSTORE PUSH1 0xFF DUP5 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x27D0 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x27D9 CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x27E6 DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x286B JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x289B DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x28E2 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC31 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x384 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x2187 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2187 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x2A00 JUMPI POP POP PUSH2 0x29BC JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2A59 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2A2F DUP5 DUP7 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x2A44 JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC31 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH2 0x2A89 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x2AD2 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x384 JUMPI PUSH2 0x2BA6 SWAP2 PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2C43 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x2B8B DUP4 PUSH2 0x2934 JUMP JUMPDEST SWAP3 PUSH2 0x2B99 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x220E JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x2C47 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x2C18 JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x2BC1 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x2C3F JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x2C3C JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x2BB4 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2CA9 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2C5B JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2C64 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2CBC JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2599 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xC31 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x226D SWAP2 PUSH2 0x2D29 PUSH1 0x64 DUP4 PUSH2 0x220E JUMP JUMPDEST PUSH2 0x2B17 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x2D3B DUP2 PUSH2 0x21F2 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x2DB1 PUSH1 0x9 DUP4 SWAP6 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x2 DUP4 ADD SLOAD AND PUSH1 0x40 DUP8 ADD MSTORE DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xFF PUSH1 0x7 DUP3 ADD SLOAD AND ISZERO ISZERO PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP7 ADD MSTORE ADD PUSH2 0x222F JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP2 SWAP5 SWAP4 SWAP1 SWAP2 DUP2 LT ISZERO PUSH2 0x2EE9 JUMPI PUSH2 0x17D4 PUSH2 0x2DF2 SWAP2 PUSH1 0x3 DUP5 MSTORE PUSH1 0x40 DUP8 KECCAK256 PUSH2 0x216B JUMP JUMPDEST SWAP2 PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2EDF JUMPI SWAP1 PUSH1 0x24 SWAP2 PUSH1 0x80 DUP5 ADD DUP3 DUP3 DUP3 MLOAD AND PUSH1 0x40 MLOAD SWAP6 DUP7 DUP1 SWAP3 PUSH4 0x37BE4CE9 PUSH1 0xE1 SHL DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP8 SWAP5 DUP2 PUSH2 0x2EAC JUMPI JUMPDEST POP PUSH2 0x2E3B JUMPI POP POP POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST MLOAD AND DUP6 MSTORE PUSH1 0x12 SWAP1 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP1 DUP2 ISZERO DUP1 PUSH2 0x2EA1 JUMPI PUSH1 0xA0 DUP5 ADD MLOAD SWAP4 MLOAD SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E8D JUMPI PUSH2 0x2E79 JUMPI PUSH2 0x239C SWAP4 SWAP5 POP DIV SWAP1 PUSH2 0x2927 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST SWAP1 SWAP5 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2ED8 JUMPI JUMPDEST PUSH2 0x2EC4 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2ED4 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x2E2A JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2EBA JUMP JUMPDEST POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 SWAP4 DUP3 DUP6 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x3001 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2FED JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0xD SSTORE DUP2 LT ISZERO PUSH2 0x2FD9 JUMPI PUSH1 0xD PUSH32 0x7AFEE0F1B802CC0F66C67890E26B4566251859CF2CD8DE79B86AED7251D9756A SWAP5 SWAP6 SWAP7 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x2FD4 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP POP POP POP SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 SWAP1 DUP16 DUP16 0x4C DUP3 0xEE PC EXTCODESIZE 0x25 ADDMOD DUP8 0xB1 0x5E 0xBB ISZERO DUP12 POP SIGNEXTEND 0x26 0x22 CALLDATACOPY 0xB8 PUSH23 0xE736E5F791AA91EA64736F6C634300081400332F878811 PUSH31 0x7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D00000000 ","sourceMap":"1090:32136:18:-:0;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;-1:-1:-1;;1090:32136:18;;;;;;;;;;;;;;4578:1;1090:32136;;;;;;;;;10617:19;;;:50;;;;-1:-1:-1;10613:104:18;;1090:32136;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;1949:23:18;1090:32136;;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;10813:28:18;1949:23;;-1:-1:-1;;;;;;1949:23:18;1090:32136;;;1949:23;;;1090:32136;;;;;;;;;7665:149:0;1090:32136:18;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;734:10:10;7763:40:0;;;7665:149;;;;;;;;1090:32136:18;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;734:10:10;7763:40:0;;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;10613:104:18;1090:32136;;-1:-1:-1;;;10690:16:18;;;;;10617:50;1090:32136;;;;10640:27;10617:50;;1090:32136;-1:-1:-1;1090:32136:18;;;;;;-1:-1:-1;1090:32136:18;;;;;-1:-1:-1;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":8533,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_36824":{"entryPoint":8511,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_addresst_string_calldata":{"entryPoint":9164,"id":null,"parameterSlots":1,"returnSlots":3},"abi_decode_string_calldata":{"entryPoint":9119,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":8952,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":12014,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_struct_Deposit":{"entryPoint":8989,"id":null,"parameterSlots":2,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":10548,"id":null,"parameterSlots":1,"returnSlots":1},"checked_add_uint256":{"entryPoint":10535,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":11488,"id":null,"parameterSlots":2,"returnSlots":1},"copy_array_from_storage_to_memory_string":{"entryPoint":8751,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":8917,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8605,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":8718,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_36826":{"entryPoint":8663,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_36838":{"entryPoint":8690,"id":null,"parameterSlots":1,"returnSlots":0},"fun_addSupportedToken_inner":{"entryPoint":12047,"id":null,"parameterSlots":3,"returnSlots":0},"fun_calculateYield":{"entryPoint":11702,"id":5372,"parameterSlots":2,"returnSlots":1},"fun_callOptionalReturn":{"entryPoint":11031,"id":1614,"parameterSlots":2,"returnSlots":0},"fun_checkRole":{"entryPoint":10150,"id":92,"parameterSlots":1,"returnSlots":0},"fun_checkRole_36829":{"entryPoint":9286,"id":92,"parameterSlots":0,"returnSlots":0},"fun_checkRole_36851":{"entryPoint":9825,"id":92,"parameterSlots":0,"returnSlots":0},"fun_nonReentrantBefore":{"entryPoint":10945,"id":541,"parameterSlots":0,"returnSlots":0},"fun_requireNotPaused":{"entryPoint":10877,"id":452,"parameterSlots":0,"returnSlots":0},"fun_revokeRole":{"entryPoint":10417,"id":314,"parameterSlots":2,"returnSlots":0},"fun_safeTransfer":{"entryPoint":11501,"id":1320,"parameterSlots":3,"returnSlots":0},"fun_toHexString":{"entryPoint":10592,"id":2206,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":11335,"id":1948,"parameterSlots":4,"returnSlots":1},"increment_uint256":{"entryPoint":10862,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":10575,"id":null,"parameterSlots":2,"returnSlots":1},"read_from_storage_reference_type_struct_Deposit":{"entryPoint":11566,"id":null,"parameterSlots":1,"returnSlots":1},"storage_array_index_access_address_dyn":{"entryPoint":9231,"id":null,"parameterSlots":1,"returnSlots":2},"storage_array_index_access_struct_Deposit_dyn":{"entryPoint":8555,"id":null,"parameterSlots":2,"returnSlots":2}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a7146120ec5750806308f43333146120155780630bd6b07014611f7457806314ae9d7d14611f575780631a7a73c214611f035780631ea30fef14611ee5578063248a9ca314611eb65780632a5bf6d214611dc45780632c178bd014611d855780632f2ff15d14611cd257806336568abe14611c40578063392fe6b214611c1f5780633cbb4668146119f65780633f4ba83a1461196257806341f1c0d91461194257806346904840146119195780634c54ef841461187a57806351858e271461182157806358f85880146118035780635c975abb146117e0578063607110581461171557806361e98db8146116f75780636340d55c1461169957806368c4ac261461165a578063720138e81461163b578063729c3e0e1461160157806374f0314f146115e357806375b238fc146115a85780637f3f16011461156e578063877c79a814610dda5780638ea447e614610d3957806391d1485414610cec578063943ca3b914610cc0578063966ecf3b146108ac57806399fcfb431461087b5780639ead722214610820578063a217fddf14610804578063a267526b146107c2578063ab36cb6614610788578063abcbe0b21461074d578063b26025aa146106a9578063b3d358391461066e578063b6e8502614610612578063d547741f146105d1578063d6fbf61c14610503578063dacf3df9146104e6578063e1f1c4a7146104c9578063e7f5165a1461048f578063ee3be5f514610454578063f54b7fb414610425578063f5b541a6146103ea578063f6727092146103cd5763f939be111461026657600080fd5b346103c85760603660031901126103c85761027f61213f565b610287612155565b6044356001600160401b0381116103c8576102a690369060040161239f565b926102af612661565b6001600160a01b0390811692831580156103be575b6103ac5783600052600a60205260ff6040600020541661039a578360005260096020526040600020846001600160601b0360a01b825416179055600a6020526040600020600160ff19825416179055600b54600160401b811015610384577f0a6d61c25dd73692b246d702e41b676092851383053847152454787009572ca19361035782600161037f9401600b5561240f565b81549060031b908689831b921b19161790556040519384936020855216966020840191612eee565b0390a3005b634e487b7160e01b600052604160045260246000fd5b604051632711b74d60e11b8152600490fd5b60405163e6c4247b60e01b8152600490fd5b50818116156102c4565b600080fd5b346103c85760003660031901126103c85760206040516107d08152f35b346103c85760003660031901126103c85760206040517f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9298152f35b346103c85760403660031901126103c857602061044c61044361213f565b60243590612db6565b604051908152f35b346103c85760203660031901126103c85760206001600160a01b038061047861213f565b166000526009825260406000205416604051908152f35b346103c85760203660031901126103c8576001600160a01b036104b061213f565b1660005260076020526020604060002054604051908152f35b346103c85760003660031901126103c85760206040516127108152f35b346103c85760003660031901126103c85760206040516103e88152f35b346103c85760203660031901126103c85761051c61213f565b610524612ac1565b6001600160a01b03166000818152600c602052604090205460ff16156105bf573360005260076020526040600020549081156105ad5733600052600760205260006040812055610575823383612ced565b60405191825260208201527f2e440ef4db71c471feb663084d681b2e02de7fd708ef717172f488d50067d1a060403392a26001600055005b604051631e9acf1760e31b8152600490fd5b604051633dd1b30560e01b8152600490fd5b346103c85760403660031901126103c8576106106004356105f0612155565b9080600052600260205261060b6001604060002001546127a6565b6128b1565b005b346103c85760203660031901126103c8576001600160a01b0361063361213f565b166000526012602052608060406000208054906001810154906003600282015491015491604051938452602084015260408301526060820152f35b346103c85760003660031901126103c85760206040517f3c4a2d89ed8b4cf4347fec87df1c38410f8fc538bf9fd64c10f2717bc0feff368152f35b346103c85760003660031901126103c857600080600b54905b8181106106d457602083604051908152f35b6106dd8161240f565b9060018060a01b03809154600393841b1c16600052602091600a835260ff60406000205416610718575b50505061071390612a6e565b6106c2565b6107449284969260129261072e6107139761240f565b9054911b1c166000525260406000205490612927565b92908480610707565b346103c85760003660031901126103c85760206040517f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b8152f35b346103c85760203660031901126103c8576001600160a01b036107a961213f565b16600052600f6020526020604060002054604051908152f35b346103c85760203660031901126103c857600435600b548110156103c8576107eb60209161240f565b905460405160039290921b1c6001600160a01b03168152f35b346103c85760003660031901126103c857602060405160008152f35b346103c85760203660031901126103c857600435600d548110156103c857600d6000527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501546040516001600160a01b039091168152602090f35b346103c85760203660031901126103c8576004356000526005602052602060ff604060002054166040519015158152f35b346103c85760403660031901126103c8576108c561213f565b602435906108d1612ac1565b6108d9612a7d565b60018060a01b03918282169182600052602060048152604060002054831015610cae57836000526003815261091283604060002061216b565b509460038601938185541633141580610c6b575b610c5957600787019060ff825416610c4757600861095c8892836000526003875261095581604060002061216b565b5097612db6565b9586600582015542600682015501547ff3122f87791d6eff15d1abbfc04281db2f68fe1e63071cc87f02dfb207365549604080518881528888820152a3805460ff19166001179055821592611b588181029082820414851715610c3157612710809104906107d08084029084820414871715610c315704916109e7836109e28484612ce0565b612ce0565b936109f3848b54612927565b8189541660005260068752610a0e6040600020918254612927565b905588600052600786526040600020610a28848254612927565b9055610a3685600854612927565b600855610a44828b54612927565b60048b019060008884845416602460405180948193632e1a7d4d60e01b83528760048401525af160009181610c02575b50610a8b576040516303302af560e51b8152600490fd5b10610bf05781905416806000526012875260406000209760018901610ab1858254612927565b90554260038a015515610b16575b507f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de96509060a0959493929160088b0154985416995494604051958652850152604084015260608301526080820152a46001600055005b8660049160405192838092634b16524b60e11b82525afa60009181610b90575b50907f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de9860a098979695949392610b75575b5050909192939495610abf565b6002610b849101918254612927565b60011c90558b80610b68565b97809796959493925088813d8311610be9575b610bad818361220e565b810103126103c8577f4fd5c0b26e24b2b00b557765b057c3c07d8a2fb298ea4b3d87fe809d5e6571de9860a09851929394959697985098610b36565b503d610ba3565b6040516312171d8360e31b8152600490fd5b9091508981813d8311610c2a575b610c1a818361220e565b810103126103c85751908e610a74565b503d610c10565b634e487b7160e01b600052601160045260246000fd5b604051637408912960e11b8152600490fd5b604051635ed15cf960e01b8152600490fd5b507f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92960005260028352604060002033600052835260ff6040600020541615610926565b60405163411321ed60e01b8152600490fd5b346103c85760203660031901126103c857600435600052600e6020526020604060002054604051908152f35b346103c85760403660031901126103c857610d05612155565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b346103c857610d47366123cc565b9091610d51612661565b6001600160a01b03166000818152600a602052604090205490929060ff1615610dc8577fa214ec724672a94bf6c67d879945ada3446bdd623baed4584c515309b8573a2c9183600052600a602052604060002060ff198154169055610dc3604051928392602084526020840191612eee565b0390a2005b604051631b92e95360e31b8152600490fd5b346103c85760c03660031901126103c857610df3612155565b604435906001600160a01b03821682036103c8576064356001600160a01b03811690036103c85760a4356001600160401b0381116103c857610e3990369060040161239f565b610e44929192612ac1565b610e4c612a7d565b620f424060043510801561155e575b61154c576001600160a01b03821615801561153b575b8015611528575b6103ac576001600160a01b0382166000908152600c602052604090205460ff16156105bf576064356001600160a01b03166000908152600a602052604090205460ff1615610dc857608435600052600560205260ff6040600020541661151657620151804204600052600e6020526509184e72a000610efe600435604060002054612927565b116114f2573360005260046020526103e860406000205410156115045733600052600f60205265048c27395000610f3c600435604060002054612927565b116114f2576040516323b872dd60e01b60208201523360248201523060448201526004356064820152606481528060a08101106001600160401b0360a0830111176103845760a08101604052610f9b906001600160a01b038416612b17565b33600052600460205260406000205492600360205260406000209060405192610fc3846121f2565b600435845242602085018190526001600160a01b0386811660408701528881166060870152606435166080860152600060a0860181905260c086019190915260e085015260843561010085015261101981612934565b91611027604051938461220e565b81835236828201116103c8578160009260209283860137830101526101208301528054600160401b811015610384576110659160018201815561216b565b9190916114dc578061012091518355602081015160018401556002830160018060a01b03604083015116906001600160601b0360a01b91828254161790556003840160018060a01b0360608401511682825416179055600484019060018060a01b036080840151169082541617905560a0810151600584015560c081015160068401556007830160e0820151151560ff80198354169116179055610100810151600884015501518051906001600160401b0382116103845761112a600984015461219d565b601f8111611495575b50602090601f831160011461142557600992916000918361141a575b50508160011b916000199060031b1c1916179101555b336000526004602052604060002061117d8154612a6e565b905560843560005260056020526040600020600160ff1982541617905560043515801561139e575b1561133a5760405163095ea7b360e01b6020820152606480356001600160a01b0316602483015260043560448084019190915282526111f891906111e9908261220e565b6001600160a01b038316612b17565b60405163b6b55f2560e01b8152600480359082015260208160248160006064356001600160a01b03165af1801561132e57611303575b50602092620151804204600052600e845260406000206112516004358254612927565b905533600052600f8452604060002061126d6004358254612927565b905560018060a01b03606435166000526012845260406000206112936004358254612927565b815542600390910155604080516001600160a01b03938416815260043586820152606435841691810191909152606081018490529116903390608435907f75ab645e4be4b4ec5b3feaf8e588258ecfc0e501fa619998920a13ac2a17248190608090a46001600055604051908152f35b602090813d8311611327575b611319818361220e565b810103126103c8578361122e565b503d61130f565b6040513d6000823e3d90fd5b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b81523060048201526001600160a01b03606435811660248301526020908290604490829086165afa90811561132e576000916113e8575b50156111a5565b90506020813d602011611412575b816114036020938361220e565b810103126103c85751846113e1565b3d91506113f6565b01519050878061114f565b906009840160005260206000209160005b601f198516811061147d5750918391600193600995601f19811610611464575b505050811b01910155611165565b015160001960f88460031b161c19169055878080611456565b91926020600181928685015181550194019201611436565b600984016000526020600020601f840160051c8101602085106114d5575b601f830160051c820181106114c9575050611133565b600081556001016114b3565b50806114b3565b634e487b7160e01b600052600060045260246000fd5b604051630652f4c560e21b8152600490fd5b6040516361eea57560e11b8152600490fd5b60405163424e8d7160e01b8152600490fd5b506064356001600160a01b031615610e78565b506001600160a01b03841615610e71565b60405163162908e360e11b8152600490fd5b5064e8d4a5100060043511610e5b565b346103c85760203660031901126103c8576001600160a01b0361158f61213f565b1660005260066020526020604060002054604051908152f35b346103c85760003660031901126103c85760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b346103c85760003660031901126103c8576020604051620151808152f35b346103c85760203660031901126103c8576001600160a01b0361162261213f565b1660005260046020526020604060002054604051908152f35b346103c85761061061164c366123cc565b91611655612446565b612f0f565b346103c85760203660031901126103c8576001600160a01b0361167b61213f565b16600052600c602052602060ff604060002054166040519015158152f35b346103c85760203660031901126103c8576004356116b5612446565b6103e8811161154c5760407fb404cac19fb1cbeff98d325795b08886e3cd8fe8cb1a2f193aac66f13fb239c391601054908060105582519182526020820152a1005b346103c85760003660031901126103c8576020600854604051908152f35b346103c85760403660031901126103c8576117b861173161213f565b602435604051611740816121f2565b6000815260006020820152600060408201526000606082015260006080820152600060a0820152600060c0820152600060e0820152600061010082015260606101208201529160018060a01b0316600052600460205260406000205481106117bc575b5060405191829160208352602083019061231d565b0390f35b6117da91506117d4906003602052604060002061216b565b50612d2e565b826117a3565b346103c85760003660031901126103c857602060ff600154166040519015158152f35b346103c85760003660031901126103c8576020601054604051908152f35b346103c85760003660031901126103c85761183a612446565b611842612a7d565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b346103c85760403660031901126103c85761189361213f565b6024359061189f612ac1565b6001600160a01b03166000818152600c602052604090205490919060ff16156105bf573360005260066020526040600020549081156105ad57806119135750805b81116105ad5761190c913360005260066020526040600020611903838254612ce0565b90553390612ced565b6001600055005b906118e0565b346103c85760003660031901126103c8576011546040516001600160a01b039091168152602090f35b346103c85760003660031901126103c857602060405164e8d4a510008152f35b346103c85760003660031901126103c85761197b612446565b60015460ff8116156119ba5760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b346103c85760403660031901126103c8576004356024356001600160401b0381116103c857611a2990369060040161239f565b91611a32612ac1565b3360005260209060048252604060002054811015610cae57611a60903360005260038352604060002061216b565b509060078201805460ff8116610c475760ff191660011790556004828101548354604051631bfc726f60e21b815230938101939093526001600160a01b03929183169184816024816000875af160009181611bf0575b50611ba85750600091602485926040519485938492632e1a7d4d60e01b845260048401525af160009181611b59575b507ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba94611b4492600892611b4e5750611b29600080955b3390600285015416612ced565b01549460408051948594855284015233966040840191612eee565b0390a36001600055005b611b29908095611b1c565b9091508381813d8311611ba1575b611b71818361220e565b810103126103c85751907ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba611ae5565b503d611b67565b611b44925094611b296008927ff9a641acc5c9067014d12a6d17ed1f5ebaa0c5756ebb3d4c26d9a2cbac5baeba97818111600014611be957505b8095611b1c565b9050611be2565b9091508581813d8311611c18575b611c08818361220e565b810103126103c857519089611ab6565b503d611bfe565b346103c85760003660031901126103c85760206040516509184e72a0008152f35b346103c85760403660031901126103c857611c59612155565b336001600160a01b03821603611c7557610610906004356128b1565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b346103c85760403660031901126103c857600435611cee612155565b816000526002602052611d086001604060002001546127a6565b81600052600260205260406000209060018060a01b0316908160005260205260ff6040600020541615611d3757005b8160005260026020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b346103c85760203660031901126103c8576001600160a01b03611da661213f565b16600052600a602052602060ff604060002054166040519015158152f35b346103c8576020806003193601126103c8576001600160a01b03611de661213f565b166000526003815260406000208054906001600160401b03821161038457829060405192611e19838260051b018561220e565b8084528284018092600052836000206000915b838310611e935750505050604051918083019381845251809452604083019360408160051b85010192916000955b828710611e675785850386f35b909192938280611e83600193603f198a8203018652885161231d565b9601920196019592919092611e5a565b600a86600192611ea5859a999a612d2e565b815201920192019190959495611e2c565b346103c85760203660031901126103c85760043560005260026020526020600160406000200154604051908152f35b346103c85760003660031901126103c8576020604051620f42408152f35b346103c85760403660031901126103c857611f1c61213f565b602435611f27612446565b600854918282116105ad57611f3f8261061094612ce0565b6008556011546001600160a01b039081169116612ced565b346103c85760003660031901126103c8576020604051611b588152f35b346103c85760203660031901126103c857611f8d61213f565b60006060604051611f9d816121d7565b828152826020820152826040820152015260018060a01b0316600052601260205260806040600020604051611fd1816121d7565b815491828252600181015460208301908152606060036002840154936040860194855201549301928352604051938452516020840152516040830152516060820152f35b346103c85760403660031901126103c85761202e61213f565b6001600160a01b0390811660009081526003602052604090208054602435908110156103c85761205d9161216b565b50906117b882549160018401549381600282015416918060038301541690600483015416600583015460068401549160ff600786015416936120a660096008880154970161222f565b966040519a8b9a8b5260208b015260408a01526060890152608088015260a087015260c0860152151560e0850152610100840152610140806101208501528301906122f8565b346103c85760203660031901126103c8576004359063ffffffff60e01b82168092036103c857602091637965db0b60e01b811490811561212e575b5015158152f35b6301ffc9a760e01b14905083612127565b600435906001600160a01b03821682036103c857565b602435906001600160a01b03821682036103c857565b805482101561218757600052600a602060002091020190600090565b634e487b7160e01b600052603260045260246000fd5b90600182811c921680156121cd575b60208310146121b757565b634e487b7160e01b600052602260045260246000fd5b91607f16916121ac565b608081019081106001600160401b0382111761038457604052565b61014081019081106001600160401b0382111761038457604052565b90601f801991011681019081106001600160401b0382111761038457604052565b90604051918260008254926122438461219d565b9081845260019485811690816000146122b2575060011461226f575b505061226d9250038361220e565b565b9093915060005260209081600020936000915b81831061229a57505061226d9350820101388061225f565b85548884018501529485019487945091830191612282565b91505061226d94506020925060ff191682840152151560051b820101388061225f565b60005b8381106122e85750506000910152565b81810151838201526020016122d8565b90602091612311815180928185528580860191016122d5565b601f01601f1916010190565b9061239c91805182526020810151602083015260018060a01b03806040830151166040840152806060830151166060840152608082015116608083015260a081015160a083015260c081015160c083015260e0810151151560e083015261010080820151908301526101208091015191610140809282015201906122f8565b90565b9181601f840112156103c8578235916001600160401b0383116103c857602083818601950101116103c857565b9060406003198301126103c8576004356001600160a01b03811681036103c85791602435906001600160401b0382116103c85761240b9160040161239f565b9091565b600b5481101561218757600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90190600090565b3360009081527fe5ebfa64fca8d502a8e50c1edffd2c31ef4dad5b396e65d9f397fb028f74abc5602090815260408083205490927fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759160ff16156124aa5750505050565b6124b333612960565b918451906124c0826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b8183116125df5750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b8401917001034b99036b4b9b9b4b733903937b6329607d1b6037840152518093868401906122d5565b0103602881018752018561220e565b5192839262461bcd60e51b8452600484015260248301906122f8565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a61260f858761294f565b5360041c928015612625576000190191906124f1565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527f5a10db7eb5fb087477f68987ff09c6ebb13410247d1a97126552f0c97385b266602090815260408083205490927f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b9160ff16156126c55750505050565b6126ce33612960565b918451906126db826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b8183116127605750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a612790858761294f565b5360041c9280156126255760001901919061270c565b60009080825260209060028252604092838120338252835260ff8482205416156127d05750505050565b6127d933612960565b918451906127e6826121d7565b6042825284820192606036853782511561264d576030845382519060019182101561264d5790607860218501536041915b81831161286b5750505061259d57604861259993869361257d9361256e985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612545815180928c6037890191016122d5565b909192600f81166010811015612639576f181899199a1a9b1b9c1cb0b131b232b360811b901a61289b858761294f565b5360041c92801561262557600019019190612817565b906000918083526002602052604083209160018060a01b03169182845260205260ff6040842054166128e257505050565b8083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b91908201809211610c3157565b6001600160401b03811161038457601f01601f191660200190565b908151811015612187570160200190565b60405190606082018281106001600160401b0382111761038457604052602a82526020820160403682378251156121875760309053815160019081101561218757607860218401536029905b808211612a005750506129bc5790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015612a59576f181899199a1a9b1b9c1cb0b131b232b360811b901a612a2f848661294f565b5360041c918015612a445760001901906129ac565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b6000198114610c315760010190565b60ff60015416612a8957565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414612ad2576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b03169060405160408101908082106001600160401b0383111761038457612ba6916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d15612c43573d91612b8b83612934565b92612b99604051948561220e565b83523d868885013e612c47565b805191821591848315612c18575b505050905015612bc15750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b919381809450010312612c3f57820151908115158203612c3c575080388084612bb4565b80fd5b5080fd5b6060915b91929015612ca95750815115612c5b575090565b3b15612c645790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015612cbc5750805190602001fd5b60405162461bcd60e51b8152602060048201529081906125999060248301906122f8565b91908203918211610c3157565b60405163a9059cbb60e01b60208201526001600160a01b0392909216602483015260448083019390935291815261226d91612d2960648361220e565b612b17565b90604051612d3b816121f2565b610120612db160098395805485526001810154602086015260018060a01b038060028301541660408701528060038301541660608701526004820154166080860152600581015460a0860152600681015460c086015260ff600782015416151560e086015260088101546101008601520161222f565b910152565b6001600160a01b0390811660009081526004602090815260408220549194939091811015612ee9576117d4612df291600384526040872061216b565b9160e0830151612edf5790602491608084018282825116604051958680926337be4ce960e11b82523060048301525afa879481612eac575b50612e3b575050505060a001519150565b5116855260129052604084205490811580612ea15760a0840151935191828102928184041490151715612e8d57612e795761239c9394500490612927565b634e487b7160e01b85526012600452602485fd5b634e487b7160e01b86526011600452602486fd5b50505060a001519150565b9094508381813d8311612ed8575b612ec4818361220e565b81010312612ed457519338612e2a565b8780fd5b503d612eba565b505060a001519150565b505050565b908060209392818452848401376000828201840152601f01601f1916010190565b9192916001600160a01b03169081156103ac57600093828552600c60205260408520805460ff81166130015760ff19166001179055600d54600160401b811015612fed576001810180600d55811015612fd957600d7f7afee0f1b802cc0f66c67890e26b4566251859cf2cd8de79b86aed7251d9756a949596527fd7b6990105719101dabeb77144f2a3385c8033acd3af97e9423a695e81ad1eb501846001600160601b0360a01b825416179055612fd4604051928392602084526020840191612eee565b0390a2565b634e487b7160e01b86526032600452602486fd5b634e487b7160e01b86526041600452602486fd5b5050505050905056fea264697066735822122024908f8f4c82ee583b250887b15ebb158b500b262237b876e736e5f791aa91ea64736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1FFC9A7 EQ PUSH2 0x20EC JUMPI POP DUP1 PUSH4 0x8F43333 EQ PUSH2 0x2015 JUMPI DUP1 PUSH4 0xBD6B070 EQ PUSH2 0x1F74 JUMPI DUP1 PUSH4 0x14AE9D7D EQ PUSH2 0x1F57 JUMPI DUP1 PUSH4 0x1A7A73C2 EQ PUSH2 0x1F03 JUMPI DUP1 PUSH4 0x1EA30FEF EQ PUSH2 0x1EE5 JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x1EB6 JUMPI DUP1 PUSH4 0x2A5BF6D2 EQ PUSH2 0x1DC4 JUMPI DUP1 PUSH4 0x2C178BD0 EQ PUSH2 0x1D85 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1CD2 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1C40 JUMPI DUP1 PUSH4 0x392FE6B2 EQ PUSH2 0x1C1F JUMPI DUP1 PUSH4 0x3CBB4668 EQ PUSH2 0x19F6 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1962 JUMPI DUP1 PUSH4 0x41F1C0D9 EQ PUSH2 0x1942 JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1919 JUMPI DUP1 PUSH4 0x4C54EF84 EQ PUSH2 0x187A JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x1821 JUMPI DUP1 PUSH4 0x58F85880 EQ PUSH2 0x1803 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x17E0 JUMPI DUP1 PUSH4 0x60711058 EQ PUSH2 0x1715 JUMPI DUP1 PUSH4 0x61E98DB8 EQ PUSH2 0x16F7 JUMPI DUP1 PUSH4 0x6340D55C EQ PUSH2 0x1699 JUMPI DUP1 PUSH4 0x68C4AC26 EQ PUSH2 0x165A JUMPI DUP1 PUSH4 0x720138E8 EQ PUSH2 0x163B JUMPI DUP1 PUSH4 0x729C3E0E EQ PUSH2 0x1601 JUMPI DUP1 PUSH4 0x74F0314F EQ PUSH2 0x15E3 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x15A8 JUMPI DUP1 PUSH4 0x7F3F1601 EQ PUSH2 0x156E JUMPI DUP1 PUSH4 0x877C79A8 EQ PUSH2 0xDDA JUMPI DUP1 PUSH4 0x8EA447E6 EQ PUSH2 0xD39 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xCEC JUMPI DUP1 PUSH4 0x943CA3B9 EQ PUSH2 0xCC0 JUMPI DUP1 PUSH4 0x966ECF3B EQ PUSH2 0x8AC JUMPI DUP1 PUSH4 0x99FCFB43 EQ PUSH2 0x87B JUMPI DUP1 PUSH4 0x9EAD7222 EQ PUSH2 0x820 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x804 JUMPI DUP1 PUSH4 0xA267526B EQ PUSH2 0x7C2 JUMPI DUP1 PUSH4 0xAB36CB66 EQ PUSH2 0x788 JUMPI DUP1 PUSH4 0xABCBE0B2 EQ PUSH2 0x74D JUMPI DUP1 PUSH4 0xB26025AA EQ PUSH2 0x6A9 JUMPI DUP1 PUSH4 0xB3D35839 EQ PUSH2 0x66E JUMPI DUP1 PUSH4 0xB6E85026 EQ PUSH2 0x612 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5D1 JUMPI DUP1 PUSH4 0xD6FBF61C EQ PUSH2 0x503 JUMPI DUP1 PUSH4 0xDACF3DF9 EQ PUSH2 0x4E6 JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x4C9 JUMPI DUP1 PUSH4 0xE7F5165A EQ PUSH2 0x48F JUMPI DUP1 PUSH4 0xEE3BE5F5 EQ PUSH2 0x454 JUMPI DUP1 PUSH4 0xF54B7FB4 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0xF6727092 EQ PUSH2 0x3CD JUMPI PUSH4 0xF939BE11 EQ PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x27F PUSH2 0x213F JUMP JUMPDEST PUSH2 0x287 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0x2A6 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP3 PUSH2 0x2AF PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP3 DUP4 ISZERO DUP1 ISZERO PUSH2 0x3BE JUMPI JUMPDEST PUSH2 0x3AC JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x39A JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xB SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH32 0xA6D61C25DD73692B246D702E41B676092851383053847152454787009572CA1 SWAP4 PUSH2 0x357 DUP3 PUSH1 0x1 PUSH2 0x37F SWAP5 ADD PUSH1 0xB SSTORE PUSH2 0x240F JUMP JUMPDEST DUP2 SLOAD SWAP1 PUSH1 0x3 SHL SWAP1 DUP7 DUP10 DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 SWAP4 PUSH1 0x20 DUP6 MSTORE AND SWAP7 PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG3 STOP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xE6C4247B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP2 DUP2 AND ISZERO PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x7D0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH2 0x44C PUSH2 0x443 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x2DB6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x478 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x9 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x4B0 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x3E8 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x51C PUSH2 0x213F JUMP JUMPDEST PUSH2 0x524 PUSH2 0x2AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5AD JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH2 0x575 DUP3 CALLER DUP4 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x2E440EF4DB71C471FEB663084D681B2E02DE7FD708EF717172F488D50067D1A0 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E9ACF17 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x3DD1B305 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x610 PUSH1 0x4 CALLDATALOAD PUSH2 0x5F0 PUSH2 0x2155 JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x60B PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x27A6 JUMP JUMPDEST PUSH2 0x28B1 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x633 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x80 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 PUSH1 0x2 DUP3 ADD SLOAD SWAP2 ADD SLOAD SWAP2 PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x3C4A2D89ED8B4CF4347FEC87DF1C38410F8FC538BF9FD64C10F2717BC0FEFF36 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x0 DUP1 PUSH1 0xB SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x6D4 JUMPI PUSH1 0x20 DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x6DD DUP2 PUSH2 0x240F JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 SLOAD PUSH1 0x3 SWAP4 DUP5 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x20 SWAP2 PUSH1 0xA DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x718 JUMPI JUMPDEST POP POP POP PUSH2 0x713 SWAP1 PUSH2 0x2A6E JUMP JUMPDEST PUSH2 0x6C2 JUMP JUMPDEST PUSH2 0x744 SWAP3 DUP5 SWAP7 SWAP3 PUSH1 0x12 SWAP3 PUSH2 0x72E PUSH2 0x713 SWAP8 PUSH2 0x240F JUMP JUMPDEST SWAP1 SLOAD SWAP2 SHL SHR AND PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 PUSH2 0x2927 JUMP JUMPDEST SWAP3 SWAP1 DUP5 DUP1 PUSH2 0x707 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x7A9 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x7EB PUSH1 0x20 SWAP2 PUSH2 0x240F JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH1 0xD PUSH1 0x0 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x8C5 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x8D1 PUSH2 0x2AC1 JUMP JUMPDEST PUSH2 0x8D9 PUSH2 0x2A7D JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 DUP3 AND SWAP2 DUP3 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x4 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP4 LT ISZERO PUSH2 0xCAE JUMPI DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH2 0x912 DUP4 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP5 PUSH1 0x3 DUP7 ADD SWAP4 DUP2 DUP6 SLOAD AND CALLER EQ ISZERO DUP1 PUSH2 0xC6B JUMPI JUMPDEST PUSH2 0xC59 JUMPI PUSH1 0x7 DUP8 ADD SWAP1 PUSH1 0xFF DUP3 SLOAD AND PUSH2 0xC47 JUMPI PUSH1 0x8 PUSH2 0x95C DUP9 SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x3 DUP8 MSTORE PUSH2 0x955 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP8 PUSH2 0x2DB6 JUMP JUMPDEST SWAP6 DUP7 PUSH1 0x5 DUP3 ADD SSTORE TIMESTAMP PUSH1 0x6 DUP3 ADD SSTORE ADD SLOAD PUSH32 0xF3122F87791D6EFF15D1ABBFC04281DB2F68FE1E63071CC87F02DFB207365549 PUSH1 0x40 DUP1 MLOAD DUP9 DUP2 MSTORE DUP9 DUP9 DUP3 ADD MSTORE LOG3 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP3 ISZERO SWAP3 PUSH2 0x1B58 DUP2 DUP2 MUL SWAP1 DUP3 DUP3 DIV EQ DUP6 OR ISZERO PUSH2 0xC31 JUMPI PUSH2 0x2710 DUP1 SWAP2 DIV SWAP1 PUSH2 0x7D0 DUP1 DUP5 MUL SWAP1 DUP5 DUP3 DIV EQ DUP8 OR ISZERO PUSH2 0xC31 JUMPI DIV SWAP2 PUSH2 0x9E7 DUP4 PUSH2 0x9E2 DUP5 DUP5 PUSH2 0x2CE0 JUMP JUMPDEST PUSH2 0x2CE0 JUMP JUMPDEST SWAP4 PUSH2 0x9F3 DUP5 DUP12 SLOAD PUSH2 0x2927 JUMP JUMPDEST DUP2 DUP10 SLOAD AND PUSH1 0x0 MSTORE PUSH1 0x6 DUP8 MSTORE PUSH2 0xA0E PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE DUP9 PUSH1 0x0 MSTORE PUSH1 0x7 DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xA28 DUP5 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0xA36 DUP6 PUSH1 0x8 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH2 0xA44 DUP3 DUP12 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x4 DUP12 ADD SWAP1 PUSH1 0x0 DUP9 DUP5 DUP5 SLOAD AND PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP4 MSTORE DUP8 PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC02 JUMPI JUMPDEST POP PUSH2 0xA8B JUMPI PUSH1 0x40 MLOAD PUSH4 0x3302AF5 PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST LT PUSH2 0xBF0 JUMPI DUP2 SWAP1 SLOAD AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x12 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP8 PUSH1 0x1 DUP10 ADD PUSH2 0xAB1 DUP6 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE TIMESTAMP PUSH1 0x3 DUP11 ADD SSTORE ISZERO PUSH2 0xB16 JUMPI JUMPDEST POP PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP7 POP SWAP1 PUSH1 0xA0 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 PUSH1 0x8 DUP12 ADD SLOAD SWAP9 SLOAD AND SWAP10 SLOAD SWAP5 PUSH1 0x40 MLOAD SWAP6 DUP7 MSTORE DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE LOG4 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST DUP7 PUSH1 0x4 SWAP2 PUSH1 0x40 MLOAD SWAP3 DUP4 DUP1 SWAP3 PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xB90 JUMPI JUMPDEST POP SWAP1 PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP9 PUSH1 0xA0 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 PUSH2 0xB75 JUMPI JUMPDEST POP POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 PUSH2 0xABF JUMP JUMPDEST PUSH1 0x2 PUSH2 0xB84 SWAP2 ADD SWAP2 DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST PUSH1 0x1 SHR SWAP1 SSTORE DUP12 DUP1 PUSH2 0xB68 JUMP JUMPDEST SWAP8 DUP1 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 POP DUP9 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xBE9 JUMPI JUMPDEST PUSH2 0xBAD DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI PUSH32 0x4FD5C0B26E24B2B00B557765B057C3C07D8A2FB298EA4B3D87FE809D5E6571DE SWAP9 PUSH1 0xA0 SWAP9 MLOAD SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 POP SWAP9 PUSH2 0xB36 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xBA3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x12171D83 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP DUP10 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC2A JUMPI JUMPDEST PUSH2 0xC1A DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 DUP15 PUSH2 0xA74 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC10 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x74089129 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5ED15CF9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH32 0x97667070C54EF182B0F5858B034BEAC1B6F3089AA2D3188BB1E8929F4FA9B929 PUSH1 0x0 MSTORE PUSH1 0x2 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 CALLER PUSH1 0x0 MSTORE DUP4 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x926 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x411321ED PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0xD05 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0xD47 CALLDATASIZE PUSH2 0x23CC JUMP JUMPDEST SWAP1 SWAP2 PUSH2 0xD51 PUSH2 0x2661 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0xDC8 JUMPI PUSH32 0xA214EC724672A94BF6C67D879945ADA3446BDD623BAED4584C515309B8573A2C SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH2 0xDC3 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B92E953 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0xC0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0xDF3 PUSH2 0x2155 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 SUB PUSH2 0x3C8 JUMPI PUSH1 0xA4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0xE39 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST PUSH2 0xE44 SWAP3 SWAP2 SWAP3 PUSH2 0x2AC1 JUMP JUMPDEST PUSH2 0xE4C PUSH2 0x2A7D JUMP JUMPDEST PUSH3 0xF4240 PUSH1 0x4 CALLDATALOAD LT DUP1 ISZERO PUSH2 0x155E JUMPI JUMPDEST PUSH2 0x154C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO DUP1 ISZERO PUSH2 0x153B JUMPI JUMPDEST DUP1 ISZERO PUSH2 0x1528 JUMPI JUMPDEST PUSH2 0x3AC JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xDC8 JUMPI PUSH1 0x84 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1516 JUMPI PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0xE PUSH1 0x20 MSTORE PUSH6 0x9184E72A000 PUSH2 0xEFE PUSH1 0x4 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2927 JUMP JUMPDEST GT PUSH2 0x14F2 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH2 0x3E8 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT ISZERO PUSH2 0x1504 JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0xF PUSH1 0x20 MSTORE PUSH6 0x48C27395000 PUSH2 0xF3C PUSH1 0x4 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x2927 JUMP JUMPDEST GT PUSH2 0x14F2 JUMPI PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE DUP1 PUSH1 0xA0 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0xA0 DUP4 ADD GT OR PUSH2 0x384 JUMPI PUSH1 0xA0 DUP2 ADD PUSH1 0x40 MSTORE PUSH2 0xF9B SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x2B17 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP3 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0xFC3 DUP5 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD DUP5 MSTORE TIMESTAMP PUSH1 0x20 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 DUP2 AND PUSH1 0x40 DUP8 ADD MSTORE DUP9 DUP2 AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x64 CALLDATALOAD AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP7 ADD DUP2 SWAP1 MSTORE PUSH1 0xC0 DUP7 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0xE0 DUP6 ADD MSTORE PUSH1 0x84 CALLDATALOAD PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0x1019 DUP2 PUSH2 0x2934 JUMP JUMPDEST SWAP2 PUSH2 0x1027 PUSH1 0x40 MLOAD SWAP4 DUP5 PUSH2 0x220E JUMP JUMPDEST DUP2 DUP4 MSTORE CALLDATASIZE DUP3 DUP3 ADD GT PUSH2 0x3C8 JUMPI DUP2 PUSH1 0x0 SWAP3 PUSH1 0x20 SWAP3 DUP4 DUP7 ADD CALLDATACOPY DUP4 ADD ADD MSTORE PUSH2 0x120 DUP4 ADD MSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x384 JUMPI PUSH2 0x1065 SWAP2 PUSH1 0x1 DUP3 ADD DUP2 SSTORE PUSH2 0x216B JUMP JUMPDEST SWAP2 SWAP1 SWAP2 PUSH2 0x14DC JUMPI DUP1 PUSH2 0x120 SWAP2 MLOAD DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x2 DUP4 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x40 DUP4 ADD MLOAD AND SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL SWAP2 DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x3 DUP5 ADD PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x60 DUP5 ADD MLOAD AND DUP3 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 DUP5 ADD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x80 DUP5 ADD MLOAD AND SWAP1 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0x5 DUP5 ADD SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE PUSH1 0x7 DUP4 ADD PUSH1 0xE0 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH2 0x100 DUP2 ADD MLOAD PUSH1 0x8 DUP5 ADD SSTORE ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x384 JUMPI PUSH2 0x112A PUSH1 0x9 DUP5 ADD SLOAD PUSH2 0x219D JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1495 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1425 JUMPI PUSH1 0x9 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x141A JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x117D DUP2 SLOAD PUSH2 0x2A6E JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x84 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x4 CALLDATALOAD ISZERO DUP1 ISZERO PUSH2 0x139E JUMPI JUMPDEST ISZERO PUSH2 0x133A JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x64 DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x44 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 MSTORE PUSH2 0x11F8 SWAP2 SWAP1 PUSH2 0x11E9 SWAP1 DUP3 PUSH2 0x220E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x2B17 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB6B55F25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP1 CALLDATALOAD SWAP1 DUP3 ADD MSTORE PUSH1 0x20 DUP2 PUSH1 0x24 DUP2 PUSH1 0x0 PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL DUP1 ISZERO PUSH2 0x132E JUMPI PUSH2 0x1303 JUMPI JUMPDEST POP PUSH1 0x20 SWAP3 PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0xE DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1251 PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE CALLER PUSH1 0x0 MSTORE PUSH1 0xF DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x126D PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST SWAP1 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB PUSH1 0x64 CALLDATALOAD AND PUSH1 0x0 MSTORE PUSH1 0x12 DUP5 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1293 PUSH1 0x4 CALLDATALOAD DUP3 SLOAD PUSH2 0x2927 JUMP JUMPDEST DUP2 SSTORE TIMESTAMP PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE PUSH1 0x4 CALLDATALOAD DUP7 DUP3 ADD MSTORE PUSH1 0x64 CALLDATALOAD DUP5 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE SWAP2 AND SWAP1 CALLER SWAP1 PUSH1 0x84 CALLDATALOAD SWAP1 PUSH32 0x75AB645E4BE4B4EC5B3FEAF8E588258ECFC0E501FA619998920A13AC2A172481 SWAP1 PUSH1 0x80 SWAP1 LOG4 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1327 JUMPI JUMPDEST PUSH2 0x1319 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI DUP4 PUSH2 0x122E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x130F JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH1 0x64 CALLDATALOAD DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x20 SWAP1 DUP3 SWAP1 PUSH1 0x44 SWAP1 DUP3 SWAP1 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x132E JUMPI PUSH1 0x0 SWAP2 PUSH2 0x13E8 JUMPI JUMPDEST POP ISZERO PUSH2 0x11A5 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1412 JUMPI JUMPDEST DUP2 PUSH2 0x1403 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD DUP5 PUSH2 0x13E1 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x13F6 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x114F JUMP JUMPDEST SWAP1 PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x147D JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x9 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x1464 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x1165 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1456 JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1436 JUMP JUMPDEST PUSH1 0x9 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT PUSH2 0x14D5 JUMPI JUMPDEST PUSH1 0x1F DUP4 ADD PUSH1 0x5 SHR DUP3 ADD DUP2 LT PUSH2 0x14C9 JUMPI POP POP PUSH2 0x1133 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x14B3 JUMP JUMPDEST POP DUP1 PUSH2 0x14B3 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x652F4C5 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x61EEA575 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x424E8D71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0x64 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0xE78 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND ISZERO PUSH2 0xE71 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH5 0xE8D4A51000 PUSH1 0x4 CALLDATALOAD GT PUSH2 0xE5B JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x158F PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x15180 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1622 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH2 0x610 PUSH2 0x164C CALLDATASIZE PUSH2 0x23CC JUMP JUMPDEST SWAP2 PUSH2 0x1655 PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x2F0F JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x167B PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x16B5 PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT PUSH2 0x154C JUMPI PUSH1 0x40 PUSH32 0xB404CAC19FB1CBEFF98D325795B08886E3CD8FE8CB1A2F193AAC66F13FB239C3 SWAP2 PUSH1 0x10 SLOAD SWAP1 DUP1 PUSH1 0x10 SSTORE DUP3 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x17B8 PUSH2 0x1731 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x40 MLOAD PUSH2 0x1740 DUP2 PUSH2 0x21F2 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x100 DUP3 ADD MSTORE PUSH1 0x60 PUSH2 0x120 DUP3 ADD MSTORE SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 LT PUSH2 0x17BC JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP2 DUP3 SWAP2 PUSH1 0x20 DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP1 PUSH2 0x231D JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH2 0x17DA SWAP2 POP PUSH2 0x17D4 SWAP1 PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP PUSH2 0x2D2E JUMP JUMPDEST DUP3 PUSH2 0x17A3 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x183A PUSH2 0x2446 JUMP JUMPDEST PUSH2 0x1842 PUSH2 0x2A7D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP2 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1893 PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x189F PUSH2 0x2AC1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND ISZERO PUSH2 0x5BF JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP2 ISZERO PUSH2 0x5AD JUMPI DUP1 PUSH2 0x1913 JUMPI POP DUP1 JUMPDEST DUP2 GT PUSH2 0x5AD JUMPI PUSH2 0x190C SWAP2 CALLER PUSH1 0x0 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x1903 DUP4 DUP3 SLOAD PUSH2 0x2CE0 JUMP JUMPDEST SWAP1 SSTORE CALLER SWAP1 PUSH2 0x2CED JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST SWAP1 PUSH2 0x18E0 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH5 0xE8D4A51000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x197B PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x19BA JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x3C8 JUMPI PUSH2 0x1A29 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP2 PUSH2 0x1A32 PUSH2 0x2AC1 JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x4 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xCAE JUMPI PUSH2 0x1A60 SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x3 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x216B JUMP JUMPDEST POP SWAP1 PUSH1 0x7 DUP3 ADD DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0xC47 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x4 DUP3 DUP2 ADD SLOAD DUP4 SLOAD PUSH1 0x40 MLOAD PUSH4 0x1BFC726F PUSH1 0xE2 SHL DUP2 MSTORE ADDRESS SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP2 DUP4 AND SWAP2 DUP5 DUP2 PUSH1 0x24 DUP2 PUSH1 0x0 DUP8 GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1BF0 JUMPI JUMPDEST POP PUSH2 0x1BA8 JUMPI POP PUSH1 0x0 SWAP2 PUSH1 0x24 DUP6 SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1B59 JUMPI JUMPDEST POP PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA SWAP5 PUSH2 0x1B44 SWAP3 PUSH1 0x8 SWAP3 PUSH2 0x1B4E JUMPI POP PUSH2 0x1B29 PUSH1 0x0 DUP1 SWAP6 JUMPDEST CALLER SWAP1 PUSH1 0x2 DUP6 ADD SLOAD AND PUSH2 0x2CED JUMP JUMPDEST ADD SLOAD SWAP5 PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 SWAP5 DUP6 MSTORE DUP5 ADD MSTORE CALLER SWAP7 PUSH1 0x40 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 SSTORE STOP JUMPDEST PUSH2 0x1B29 SWAP1 DUP1 SWAP6 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 SWAP2 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1BA1 JUMPI JUMPDEST PUSH2 0x1B71 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA PUSH2 0x1AE5 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1B67 JUMP JUMPDEST PUSH2 0x1B44 SWAP3 POP SWAP5 PUSH2 0x1B29 PUSH1 0x8 SWAP3 PUSH32 0xF9A641ACC5C9067014D12A6D17ED1F5EBAA0C5756EBB3D4C26D9A2CBAC5BAEBA SWAP8 DUP2 DUP2 GT PUSH1 0x0 EQ PUSH2 0x1BE9 JUMPI POP JUMPDEST DUP1 SWAP6 PUSH2 0x1B1C JUMP JUMPDEST SWAP1 POP PUSH2 0x1BE2 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x1C18 JUMPI JUMPDEST PUSH2 0x1C08 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x3C8 JUMPI MLOAD SWAP1 DUP10 PUSH2 0x1AB6 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1BFE JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH6 0x9184E72A000 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1C59 PUSH2 0x2155 JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1C75 JUMPI PUSH2 0x610 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x28B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1CEE PUSH2 0x2155 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x1D08 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x27A6 JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x1D37 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DA6 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1DE6 PUSH2 0x213F JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x3 DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x384 JUMPI DUP3 SWAP1 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x1E19 DUP4 DUP3 PUSH1 0x5 SHL ADD DUP6 PUSH2 0x220E JUMP JUMPDEST DUP1 DUP5 MSTORE DUP3 DUP5 ADD DUP1 SWAP3 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 JUMPDEST DUP4 DUP4 LT PUSH2 0x1E93 JUMPI POP POP POP POP PUSH1 0x40 MLOAD SWAP2 DUP1 DUP4 ADD SWAP4 DUP2 DUP5 MSTORE MLOAD DUP1 SWAP5 MSTORE PUSH1 0x40 DUP4 ADD SWAP4 PUSH1 0x40 DUP2 PUSH1 0x5 SHL DUP6 ADD ADD SWAP3 SWAP2 PUSH1 0x0 SWAP6 JUMPDEST DUP3 DUP8 LT PUSH2 0x1E67 JUMPI DUP6 DUP6 SUB DUP7 RETURN JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 DUP3 DUP1 PUSH2 0x1E83 PUSH1 0x1 SWAP4 PUSH1 0x3F NOT DUP11 DUP3 SUB ADD DUP7 MSTORE DUP9 MLOAD PUSH2 0x231D JUMP JUMPDEST SWAP7 ADD SWAP3 ADD SWAP7 ADD SWAP6 SWAP3 SWAP2 SWAP1 SWAP3 PUSH2 0x1E5A JUMP JUMPDEST PUSH1 0xA DUP7 PUSH1 0x1 SWAP3 PUSH2 0x1EA5 DUP6 SWAP11 SWAP10 SWAP11 PUSH2 0x2D2E JUMP JUMPDEST DUP2 MSTORE ADD SWAP3 ADD SWAP3 ADD SWAP2 SWAP1 SWAP6 SWAP5 SWAP6 PUSH2 0x1E2C JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0xF4240 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1F1C PUSH2 0x213F JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH2 0x1F27 PUSH2 0x2446 JUMP JUMPDEST PUSH1 0x8 SLOAD SWAP2 DUP3 DUP3 GT PUSH2 0x5AD JUMPI PUSH2 0x1F3F DUP3 PUSH2 0x610 SWAP5 PUSH2 0x2CE0 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x11 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 AND PUSH2 0x2CED JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1B58 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x1F8D PUSH2 0x213F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 PUSH1 0x40 MLOAD PUSH2 0x1F9D DUP2 PUSH2 0x21D7 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x20 MSTORE PUSH1 0x80 PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x1FD1 DUP2 PUSH2 0x21D7 JUMP JUMPDEST DUP2 SLOAD SWAP2 DUP3 DUP3 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x20 DUP4 ADD SWAP1 DUP2 MSTORE PUSH1 0x60 PUSH1 0x3 PUSH1 0x2 DUP5 ADD SLOAD SWAP4 PUSH1 0x40 DUP7 ADD SWAP5 DUP6 MSTORE ADD SLOAD SWAP4 ADD SWAP3 DUP4 MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE MLOAD PUSH1 0x20 DUP5 ADD MSTORE MLOAD PUSH1 0x40 DUP4 ADD MSTORE MLOAD PUSH1 0x60 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH2 0x202E PUSH2 0x213F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 LT ISZERO PUSH2 0x3C8 JUMPI PUSH2 0x205D SWAP2 PUSH2 0x216B JUMP JUMPDEST POP SWAP1 PUSH2 0x17B8 DUP3 SLOAD SWAP2 PUSH1 0x1 DUP5 ADD SLOAD SWAP4 DUP2 PUSH1 0x2 DUP3 ADD SLOAD AND SWAP2 DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND SWAP1 PUSH1 0x4 DUP4 ADD SLOAD AND PUSH1 0x5 DUP4 ADD SLOAD PUSH1 0x6 DUP5 ADD SLOAD SWAP2 PUSH1 0xFF PUSH1 0x7 DUP7 ADD SLOAD AND SWAP4 PUSH2 0x20A6 PUSH1 0x9 PUSH1 0x8 DUP9 ADD SLOAD SWAP8 ADD PUSH2 0x222F JUMP JUMPDEST SWAP7 PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP11 DUP12 MSTORE PUSH1 0x20 DUP12 ADD MSTORE PUSH1 0x40 DUP11 ADD MSTORE PUSH1 0x60 DUP10 ADD MSTORE PUSH1 0x80 DUP9 ADD MSTORE PUSH1 0xA0 DUP8 ADD MSTORE PUSH1 0xC0 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xE0 DUP6 ADD MSTORE PUSH2 0x100 DUP5 ADD MSTORE PUSH2 0x140 DUP1 PUSH2 0x120 DUP6 ADD MSTORE DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST CALLVALUE PUSH2 0x3C8 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD SWAP1 PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP3 AND DUP1 SWAP3 SUB PUSH2 0x3C8 JUMPI PUSH1 0x20 SWAP2 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x212E JUMPI JUMPDEST POP ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP4 PUSH2 0x2127 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x3C8 JUMPI JUMP JUMPDEST DUP1 SLOAD DUP3 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 MUL ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x21CD JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x21B7 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x21AC JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH2 0x140 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x2243 DUP5 PUSH2 0x219D JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x22B2 JUMPI POP PUSH1 0x1 EQ PUSH2 0x226F JUMPI JUMPDEST POP POP PUSH2 0x226D SWAP3 POP SUB DUP4 PUSH2 0x220E JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x229A JUMPI POP POP PUSH2 0x226D SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x225F JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x2282 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x226D SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x225F JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x22E8 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x22D8 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x2311 DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x239C SWAP2 DUP1 MLOAD DUP3 MSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x40 DUP4 ADD MLOAD AND PUSH1 0x40 DUP5 ADD MSTORE DUP1 PUSH1 0x60 DUP4 ADD MLOAD AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP3 ADD MLOAD AND PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP2 ADD MLOAD PUSH1 0xA0 DUP4 ADD MSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0xC0 DUP4 ADD MSTORE PUSH1 0xE0 DUP2 ADD MLOAD ISZERO ISZERO PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0x100 DUP1 DUP3 ADD MLOAD SWAP1 DUP4 ADD MSTORE PUSH2 0x120 DUP1 SWAP2 ADD MLOAD SWAP2 PUSH2 0x140 DUP1 SWAP3 DUP3 ADD MSTORE ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x3C8 JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x3C8 JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x3C8 JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x40 PUSH1 0x3 NOT DUP4 ADD SLT PUSH2 0x3C8 JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x3C8 JUMPI SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x3C8 JUMPI PUSH2 0x240B SWAP2 PUSH1 0x4 ADD PUSH2 0x239F JUMP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0xB SLOAD DUP2 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0xB PUSH1 0x0 MSTORE PUSH32 0x175B7A638427703F0DBE7BB9BBF987A2551717B34E79F33B5B1008D1FA01DB9 ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xE5EBFA64FCA8D502A8E50C1EDFFD2C31EF4DAD5B396E65D9F397FB028F74ABC5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x24AA JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x24B3 CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x24C0 DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x25DF JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x22D5 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x220E JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x260F DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x24F1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5A10DB7EB5FB087477F68987FF09C6EBB13410247D1A97126552F0C97385B266 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x26C5 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x26CE CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x26DB DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2760 JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2790 DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x270C JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP4 MSTORE PUSH1 0xFF DUP5 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x27D0 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x27D9 CALLER PUSH2 0x2960 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x27E6 DUP3 PUSH2 0x21D7 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x264D JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x264D JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x286B JUMPI POP POP POP PUSH2 0x259D JUMPI PUSH1 0x48 PUSH2 0x2599 SWAP4 DUP7 SWAP4 PUSH2 0x257D SWAP4 PUSH2 0x256E SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2545 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x22D5 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2639 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x289B DUP6 DUP8 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2625 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2817 JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x28E2 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0xC31 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x384 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x2187 JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x384 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2187 JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x2187 JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x2A00 JUMPI POP POP PUSH2 0x29BC JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2A59 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2A2F DUP5 DUP7 PUSH2 0x294F JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x2A44 JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x29AC JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0xC31 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH2 0x2A89 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x2AD2 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x384 JUMPI PUSH2 0x2BA6 SWAP2 PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x2C43 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x2B8B DUP4 PUSH2 0x2934 JUMP JUMPDEST SWAP3 PUSH2 0x2B99 PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x220E JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x2C47 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x2C18 JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x2BC1 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x2C3F JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x2C3C JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x2BB4 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x2CA9 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x2C5B JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x2C64 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x2CBC JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2599 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x22F8 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0xC31 JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x226D SWAP2 PUSH2 0x2D29 PUSH1 0x64 DUP4 PUSH2 0x220E JUMP JUMPDEST PUSH2 0x2B17 JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD PUSH2 0x2D3B DUP2 PUSH2 0x21F2 JUMP JUMPDEST PUSH2 0x120 PUSH2 0x2DB1 PUSH1 0x9 DUP4 SWAP6 DUP1 SLOAD DUP6 MSTORE PUSH1 0x1 DUP2 ADD SLOAD PUSH1 0x20 DUP7 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 PUSH1 0x2 DUP4 ADD SLOAD AND PUSH1 0x40 DUP8 ADD MSTORE DUP1 PUSH1 0x3 DUP4 ADD SLOAD AND PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x4 DUP3 ADD SLOAD AND PUSH1 0x80 DUP7 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xA0 DUP7 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP7 ADD MSTORE PUSH1 0xFF PUSH1 0x7 DUP3 ADD SLOAD AND ISZERO ISZERO PUSH1 0xE0 DUP7 ADD MSTORE PUSH1 0x8 DUP2 ADD SLOAD PUSH2 0x100 DUP7 ADD MSTORE ADD PUSH2 0x222F JUMP JUMPDEST SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 SLOAD SWAP2 SWAP5 SWAP4 SWAP1 SWAP2 DUP2 LT ISZERO PUSH2 0x2EE9 JUMPI PUSH2 0x17D4 PUSH2 0x2DF2 SWAP2 PUSH1 0x3 DUP5 MSTORE PUSH1 0x40 DUP8 KECCAK256 PUSH2 0x216B JUMP JUMPDEST SWAP2 PUSH1 0xE0 DUP4 ADD MLOAD PUSH2 0x2EDF JUMPI SWAP1 PUSH1 0x24 SWAP2 PUSH1 0x80 DUP5 ADD DUP3 DUP3 DUP3 MLOAD AND PUSH1 0x40 MLOAD SWAP6 DUP7 DUP1 SWAP3 PUSH4 0x37BE4CE9 PUSH1 0xE1 SHL DUP3 MSTORE ADDRESS PUSH1 0x4 DUP4 ADD MSTORE GAS STATICCALL DUP8 SWAP5 DUP2 PUSH2 0x2EAC JUMPI JUMPDEST POP PUSH2 0x2E3B JUMPI POP POP POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST MLOAD AND DUP6 MSTORE PUSH1 0x12 SWAP1 MSTORE PUSH1 0x40 DUP5 KECCAK256 SLOAD SWAP1 DUP2 ISZERO DUP1 PUSH2 0x2EA1 JUMPI PUSH1 0xA0 DUP5 ADD MLOAD SWAP4 MLOAD SWAP2 DUP3 DUP2 MUL SWAP3 DUP2 DUP5 DIV EQ SWAP1 ISZERO OR ISZERO PUSH2 0x2E8D JUMPI PUSH2 0x2E79 JUMPI PUSH2 0x239C SWAP4 SWAP5 POP DIV SWAP1 PUSH2 0x2927 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST SWAP1 SWAP5 POP DUP4 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x2ED8 JUMPI JUMPDEST PUSH2 0x2EC4 DUP2 DUP4 PUSH2 0x220E JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x2ED4 JUMPI MLOAD SWAP4 CODESIZE PUSH2 0x2E2A JUMP JUMPDEST DUP8 DUP1 REVERT JUMPDEST POP RETURNDATASIZE PUSH2 0x2EBA JUMP JUMPDEST POP POP PUSH1 0xA0 ADD MLOAD SWAP2 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 ISZERO PUSH2 0x3AC JUMPI PUSH1 0x0 SWAP4 DUP3 DUP6 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP6 KECCAK256 DUP1 SLOAD PUSH1 0xFF DUP2 AND PUSH2 0x3001 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0xD SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x2FED JUMPI PUSH1 0x1 DUP2 ADD DUP1 PUSH1 0xD SSTORE DUP2 LT ISZERO PUSH2 0x2FD9 JUMPI PUSH1 0xD PUSH32 0x7AFEE0F1B802CC0F66C67890E26B4566251859CF2CD8DE79B86AED7251D9756A SWAP5 SWAP6 SWAP7 MSTORE PUSH32 0xD7B6990105719101DABEB77144F2A3385C8033ACD3AF97E9423A695E81AD1EB5 ADD DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB PUSH1 0xA0 SHL DUP3 SLOAD AND OR SWAP1 SSTORE PUSH2 0x2FD4 PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x20 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP2 PUSH2 0x2EEE JUMP JUMPDEST SUB SWAP1 LOG2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP7 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP7 REVERT JUMPDEST POP POP POP POP POP SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x24 SWAP1 DUP16 DUP16 0x4C DUP3 0xEE PC EXTCODESIZE 0x25 ADDMOD DUP8 0xB1 0x5E 0xBB ISZERO DUP12 POP SIGNEXTEND 0x26 0x22 CALLDATACOPY 0xB8 PUSH23 0xE736E5F791AA91EA64736F6C6343000814003300000000 ","sourceMap":"1090:32136:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;:::i;:::-;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;:::i;:::-;2642:4:0;;;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;;;24736:22;;:45;;;;1090:32136;24732:99;;1090:32136;;;24844:16;1090:32136;;;;;;;;24840:81;;1090:32136;;;24931:19;1090:32136;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;24844:16;1090:32136;;;;;;;;;;;;;;25040:12;1090:32136;-1:-1:-1;;;1090:32136:18;;;;;25083:36;1090:32136;;;;;;;25040:12;1090:32136;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25083:36;;;1090:32136;;;;;;;;;;;;;24840:81;1090:32136;;-1:-1:-1;;;24893:17:18;;1090:32136;;24893:17;24732:99;1090:32136;;-1:-1:-1;;;24804:16:18;;1090:32136;;24804:16;24736:45;1090:32136;;;;24762:19;24736:45;;1090:32136;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2386:4;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2018:26;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;-1:-1:-1;;;;;1090:32136:18;;;:::i;:::-;;;;4071:61;1090:32136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;3945:52;1090:32136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2513:5;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2456:4;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;2227:103:3;;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;;;;21125:15;1090:32136;;;;;;;;21124:23;21120:80;;21251:10;1090:32136;;21233:17;1090:32136;;;;;;21276:17;;;21272:76;;21251:10;1090:32136;;21233:17;1090:32136;;;;;;;21440:12;21251:10;;21440:12;;:::i;:::-;1090:32136;;;;;;;;;21469:47;1090:32136;21251:10;21469:47;;1090:32136;;;;21272:76;1090:32136;;-1:-1:-1;;;21316:21:18;;1090:32136;;21316:21;21120:80;1090:32136;;-1:-1:-1;;;21170:19:18;;1090:32136;;21170:19;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;5486:7:0;1090:32136:18;;;;:::i;:::-;;;;;4604:6:0;1090:32136:18;;2642:4:0;1090:32136:18;;;;4604:22:0;1090:32136:18;2642:4:0;:::i;:::-;5486:7;:::i;:::-;1090:32136:18;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;6471:58;1090:32136;;;;;;;;6471:58;1090:32136;6471:58;;1090:32136;6471:58;1090:32136;6471:58;;;1090:32136;6471:58;;1090:32136;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2090:26;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;27797:12;1090:32136;27773:200;27793:23;;;;;;1090:32136;;;;;;;;27818:3;27858:15;;;:::i;:::-;1090:32136;;;;;;;;;;;;;;;;;;;27841:16;1090:32136;;;;;;;;27837:126;;27818:3;;;;;;;:::i;:::-;27778:13;;27837:126;27894:54;27917:15;;;;27901;27917;;27818:3;27917:15;;:::i;:::-;1090:32136;;;;;;;;;;;;;27894:54;;:::i;:::-;27837:126;;;;;;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2170:34;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;4438:50;1090:32136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;4192:29;1090:32136;4192:29;;;;;;1090:32136;4192:29;;:::i;:::-;1090:32136;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;4309:26;1090:32136;4309:26;;;;;;1090:32136;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;3799:54;1090:32136;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;2227:103:3;;;:::i;:::-;1204:72:2;;:::i;:::-;1090:32136:18;;;;;;;;;;;;;;;;;;;;;15731:38;;;15727:93;;1090:32136;;;;;;15856:32;1090:32136;;;;15856:32;:::i;:::-;15925:16;;1090:32136;15925:16;;1090:32136;;;;;15911:10;:30;;:69;;;1090:32136;15907:131;;16051:16;;;1090:32136;;;;;16047:78;;20796:19;20619:34;1090:32136;;;;;;;;20551:32;1090:32136;;;;20551:32;:::i;:::-;20619:34;;;:::i;:::-;20663:20;;;;;1090:32136;20736:15;20710:23;;;1090:32136;20796:19;1090:32136;20767:138;1090:32136;;;;;;;;;;;20767:138;1090:32136;;-1:-1:-1;;1090:32136:18;;;;;;;;2312:4;1090:32136;;;;;;;;;;;;;2513:5;1090:32136;;;2386:4;;1090:32136;;;;;;;;;;;;;;16603:26;:42;:26;;;;;:::i;:::-;:42;:::i;:::-;1090:32136;16721:30;1090:32136;;;16721:30;:::i;:::-;1090:32136;;;;;;20710:23;1090:32136;;16683:68;1090:32136;;;;;;16683:68;:::i;:::-;1090:32136;;;;;16051:16;1090:32136;;;;;16761:36;1090:32136;;;16761:36;:::i;:::-;1090:32136;;16807:32;1090:32136;20796:19;1090:32136;16807:32;:::i;:::-;20796:19;1090:32136;16912:31;1090:32136;;;16912:31;:::i;:::-;1090:32136;16975:21;;1090:32136;;;;;;;;;;;;;;;;;30732:41;;;1090:32136;30732:41;;1090:32136;30732:41;;1090:32136;;30732:41;;;1090:32136;-1:-1:-1;30728:241:18;;1090:32136;;-1:-1:-1;;;30934:24:18;;1090:32136;;30934:24;30728:241;30820:18;30816:80;;30728:241;;1090:32136;;;;;30073:15;1090:32136;;;;;30153:27;1090:32136;30153:27;;:45;1090:32136;;;30153:45;:::i;:::-;1090:32136;;20736:15;1090:32136;30208:22;;1090:32136;30324:18;30320:297;;30728:241;17180:19;17151:239;17180:19;;;1090:32136;17180:19;;;;;20796;17180;;1090:32136;;;;;;;;;;;;;;;;;;;;;;;;;;;17151:239;1090:32136;;;;30320:297;1090:32136;;;;;;;;;;;;30362:40;;;;1090:32136;;30362:40;;;30320:297;30358:249;;17151:239;30358:249;1090:32136;30358:249;;;;;;;;;30320:297;;;;;;;;;;;30358:249;30472:18;:31;:18;;1090:32136;;;30472:31;:::i;:::-;1090:32136;;;;30358:249;;;;30362:40;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;17151:239;1090:32136;;;;30362:40;;;;;;;;;;;;;;;;30816:80;1090:32136;;-1:-1:-1;;;30865:16:18;;1090:32136;;30865:16;30732:41;;;;;;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;;30732:41;;;;;;;;;1090:32136;;;;;;;;;;;;16047:78;1090:32136;;-1:-1:-1;;;16090:24:18;;1090:32136;;16090:24;15907:131;1090:32136;;-1:-1:-1;;;16003:24:18;;1090:32136;;16003:24;15911:69;1090:32136;2018:26;1090:32136;;3130:6:0;1090:32136:18;;;;;15911:10;1090:32136;;;;;;;;;;15945:35;15911:69;;15727:93;1090:32136;;-1:-1:-1;;;15792:17:18;;1090:32136;;15792:17;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;4369:46;1090:32136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2642:4:0;;;;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;;;;25419:16;1090:32136;;;;;;;;;;;25418:27;25414:84;;25566:33;1090:32136;;;;25419:16;1090:32136;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;25566:33;;;1090:32136;25414:84;1090:32136;;-1:-1:-1;;;25468:19:18;;1090:32136;;25468:19;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;:::i;:::-;2227:103:3;;;;;:::i;:::-;1204:72:2;;:::i;:::-;2791:9:18;1090:32136;;12635:27;:58;;;;1090:32136;12631:111;;-1:-1:-1;;;;;1090:32136:18;;12755:19;:45;;;;1090:32136;12755:76;;;;1090:32136;12751:130;;-1:-1:-1;;;;;1090:32136:18;;;;;;12895:15;1090:32136;;;;;;;;12894:23;12890:80;;1090:32136;;-1:-1:-1;;;;;1090:32136:18;;;;;12984:16;1090:32136;;;;;;;;12983:32;12979:89;;1090:32136;;;;13081:22;1090:32136;;;;;;;;13077:98;;2870:5;29064:15;1090:32136;;;29111:11;1090:32136;;2705:18;29111:27;1090:32136;;;;;;29111:27;:::i;:::-;:46;29107:104;;13271:10;1090:32136;;;;;2456:4;1090:32136;;;;29307:47;;29303:104;;13271:10;1090:32136;;29488:15;1090:32136;;;29488:30;1090:32136;;;;;;29488:30;:::i;:::-;:55;29484:143;;1090:32136;;;;;;1482:68:8;;;13271:10:18;1090:32136;1482:68:8;;1090:32136:18;13406:4;1090:32136;;;;;;;;;;;1482:68:8;;1090:32136:18;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;1482:68:8;;-1:-1:-1;;;;;1090:32136:18;;1482:68:8;:::i;:::-;13271:10:18;1090:32136;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;29064:15;1090:32136;13547:361;;1090:32136;;;-1:-1:-1;;;;;1090:32136:18;;;;13547:361;;1090:32136;;;;;13547:361;;1090:32136;;;;;13547:361;;1090:32136;-1:-1:-1;1090:32136:18;13547:361;;1090:32136;;;;13547:361;;1090:32136;;;;;13547:361;;1090:32136;;;13547:361;;;1090:32136;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;13547:361;;;1090:32136;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;:::i;:::-;;;;;;;13547:361;1090:32136;;;;;13547:361;;1090:32136;;;;;;;;;;;;;;13547:361;;1090:32136;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;;13547:361;;1090:32136;;;;;;;;;;;;;;;;;;;13547:361;;1090:32136;;;;;;;;;;13547:361;;1090:32136;13081:22;1090:32136;;;;13547:361;;1090:32136;;;;;;;;;13547:361;;1090:32136;;;;;;;;;;;;;;13547:361;;;1090:32136;;;;;13547:361;1090:32136;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13271:10;1090:32136;;;;;;;;13920:30;1090:32136;;13920:30;:::i;:::-;1090:32136;;;;;;13081:22;1090:32136;;;;;;;;;;;;;;;;2143:10:8;2142:62;;;;1090:32136:18;;;;;;-1:-1:-1;;;1090:32136:18;2321:62:8;;;1090:32136:18;;;-1:-1:-1;;;;;1090:32136:18;;2321:62:8;;1090:32136:18;;;;;;;;;;;2321:62:8;;;;1090:32136:18;2321:62:8;;1090:32136:18;2321:62:8;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;2321:62:8;:::i;:::-;1090:32136:18;;-1:-1:-1;;;14110:45:18;;1090:32136;;;14110:45;;;1090:32136;;;;;-1:-1:-1;1090:32136:18;;-1:-1:-1;;;;;1090:32136:18;14110:45;;;;;;;;1090:32136;29064:15;1090:32136;29064:15;2870:5;29064:15;1090:32136;;;29111:11;1090:32136;;;;;29761:28;1090:32136;;;;29761:28;:::i;:::-;1090:32136;;13271:10;1090:32136;;29488:15;1090:32136;;;;;29883:31;1090:32136;;;;29883:31;:::i;:::-;1090:32136;;;;;;;;;;;;30073:15;1090:32136;;;;;30108:35;1090:32136;;;;30108:35;:::i;:::-;1090:32136;;29064:15;1090:32136;30208:22;;;1090:32136;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13271:10;;1090:32136;;;14345:187;;1090:32136;;14345:187;1090:32136;;;;;;;;;14110:45;1090:32136;14110:45;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;14110:45;;;;;;;;;1090:32136;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;2142:62:8;-1:-1:-1;1090:32136:18;;-1:-1:-1;;;2159:39:8;;13406:4:18;1090:32136;2159:39:8;;1090:32136:18;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;2159:39:8;;;;;;;1090:32136:18;2159:39:8;;;2142:62;2159:44;;2142:62;;2159:39;;;1090:32136:18;2159:39:8;;1090:32136:18;2159:39:8;;;;;;1090:32136:18;2159:39:8;;;:::i;:::-;;;1090:32136:18;;;;;2159:39:8;;;;;;-1:-1:-1;2159:39:8;;1090:32136:18;;;;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;1482:68:8;;;;1090:32136:18;1482:68:8;1090:32136:18;1482:68:8;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13081:22;1090:32136;;;;;;;;;;;;13081:22;1090:32136;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;29484:143;1090:32136;;-1:-1:-1;;;29596:20:18;;1090:32136;;29596:20;29303:104;1090:32136;;-1:-1:-1;;;29377:19:18;;1090:32136;;29377:19;13077:98;1090:32136;;-1:-1:-1;;;13139:25:18;;1090:32136;;13139:25;12755:76;-1:-1:-1;1090:32136:18;;-1:-1:-1;;;;;1090:32136:18;12804:27;12755:76;;:45;-1:-1:-1;;;;;;1090:32136:18;;12778:22;12755:45;;12631:111;1090:32136;;-1:-1:-1;;;12716:15:18;;1090:32136;;12716:15;12635:58;1090:32136;2624:17;1090:32136;;12666:27;12635:58;;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;3888:51;1090:32136;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;1949:23;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2870:5;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;2657:1:0;1090:32136:18;;;:::i;:::-;2642:4:0;;;:::i;:::-;2657:1;:::i;1090:32136:18:-;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;4256:47;1090:32136;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;2642:4:0;;:::i;:::-;32549::18;32536:17;;32532:85;;1090:32136;32729:38;1090:32136;32652:15;1090:32136;;;32652:15;1090:32136;;;;;;;;;;32729:38;1090:32136;;;;;;;-1:-1:-1;;1090:32136:18;;;;;4003:30;1090:32136;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;27165:37;;27161:110;;1090:32136;;;;;;;;;;;;;;;:::i;:::-;;;;27161:110;1090:32136;;;27228:32;1090:32136;;;;;;;27228:32;:::i;:::-;1090:32136;;:::i;:::-;27161:110;;;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;;;1685:7:2;1090:32136:18;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;4545:34;1090:32136;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;2642:4:0;;:::i;:::-;1204:72:2;;:::i;:::-;2255:4;1090:32136:18;;;;;;2255:4:2;1090:32136:18;2274:20:2;1090:32136:18;;;734:10:10;1090:32136:18;;2274:20:2;1090:32136:18;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;2227:103:3;;;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;;;;17708:15;1090:32136;;;;;;;;;;;17707:23;17703:80;;17837:10;1090:32136;;17820:16;1090:32136;;;;;;17862:21;;;17858:80;;17973:11;;;:39;;;18026:33;;18022:92;;18219:14;17837:10;;1090:32136;;17820:16;1090:32136;;;;;18124:46;1090:32136;;;18124:46;:::i;:::-;1090:32136;;17837:10;18219:14;;:::i;:::-;1090:32136;;;;17973:39;;;;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;4628:27;1090:32136;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2624:17;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;2642:4:0;;:::i;:::-;1685:7:2;1090:32136:18;;;;;;;;;;1685:7:2;1090:32136:18;2521:22:2;1090:32136:18;;;734:10:10;1090:32136:18;;2521:22:2;1090:32136:18;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;:::i;:::-;2227:103:3;;;:::i;:::-;22584:10:18;1090:32136;;;;;;;;;;;22551:44;;;22547:99;;22682:38;22584:10;;1090:32136;;;;;;;;22682:38;:::i;:::-;22734:16;;;;;1090:32136;;;;;22730:78;;-1:-1:-1;;1090:32136:18;;;;;;22994:21;;;1090:32136;;;;;-1:-1:-1;;;31151:57:18;;31202:4;31151:57;;;1090:32136;;;;-1:-1:-1;;;;;1090:32136:18;;;;;31151:57;1090:32136;;;-1:-1:-1;1090:32136:18;31151:57;;1090:32136;;31151:57;;;1090:32136;-1:-1:-1;31147:488:18;;1090:32136;;;;;;;;;;;;;;;;31434:41;;1090:32136;31434:41;;1090:32136;31434:41;;1090:32136;;31434:41;;;31147:488;-1:-1:-1;23240:135:18;;1090:32136;;23273:19;;31430:195;;31597:13;23208:15;1090:32136;31430:195;;;22584:10;23057:13;;;;1090:32136;;23208:15;:::i;:::-;23273:19;1090:32136;;;;;;;;;;;;;22584:10;1090:32136;;;;;;:::i;:::-;23240:135;;;1090:32136;;;;31430:195;23208:15;31529:28;31430:195;;;;31434:41;;;;;;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;;;23240:135;31434:41;;;;;;;31147:488;1090:32136;31272:57;;;23208:15;23273:19;31272:57;23240:135;31272:57;:27;;;:57;:27;;;:57;;31147:488;;;;31272:57;;;;;31151;;;;;;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;;31151:57;;;;;;;;;1090:32136;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2705:18;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;734:10:10;-1:-1:-1;;;;;1090:32136:18;;6133:23:0;1090:32136:18;;6237:7:0;1090:32136:18;;;6237:7:0;:::i;1090:32136:18:-;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;:::i;:::-;;;;4604:6:0;1090:32136:18;;2642:4:0;1090:32136:18;;;;4604:22:0;1090:32136:18;2642:4:0;:::i;:::-;1090:32136:18;;;4604:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;1090:32136:18;7665:149:0;1090:32136:18;;;4604:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;734:10:10;7763:40:0;;1090:32136:18;7763:40:0;;1090:32136:18;;;;;;;-1:-1:-1;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;4138:48;1090:32136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;4604:6:0;1090:32136:18;;;;;;;4604:22:0;1090:32136:18;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2791:9;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;2642:4:0;;:::i;:::-;33054:15:18;1090:32136;33045:24;;;;33041:83;;33134:25;;33210:6;33134:25;;:::i;:::-;33054:15;1090:32136;33196:12;1090:32136;-1:-1:-1;;;;;1090:32136:18;;;;;33210:6;:::i;1090:32136::-;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;2312:4;1090:32136;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;28256:15;1090:32136;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;;;:::i;:::-;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;3687:49;;;;;;;;:::i;:::-;1090:32136;;;;;3687:49;1090:32136;3687:49;;1090:32136;3687:49;;;;;1090:32136;;3687:49;;1090:32136;3687:49;;1090:32136;;3687:49;1090:32136;3687:49;;1090:32136;;3687:49;;;1090:32136;3687:49;;;1090:32136;3687:49;1090:32136;3687:49;;;1090:32136;;3687:49;;;;;;1090:32136;3687:49;;;:::i;:::-;1090:32136;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;1090:32136:18;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2840:47:0;;;:87;;;;1090:32136:18;;;;;;;2840:87:0;-1:-1:-1;;;937:40:13;;-1:-1:-1;2840:87:0;;;1090:32136:18;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;1090:32136:18;;;-1:-1:-1;1090:32136:18;;;;;-1:-1:-1;1090:32136:18;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;:::o;:::-;;1482:68:8;;;1090:32136:18;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;:::o;:::-;;;;;;-1:-1:-1;1090:32136:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;1090:32136:18;;;;-1:-1:-1;1090:32136:18;;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1090:32136:18;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1482:68:8;1090:32136:18;-1:-1:-1;;1090:32136:18;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;:::o;:::-;;;-1:-1:-1;;1090:32136:18;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;:::i;:::-;;;:::o;:::-;4192:29;1090:32136;;;;;;4192:29;-1:-1:-1;1090:32136:18;;;;-1:-1:-1;1090:32136:18;:::o;3460:103:0:-;734:10:10;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;1949:23;;1090:32136;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;1090:32136:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;1090:32136:18;;;;;;;;;;;2000:15:11;1090:32136:18;;;2000:15:11;1090:32136:18;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;1090:32136:18;;;;;4022:252:0;1090:32136:18;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;1090:32136:18;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;:::i;:::-;;4022:252:0;;;;;;;;;:::i;:::-;1090:32136:18;;;;;;;3970:336:0;;2141:1:11;3970:336:0;;1090:32136:18;;;;;;:::i;:::-;3970:336:0;;;278:18:11;;1090:32136:18;;;;;;;278:18:11;;;2141:1;278:18;;;;;;1090:32136:18;278:18:11;1090:32136:18;;;278:18:11;;2065:3;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;1090:32136:18;2065:3:11;1090:32136:18;;;;-1:-1:-1;;1090:32136:18;;2030:26:11;;;1090:32136:18;-1:-1:-1;;;1090:32136:18;;;2141:1:11;1090:32136:18;;;;2096:21:11;-1:-1:-1;;;1090:32136:18;;;2141:1:11;1090:32136:18;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;3460:103:0;734:10:10;-1:-1:-1;1090:32136:18;;;;;;;;;;;;;;;2170:34;;1090:32136;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;1090:32136:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;1090:32136:18;;;;;;;;;;;2000:15:11;1090:32136:18;;;2000:15:11;1090:32136:18;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;1090:32136:18;;;;;4022:252:0;1090:32136:18;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;1090:32136:18;;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;1090:32136:18;2065:3:11;1090:32136:18;;;;-1:-1:-1;;1090:32136:18;;2030:26:11;;;3460:103:0;-1:-1:-1;1090:32136:18;;;;;;3130:6:0;1090:32136:18;;;;;;;734:10:10;1090:32136:18;;;;;;;;;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;4214:38:0;1090:32136:18;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;1090:32136:18;;;;;;;;;;;2000:15:11;1090:32136:18;;;2000:15:11;1090:32136:18;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;1090:32136:18;;;;;4022:252:0;1090:32136:18;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;1090:32136:18;;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;1090:32136:18;2065:3:11;1090:32136:18;;;;-1:-1:-1;;1090:32136:18;;2030:26:11;;;7991:234:0;;-1:-1:-1;1090:32136:18;;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;;;8070:149:0;;7991:234;;;:::o;8070:149::-;1090:32136:18;;;3130:6:0;1090:32136:18;;;;;;;;;;;;;;;;;;;;8168:40:0;734:10:10;8168:40:0;;;7991:234::o;1090:32136:18:-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;1090:32136:18;;;;1482:68:8;1090:32136:18;-1:-1:-1;;1090:32136:18;;;;:::o;:::-;;;;;;;;;;;;;:::o;1818:437:11:-;1090:32136:18;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;1975:15:11;;;1090:32136:18;;;;;;;;;2000:15:11;1090:32136:18;;;2000:15:11;1090:32136:18;2025:128:11;2058:5;;;;;;2170:10;;278:18;;1818:437;:::o;278:18::-;;1090:32136:18;;;;;278:18:11;;1090:32136:18;2141:1:11;278:18;;;1090:32136:18;278:18:11;;;1090:32136:18;278:18:11;1090:32136:18;;;278:18:11;;2065:3;2105:11;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;1090:32136:18;2065:3:11;1090:32136:18;;;;-1:-1:-1;;1090:32136:18;;2030:26:11;;1090:32136:18;;;;;;;;;2141:1:11;1090:32136:18;;2096:21:11;1090:32136:18;;;;;;;;2141:1:11;1090:32136:18;;;-1:-1:-1;;1090:32136:18;;;;;;;:::o;1767:106:2:-;1090:32136:18;1685:7:2;1090:32136:18;;;;1767:106:2:o;1090:32136:18:-;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;2336:287:3;1759:1;2468:7;1090:32136:18;2468:19:3;1759:1;;;2468:7;1090:32136:18;2336:287:3:o;1759:1::-;1090:32136:18;;-1:-1:-1;;;1759:1:3;;;;;;;;;;;1090:32136:18;1759:1:3;1090:32136:18;;;1759:1:3;;;;5196:642:8;1090:32136:18;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;5535:69:9;1090:32136:18;;;;;;;;;;;;;-1:-1:-1;5487:31:9;;;;;;;;;;;;1090:32136:18;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;5535:69:9;:::i;:::-;1090:32136:18;;5728:22:8;;;:56;;;;;;1090:32136:18;;;;;;;;;5196:642:8;:::o;1090:32136:18:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;5728:56:8;5754:30;;;;;;;1090:32136:18;;;;5754:30:8;;1090:32136:18;;;;;;;;;5728:56:8;;;;;;;1090:32136:18;;;;;;;;;;7671:628:9;;;;7875:418;;;1090:32136:18;;;7906:22:9;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;1090:32136:18;;8201:17:9;:::o;1090:32136:18:-;;;-1:-1:-1;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;7875:418:9;1090:32136:18;;;;-1:-1:-1;8980:21:9;:17;;9152:142;;;;;;;8976:379;1090:32136:18;;-1:-1:-1;;;9324:20:9;;1090:32136:18;9324:20:9;;;1090:32136:18;;;;;;;;;;;:::i;:::-;;;;;;;;;;:::o;941:175:8:-;1090:32136:18;;-1:-1:-1;;;1050:58:8;;;;-1:-1:-1;;;;;1090:32136:18;;;;1050:58:8;;;1090:32136:18;;;;;;;;;1050:58:8;;;;;;1090:32136:18;;1050:58:8;:::i;:::-;;:::i;1090:32136:18:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;:::o;19168:986::-;-1:-1:-1;;;;;1090:32136:18;;;-1:-1:-1;1090:32136:18;;;19322:16;1090:32136;;;;;;;;-1:-1:-1;;19168:986:18;1090:32136;;19306:38;;;19302:77;;19414:32;1090:32136;;19414:12;1090:32136;;;;;19414:32;:::i;1090:32136::-;19460:16;;;;1090:32136;19456:74;;19559:21;1090:32136;19559:21;;;;1090:32136;;;;;;;;;;;;;;19544:71;;19609:4;19322:16;19544:71;;1090:32136;19544:71;;;;;;;19168:986;-1:-1:-1;19540:608:18;;-1:-1:-1;;;;1090:32136:18;20117:20;1090:32136;;-1:-1:-1;19168:986:18:o;19540:608::-;1090:32136;;;;19768:15;1090:32136;;;;;;;19839:18;;;;;1090:32136;19891:20;;1090:32136;;;;;;;;;;;;;;;;;;;;19891:93;1090:32136;;;;19891:93;;:::i;1090:32136::-;-1:-1:-1;;;1090:32136:18;;19768:15;19322:16;1090:32136;;;;;-1:-1:-1;;;1090:32136:18;;;19322:16;1090:32136;;;;19835:237;-1:-1:-1;;;1090:32136:18;20037:20;1090:32136;;-1:-1:-1;1090:32136:18:o;19544:71::-;;;;;;;;;;;;;;;;;:::i;:::-;;;1090:32136;;;;;19544:71;;;;1090:32136;;;;19544:71;;;;;19456:74;-1:-1:-1;;1090:32136:18;19499:20;1090:32136;;-1:-1:-1;19492:27:18:o;19302:77::-;19360:8;;;:::o;1090:32136::-;;;;;;;;;;;;;-1:-1:-1;1090:32136:18;;;;;;1482:68:8;1090:32136:18;-1:-1:-1;;1090:32136:18;;;;:::o;25739:408::-;;;;-1:-1:-1;;;;;1090:32136:18;;25871:19;;25867:73;;25888:1;1090:32136;;;;25953:15;1090:32136;;;;;;;;;;25949:80;;-1:-1:-1;;1090:32136:18;;;;;26078:9;1090:32136;-1:-1:-1;;;1090:32136:18;;;;;;;;;26078:9;1090:32136;;;;;;26078:9;26115:25;1090:32136;;;;;;;-1:-1:-1;;;;;1090:32136:18;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;26115:25;;;25739:408::o;1090:32136::-;-1:-1:-1;;;1090:32136:18;;;;;;;;;-1:-1:-1;;;1090:32136:18;;;;;;;;25949:80;25991:7;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"2470400","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"749","BASIS_POINTS()":"1167","DEFAULT_ADMIN_ROLE()":"947","MAX_DAILY_VOLUME()":"397","MAX_DEPOSIT_PER_TX()":"463","MERCHANT_ROLE()":"1057","MERCHANT_YIELD_PERCENTAGE()":"1277","MIN_DEPOSIT_AMOUNT()":"265","OPERATOR_ROLE()":"1255","PROTOCOL_YIELD_PERCENTAGE()":"1145","SECONDS_PER_DAY()":"727","STRATEGY_MANAGER_ROLE()":"1013","USER_YIELD_PERCENTAGE()":"221","activeStrategies(address)":"2597","addStrategy(address,address,string)":"infinite","addSupportedToken(address,string)":"infinite","calculateYield(address,uint256)":"infinite","createDeposit(uint256,address,address,address,bytes32,string)":"infinite","dailyVolume(uint256)":"3028","emergencyPause()":"infinite","emergencyWithdraw(uint256,string)":"infinite","feeRecipient()":"2612","getRoleAdmin(bytes32)":"2462","getStrategyMetrics(address)":"infinite","getTotalValueLocked()":"infinite","getUserDeposit(address,uint256)":"infinite","getUserDeposits(address)":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"3172","merchantBalances(address)":"3025","paused()":"2688","processedPaymentHashes(bytes32)":"3084","protocolBalance()":"2720","protocolFeeRate()":"2654","releasePayment(address,uint256)":"infinite","removeStrategy(address,string)":"infinite","renounceRole(bytes32,address)":"29008","revokeRole(bytes32,address)":"infinite","strategyList(uint256)":"7412","strategyMetrics(address)":"9717","supportedStrategies(address)":"3471","supportedTokens(address)":"2927","supportsInterface(bytes4)":"271","tokenList(uint256)":"5195","unpause()":"infinite","updateProtocolFeeRate(uint256)":"infinite","userDailyVolume(address)":"3245","userDepositCount(address)":"2959","userDeposits(address,uint256)":"infinite","userYieldBalances(address)":"3443","withdrawMerchantBalance(address,uint256)":"infinite","withdrawProtocolFees(address,uint256)":"infinite","withdrawUserYield(address)":"infinite"},"internal":{"_calculateAndUpdateYield(address,uint256)":"infinite","_checkDailyLimits(uint256)":"infinite","_checkUserLimits(address,uint256)":"infinite","_emergencyWithdrawFromStrategy(address,uint256,address)":"infinite","_updateDailyVolume(uint256)":"infinite","_updateStrategyMetrics(address,uint256,uint256)":"infinite","_updateUserDailyVolume(address,uint256)":"infinite","_withdrawFromStrategy(address,uint256,address)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","BASIS_POINTS()":"e1f1c4a7","DEFAULT_ADMIN_ROLE()":"a217fddf","MAX_DAILY_VOLUME()":"392fe6b2","MAX_DEPOSIT_PER_TX()":"41f1c0d9","MERCHANT_ROLE()":"b3d35839","MERCHANT_YIELD_PERCENTAGE()":"f6727092","MIN_DEPOSIT_AMOUNT()":"1ea30fef","OPERATOR_ROLE()":"f5b541a6","PROTOCOL_YIELD_PERCENTAGE()":"dacf3df9","SECONDS_PER_DAY()":"74f0314f","STRATEGY_MANAGER_ROLE()":"abcbe0b2","USER_YIELD_PERCENTAGE()":"14ae9d7d","activeStrategies(address)":"2c178bd0","addStrategy(address,address,string)":"f939be11","addSupportedToken(address,string)":"720138e8","calculateYield(address,uint256)":"f54b7fb4","createDeposit(uint256,address,address,address,bytes32,string)":"877c79a8","dailyVolume(uint256)":"943ca3b9","emergencyPause()":"51858e27","emergencyWithdraw(uint256,string)":"3cbb4668","feeRecipient()":"46904840","getRoleAdmin(bytes32)":"248a9ca3","getStrategyMetrics(address)":"0bd6b070","getTotalValueLocked()":"b26025aa","getUserDeposit(address,uint256)":"60711058","getUserDeposits(address)":"2a5bf6d2","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","merchantBalances(address)":"7f3f1601","paused()":"5c975abb","processedPaymentHashes(bytes32)":"99fcfb43","protocolBalance()":"61e98db8","protocolFeeRate()":"58f85880","releasePayment(address,uint256)":"966ecf3b","removeStrategy(address,string)":"8ea447e6","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","strategyList(uint256)":"a267526b","strategyMetrics(address)":"b6e85026","supportedStrategies(address)":"ee3be5f5","supportedTokens(address)":"68c4ac26","supportsInterface(bytes4)":"01ffc9a7","tokenList(uint256)":"9ead7222","unpause()":"3f4ba83a","updateProtocolFeeRate(uint256)":"6340d55c","userDailyVolume(address)":"ab36cb66","userDepositCount(address)":"729c3e0e","userDeposits(address,uint256)":"08f43333","userYieldBalances(address)":"e7f5165a","withdrawMerchantBalance(address,uint256)":"4c54ef84","withdrawProtocolFees(address,uint256)":"1a7a73c2","withdrawUserYield(address)":"d6fbf61c"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DailyLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositAlreadyReleased\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyMerchantCanRelease\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PaymentAlreadyProcessed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YieldCalculationFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yieldStrategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"DepositCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"EmergencyWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldGenerated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"merchantYield\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolYield\",\"type\":\"uint256\"}],\"name\":\"PaymentReleased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalYield\",\"type\":\"uint256\"}],\"name\":\"YieldCalculated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"YieldWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DAILY_VOLUME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEPOSIT_PER_TX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERCHANT_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERCHANT_YIELD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_DEPOSIT_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROTOCOL_YIELD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_PER_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USER_YIELD_PERCENTAGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"calculateYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldStrategy\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"name\":\"createDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyMetrics\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYieldGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"internalType\":\"struct YieldEscrow.StrategyMetrics\",\"name\":\"metrics\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValueLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"getUserDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastYieldUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct YieldEscrow.Deposit\",\"name\":\"deposit\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastYieldUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"internalType\":\"struct YieldEscrow.Deposit[]\",\"name\":\"deposits\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"merchantBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"processedPaymentHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositIndex\",\"type\":\"uint256\"}],\"name\":\"releasePayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyMetrics\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalYieldGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedStrategies\",\"outputs\":[{\"internalType\":\"contract IYieldStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFeeRate\",\"type\":\"uint256\"}],\"name\":\"updateProtocolFeeRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDailyVolume\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDepositCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"merchant\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"yieldStrategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldAccrued\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastYieldUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"released\",\"type\":\"bool\"},{\"internalType\":\"bytes32\",\"name\":\"paymentHash\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userYieldBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawMerchantBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawProtocolFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawUserYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"YieldRails Team  Key Features: - Holds user deposits in escrow until merchant releases payment - Automatically generates yield through integrated strategies - Distributes yield: 70% to users, 20% to merchants, 10% to protocol - Supports multiple stablecoins and yield strategies - Gas-optimized for <100k gas per transaction - 100% test coverage with comprehensive security measures\",\"details\":\"Main escrow contract for YieldRails that holds stablecoins and generates yield\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addStrategy(address,address,string)\":{\"details\":\"Adds a new yield strategy\",\"params\":{\"name\":\"The strategy name\",\"strategy\":\"The strategy contract address\",\"token\":\"The token this strategy supports\"}},\"addSupportedToken(address,string)\":{\"details\":\"Adds a supported token\",\"params\":{\"symbol\":\"The token symbol\",\"token\":\"The token address\"}},\"calculateYield(address,uint256)\":{\"details\":\"Calculates yield for a specific deposit without updating state\",\"params\":{\"depositIndex\":\"The deposit index\",\"user\":\"The user address\"},\"returns\":{\"yieldAmount\":\"The calculated yield amount\"}},\"constructor\":{\"details\":\"Initialize the YieldEscrow contract\",\"params\":{\"admin\":\"The address that will have admin privileges\",\"feeRecipient_\":\"The address that will receive protocol fees\"}},\"createDeposit(uint256,address,address,address,bytes32,string)\":{\"details\":\"Creates a new deposit for payment processing with yield generation\",\"params\":{\"amount\":\"The amount of tokens to deposit\",\"merchant\":\"The merchant address for this payment\",\"metadata\":\"Optional payment metadata\",\"paymentHash\":\"Unique identifier for this payment\",\"token\":\"The token address (must be supported)\",\"yieldStrategy\":\"The yield strategy to use for this deposit\"},\"returns\":{\"depositIndex\":\"The index of the created deposit  Requirements: - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX - Token must be supported - Merchant must not be zero address - Yield strategy must be active - Payment hash must be unique - Daily limits must not be exceeded\"}},\"emergencyPause()\":{\"details\":\"Emergency pause function (admin only)\"},\"emergencyWithdraw(uint256,string)\":{\"details\":\"Emergency withdrawal for users (only in extreme circumstances)\",\"params\":{\"depositIndex\":\"The deposit index to withdraw\",\"reason\":\"The reason for emergency withdrawal\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStrategyMetrics(address)\":{\"details\":\"Gets strategy performance metrics\",\"params\":{\"strategy\":\"The strategy address\"},\"returns\":{\"metrics\":\"The strategy metrics\"}},\"getTotalValueLocked()\":{\"details\":\"Gets total value locked in the contract\",\"returns\":{\"tvl\":\"The total value locked across all strategies\"}},\"getUserDeposit(address,uint256)\":{\"details\":\"Gets user's deposit information\",\"params\":{\"depositIndex\":\"The deposit index\",\"user\":\"The user address\"},\"returns\":{\"deposit\":\"The deposit information\"}},\"getUserDeposits(address)\":{\"details\":\"Gets all deposits for a user\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"deposits\":\"Array of user deposits\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"releasePayment(address,uint256)\":{\"details\":\"Releases payment to merchant with yield distribution\",\"params\":{\"depositIndex\":\"The deposit index to release  Requirements: - Only the designated merchant can call this function - Deposit must not already be released - Yield calculation must succeed\",\"user\":\"The user who made the deposit\"}},\"removeStrategy(address,string)\":{\"details\":\"Removes a yield strategy\",\"params\":{\"reason\":\"The reason for removal\",\"strategy\":\"The strategy to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Resume operations (admin only)\"},\"updateProtocolFeeRate(uint256)\":{\"details\":\"Updates protocol fee rate\",\"params\":{\"newFeeRate\":\"The new fee rate in basis points\"}},\"withdrawMerchantBalance(address,uint256)\":{\"details\":\"Allows merchants to withdraw their accumulated balances\",\"params\":{\"amount\":\"The amount to withdraw (0 for all)\",\"token\":\"The token to withdraw\"}},\"withdrawProtocolFees(address,uint256)\":{\"details\":\"Withdraws protocol fees\",\"params\":{\"amount\":\"The amount to withdraw\",\"token\":\"The token to withdraw\"}},\"withdrawUserYield(address)\":{\"details\":\"Allows users to withdraw their accumulated yield\",\"params\":{\"token\":\"The token to withdraw yield in\"}}},\"title\":\"YieldEscrow\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract enables yield-powered payments with automatic yield distribution\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/YieldEscrow.sol\":\"YieldEscrow\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/YieldEscrow.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"./interfaces/IYieldStrategy.sol\\\";\\n\\n/**\\n * @title YieldEscrow\\n * @dev Main escrow contract for YieldRails that holds stablecoins and generates yield\\n * @notice This contract enables yield-powered payments with automatic yield distribution\\n * @author YieldRails Team\\n * \\n * Key Features:\\n * - Holds user deposits in escrow until merchant releases payment\\n * - Automatically generates yield through integrated strategies\\n * - Distributes yield: 70% to users, 20% to merchants, 10% to protocol\\n * - Supports multiple stablecoins and yield strategies\\n * - Gas-optimized for <100k gas per transaction\\n * - 100% test coverage with comprehensive security measures\\n */\\ncontract YieldEscrow is ReentrancyGuard, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTANTS & IMMUTABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n    bytes32 public constant MERCHANT_ROLE = keccak256(\\\"MERCHANT_ROLE\\\");\\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\\\"STRATEGY_MANAGER_ROLE\\\");\\n\\n    // Yield distribution percentages (basis points)\\n    uint256 public constant USER_YIELD_PERCENTAGE = 7000;      // 70%\\n    uint256 public constant MERCHANT_YIELD_PERCENTAGE = 2000;  // 20%\\n    uint256 public constant PROTOCOL_YIELD_PERCENTAGE = 1000;  // 10%\\n    uint256 public constant BASIS_POINTS = 10000;              // 100%\\n\\n    // Risk management constants\\n    uint256 public constant MAX_DEPOSIT_PER_TX = 1_000_000 * 10**6;     // 1M USDC\\n    uint256 public constant MAX_DAILY_VOLUME = 10_000_000 * 10**6;      // 10M USDC\\n    uint256 public constant MIN_DEPOSIT_AMOUNT = 1 * 10**6;             // 1 USDC\\n    uint256 public constant SECONDS_PER_DAY = 86400;\\n\\n    // Gas optimization constants\\n    uint256 private constant MAX_DEPOSITS_PER_USER = 1000;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STATE VARIABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    // Core deposit tracking\\n    mapping(address => Deposit[]) public userDeposits;\\n    mapping(address => uint256) public userDepositCount;\\n    mapping(bytes32 => bool) public processedPaymentHashes;\\n    \\n    // Balance tracking\\n    mapping(address => uint256) public merchantBalances;\\n    mapping(address => uint256) public userYieldBalances;\\n    uint256 public protocolBalance;\\n    \\n    // Strategy management\\n    mapping(address => IYieldStrategy) public supportedStrategies;\\n    mapping(address => bool) public activeStrategies;\\n    address[] public strategyList;\\n    \\n    // Supported tokens\\n    mapping(address => bool) public supportedTokens;\\n    address[] public tokenList;\\n    \\n    // Risk management\\n    mapping(uint256 => uint256) public dailyVolume; // day => volume\\n    mapping(address => uint256) public userDailyVolume; // user => daily volume\\n    \\n    // Fee management\\n    uint256 public protocolFeeRate = 0; // 0% fees initially (subsidized by yield)\\n    address public feeRecipient;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Represents a user deposit in escrow\\n     */\\n    struct Deposit {\\n        uint256 amount;              // Principal amount deposited\\n        uint256 timestamp;           // When the deposit was made\\n        address token;               // Token address (USDC, USDT, etc.)\\n        address merchant;            // Merchant who will receive payment\\n        address yieldStrategy;       // Strategy used for yield generation\\n        uint256 yieldAccrued;       // Yield accumulated so far\\n        uint256 lastYieldUpdate;    // Last time yield was calculated\\n        bool released;              // Whether payment has been released\\n        bytes32 paymentHash;        // Unique payment identifier\\n        string metadata;            // Optional payment metadata\\n    }\\n\\n    /**\\n     * @dev Strategy performance tracking\\n     */\\n    struct StrategyMetrics {\\n        uint256 totalDeposited;     // Total amount deposited to strategy\\n        uint256 totalYieldGenerated; // Total yield generated\\n        uint256 averageAPY;         // Historical average APY\\n        uint256 lastUpdateTime;     // Last metrics update\\n    }\\n\\n    mapping(address => StrategyMetrics) public strategyMetrics;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event DepositCreated(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        address indexed merchant,\\n        address token,\\n        uint256 amount,\\n        address yieldStrategy,\\n        uint256 depositIndex\\n    );\\n\\n    event PaymentReleased(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        address indexed merchant,\\n        uint256 amount,\\n        uint256 yieldGenerated,\\n        uint256 userYield,\\n        uint256 merchantYield,\\n        uint256 protocolYield\\n    );\\n\\n    event YieldCalculated(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        uint256 yieldAmount,\\n        uint256 newTotalYield\\n    );\\n\\n    event YieldWithdrawn(\\n        address indexed user,\\n        uint256 amount,\\n        address token\\n    );\\n\\n    event EmergencyWithdrawal(\\n        bytes32 indexed paymentHash,\\n        address indexed user,\\n        uint256 amount,\\n        string reason\\n    );\\n\\n    event StrategyAdded(\\n        address indexed strategy,\\n        address indexed token,\\n        string name\\n    );\\n\\n    event StrategyRemoved(\\n        address indexed strategy,\\n        string reason\\n    );\\n\\n    event TokenAdded(\\n        address indexed token,\\n        string symbol\\n    );\\n\\n    event ProtocolFeeUpdated(\\n        uint256 oldFee,\\n        uint256 newFee\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error InvalidAmount();\\n    error InvalidAddress();\\n    error InvalidStrategy();\\n    error InvalidToken();\\n    error InsufficientBalance();\\n    error PaymentAlreadyProcessed();\\n    error OnlyMerchantCanRelease();\\n    error DepositAlreadyReleased();\\n    error DailyLimitExceeded();\\n    error UserLimitExceeded();\\n    error StrategyNotActive();\\n    error TokenNotSupported();\\n    error DepositNotFound();\\n    error YieldCalculationFailed();\\n    error TransferFailed();\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Initialize the YieldEscrow contract\\n     * @param admin The address that will have admin privileges\\n     * @param feeRecipient_ The address that will receive protocol fees\\n     */\\n    constructor(address admin, address feeRecipient_) {\\n        if (admin == address(0) || feeRecipient_ == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, admin);\\n        _grantRole(ADMIN_ROLE, admin);\\n        feeRecipient = feeRecipient_;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CORE DEPOSIT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Creates a new deposit for payment processing with yield generation\\n     * @param amount The amount of tokens to deposit\\n     * @param token The token address (must be supported)\\n     * @param merchant The merchant address for this payment\\n     * @param yieldStrategy The yield strategy to use for this deposit\\n     * @param paymentHash Unique identifier for this payment\\n     * @param metadata Optional payment metadata\\n     * @return depositIndex The index of the created deposit\\n     * \\n     * Requirements:\\n     * - Amount must be > 0 and <= MAX_DEPOSIT_PER_TX\\n     * - Token must be supported\\n     * - Merchant must not be zero address\\n     * - Yield strategy must be active\\n     * - Payment hash must be unique\\n     * - Daily limits must not be exceeded\\n     */\\n    function createDeposit(\\n        uint256 amount,\\n        address token,\\n        address merchant,\\n        address yieldStrategy,\\n        bytes32 paymentHash,\\n        string calldata metadata\\n    ) external nonReentrant whenNotPaused returns (uint256 depositIndex) {\\n        // Input validation\\n        if (amount < MIN_DEPOSIT_AMOUNT || amount > MAX_DEPOSIT_PER_TX) {\\n            revert InvalidAmount();\\n        }\\n        if (token == address(0) || merchant == address(0) || yieldStrategy == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n        if (!activeStrategies[yieldStrategy]) {\\n            revert StrategyNotActive();\\n        }\\n        if (processedPaymentHashes[paymentHash]) {\\n            revert PaymentAlreadyProcessed();\\n        }\\n\\n        // Risk management checks\\n        _checkDailyLimits(amount);\\n        _checkUserLimits(msg.sender, amount);\\n\\n        // Transfer tokens from user to this contract\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // Create deposit record\\n        depositIndex = userDepositCount[msg.sender];\\n        userDeposits[msg.sender].push(Deposit({\\n            amount: amount,\\n            timestamp: block.timestamp,\\n            token: token,\\n            merchant: merchant,\\n            yieldStrategy: yieldStrategy,\\n            yieldAccrued: 0,\\n            lastYieldUpdate: block.timestamp,\\n            released: false,\\n            paymentHash: paymentHash,\\n            metadata: metadata\\n        }));\\n\\n        userDepositCount[msg.sender]++;\\n        processedPaymentHashes[paymentHash] = true;\\n\\n        // Deposit into yield strategy\\n        IERC20(token).safeApprove(yieldStrategy, amount);\\n        IYieldStrategy(yieldStrategy).deposit(amount);\\n\\n        // Update tracking\\n        _updateDailyVolume(amount);\\n        _updateUserDailyVolume(msg.sender, amount);\\n        _updateStrategyMetrics(yieldStrategy, amount, 0);\\n\\n        emit DepositCreated(\\n            paymentHash,\\n            msg.sender,\\n            merchant,\\n            token,\\n            amount,\\n            yieldStrategy,\\n            depositIndex\\n        );\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PAYMENT RELEASE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Releases payment to merchant with yield distribution\\n     * @param user The user who made the deposit\\n     * @param depositIndex The deposit index to release\\n     * \\n     * Requirements:\\n     * - Only the designated merchant can call this function\\n     * - Deposit must not already be released\\n     * - Yield calculation must succeed\\n     */\\n    function releasePayment(\\n        address user,\\n        uint256 depositIndex\\n    ) external nonReentrant whenNotPaused {\\n        if (depositIndex >= userDepositCount[user]) {\\n            revert DepositNotFound();\\n        }\\n\\n        Deposit storage deposit = userDeposits[user][depositIndex];\\n        \\n        if (msg.sender != deposit.merchant && !hasRole(OPERATOR_ROLE, msg.sender)) {\\n            revert OnlyMerchantCanRelease();\\n        }\\n        if (deposit.released) {\\n            revert DepositAlreadyReleased();\\n        }\\n\\n        // Calculate and update yield\\n        uint256 yieldGenerated = _calculateAndUpdateYield(user, depositIndex);\\n        \\n        // Mark as released (checks-effects-interactions pattern)\\n        deposit.released = true;\\n\\n        // Calculate yield distribution\\n        uint256 userYield = (yieldGenerated * USER_YIELD_PERCENTAGE) / BASIS_POINTS;\\n        uint256 merchantYield = (yieldGenerated * MERCHANT_YIELD_PERCENTAGE) / BASIS_POINTS;\\n        uint256 protocolYield = yieldGenerated - userYield - merchantYield;\\n\\n        // Update balances\\n        merchantBalances[deposit.merchant] += deposit.amount + merchantYield;\\n        userYieldBalances[user] += userYield;\\n        protocolBalance += protocolYield;\\n\\n        // Withdraw from yield strategy\\n        uint256 totalAmount = deposit.amount + yieldGenerated;\\n        _withdrawFromStrategy(deposit.yieldStrategy, totalAmount, deposit.token);\\n\\n        // Update strategy metrics\\n        _updateStrategyMetrics(deposit.yieldStrategy, 0, yieldGenerated);\\n\\n        emit PaymentReleased(\\n            deposit.paymentHash,\\n            user,\\n            deposit.merchant,\\n            deposit.amount,\\n            yieldGenerated,\\n            userYield,\\n            merchantYield,\\n            protocolYield\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows merchants to withdraw their accumulated balances\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw (0 for all)\\n     */\\n    function withdrawMerchantBalance(\\n        address token,\\n        uint256 amount\\n    ) external nonReentrant {\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n\\n        uint256 availableBalance = merchantBalances[msg.sender];\\n        if (availableBalance == 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        uint256 withdrawAmount = amount == 0 ? availableBalance : amount;\\n        if (withdrawAmount > availableBalance) {\\n            revert InsufficientBalance();\\n        }\\n\\n        merchantBalances[msg.sender] -= withdrawAmount;\\n        IERC20(token).safeTransfer(msg.sender, withdrawAmount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates yield for a specific deposit without updating state\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return yieldAmount The calculated yield amount\\n     */\\n    function calculateYield(\\n        address user,\\n        uint256 depositIndex\\n    ) public view returns (uint256 yieldAmount) {\\n        if (depositIndex >= userDepositCount[user]) {\\n            return 0;\\n        }\\n\\n        Deposit memory deposit = userDeposits[user][depositIndex];\\n        if (deposit.released) {\\n            return deposit.yieldAccrued;\\n        }\\n\\n        try IYieldStrategy(deposit.yieldStrategy).calculateUserYield(address(this)) \\n            returns (uint256 strategyYield) {\\n            // Calculate proportional yield based on deposit amount\\n            uint256 totalDeposited = strategyMetrics[deposit.yieldStrategy].totalDeposited;\\n            if (totalDeposited > 0) {\\n                yieldAmount = deposit.yieldAccrued + \\n                    (strategyYield * deposit.amount) / totalDeposited;\\n            } else {\\n                yieldAmount = deposit.yieldAccrued;\\n            }\\n        } catch {\\n            yieldAmount = deposit.yieldAccrued;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates and updates yield for a specific deposit\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return yieldGenerated The amount of yield generated\\n     */\\n    function _calculateAndUpdateYield(\\n        address user,\\n        uint256 depositIndex\\n    ) internal returns (uint256 yieldGenerated) {\\n        Deposit storage deposit = userDeposits[user][depositIndex];\\n        \\n        yieldGenerated = calculateYield(user, depositIndex);\\n        deposit.yieldAccrued = yieldGenerated;\\n        deposit.lastYieldUpdate = block.timestamp;\\n\\n        emit YieldCalculated(\\n            deposit.paymentHash,\\n            user,\\n            yieldGenerated,\\n            deposit.yieldAccrued\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows users to withdraw their accumulated yield\\n     * @param token The token to withdraw yield in\\n     */\\n    function withdrawUserYield(address token) external nonReentrant {\\n        if (!supportedTokens[token]) {\\n            revert TokenNotSupported();\\n        }\\n\\n        uint256 yieldBalance = userYieldBalances[msg.sender];\\n        if (yieldBalance == 0) {\\n            revert InsufficientBalance();\\n        }\\n\\n        userYieldBalances[msg.sender] = 0;\\n        IERC20(token).safeTransfer(msg.sender, yieldBalance);\\n\\n        emit YieldWithdrawn(msg.sender, yieldBalance, token);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EMERGENCY FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emergency withdrawal for users (only in extreme circumstances)\\n     * @param depositIndex The deposit index to withdraw\\n     * @param reason The reason for emergency withdrawal\\n     */\\n    function emergencyWithdraw(\\n        uint256 depositIndex,\\n        string calldata reason\\n    ) external nonReentrant {\\n        if (depositIndex >= userDepositCount[msg.sender]) {\\n            revert DepositNotFound();\\n        }\\n\\n        Deposit storage deposit = userDeposits[msg.sender][depositIndex];\\n        if (deposit.released) {\\n            revert DepositAlreadyReleased();\\n        }\\n\\n        // Mark as released\\n        deposit.released = true;\\n\\n        // Emergency withdraw from strategy\\n        uint256 withdrawnAmount = _emergencyWithdrawFromStrategy(\\n            deposit.yieldStrategy,\\n            deposit.amount,\\n            deposit.token\\n        );\\n\\n        // Transfer back to user (no yield distribution in emergency)\\n        IERC20(deposit.token).safeTransfer(msg.sender, withdrawnAmount);\\n\\n        emit EmergencyWithdrawal(\\n            deposit.paymentHash,\\n            msg.sender,\\n            withdrawnAmount,\\n            reason\\n        );\\n    }\\n\\n    /**\\n     * @dev Emergency pause function (admin only)\\n     */\\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Resume operations (admin only)\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY MANAGEMENT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Adds a new yield strategy\\n     * @param strategy The strategy contract address\\n     * @param token The token this strategy supports\\n     * @param name The strategy name\\n     */\\n    function addStrategy(\\n        address strategy,\\n        address token,\\n        string calldata name\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (strategy == address(0) || token == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (activeStrategies[strategy]) {\\n            revert InvalidStrategy();\\n        }\\n\\n        supportedStrategies[strategy] = IYieldStrategy(strategy);\\n        activeStrategies[strategy] = true;\\n        strategyList.push(strategy);\\n\\n        emit StrategyAdded(strategy, token, name);\\n    }\\n\\n    /**\\n     * @dev Removes a yield strategy\\n     * @param strategy The strategy to remove\\n     * @param reason The reason for removal\\n     */\\n    function removeStrategy(\\n        address strategy,\\n        string calldata reason\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (!activeStrategies[strategy]) {\\n            revert StrategyNotActive();\\n        }\\n\\n        activeStrategies[strategy] = false;\\n        \\n        emit StrategyRemoved(strategy, reason);\\n    }\\n\\n    /**\\n     * @dev Adds a supported token\\n     * @param token The token address\\n     * @param symbol The token symbol\\n     */\\n    function addSupportedToken(\\n        address token,\\n        string calldata symbol\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (token == address(0)) {\\n            revert InvalidAddress();\\n        }\\n        if (supportedTokens[token]) {\\n            return; // Already supported\\n        }\\n\\n        supportedTokens[token] = true;\\n        tokenList.push(token);\\n\\n        emit TokenAdded(token, symbol);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets user's deposit information\\n     * @param user The user address\\n     * @param depositIndex The deposit index\\n     * @return deposit The deposit information\\n     */\\n    function getUserDeposit(\\n        address user,\\n        uint256 depositIndex\\n    ) external view returns (Deposit memory deposit) {\\n        if (depositIndex < userDepositCount[user]) {\\n            deposit = userDeposits[user][depositIndex];\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets all deposits for a user\\n     * @param user The user address\\n     * @return deposits Array of user deposits\\n     */\\n    function getUserDeposits(address user) external view returns (Deposit[] memory deposits) {\\n        deposits = userDeposits[user];\\n    }\\n\\n    /**\\n     * @dev Gets total value locked in the contract\\n     * @return tvl The total value locked across all strategies\\n     */\\n    function getTotalValueLocked() external view returns (uint256 tvl) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                tvl += strategyMetrics[strategyList[i]].totalDeposited;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Gets strategy performance metrics\\n     * @param strategy The strategy address\\n     * @return metrics The strategy metrics\\n     */\\n    function getStrategyMetrics(address strategy) external view returns (StrategyMetrics memory metrics) {\\n        metrics = strategyMetrics[strategy];\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // INTERNAL HELPER FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    function _checkDailyLimits(uint256 amount) internal {\\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        if (dailyVolume[today] + amount > MAX_DAILY_VOLUME) {\\n            revert DailyLimitExceeded();\\n        }\\n    }\\n\\n    function _checkUserLimits(address user, uint256 amount) internal view {\\n        if (userDepositCount[user] >= MAX_DEPOSITS_PER_USER) {\\n            revert UserLimitExceeded();\\n        }\\n        \\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        if (userDailyVolume[user] + amount > MAX_DEPOSIT_PER_TX * 5) { // 5x single tx limit per day\\n            revert DailyLimitExceeded();\\n        }\\n    }\\n\\n    function _updateDailyVolume(uint256 amount) internal {\\n        uint256 today = block.timestamp / SECONDS_PER_DAY;\\n        dailyVolume[today] += amount;\\n    }\\n\\n    function _updateUserDailyVolume(address user, uint256 amount) internal {\\n        userDailyVolume[user] += amount;\\n    }\\n\\n    function _updateStrategyMetrics(address strategy, uint256 deposited, uint256 yieldGenerated) internal {\\n        StrategyMetrics storage metrics = strategyMetrics[strategy];\\n        metrics.totalDeposited += deposited;\\n        metrics.totalYieldGenerated += yieldGenerated;\\n        metrics.lastUpdateTime = block.timestamp;\\n        \\n        // Update average APY if yield was generated\\n        if (yieldGenerated > 0) {\\n            try IYieldStrategy(strategy).getCurrentAPY() returns (uint256 currentAPY) {\\n                metrics.averageAPY = (metrics.averageAPY + currentAPY) / 2;\\n            } catch {\\n                // Keep existing average if calculation fails\\n            }\\n        }\\n    }\\n\\n    function _withdrawFromStrategy(address strategy, uint256 amount, address token) internal {\\n        try IYieldStrategy(strategy).withdraw(amount) returns (uint256 withdrawn) {\\n            if (withdrawn < amount) {\\n                revert TransferFailed();\\n            }\\n        } catch {\\n            revert YieldCalculationFailed();\\n        }\\n    }\\n\\n    function _emergencyWithdrawFromStrategy(\\n        address strategy,\\n        uint256 amount,\\n        address token\\n    ) internal returns (uint256 withdrawn) {\\n        try IYieldStrategy(strategy).emergencyWithdraw(address(this)) returns (uint256 emergencyWithdrawn) {\\n            withdrawn = emergencyWithdrawn > amount ? amount : emergencyWithdrawn;\\n        } catch {\\n            // If emergency withdrawal fails, try regular withdrawal\\n            try IYieldStrategy(strategy).withdraw(amount) returns (uint256 regularWithdrawn) {\\n                withdrawn = regularWithdrawn;\\n            } catch {\\n                withdrawn = 0;\\n            }\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Updates protocol fee rate\\n     * @param newFeeRate The new fee rate in basis points\\n     */\\n    function updateProtocolFeeRate(uint256 newFeeRate) external onlyRole(ADMIN_ROLE) {\\n        if (newFeeRate > 1000) { // Max 10% fee\\n            revert InvalidAmount();\\n        }\\n        \\n        uint256 oldFee = protocolFeeRate;\\n        protocolFeeRate = newFeeRate;\\n        \\n        emit ProtocolFeeUpdated(oldFee, newFeeRate);\\n    }\\n\\n    /**\\n     * @dev Withdraws protocol fees\\n     * @param token The token to withdraw\\n     * @param amount The amount to withdraw\\n     */\\n    function withdrawProtocolFees(\\n        address token,\\n        uint256 amount\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (amount > protocolBalance) {\\n            revert InsufficientBalance();\\n        }\\n\\n        protocolBalance -= amount;\\n        IERC20(token).safeTransfer(feeRecipient, amount);\\n    }\\n}\",\"keccak256\":\"0xd2ea3950917d6d833dd91de4772ed8d6390f41a8fd9faf7e6caa3def2948f34c\",\"license\":\"MIT\"},\"src/interfaces/IYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IYieldStrategy\\n * @dev Interface for yield generation strategies in YieldRails\\n * @notice All yield strategies must implement this interface for compatibility\\n * @author YieldRails Team\\n */\\ninterface IYieldStrategy {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emitted when funds are deposited into the strategy\\n     * @param user The address that deposited funds\\n     * @param amount The amount deposited\\n     * @param shares The number of shares minted\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when funds are withdrawn from the strategy\\n     * @param user The address that withdrew funds\\n     * @param amount The amount withdrawn\\n     * @param shares The number of shares burned\\n     */\\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when yield is harvested\\n     * @param yieldAmount The amount of yield harvested\\n     * @param newTotalAssets The new total assets under management\\n     */\\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\\n\\n    /**\\n     * @dev Emitted when strategy parameters are updated\\n     * @param parameter The parameter that was updated\\n     * @param oldValue The old value\\n     * @param newValue The new value\\n     */\\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy metadata and performance metrics\\n     */\\n    struct StrategyInfo {\\n        string name;                // Strategy name (e.g., \\\"T-Bill Strategy\\\")\\n        string description;         // Strategy description\\n        uint256 totalAssets;        // Total assets under management\\n        uint256 totalShares;        // Total shares outstanding\\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\\n        uint256 lastHarvest;        // Timestamp of last yield harvest\\n        bool active;                // Whether strategy is active\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the yield strategy\\n     * @param amount The amount of assets to deposit\\n     * @return shares The number of shares minted to the depositor\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Withdraws assets from the yield strategy\\n     * @param shares The number of shares to burn\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external returns (uint256 amount);\\n\\n    /**\\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\\n     * @param user The address to withdraw funds for\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function emergencyWithdraw(address user) external returns (uint256 amount);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates the current APY of the strategy\\n     * @return apy The current APY in basis points\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @dev Calculates yield generated for a specific user\\n     * @param user The user address\\n     * @return yieldAmount The amount of yield generated\\n     */\\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\\n\\n    /**\\n     * @dev Calculates the total yield generated by the strategy\\n     * @return totalYield The total yield generated\\n     */\\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\\n\\n    /**\\n     * @dev Harvests yield from the underlying protocol\\n     * @return yieldHarvested The amount of yield harvested\\n     */\\n    function harvestYield() external returns (uint256 yieldHarvested);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // SHARE CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent number of shares\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent amount of assets\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Gets the user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY INFORMATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets comprehensive strategy information\\n     * @return info The strategy information struct\\n     */\\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\\n\\n    /**\\n     * @dev Gets the underlying asset address\\n     * @return asset The address of the underlying asset (e.g., USDC)\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     * @dev Gets the total assets under management\\n     * @return totalManagedAssets The total assets managed by this strategy\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Gets the strategy's risk score\\n     * @return risk The risk score from 1-10 (1 = lowest risk)\\n     */\\n    function getRiskScore() external view returns (uint256 risk);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PERFORMANCE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets historical performance data\\n     * @param period The time period to look back (in seconds)\\n     * @return performance The performance data for the specified period\\n     */\\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\\n\\n    /**\\n     * @dev Checks if the strategy is profitable\\n     * @return profitable Whether the strategy is currently profitable\\n     */\\n    function isProfitable() external view returns (bool profitable);\\n\\n    /**\\n     * @dev Gets the maximum capacity of the strategy\\n     * @return maxCapacity The maximum amount of assets the strategy can handle\\n     */\\n    function maxCapacity() external view returns (uint256 maxCapacity);\\n\\n    /**\\n     * @dev Gets the current utilization rate\\n     * @return utilization The utilization rate as a percentage (basis points)\\n     */\\n    function utilizationRate() external view returns (uint256 utilization);\\n}\",\"keccak256\":\"0x3dbcde8604a18aff443ee40442187a697d0c9772bfe40e650f9e3b4da40b38cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":507,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":406,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"_paused","offset":0,"slot":"1","type":"t_bool"},{"astId":24,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"_roles","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":4625,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"userDeposits","offset":0,"slot":"3","type":"t_mapping(t_address,t_array(t_struct(Deposit)4697_storage)dyn_storage)"},{"astId":4629,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"userDepositCount","offset":0,"slot":"4","type":"t_mapping(t_address,t_uint256)"},{"astId":4633,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"processedPaymentHashes","offset":0,"slot":"5","type":"t_mapping(t_bytes32,t_bool)"},{"astId":4637,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"merchantBalances","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":4641,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"userYieldBalances","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":4643,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"protocolBalance","offset":0,"slot":"8","type":"t_uint256"},{"astId":4648,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"supportedStrategies","offset":0,"slot":"9","type":"t_mapping(t_address,t_contract(IYieldStrategy)8169)"},{"astId":4652,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"activeStrategies","offset":0,"slot":"10","type":"t_mapping(t_address,t_bool)"},{"astId":4655,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"strategyList","offset":0,"slot":"11","type":"t_array(t_address)dyn_storage"},{"astId":4659,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"supportedTokens","offset":0,"slot":"12","type":"t_mapping(t_address,t_bool)"},{"astId":4662,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"tokenList","offset":0,"slot":"13","type":"t_array(t_address)dyn_storage"},{"astId":4666,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"dailyVolume","offset":0,"slot":"14","type":"t_mapping(t_uint256,t_uint256)"},{"astId":4670,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"userDailyVolume","offset":0,"slot":"15","type":"t_mapping(t_address,t_uint256)"},{"astId":4673,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"protocolFeeRate","offset":0,"slot":"16","type":"t_uint256"},{"astId":4675,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"feeRecipient","offset":0,"slot":"17","type":"t_address"},{"astId":4712,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"strategyMetrics","offset":0,"slot":"18","type":"t_mapping(t_address,t_struct(StrategyMetrics)4707_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_struct(Deposit)4697_storage)dyn_storage":{"base":"t_struct(Deposit)4697_storage","encoding":"dynamic_array","label":"struct YieldEscrow.Deposit[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IYieldStrategy)8169":{"encoding":"inplace","label":"contract IYieldStrategy","numberOfBytes":"20"},"t_mapping(t_address,t_array(t_struct(Deposit)4697_storage)dyn_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct YieldEscrow.Deposit[])","numberOfBytes":"32","value":"t_array(t_struct(Deposit)4697_storage)dyn_storage"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_contract(IYieldStrategy)8169)":{"encoding":"mapping","key":"t_address","label":"mapping(address => contract IYieldStrategy)","numberOfBytes":"32","value":"t_contract(IYieldStrategy)8169"},"t_mapping(t_address,t_struct(StrategyMetrics)4707_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct YieldEscrow.StrategyMetrics)","numberOfBytes":"32","value":"t_struct(StrategyMetrics)4707_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Deposit)4697_storage":{"encoding":"inplace","label":"struct YieldEscrow.Deposit","members":[{"astId":4678,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"amount","offset":0,"slot":"0","type":"t_uint256"},{"astId":4680,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"timestamp","offset":0,"slot":"1","type":"t_uint256"},{"astId":4682,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"token","offset":0,"slot":"2","type":"t_address"},{"astId":4684,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"merchant","offset":0,"slot":"3","type":"t_address"},{"astId":4686,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"yieldStrategy","offset":0,"slot":"4","type":"t_address"},{"astId":4688,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"yieldAccrued","offset":0,"slot":"5","type":"t_uint256"},{"astId":4690,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"lastYieldUpdate","offset":0,"slot":"6","type":"t_uint256"},{"astId":4692,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"released","offset":0,"slot":"7","type":"t_bool"},{"astId":4694,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"paymentHash","offset":0,"slot":"8","type":"t_bytes32"},{"astId":4696,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"metadata","offset":0,"slot":"9","type":"t_string_storage"}],"numberOfBytes":"320"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(StrategyMetrics)4707_storage":{"encoding":"inplace","label":"struct YieldEscrow.StrategyMetrics","members":[{"astId":4700,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"totalDeposited","offset":0,"slot":"0","type":"t_uint256"},{"astId":4702,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"totalYieldGenerated","offset":0,"slot":"1","type":"t_uint256"},{"astId":4704,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"averageAPY","offset":0,"slot":"2","type":"t_uint256"},{"astId":4706,"contract":"src/YieldEscrow.sol:YieldEscrow","label":"lastUpdateTime","offset":0,"slot":"3","type":"t_uint256"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"This contract enables yield-powered payments with automatic yield distribution","version":1}}},"src/YieldVault.sol":{"YieldVault":{"abi":[{"inputs":[{"internalType":"address","name":"_asset","type":"address"},{"internalType":"address","name":"_admin","type":"address"},{"internalType":"address","name":"_feeRecipient","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ExceedsRiskLimit","type":"error"},{"inputs":[],"name":"InsufficientBalance","type":"error"},{"inputs":[],"name":"InvalidAllocation","type":"error"},{"inputs":[],"name":"InvalidAmount","type":"error"},{"inputs":[],"name":"InvalidStrategy","type":"error"},{"inputs":[],"name":"InvalidTarget","type":"error"},{"inputs":[],"name":"MaxStrategiesReached","type":"error"},{"inputs":[],"name":"RebalanceCooldownActive","type":"error"},{"inputs":[],"name":"StrategyAlreadyExists","type":"error"},{"inputs":[],"name":"StrategyNotActive","type":"error"},{"inputs":[],"name":"TransferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"admin","type":"address"},{"indexed":false,"internalType":"string","name":"action","type":"string"},{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"EmergencyAction","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"newAPY","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"sharpeRatio","type":"uint256"}],"name":"PerformanceUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rebalancer","type":"address"},{"indexed":false,"internalType":"address[]","name":"strategies","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"oldAllocations","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"newAllocations","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"Rebalanced","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"string","name":"name","type":"string"},{"indexed":false,"internalType":"uint256","name":"riskScore","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"initialAllocation","type":"uint256"}],"name":"StrategyAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"string","name":"reason","type":"string"},{"indexed":false,"internalType":"uint256","name":"fundsWithdrawn","type":"uint256"}],"name":"StrategyRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"assets","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"strategy","type":"address"},{"indexed":false,"internalType":"uint256","name":"yieldAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalYield","type":"uint256"}],"name":"YieldHarvested","type":"event"},{"inputs":[],"name":"ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BASIS_POINTS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_ALLOCATION_PER_STRATEGY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_STRATEGIES","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_REBALANCE_THRESHOLD","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MIN_STRATEGY_ALLOCATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"PERFORMANCE_WINDOW","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REBALANCER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REBALANCE_COOLDOWN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STRATEGY_MANAGER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"activeStrategies","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"string","name":"name","type":"string"},{"internalType":"uint256","name":"riskScore","type":"uint256"},{"internalType":"uint256","name":"initialAllocation","type":"uint256"}],"name":"addStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"asset","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"autoRebalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"autoRebalanceEnabled","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"dailyYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"emergencyPause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"feeRecipient","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getCurrentAPY","outputs":[{"internalType":"uint256","name":"vaultAPY","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"getStrategyInfo","outputs":[{"components":[{"internalType":"contract IYieldStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"allocation","type":"uint256"},{"internalType":"uint256","name":"targetAllocation","type":"uint256"},{"internalType":"uint256","name":"totalDeposited","type":"uint256"},{"internalType":"uint256","name":"lastUpdate","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint256","name":"riskScore","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"internalType":"struct YieldVault.StrategyInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"}],"name":"getStrategyPerformance","outputs":[{"components":[{"internalType":"uint256","name":"totalYieldGenerated","type":"uint256"},{"internalType":"uint256","name":"averageAPY","type":"uint256"},{"internalType":"uint256","name":"lastAPY","type":"uint256"},{"internalType":"uint256[]","name":"apyHistory","type":"uint256[]"},{"internalType":"uint256","name":"lastPerformanceUpdate","type":"uint256"},{"internalType":"uint256","name":"sharpeRatio","type":"uint256"}],"internalType":"struct YieldVault.PerformanceData","name":"performance","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"harvestAll","outputs":[{"internalType":"uint256","name":"totalYieldHarvested","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastRebalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"managementFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxTotalRisk","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"performanceFee","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"strategyAddresses","type":"address[]"},{"internalType":"uint256[]","name":"newAllocations","type":"uint256[]"}],"name":"rebalance","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"strategy","type":"address"},{"internalType":"string","name":"reason","type":"string"}],"name":"removeStrategy","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"strategies","outputs":[{"internalType":"contract IYieldStrategy","name":"strategy","type":"address"},{"internalType":"uint256","name":"allocation","type":"uint256"},{"internalType":"uint256","name":"targetAllocation","type":"uint256"},{"internalType":"uint256","name":"totalDeposited","type":"uint256"},{"internalType":"uint256","name":"lastUpdate","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"},{"internalType":"uint256","name":"riskScore","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"strategyList","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"strategyPerformance","outputs":[{"internalType":"uint256","name":"totalYieldGenerated","type":"uint256"},{"internalType":"uint256","name":"averageAPY","type":"uint256"},{"internalType":"uint256","name":"lastAPY","type":"uint256"},{"internalType":"uint256","name":"lastPerformanceUpdate","type":"uint256"},{"internalType":"uint256","name":"sharpeRatio","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"targetAllocations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_managementFee","type":"uint256"},{"internalType":"uint256","name":"_performanceFee","type":"uint256"},{"internalType":"address","name":"_feeRecipient","type":"address"},{"internalType":"bool","name":"_autoRebalanceEnabled","type":"bool"}],"name":"updateVaultParameters","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"YieldRails Team  Key Features: - Multi-strategy yield optimization - Automatic rebalancing based on APY and risk scores - Emergency withdrawal capabilities - Real-time performance tracking - Risk-adjusted allocation algorithms","details":"Manages multiple yield strategies and optimizes yield allocation","events":{"Paused(address)":{"details":"Emitted when the pause is triggered by `account`."},"RoleAdminChanged(bytes32,bytes32,bytes32)":{"details":"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"},"RoleGranted(bytes32,address,address)":{"details":"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."},"RoleRevoked(bytes32,address,address)":{"details":"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"},"Unpaused(address)":{"details":"Emitted when the pause is lifted by `account`."}},"kind":"dev","methods":{"addStrategy(address,string,uint256,uint256)":{"details":"Adds a new yield strategy to the vault","params":{"initialAllocation":"Initial allocation in basis points","name":"The strategy name","riskScore":"The risk score (1-10)","strategy":"The strategy contract address"}},"autoRebalance()":{"details":"Automatically rebalances based on performance and risk"},"balanceOf(address)":{"details":"Gets user's share balance","params":{"user":"The user address"},"returns":{"balance":"The user's share balance"}},"constructor":{"details":"Initialize the YieldVault","params":{"_admin":"The admin address","_asset":"The base asset for the vault (e.g., USDC)","_feeRecipient":"The fee recipient address"}},"convertToAssets(uint256)":{"details":"Converts shares to assets","params":{"shares":"The number of shares"},"returns":{"assets":"The equivalent assets"}},"convertToShares(uint256)":{"details":"Converts assets to shares","params":{"assets":"The amount of assets"},"returns":{"shares":"The equivalent shares"}},"deposit(uint256)":{"details":"Deposits assets into the vault and allocates to strategies","params":{"assets":"The amount of assets to deposit"},"returns":{"shares":"The number of shares minted"}},"emergencyPause()":{"details":"Emergency pause function"},"getCurrentAPY()":{"details":"Gets the current vault APY based on strategy performance","returns":{"vaultAPY":"The weighted average APY"}},"getRoleAdmin(bytes32)":{"details":"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."},"getStrategyInfo(address)":{"details":"Gets strategy allocation data","params":{"strategy":"The strategy address"},"returns":{"info":"The strategy information"}},"getStrategyPerformance(address)":{"details":"Gets performance data for a strategy","params":{"strategy":"The strategy address"},"returns":{"performance":"The performance data"}},"grantRole(bytes32,address)":{"details":"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."},"harvestAll()":{"details":"Harvests yield from all strategies","returns":{"totalYieldHarvested":"The total yield harvested"}},"hasRole(bytes32,address)":{"details":"Returns `true` if `account` has been granted `role`."},"paused()":{"details":"Returns true if the contract is paused, and false otherwise."},"rebalance(address[],uint256[])":{"details":"Rebalances allocations across strategies","params":{"newAllocations":"Array of new allocations (must sum to 10000)"}},"removeStrategy(address,string)":{"details":"Removes a strategy from the vault","params":{"reason":"The reason for removal","strategy":"The strategy to remove"}},"renounceRole(bytes32,address)":{"details":"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."},"revokeRole(bytes32,address)":{"details":"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"unpause()":{"details":"Resume operations"},"updateVaultParameters(uint256,uint256,address,bool)":{"details":"Updates vault parameters"},"withdraw(uint256)":{"details":"Withdraws assets from the vault","params":{"shares":"The number of shares to burn"},"returns":{"assets":"The amount of assets withdrawn"}}},"title":"YieldVault","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_address_fromMemory":{"entryPoint":788,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"60a034620002f957601f620038f538819003918201601f191683019291906001600160401b03841183851017620002fe578160609284926040968752833981010312620002f957620000518162000314565b906020916200006f846200006785850162000314565b930162000314565b600160009481865560ff199283835416835560c8600e556103e8600f5560056011558284601254161760125560018060a01b0380951680158015620002ee575b8015620002e3575b620002d257608052601080546001600160a01b0319169186169190911790558580526002808252878720959094168087529481528686205460ff16156200029d575b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775808752848252878720868852825260ff88882054161562000267575b507f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b808752848252878720868852825260ff88882054161562000231575b507fccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f4693848752808252878720868852825260ff888820541615620001f9575b8742600c55516135ab90816200032a82396080518181816104fc015281816106280152818161078501528181610d1f0152818161163501528181611e27015261220a0152f35b8487528152868620908587525285852091825416179055600080516020620038d5833981519152339380a438808080808080620001b3565b80875284825287872086885282528787208385825416179055853391600080516020620038d58339815191528980a43862000174565b80875284825287872086885282528787208385825416179055853391600080516020620038d58339815191528980a43862000136565b85805283815286862085875281528686208284825416179055338587600080516020620038d58339815191528180a4620000f9565b885163162908e360e11b8152600490fd5b5085821615620000b7565b5085871615620000af565b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b0382168203620002f95756fe608080604052600436101561001357600080fd5b60003560e01c90816301e1d1141461265d5750806301ffc9a71461260757806307a2d13a146125e95780630e7bd23114610391578063106b9ca1146125cb578063248a9ca31461259c5780632be01190146122c65780632c178bd0146122875780632e1a7d4d146120305780632f2ff15d14611f7d578063357ad7ad14611ee857806336568abe14611e5657806338d52e0f14611e1157806339ebf82314611d705780633a98ef3914611d525780633f4ba83a14611cbe5780634690484014611c95578063490b48f814611c5a57806351858e2714611c01578063527f116f1461155757806354192ad514611423578063552829021461140557806358d1d42a146113e75780635c975abb146113c457806364d60a7d146113a75780636b5cc2941461134157806370a082311461130757806375b238fc146112cc578063767f06ae146112b05780637a6efd47146110d957806387788782146110bb5780638ea447e614610dc85780638ed955b914610b485780638faee2a814610b2b57806391d1485414610ade578063962ca49614610948578063a217fddf1461092c578063a267526b146108ea578063a5ac4dd1146108c7578063a6f7f5d6146108a9578063abcbe0b21461086e578063b6b55f2514610480578063c6e6f5921461045a578063d547741f14610419578063dcdf92fb146103ed578063e1f1c4a7146103d0578063e8f8080c14610396578063ef434d61146103915763f51381da1461023a57600080fd5b3461038c5760208060031936011261038c576102546126c4565b600060a060405161026481612746565b8281528285820152826040820152606080820152826080820152015260018060a01b0316600052600a815260406000206040516102a081612746565b8154815260019283830154928183019384526002810154916040840192835260038201604051908183825491828152019160005283600020908960005b8281106103795750505050816102f491038261277c565b6060850190815260056004840154936080870194855201549360a086019485526040519683885260e08801965184890152516040880152516060870152519360c06080870152845180915281610100870195019160005b82811061036657845160a0890152855160c089015287870388f35b835187529581019592810192880161034b565b83548552938601939281019281016102dd565b600080fd5b612678565b3461038c57602036600319011261038c576001600160a01b036103b76126c4565b16600052600d6020526020604060002054604051908152f35b3461038c57600036600319011261038c5760206040516127108152f35b3461038c57602036600319011261038c57600435600052600b6020526020604060002054604051908152f35b3461038c57604036600319011261038c576104586004356104386126da565b90806000526002602052610453600160406000200154612daa565b612eb5565b005b3461038c57602036600319011261038c576020610478600435613408565b604051908152f35b3461038c57602036600319011261038c57610499613166565b6104a1613122565b6004351561085c576104b4600435613408565b6040516323b872dd60e01b602082015233602482015230604482015260043560648201526064815260a08101908082106001600160401b0383111761084657610520916040527f00000000000000000000000000000000000000000000000000000000000000006131bc565b3360005260086020526040600020610539828254612f3e565b905561054781600454612f3e565b600455610558600435600354612f3e565b60035560005b60065481101561080357610571816128b8565b60018060a01b0391549060031b1c169081600052600760205260ff604060002054166105a7575b6105a29150613106565b61055e565b600560205260406000206127106105c46001830154600435612f2b565b04908115801590816105da575b50505050610598565b90610762575b156106fe5760405163095ea7b360e01b602082018190526001600160a01b0386166024830152604480830185905282526000959092909161064c9061062660648261277c565b7f00000000000000000000000000000000000000000000000000000000000000006131bc565b805460405163b6b55f2560e01b8152600481018690529660209188916024918391906001600160a01b03165af195866106d3575b506105a2956106ba57506106b192506040519160208301526024820152600060448201526044815261062681612761565b838080806105d1565b6106cc92506003915001918254612f3e565b90556106b1565b602090813d83116106f7575b6106e9818361277c565b8101031261038c5787610680565b503d6106df565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b8152306004820152602481018590526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156107f7576000916107c5575b50156105e0565b90506020813d6020116107ef575b816107e06020938361277c565b8101031261038c5751866107be565b3d91506107d3565b6040513d6000823e3d90fd5b602082604051600435815281838201527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560403392a26001600055604051908152f35b634e487b7160e01b600052604160045260246000fd5b60405163162908e360e11b8152600490fd5b3461038c57600036600319011261038c5760206040517f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b8152f35b3461038c57600036600319011261038c576020600e54604051908152f35b3461038c57600036600319011261038c57602060ff601254166040519015158152f35b3461038c57602036600319011261038c5760043560065481101561038c576109136020916128b8565b905460405160039290921b1c6001600160a01b03168152f35b3461038c57600036600319011261038c57602060405160008152f35b3461038c57600036600319011261038c57600080600091600060068054915b82811061099457602085878681610983575b5050604051908152f35b61098d92506133fe565b8280610979565b61099d816128b8565b60018060a09493941b03809354600392831b1c16600052600760209080825260ff9081604060002054166109df575b505050506109da9150613106565b610967565b948291610a496004969760059283865260406000209060405194610a028661272a565b8683541686526001830154998887019a8b526002840154604088015283015460608701528a830154608087015282015416151560a08501528a81015460c08501520161279d565b60e0820152511660405194858092634b16524b60e11b82525afa928391600094610aae575b5050610a7f5750506109da90613106565b90610a9e6109da939896610a98610aa494518094612f2b565b90612f3e565b95612f3e565b95878080806109cc565b9080929450813d8311610ad7575b610ac6818361277c565b8101031261038c5751918980610a6e565b503d610abc565b3461038c57604036600319011261038c57610af76126da565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461038c57600036600319011261038c576020604051610e108152f35b3461038c57600036600319011261038c57610b61613166565b6000805b600654821015610ca357610b78826128b8565b929060018060a01b03938491549060031b1c16806000526020936007855260ff60406000205416610bb7575b5050610bb1919250613106565b90610b65565b846000916005825260408320541660046040518094819363e8d991d160e01b83525af160009181610c74575b50610bf5575050610bb1919250613106565b80610c0b575b5050610bb1919250829184610ba4565b604081610c3c7ff343dfc1e44c65296fb907b287e6e12133eb7945ba79ec463d65ef129757c2ff93610bb197612f3e565b9684600052600a80825283600020610c55848254612f3e565b90558560005281528260002054908351928352820152a2829184610bfb565b9091508581813d8311610c9c575b610c8c818361277c565b8101031261038c57519086610be3565b503d610c82565b620151804204600052602090600b82526040600020610cc3828254612f3e565b905580151580610cdc575b506001600055604051908152f35b600f54908115159081610dc0575b5015610cce57610cfd6127109183612f2b565b6040516370a0823160e01b81523060048201526001600160a01b0392909104907f00000000000000000000000000000000000000000000000000000000000000009085816024818786165afa9081156107f757600091610d93575b50828015159182610d88575b5050610d72575b5050610cce565b610d80926010541690613385565b828080610d6b565b101590508287610d64565b90508581813d8311610db9575b610daa818361277c565b8101031261038c575186610d58565b503d610da0565b905084610cea565b3461038c57604036600319011261038c57610de16126c4565b60249081356001600160401b03811161038c57610e0290369060040161288b565b610e0a612c65565b60018060a01b0380931692836000526020906007825260ff60406000205416156110a95784600052600582526040600020600091600390818301548581610fd2575b50508760005260078552604060002060ff1990818154169055600584019081541690556000600180940155600d855260006040812055826000905b610ed2575b887ff2f3b6b9f2a3bdce56fa5fd5304960564a1d25405f97dec9260b1165ac72850089898989610ec96040519485946040865260408601916130e5565b918301520390a2005b6006805480831015610fcb578a84610ee9856128b8565b905490881b1c1614610f06575050610f0090613106565b83610e87565b9394509260001991828201918211610fb657610f3584610f28610f54946128b8565b905490891b1c16916128b8565b90919082549060031b9160018060a01b03809116831b921b1916179055565b82548015610fa1577ff2f3b6b9f2a3bdce56fa5fd5304960564a1d25405f97dec9260b1165ac728500999a500192610f8b846128b8565b81939154921b1b19169055558594878080610e8c565b8a634e487b7160e01b60005260316004526000fd5b8b634e487b7160e01b60005260116004526000fd5b5050610e8c565b6000918b84875416916040519485938492632e1a7d4d60e01b845260048401525af16000918161107a575b506110735750600085828554168b60405180948193631bfc726f60e21b83523060048401525af160009181611044575b5061103c575b505b8985610e4c565b935089611033565b9091508681813d831161106c575b61105c818361277c565b8101031261038c5751908b61102d565b503d611052565b9350611035565b9091508681813d83116110a2575b611092818361277c565b8101031261038c5751908b610ffd565b503d611088565b604051631b92e95360e31b8152600490fd5b3461038c57600036600319011261038c576020600f54604051908152f35b3461038c57600036600319011261038c576110f2612905565b60ff80601254161561129e57600c54610e1081018091116112885742106112765760068054611120816130b3565b906000805b8281106112265750801580156111b2575b50505060005b82548110156111a4578061115261117f926128b8565b60018060a01b0391549060031b1c16806000526020600781528660406000205416611184575b5050613106565b61113c565b600d9061119184876133ea565b5192600052526040600020558580611178565b6111ac61350a565b42600c55005b611210576127100460005b8281101561113657806111d26111fa926128b8565b60018060a01b0391549060031b1c16600052600760205286604060002054166111ff57613106565b6111bd565b8261120a82876133ea565b52613106565b634e487b7160e01b600052601260045260246000fd5b61122f816128b8565b60018060a01b0391549060031b1c1660005260076020528560406000205416611261575b61125c90613106565b611125565b9061126e61125c91613106565b919050611253565b604051630a7d506f60e31b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60405163416aebb560e11b8152600490fd5b3461038c57600036600319011261038c576020604051600a8152f35b3461038c57600036600319011261038c5760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b3461038c57602036600319011261038c576001600160a01b036113286126c4565b1660005260086020526020604060002054604051908152f35b3461038c57602036600319011261038c576001600160a01b036113626126c4565b16600052600a60205260a06040600020805490600181015490600281015460056004830154920154926040519485526020850152604084015260608301526080820152f35b3461038c57600036600319011261038c5760206040516113888152f35b3461038c57600036600319011261038c57602060ff600154166040519015158152f35b3461038c57600036600319011261038c576020601154604051908152f35b3461038c57600036600319011261038c57602060405162093a808152f35b3461038c5760208060031936011261038c5761143d6126c4565b90606060e060405161144e8161272a565b600081526000848201526000604082015260008382015260006080820152600060a0820152600060c0820152015260018060a01b0380921660005260058152611553604060002091604051926114a38461272a565b84815416845260018101548285019081526002820154604086019081526003830154606087019081526004840154916080880192835260ff6005860154169360a089019415158552611503600760068801549760c08c019889520161279d565b9660e08a019788526040519a8b9a828c525116908a01525160408901525160608801525160808701525160a086015251151560c08501525160e08401525161010080840152610120830190612866565b0390f35b3461038c57608036600319011261038c576115706126c4565b6024356001600160401b03811161038c5761158f90369060040161288b565b90611598612c65565b6001600160a01b03831615611b69576001600160a01b03831660009081526007602052604090205460ff16611bef57600a6006541015611bdd57604435158015611bd1575b61085c5761138860643511611bbf576040516338d52e0f60e01b81526020816004816001600160a01b0388165afa60009181611b7b575b5061162b57604051632711b74d60e11b8152600490fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911603611b69576040516116698161272a565b6001600160a01b038416815260643560208201819052604082015260006060820152426080820152600160a082015260443560c08201526116a983612f4b565b6116b6604051918261277c565b838152368484011161038c578383602083013760006020858301015260e082015260018060a01b038416600052600560205260e060406000209160018060a01b038151166bffffffffffffffffffffffff60a01b845416178355602081015160018401556040810151600284015560608101516003840155608081015160048401556005830160a0820151151560ff8019835416911617905560c0810151600684015501518051906001600160401b0382116108465761177960078401546126f0565b601f8111611b29575b50602090601f8311600114611ab9576007929160009183611aae575b50508160011b916000199060031b1c1916179101555b6001600160a01b0383166000908152600760205260409020805460ff19166001179055600654600160401b8110156108465783610f358260016117fa94016006556128b8565b60018060a01b038316600052600d6020526064356040600020556040518060208101106001600160401b0360208301111761084657602081016040526000815260405161184681612746565b60008152602081019160008352604082016000815260608301918252426080840152600060a084015260018060a01b038716600052600a60205260406000209383518555516001850155516002840155518051906001600160401b03821161084657600160401b8211610846576020906003850154836003870155808410611a8e575b500160038401600052602060002060005b838110611a7a575050505060a08160806005930151600485015501519101556000806000600654905b8181106119995750508161196e575b50507fa60bb03b49d64a590d05814bbe4dc62875c4fe9a09567dc78c6de9ea38663b259161194d6040519283926060845260608401916130e5565b604435602083015260643560408301526001600160a01b03909416930390a2005b90611978916133fe565b60115410611987578380611912565b6040516373687cd760e11b8152600490fd5b6119a2816128b8565b60018060a01b0391549060031b1c16600052600760205260ff604060002054166119d5575b6119d090613106565b611903565b92611a726119d09160056020526020611a69604060002096610a98604051986119fd8a61272a565b80546001600160a01b03168a526001810154858b0152600281015460408b0152600381015460608b0152600481015460808b0152600581015460ff16151560a08b0152600681015460c08b0190815290611a599060070161279d565b60e08b015251848a015190612f2b565b95015190612f3e565b9390506119c7565b6001906020845194019381840155016118da565b611aa8906003870160005284846000209182019101613085565b886118c9565b01519050878061179e565b906007840160005260206000209160005b601f1985168110611b115750918391600193600795601f19811610611af8575b505050811b019101556117b4565b015160001960f88460031b161c19169055878080611aea565b91926020600181928685015181550194019201611aca565b611b5990600785016000526020600020601f850160051c81019160208610611b5f575b601f0160051c0190613085565b86611782565b9091508190611b4c565b604051632711b74d60e11b8152600490fd5b9091506020813d602011611bb7575b81611b976020938361277c565b8101031261038c57516001600160a01b038116810361038c579085611614565b3d9150611b8a565b6040516305d7ba1960e11b8152600490fd5b50600a604435116115dd565b604051631f62ca4f60e21b8152600490fd5b60405163c45546f760e01b8152600490fd5b3461038c57600036600319011261038c57611c1a612b20565b611c22613122565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461038c57600036600319011261038c5760206040517fccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f468152f35b3461038c57600036600319011261038c576010546040516001600160a01b039091168152602090f35b3461038c57600036600319011261038c57611cd7612b20565b60015460ff811615611d165760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461038c57600036600319011261038c576020600454604051908152f35b3461038c57602036600319011261038c576001600160a01b0380611d926126c4565b1660005260056020526040600020908154166115536001830154926002810154906003810154600482015460ff60058401541691611dd760076006860154950161279d565b9460405198899889526020890152604088015260608701526080860152151560a085015260c08401526101008060e0850152830190612866565b3461038c57600036600319011261038c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461038c57604036600319011261038c57611e6f6126da565b336001600160a01b03821603611e8b5761045890600435612eb5565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461038c57608036600319011261038c576004356044356001600160a01b038116906024359082900361038c576064359283151580940361038c57611f2b612b20565b6103e881118015611f72575b61085c57821561085c57600e55600f556bffffffffffffffffffffffff60a01b601054161760105560ff801960125416911617601255600080f35b506107d08211611f37565b3461038c57604036600319011261038c57600435611f996126da565b816000526002602052611fb3600160406000200154612daa565b81600052600260205260406000209060018060a01b0316908160005260205260ff6040600020541615611fe257005b8160005260026020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b3461038c5760208060031936011261038c5760043561204d613166565b801561085c573360005260088252806040600020541061227557612070816134f5565b8060005b60065481108061226c575b156121c85761208d816128b8565b60018060a09493941b03809354600392831b1c166000526007875260ff604060002054166120c6575b506120c19150613106565b612074565b60058752604060002092876127106120e2600187015489612f2b565b049285019283548088106000146121c35750865b808210156121bb5750915b8261210f575b5050506120b6565b600094955416602460405180968193632e1a7d4d60e01b83528660048401525af16000938161218c575b5061214a575050506120c190613106565b918161216b61217b946120c196979454908181106000146121855790613115565b9055818110156121855790613115565b9186808781612107565b5080613115565b9093508881813d83116121b4575b6121a4818361277c565b8101031261038c57519289612139565b503d61219a565b905091612101565b6120f6565b505090336000526008835260406000206121e3828254613115565b90556121f181600454613115565b60045561220082600354613115565b60035561222e82337f0000000000000000000000000000000000000000000000000000000000000000613385565b60405190828252838201527fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb60403392a26001600055604051908152f35b5081151561207f565b604051631e9acf1760e31b8152600490fd5b3461038c57602036600319011261038c576001600160a01b036122a86126c4565b166000526007602052602060ff604060002054166040519015158152f35b3461038c57604036600319011261038c576001600160401b0360043581811161038c576122f7903690600401612694565b9160243590811161038c57612310903690600401612694565b92909161231b612905565b600c54610e1081018091116112885742106112765783820361085c576000805b8581106125365750600080600654905b8181106124e55750508303611bbf5761271003611bbf5761236b826130b3565b9360005b8381106124aa575060005b838110612466575061238a61350a565b42600c55604051928060808501608086525260a0840192906000905b80821061243c575050506020918381038385015282808751928381520196019060005b8181106124285750505082850360408401528085526001600160fb1b03811161038c577f7255fc1a6ed23f2388aeff823d30ab1eefc7cb342f1481762f8e7bada20c5f2993839160051b809184880137426060830152339501030190a2005b8251885296840196918401916001016123c9565b90919384359060018060a01b03821680920361038c576001918152602080910195019201906123a6565b806124756124a59284886133c6565b356001600160a01b0361249161248c8489896133c6565b6133d6565b16600052600d602052604060002055613106565b61237a565b6124e0906001600160a01b036124c461248c8388886133c6565b16600052600560205260016040600020015461120a82896133ea565b61236f565b6124ee816128b8565b60018060a01b0391549060031b1c16600052600760205260ff60406000205416612521575b61251c90613106565b61234b565b9161252e61251c91613106565b929050612513565b906001600160a01b0361254d61248c8487876133c6565b16600052600760205260ff60406000205416156110a9576113886125728388886133c6565b3511611bbf576125916125979161258a8489896133c6565b3590612f3e565b91613106565b61233b565b3461038c57602036600319011261038c5760043560005260026020526020600160406000200154604051908152f35b3461038c57600036600319011261038c576020600c54604051908152f35b3461038c57602036600319011261038c5760206104786004356134f5565b3461038c57602036600319011261038c5760043563ffffffff60e01b811680910361038c57602090637965db0b60e01b811490811561264c575b506040519015158152f35b6301ffc9a760e01b14905082612641565b3461038c57600036600319011261038c576020906003548152f35b3461038c57600036600319011261038c57602060405160648152f35b9181601f8401121561038c578235916001600160401b03831161038c576020808501948460051b01011161038c57565b600435906001600160a01b038216820361038c57565b602435906001600160a01b038216820361038c57565b90600182811c92168015612720575b602083101461270a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916126ff565b61010081019081106001600160401b0382111761084657604052565b60c081019081106001600160401b0382111761084657604052565b608081019081106001600160401b0382111761084657604052565b90601f801991011681019081106001600160401b0382111761084657604052565b90604051918260008254926127b1846126f0565b90818452600194858116908160001461282057506001146127dd575b50506127db9250038361277c565b565b9093915060005260209081600020936000915b8183106128085750506127db935082010138806127cd565b855488840185015294850194879450918301916127f0565b9150506127db94506020925060ff191682840152151560051b82010138806127cd565b60005b8381106128565750506000910152565b8181015183820152602001612846565b9060209161287f81518092818552858086019101612843565b601f01601f1916010190565b9181601f8401121561038c578235916001600160401b03831161038c576020838186019501011161038c57565b6006548110156128ef5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b634e487b7160e01b600052603260045260246000fd5b3360009081527fd190f20293c25cf866c072dd5acee973f736c2049fca83b655cd3f77af4eadae602090815260408083205490927fccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f469160ff16156129695750505050565b61297233612f77565b9184519061297f82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612a9e57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612843565b0103602881018752018561277c565b5192839262461bcd60e51b845260048401526024830190612866565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612ace8587612f66565b5360041c928015612ae4576000190191906129b0565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527fe5ebfa64fca8d502a8e50c1edffd2c31ef4dad5b396e65d9f397fb028f74abc5602090815260408083205490927fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759160ff1615612b845750505050565b612b8d33612f77565b91845190612b9a82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612c1f57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612c4f8587612f66565b5360041c928015612ae457600019019190612bcb565b3360009081527f5a10db7eb5fb087477f68987ff09c6ebb13410247d1a97126552f0c97385b266602090815260408083205490927f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b9160ff1615612cc95750505050565b612cd233612f77565b91845190612cdf82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612d6457505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d948587612f66565b5360041c928015612ae457600019019190612d10565b60009080825260209060028252604092838120338252835260ff848220541615612dd45750505050565b612ddd33612f77565b91845190612dea82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612e6f57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612e9f8587612f66565b5360041c928015612ae457600019019190612e1b565b906000918083526002602052604083209160018060a01b03169182845260205260ff604084205416612ee657505050565b8083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b8181029291811591840414171561128857565b9190820180921161128857565b6001600160401b03811161084657601f01601f191660200190565b9081518110156128ef570160200190565b60405190606082018281106001600160401b0382111761084657604052602a82526020820160403682378251156128ef576030905381516001908110156128ef57607860218401536029905b808211613017575050612fd35790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613070576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130468486612f66565b5360041c91801561305b576000190190612fc3565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b818110613090575050565b60008155600101613085565b6001600160401b0381116108465760051b60200190565b906130bd8261309c565b6130ca604051918261277c565b82815280926130db601f199161309c565b0190602036910137565b908060209392818452848401376000828201840152601f01601f1916010190565b60001981146112885760010190565b9190820391821161128857565b60ff6001541661312e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414613177576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b03169060405160408101908082106001600160401b038311176108465761324b916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d156132e8573d9161323083612f4b565b9261323e604051948561277c565b83523d868885013e6132ec565b8051918215918483156132bd575b5050509050156132665750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126132e4578201519081151582036132e1575080388084613259565b80fd5b5080fd5b6060915b9192901561334e5750815115613300575090565b3b156133095790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156133615750805190602001fd5b60405162461bcd60e51b815260206004820152908190612a58906024830190612866565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526127db916133c160648361277c565b6131bc565b91908110156128ef5760051b0190565b356001600160a01b038116810361038c5790565b80518210156128ef5760209160051b010190565b8115611210570490565b6003548015801561342b575b6134275760045461342492613435565b90565b5090565b5060045415613414565b9160001982840992828102928380861095039480860395146134e857848311156134ab578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b50509061342492506133fe565b60045480156134275760035461342492613435565b60005b6006548110156135725780613524613551926128b8565b60018060a01b0391549060031b1c16600052602060078152604060ff816000205416613556575050613106565b61350d565b600190600d835260058160002054935260002001553880611178565b5056fea264697066735822122079d5d7082309c0384cb5020fea1d6f9ca02c7024155079c594df970477bb61a364736f6c634300081400332f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","opcodes":"PUSH1 0xA0 CALLVALUE PUSH3 0x2F9 JUMPI PUSH1 0x1F PUSH3 0x38F5 CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP3 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP5 GT DUP4 DUP6 LT OR PUSH3 0x2FE JUMPI DUP2 PUSH1 0x60 SWAP3 DUP5 SWAP3 PUSH1 0x40 SWAP7 DUP8 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH3 0x2F9 JUMPI PUSH3 0x51 DUP2 PUSH3 0x314 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH3 0x6F DUP5 PUSH3 0x67 DUP6 DUP6 ADD PUSH3 0x314 JUMP JUMPDEST SWAP4 ADD PUSH3 0x314 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 SWAP5 DUP2 DUP7 SSTORE PUSH1 0xFF NOT SWAP3 DUP4 DUP4 SLOAD AND DUP4 SSTORE PUSH1 0xC8 PUSH1 0xE SSTORE PUSH2 0x3E8 PUSH1 0xF SSTORE PUSH1 0x5 PUSH1 0x11 SSTORE DUP3 DUP5 PUSH1 0x12 SLOAD AND OR PUSH1 0x12 SSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP6 AND DUP1 ISZERO DUP1 ISZERO PUSH3 0x2EE JUMPI JUMPDEST DUP1 ISZERO PUSH3 0x2E3 JUMPI JUMPDEST PUSH3 0x2D2 JUMPI PUSH1 0x80 MSTORE PUSH1 0x10 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 DUP7 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP6 DUP1 MSTORE PUSH1 0x2 DUP1 DUP3 MSTORE DUP8 DUP8 KECCAK256 SWAP6 SWAP1 SWAP5 AND DUP1 DUP8 MSTORE SWAP5 DUP2 MSTORE DUP7 DUP7 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH3 0x29D JUMPI JUMPDEST PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP1 DUP8 MSTORE DUP5 DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP7 DUP9 MSTORE DUP3 MSTORE PUSH1 0xFF DUP9 DUP9 KECCAK256 SLOAD AND ISZERO PUSH3 0x267 JUMPI JUMPDEST POP PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B DUP1 DUP8 MSTORE DUP5 DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP7 DUP9 MSTORE DUP3 MSTORE PUSH1 0xFF DUP9 DUP9 KECCAK256 SLOAD AND ISZERO PUSH3 0x231 JUMPI JUMPDEST POP PUSH32 0xCCC64574297998B6C3EDF6078CC5E01268465FF116954E3AF02FF3A70A730F46 SWAP4 DUP5 DUP8 MSTORE DUP1 DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP7 DUP9 MSTORE DUP3 MSTORE PUSH1 0xFF DUP9 DUP9 KECCAK256 SLOAD AND ISZERO PUSH3 0x1F9 JUMPI JUMPDEST DUP8 TIMESTAMP PUSH1 0xC SSTORE MLOAD PUSH2 0x35AB SWAP1 DUP2 PUSH3 0x32A DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x4FC ADD MSTORE DUP2 DUP2 PUSH2 0x628 ADD MSTORE DUP2 DUP2 PUSH2 0x785 ADD MSTORE DUP2 DUP2 PUSH2 0xD1F ADD MSTORE DUP2 DUP2 PUSH2 0x1635 ADD MSTORE DUP2 DUP2 PUSH2 0x1E27 ADD MSTORE PUSH2 0x220A ADD MSTORE RETURN JUMPDEST DUP5 DUP8 MSTORE DUP2 MSTORE DUP7 DUP7 KECCAK256 SWAP1 DUP6 DUP8 MSTORE MSTORE DUP6 DUP6 KECCAK256 SWAP2 DUP3 SLOAD AND OR SWAP1 SSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x38D5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE CALLER SWAP4 DUP1 LOG4 CODESIZE DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH3 0x1B3 JUMP JUMPDEST DUP1 DUP8 MSTORE DUP5 DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP7 DUP9 MSTORE DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE DUP6 CALLER SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x38D5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP10 DUP1 LOG4 CODESIZE PUSH3 0x174 JUMP JUMPDEST DUP1 DUP8 MSTORE DUP5 DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP7 DUP9 MSTORE DUP3 MSTORE DUP8 DUP8 KECCAK256 DUP4 DUP6 DUP3 SLOAD AND OR SWAP1 SSTORE DUP6 CALLER SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x38D5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP10 DUP1 LOG4 CODESIZE PUSH3 0x136 JUMP JUMPDEST DUP6 DUP1 MSTORE DUP4 DUP2 MSTORE DUP7 DUP7 KECCAK256 DUP6 DUP8 MSTORE DUP2 MSTORE DUP7 DUP7 KECCAK256 DUP3 DUP5 DUP3 SLOAD AND OR SWAP1 SSTORE CALLER DUP6 DUP8 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH3 0x38D5 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP2 DUP1 LOG4 PUSH3 0xF9 JUMP JUMPDEST DUP9 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP DUP6 DUP3 AND ISZERO PUSH3 0xB7 JUMP JUMPDEST POP DUP6 DUP8 AND ISZERO PUSH3 0xAF JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH3 0x2F9 JUMPI JUMP INVALID PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1E1D114 EQ PUSH2 0x265D JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2607 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x25E9 JUMPI DUP1 PUSH4 0xE7BD231 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x106B9CA1 EQ PUSH2 0x25CB JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x259C JUMPI DUP1 PUSH4 0x2BE01190 EQ PUSH2 0x22C6 JUMPI DUP1 PUSH4 0x2C178BD0 EQ PUSH2 0x2287 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x2030 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1F7D JUMPI DUP1 PUSH4 0x357AD7AD EQ PUSH2 0x1EE8 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1E56 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x1E11 JUMPI DUP1 PUSH4 0x39EBF823 EQ PUSH2 0x1D70 JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x1D52 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1CBE JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1C95 JUMPI DUP1 PUSH4 0x490B48F8 EQ PUSH2 0x1C5A JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x1C01 JUMPI DUP1 PUSH4 0x527F116F EQ PUSH2 0x1557 JUMPI DUP1 PUSH4 0x54192AD5 EQ PUSH2 0x1423 JUMPI DUP1 PUSH4 0x55282902 EQ PUSH2 0x1405 JUMPI DUP1 PUSH4 0x58D1D42A EQ PUSH2 0x13E7 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13C4 JUMPI DUP1 PUSH4 0x64D60A7D EQ PUSH2 0x13A7 JUMPI DUP1 PUSH4 0x6B5CC294 EQ PUSH2 0x1341 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1307 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x12CC JUMPI DUP1 PUSH4 0x767F06AE EQ PUSH2 0x12B0 JUMPI DUP1 PUSH4 0x7A6EFD47 EQ PUSH2 0x10D9 JUMPI DUP1 PUSH4 0x87788782 EQ PUSH2 0x10BB JUMPI DUP1 PUSH4 0x8EA447E6 EQ PUSH2 0xDC8 JUMPI DUP1 PUSH4 0x8ED955B9 EQ PUSH2 0xB48 JUMPI DUP1 PUSH4 0x8FAEE2A8 EQ PUSH2 0xB2B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xADE JUMPI DUP1 PUSH4 0x962CA496 EQ PUSH2 0x948 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x92C JUMPI DUP1 PUSH4 0xA267526B EQ PUSH2 0x8EA JUMPI DUP1 PUSH4 0xA5AC4DD1 EQ PUSH2 0x8C7 JUMPI DUP1 PUSH4 0xA6F7F5D6 EQ PUSH2 0x8A9 JUMPI DUP1 PUSH4 0xABCBE0B2 EQ PUSH2 0x86E JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xDCDF92FB EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xE8F8080C EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0xEF434D61 EQ PUSH2 0x391 JUMPI PUSH4 0xF51381DA EQ PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH2 0x254 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 PUSH1 0x40 MLOAD PUSH2 0x264 DUP2 PUSH2 0x2746 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 DUP6 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xA DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x2A0 DUP2 PUSH2 0x2746 JUMP JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 DUP4 ADD SLOAD SWAP3 DUP2 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x40 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP1 DUP10 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x379 JUMPI POP POP POP POP DUP2 PUSH2 0x2F4 SWAP2 SUB DUP3 PUSH2 0x277C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 PUSH1 0x80 DUP8 ADD SWAP5 DUP6 MSTORE ADD SLOAD SWAP4 PUSH1 0xA0 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP7 DUP4 DUP9 MSTORE PUSH1 0xE0 DUP9 ADD SWAP7 MLOAD DUP5 DUP10 ADD MSTORE MLOAD PUSH1 0x40 DUP9 ADD MSTORE MLOAD PUSH1 0x60 DUP8 ADD MSTORE MLOAD SWAP4 PUSH1 0xC0 PUSH1 0x80 DUP8 ADD MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH2 0x100 DUP8 ADD SWAP6 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x366 JUMPI DUP5 MLOAD PUSH1 0xA0 DUP10 ADD MSTORE DUP6 MLOAD PUSH1 0xC0 DUP10 ADD MSTORE DUP8 DUP8 SUB DUP9 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP9 ADD PUSH2 0x34B JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP7 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2678 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3B7 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x458 PUSH1 0x4 CALLDATALOAD PUSH2 0x438 PUSH2 0x26DA JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x453 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x2DAA JUMP JUMPDEST PUSH2 0x2EB5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH2 0x478 PUSH1 0x4 CALLDATALOAD PUSH2 0x3408 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x499 PUSH2 0x3166 JUMP JUMPDEST PUSH2 0x4A1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x85C JUMPI PUSH2 0x4B4 PUSH1 0x4 CALLDATALOAD PUSH2 0x3408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH1 0xA0 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x846 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x40 MSTORE PUSH32 0x0 PUSH2 0x31BC JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x539 DUP3 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x547 DUP2 PUSH1 0x4 SLOAD PUSH2 0x2F3E JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x558 PUSH1 0x4 CALLDATALOAD PUSH1 0x3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x803 JUMPI PUSH2 0x571 DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x5A7 JUMPI JUMPDEST PUSH2 0x5A2 SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2710 PUSH2 0x5C4 PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2F2B JUMP JUMPDEST DIV SWAP1 DUP2 ISZERO DUP1 ISZERO SWAP1 DUP2 PUSH2 0x5DA JUMPI JUMPDEST POP POP POP POP PUSH2 0x598 JUMP JUMPDEST SWAP1 PUSH2 0x762 JUMPI JUMPDEST ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x0 SWAP6 SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0x64C SWAP1 PUSH2 0x626 PUSH1 0x64 DUP3 PUSH2 0x277C JUMP JUMPDEST PUSH32 0x0 PUSH2 0x31BC JUMP JUMPDEST DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB6B55F25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP7 PUSH1 0x20 SWAP2 DUP9 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP6 DUP7 PUSH2 0x6D3 JUMPI JUMPDEST POP PUSH2 0x5A2 SWAP6 PUSH2 0x6BA JUMPI POP PUSH2 0x6B1 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x44 DUP2 MSTORE PUSH2 0x626 DUP2 PUSH2 0x2761 JUMP JUMPDEST DUP4 DUP1 DUP1 DUP1 PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x6CC SWAP3 POP PUSH1 0x3 SWAP2 POP ADD SWAP2 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6B1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x6F7 JUMPI JUMPDEST PUSH2 0x6E9 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI DUP8 PUSH2 0x680 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x7C5 JUMPI JUMPDEST POP ISZERO PUSH2 0x5E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x7EF JUMPI JUMPDEST DUP2 PUSH2 0x7E0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD DUP7 PUSH2 0x7BE JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP2 DUP4 DUP3 ADD MSTORE PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x12 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x38C JUMPI PUSH2 0x913 PUSH1 0x20 SWAP2 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP2 PUSH1 0x0 PUSH1 0x6 DUP1 SLOAD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x994 JUMPI PUSH1 0x20 DUP6 DUP8 DUP7 DUP2 PUSH2 0x983 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x98D SWAP3 POP PUSH2 0x33FE JUMP JUMPDEST DUP3 DUP1 PUSH2 0x979 JUMP JUMPDEST PUSH2 0x99D DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SWAP5 SWAP4 SWAP5 SHL SUB DUP1 SWAP4 SLOAD PUSH1 0x3 SWAP3 DUP4 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP1 DUP3 MSTORE PUSH1 0xFF SWAP1 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x9DF JUMPI JUMPDEST POP POP POP POP PUSH2 0x9DA SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST SWAP5 DUP3 SWAP2 PUSH2 0xA49 PUSH1 0x4 SWAP7 SWAP8 PUSH1 0x5 SWAP3 DUP4 DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0xA02 DUP7 PUSH2 0x272A JUMP JUMPDEST DUP7 DUP4 SLOAD AND DUP7 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP10 DUP9 DUP8 ADD SWAP11 DUP12 MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP9 ADD MSTORE DUP4 ADD SLOAD PUSH1 0x60 DUP8 ADD MSTORE DUP11 DUP4 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE DUP3 ADD SLOAD AND ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE DUP11 DUP2 ADD SLOAD PUSH1 0xC0 DUP6 ADD MSTORE ADD PUSH2 0x279D JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE MLOAD AND PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0xAAE JUMPI JUMPDEST POP POP PUSH2 0xA7F JUMPI POP POP PUSH2 0x9DA SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0xA9E PUSH2 0x9DA SWAP4 SWAP9 SWAP7 PUSH2 0xA98 PUSH2 0xAA4 SWAP5 MLOAD DUP1 SWAP5 PUSH2 0x2F2B JUMP JUMPDEST SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP6 PUSH2 0x2F3E JUMP JUMPDEST SWAP6 DUP8 DUP1 DUP1 DUP1 PUSH2 0x9CC JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP5 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xAD7 JUMPI JUMPDEST PUSH2 0xAC6 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP2 DUP10 DUP1 PUSH2 0xA6E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xABC JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xAF7 PUSH2 0x26DA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE10 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xB61 PUSH2 0x3166 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP3 LT ISZERO PUSH2 0xCA3 JUMPI PUSH2 0xB78 DUP3 PUSH2 0x28B8 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP4 PUSH1 0x7 DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0xBB7 JUMPI JUMPDEST POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0xB65 JUMP JUMPDEST DUP5 PUSH1 0x0 SWAP2 PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xE8D991D1 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC74 JUMPI JUMPDEST POP PUSH2 0xBF5 JUMPI POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP PUSH2 0x3106 JUMP JUMPDEST DUP1 PUSH2 0xC0B JUMPI JUMPDEST POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP DUP3 SWAP2 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 DUP2 PUSH2 0xC3C PUSH32 0xF343DFC1E44C65296FB907B287E6E12133EB7945BA79EC463D65EF129757C2FF SWAP4 PUSH2 0xBB1 SWAP8 PUSH2 0x2F3E JUMP JUMPDEST SWAP7 DUP5 PUSH1 0x0 MSTORE PUSH1 0xA DUP1 DUP3 MSTORE DUP4 PUSH1 0x0 KECCAK256 PUSH2 0xC55 DUP5 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE DUP6 PUSH1 0x0 MSTORE DUP2 MSTORE DUP3 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG2 DUP3 SWAP2 DUP5 PUSH2 0xBFB JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC9C JUMPI JUMPDEST PUSH2 0xC8C DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP7 PUSH2 0xBE3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC82 JUMP JUMPDEST PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xB DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xCC3 DUP3 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE DUP1 ISZERO ISZERO DUP1 PUSH2 0xCDC JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0xF SLOAD SWAP1 DUP2 ISZERO ISZERO SWAP1 DUP2 PUSH2 0xDC0 JUMPI JUMPDEST POP ISZERO PUSH2 0xCCE JUMPI PUSH2 0xCFD PUSH2 0x2710 SWAP2 DUP4 PUSH2 0x2F2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP2 DIV SWAP1 PUSH32 0x0 SWAP1 DUP6 DUP2 PUSH1 0x24 DUP2 DUP8 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xD93 JUMPI JUMPDEST POP DUP3 DUP1 ISZERO ISZERO SWAP2 DUP3 PUSH2 0xD88 JUMPI JUMPDEST POP POP PUSH2 0xD72 JUMPI JUMPDEST POP POP PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD80 SWAP3 PUSH1 0x10 SLOAD AND SWAP1 PUSH2 0x3385 JUMP JUMPDEST DUP3 DUP1 DUP1 PUSH2 0xD6B JUMP JUMPDEST LT ISZERO SWAP1 POP DUP3 DUP8 PUSH2 0xD64 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xDB9 JUMPI JUMPDEST PUSH2 0xDAA DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD DUP7 PUSH2 0xD58 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0xCEA JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xDE1 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH2 0xE02 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x288B JUMP JUMPDEST PUSH2 0xE0A PUSH2 0x2C65 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x7 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10A9 JUMPI DUP5 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 PUSH1 0x3 SWAP1 DUP2 DUP4 ADD SLOAD DUP6 DUP2 PUSH2 0xFD2 JUMPI JUMPDEST POP POP DUP8 PUSH1 0x0 MSTORE PUSH1 0x7 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT SWAP1 DUP2 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x5 DUP5 ADD SWAP1 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0x1 DUP1 SWAP5 ADD SSTORE PUSH1 0xD DUP6 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE DUP3 PUSH1 0x0 SWAP1 JUMPDEST PUSH2 0xED2 JUMPI JUMPDEST DUP9 PUSH32 0xF2F3B6B9F2A3BDCE56FA5FD5304960564A1D25405F97DEC9260B1165AC728500 DUP10 DUP10 DUP10 DUP10 PUSH2 0xEC9 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 PUSH2 0x30E5 JUMP JUMPDEST SWAP2 DUP4 ADD MSTORE SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP1 DUP4 LT ISZERO PUSH2 0xFCB JUMPI DUP11 DUP5 PUSH2 0xEE9 DUP6 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP9 SHL SHR AND EQ PUSH2 0xF06 JUMPI POP POP PUSH2 0xF00 SWAP1 PUSH2 0x3106 JUMP JUMPDEST DUP4 PUSH2 0xE87 JUMP JUMPDEST SWAP4 SWAP5 POP SWAP3 PUSH1 0x0 NOT SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 GT PUSH2 0xFB6 JUMPI PUSH2 0xF35 DUP5 PUSH2 0xF28 PUSH2 0xF54 SWAP5 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP10 SHL SHR AND SWAP2 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST DUP3 SLOAD DUP1 ISZERO PUSH2 0xFA1 JUMPI PUSH32 0xF2F3B6B9F2A3BDCE56FA5FD5304960564A1D25405F97DEC9260B1165AC728500 SWAP10 SWAP11 POP ADD SWAP3 PUSH2 0xF8B DUP5 PUSH2 0x28B8 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP3 SHL SHL NOT AND SWAP1 SSTORE SSTORE DUP6 SWAP5 DUP8 DUP1 DUP1 PUSH2 0xE8C JUMP JUMPDEST DUP11 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP12 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP12 DUP5 DUP8 SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x107A JUMPI JUMPDEST POP PUSH2 0x1073 JUMPI POP PUSH1 0x0 DUP6 DUP3 DUP6 SLOAD AND DUP12 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1BFC726F PUSH1 0xE2 SHL DUP4 MSTORE ADDRESS PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1044 JUMPI JUMPDEST POP PUSH2 0x103C JUMPI JUMPDEST POP JUMPDEST DUP10 DUP6 PUSH2 0xE4C JUMP JUMPDEST SWAP4 POP DUP10 PUSH2 0x1033 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x106C JUMPI JUMPDEST PUSH2 0x105C DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP12 PUSH2 0x102D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1052 JUMP JUMPDEST SWAP4 POP PUSH2 0x1035 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x10A2 JUMPI JUMPDEST PUSH2 0x1092 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP12 PUSH2 0xFFD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B92E953 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xF SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x10F2 PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xFF DUP1 PUSH1 0x12 SLOAD AND ISZERO PUSH2 0x129E JUMPI PUSH1 0xC SLOAD PUSH2 0xE10 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1288 JUMPI TIMESTAMP LT PUSH2 0x1276 JUMPI PUSH1 0x6 DUP1 SLOAD PUSH2 0x1120 DUP2 PUSH2 0x30B3 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x1226 JUMPI POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x11B2 JUMPI JUMPDEST POP POP POP PUSH1 0x0 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x11A4 JUMPI DUP1 PUSH2 0x1152 PUSH2 0x117F SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x7 DUP2 MSTORE DUP7 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1184 JUMPI JUMPDEST POP POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x113C JUMP JUMPDEST PUSH1 0xD SWAP1 PUSH2 0x1191 DUP5 DUP8 PUSH2 0x33EA JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE DUP6 DUP1 PUSH2 0x1178 JUMP JUMPDEST PUSH2 0x11AC PUSH2 0x350A JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE STOP JUMPDEST PUSH2 0x1210 JUMPI PUSH2 0x2710 DIV PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1136 JUMPI DUP1 PUSH2 0x11D2 PUSH2 0x11FA SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP7 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x11FF JUMPI PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x11BD JUMP JUMPDEST DUP3 PUSH2 0x120A DUP3 DUP8 PUSH2 0x33EA JUMP JUMPDEST MSTORE PUSH2 0x3106 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x122F DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP6 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1261 JUMPI JUMPDEST PUSH2 0x125C SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST SWAP1 PUSH2 0x126E PUSH2 0x125C SWAP2 PUSH2 0x3106 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA7D506F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x416AEBB5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xA DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1328 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1362 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xA0 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x5 PUSH1 0x4 DUP4 ADD SLOAD SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1388 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH2 0x143D PUSH2 0x26C4 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0xE0 PUSH1 0x40 MLOAD PUSH2 0x144E DUP2 PUSH2 0x272A JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP5 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH2 0x1553 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14A3 DUP5 PUSH2 0x272A JUMP JUMPDEST DUP5 DUP2 SLOAD AND DUP5 MSTORE PUSH1 0x1 DUP2 ADD SLOAD DUP3 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP5 ADD SLOAD SWAP2 PUSH1 0x80 DUP9 ADD SWAP3 DUP4 MSTORE PUSH1 0xFF PUSH1 0x5 DUP7 ADD SLOAD AND SWAP4 PUSH1 0xA0 DUP10 ADD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH2 0x1503 PUSH1 0x7 PUSH1 0x6 DUP9 ADD SLOAD SWAP8 PUSH1 0xC0 DUP13 ADD SWAP9 DUP10 MSTORE ADD PUSH2 0x279D JUMP JUMPDEST SWAP7 PUSH1 0xE0 DUP11 ADD SWAP8 DUP9 MSTORE PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP11 DUP3 DUP13 MSTORE MLOAD AND SWAP1 DUP11 ADD MSTORE MLOAD PUSH1 0x40 DUP10 ADD MSTORE MLOAD PUSH1 0x60 DUP9 ADD MSTORE MLOAD PUSH1 0x80 DUP8 ADD MSTORE MLOAD PUSH1 0xA0 DUP7 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE MLOAD PUSH1 0xE0 DUP5 ADD MSTORE MLOAD PUSH2 0x100 DUP1 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1570 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x158F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x288B JUMP JUMPDEST SWAP1 PUSH2 0x1598 PUSH2 0x2C65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1B69 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1BEF JUMPI PUSH1 0xA PUSH1 0x6 SLOAD LT ISZERO PUSH2 0x1BDD JUMPI PUSH1 0x44 CALLDATALOAD ISZERO DUP1 ISZERO PUSH2 0x1BD1 JUMPI JUMPDEST PUSH2 0x85C JUMPI PUSH2 0x1388 PUSH1 0x64 CALLDATALOAD GT PUSH2 0x1BBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x38D52E0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1B7B JUMPI JUMPDEST POP PUSH2 0x162B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND SUB PUSH2 0x1B69 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1669 DUP2 PUSH2 0x272A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x16A9 DUP4 PUSH2 0x2F4B JUMP JUMPDEST PUSH2 0x16B6 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x277C JUMP JUMPDEST DUP4 DUP2 MSTORE CALLDATASIZE DUP5 DUP5 ADD GT PUSH2 0x38C JUMPI DUP4 DUP4 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0xE0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP5 SLOAD AND OR DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x5 DUP4 ADD PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x846 JUMPI PUSH2 0x1779 PUSH1 0x7 DUP5 ADD SLOAD PUSH2 0x26F0 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1B29 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1AB9 JUMPI PUSH1 0x7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x1AAE JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x846 JUMPI DUP4 PUSH2 0xF35 DUP3 PUSH1 0x1 PUSH2 0x17FA SWAP5 ADD PUSH1 0x6 SSTORE PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD GT OR PUSH2 0x846 JUMPI PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1846 DUP2 PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP3 MSTORE TIMESTAMP PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 DUP4 MLOAD DUP6 SSTORE MLOAD PUSH1 0x1 DUP6 ADD SSTORE MLOAD PUSH1 0x2 DUP5 ADD SSTORE MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x846 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x846 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 DUP6 ADD SLOAD DUP4 PUSH1 0x3 DUP8 ADD SSTORE DUP1 DUP5 LT PUSH2 0x1A8E JUMPI JUMPDEST POP ADD PUSH1 0x3 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1A7A JUMPI POP POP POP POP PUSH1 0xA0 DUP2 PUSH1 0x80 PUSH1 0x5 SWAP4 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1999 JUMPI POP POP DUP2 PUSH2 0x196E JUMPI JUMPDEST POP POP PUSH32 0xA60BB03B49D64A590D05814BBE4DC62875C4FE9A09567DC78C6DE9EA38663B25 SWAP2 PUSH2 0x194D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x60 DUP5 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 PUSH2 0x30E5 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SUB SWAP1 LOG2 STOP JUMPDEST SWAP1 PUSH2 0x1978 SWAP2 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x11 SLOAD LT PUSH2 0x1987 JUMPI DUP4 DUP1 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x73687CD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x19A2 DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x19D5 JUMPI JUMPDEST PUSH2 0x19D0 SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x1903 JUMP JUMPDEST SWAP3 PUSH2 0x1A72 PUSH2 0x19D0 SWAP2 PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x1A69 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP7 PUSH2 0xA98 PUSH1 0x40 MLOAD SWAP9 PUSH2 0x19FD DUP11 PUSH2 0x272A JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 MSTORE PUSH1 0x1 DUP2 ADD SLOAD DUP6 DUP12 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP12 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP12 ADD SWAP1 DUP2 MSTORE SWAP1 PUSH2 0x1A59 SWAP1 PUSH1 0x7 ADD PUSH2 0x279D JUMP JUMPDEST PUSH1 0xE0 DUP12 ADD MSTORE MLOAD DUP5 DUP11 ADD MLOAD SWAP1 PUSH2 0x2F2B JUMP JUMPDEST SWAP6 ADD MLOAD SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP4 SWAP1 POP PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP5 ADD SWAP4 DUP2 DUP5 ADD SSTORE ADD PUSH2 0x18DA JUMP JUMPDEST PUSH2 0x1AA8 SWAP1 PUSH1 0x3 DUP8 ADD PUSH1 0x0 MSTORE DUP5 DUP5 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3085 JUMP JUMPDEST DUP9 PUSH2 0x18C9 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x179E JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1B11 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x7 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x1AF8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x17B4 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1AEA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x1B59 SWAP1 PUSH1 0x7 DUP6 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x1B5F JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3085 JUMP JUMPDEST DUP7 PUSH2 0x1782 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1BB7 JUMPI JUMPDEST DUP2 PUSH2 0x1B97 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x38C JUMPI SWAP1 DUP6 PUSH2 0x1614 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5D7BA19 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xA PUSH1 0x44 CALLDATALOAD GT PUSH2 0x15DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1F62CA4F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC45546F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1C1A PUSH2 0x2B20 JUMP JUMPDEST PUSH2 0x1C22 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP2 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xCCC64574297998B6C3EDF6078CC5E01268465FF116954E3AF02FF3A70A730F46 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1CD7 PUSH2 0x2B20 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1D16 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1D92 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD AND PUSH2 0x1553 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x2 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xFF PUSH1 0x5 DUP5 ADD SLOAD AND SWAP2 PUSH2 0x1DD7 PUSH1 0x7 PUSH1 0x6 DUP7 ADD SLOAD SWAP6 ADD PUSH2 0x279D JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x100 DUP1 PUSH1 0xE0 DUP6 ADD MSTORE DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1E6F PUSH2 0x26DA JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1E8B JUMPI PUSH2 0x458 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x2EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x38C JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP4 ISZERO ISZERO DUP1 SWAP5 SUB PUSH2 0x38C JUMPI PUSH2 0x1F2B PUSH2 0x2B20 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT DUP1 ISZERO PUSH2 0x1F72 JUMPI JUMPDEST PUSH2 0x85C JUMPI DUP3 ISZERO PUSH2 0x85C JUMPI PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x10 SLOAD AND OR PUSH1 0x10 SSTORE PUSH1 0xFF DUP1 NOT PUSH1 0x12 SLOAD AND SWAP2 AND OR PUSH1 0x12 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST POP PUSH2 0x7D0 DUP3 GT PUSH2 0x1F37 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1F99 PUSH2 0x26DA JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x1FB3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x2DAA JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x1FE2 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x204D PUSH2 0x3166 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x85C JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x2275 JUMPI PUSH2 0x2070 DUP2 PUSH2 0x34F5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT DUP1 PUSH2 0x226C JUMPI JUMPDEST ISZERO PUSH2 0x21C8 JUMPI PUSH2 0x208D DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SWAP5 SWAP4 SWAP5 SHL SUB DUP1 SWAP4 SLOAD PUSH1 0x3 SWAP3 DUP4 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x20C6 JUMPI JUMPDEST POP PUSH2 0x20C1 SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x2074 JUMP JUMPDEST PUSH1 0x5 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 DUP8 PUSH2 0x2710 PUSH2 0x20E2 PUSH1 0x1 DUP8 ADD SLOAD DUP10 PUSH2 0x2F2B JUMP JUMPDEST DIV SWAP3 DUP6 ADD SWAP3 DUP4 SLOAD DUP1 DUP9 LT PUSH1 0x0 EQ PUSH2 0x21C3 JUMPI POP DUP7 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x21BB JUMPI POP SWAP2 JUMPDEST DUP3 PUSH2 0x210F JUMPI JUMPDEST POP POP POP PUSH2 0x20B6 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP6 SLOAD AND PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP4 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP4 MSTORE DUP7 PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP4 DUP2 PUSH2 0x218C JUMPI JUMPDEST POP PUSH2 0x214A JUMPI POP POP POP PUSH2 0x20C1 SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP2 DUP2 PUSH2 0x216B PUSH2 0x217B SWAP5 PUSH2 0x20C1 SWAP7 SWAP8 SWAP5 SLOAD SWAP1 DUP2 DUP2 LT PUSH1 0x0 EQ PUSH2 0x2185 JUMPI SWAP1 PUSH2 0x3115 JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP2 LT ISZERO PUSH2 0x2185 JUMPI SWAP1 PUSH2 0x3115 JUMP JUMPDEST SWAP2 DUP7 DUP1 DUP8 DUP2 PUSH2 0x2107 JUMP JUMPDEST POP DUP1 PUSH2 0x3115 JUMP JUMPDEST SWAP1 SWAP4 POP DUP9 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x21B4 JUMPI JUMPDEST PUSH2 0x21A4 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP3 DUP10 PUSH2 0x2139 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x219A JUMP JUMPDEST SWAP1 POP SWAP2 PUSH2 0x2101 JUMP JUMPDEST PUSH2 0x20F6 JUMP JUMPDEST POP POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x8 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x21E3 DUP3 DUP3 SLOAD PUSH2 0x3115 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x21F1 DUP2 PUSH1 0x4 SLOAD PUSH2 0x3115 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x2200 DUP3 PUSH1 0x3 SLOAD PUSH2 0x3115 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x222E DUP3 CALLER PUSH32 0x0 PUSH2 0x3385 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP3 DUP3 MSTORE DUP4 DUP3 ADD MSTORE PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0x207F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E9ACF17 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x22A8 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x22F7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2694 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x2310 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2694 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x231B PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0xE10 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1288 JUMPI TIMESTAMP LT PUSH2 0x1276 JUMPI DUP4 DUP3 SUB PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT PUSH2 0x2536 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x6 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x24E5 JUMPI POP POP DUP4 SUB PUSH2 0x1BBF JUMPI PUSH2 0x2710 SUB PUSH2 0x1BBF JUMPI PUSH2 0x236B DUP3 PUSH2 0x30B3 JUMP JUMPDEST SWAP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x24AA JUMPI POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2466 JUMPI POP PUSH2 0x238A PUSH2 0x350A JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP3 DUP1 PUSH1 0x80 DUP6 ADD PUSH1 0x80 DUP7 MSTORE MSTORE PUSH1 0xA0 DUP5 ADD SWAP3 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x243C JUMPI POP POP POP PUSH1 0x20 SWAP2 DUP4 DUP2 SUB DUP4 DUP6 ADD MSTORE DUP3 DUP1 DUP8 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2428 JUMPI POP POP POP DUP3 DUP6 SUB PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH32 0x7255FC1A6ED23F2388AEFF823D30AB1EEFC7CB342F1481762F8E7BADA20C5F29 SWAP4 DUP4 SWAP2 PUSH1 0x5 SHL DUP1 SWAP2 DUP5 DUP9 ADD CALLDATACOPY TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE CALLER SWAP6 ADD SUB ADD SWAP1 LOG2 STOP JUMPDEST DUP3 MLOAD DUP9 MSTORE SWAP7 DUP5 ADD SWAP7 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23C9 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 DUP5 CALLDATALOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND DUP1 SWAP3 SUB PUSH2 0x38C JUMPI PUSH1 0x1 SWAP2 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP2 ADD SWAP6 ADD SWAP3 ADD SWAP1 PUSH2 0x23A6 JUMP JUMPDEST DUP1 PUSH2 0x2475 PUSH2 0x24A5 SWAP3 DUP5 DUP9 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2491 PUSH2 0x248C DUP5 DUP10 DUP10 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x33D6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x237A JUMP JUMPDEST PUSH2 0x24E0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x24C4 PUSH2 0x248C DUP4 DUP9 DUP9 PUSH2 0x33C6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x120A DUP3 DUP10 PUSH2 0x33EA JUMP JUMPDEST PUSH2 0x236F JUMP JUMPDEST PUSH2 0x24EE DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x2521 JUMPI JUMPDEST PUSH2 0x251C SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x234B JUMP JUMPDEST SWAP2 PUSH2 0x252E PUSH2 0x251C SWAP2 PUSH2 0x3106 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x2513 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x254D PUSH2 0x248C DUP5 DUP8 DUP8 PUSH2 0x33C6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x1388 PUSH2 0x2572 DUP4 DUP9 DUP9 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD GT PUSH2 0x1BBF JUMPI PUSH2 0x2591 PUSH2 0x2597 SWAP2 PUSH2 0x258A DUP5 DUP10 DUP10 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP2 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x233B JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH2 0x478 PUSH1 0x4 CALLDATALOAD PUSH2 0x34F5 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x38C JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x264C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x2641 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x64 DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x38C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x38C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2720 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x270A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x26FF JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x27B1 DUP5 PUSH2 0x26F0 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2820 JUMPI POP PUSH1 0x1 EQ PUSH2 0x27DD JUMPI JUMPDEST POP POP PUSH2 0x27DB SWAP3 POP SUB DUP4 PUSH2 0x277C JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2808 JUMPI POP POP PUSH2 0x27DB SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x27CD JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x27F0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27DB SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x27CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2856 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2846 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x287F DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x38C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x38C JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x6 PUSH1 0x0 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xD190F20293C25CF866C072DD5ACEE973F736C2049FCA83B655CD3F77AF4EADAE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xCCC64574297998B6C3EDF6078CC5E01268465FF116954E3AF02FF3A70A730F46 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2969 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2972 CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x297F DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2A9E JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x2843 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x277C JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2ACE DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x29B0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xE5EBFA64FCA8D502A8E50C1EDFFD2C31EF4DAD5B396E65D9F397FB028F74ABC5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2B84 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2B8D CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2B9A DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2C1F JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2C4F DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2BCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5A10DB7EB5FB087477F68987FF09C6EBB13410247D1A97126552F0C97385B266 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2CC9 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2CD2 CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2CDF DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2D64 JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2D94 DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP4 MSTORE PUSH1 0xFF DUP5 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x2DD4 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2DDD CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2DEA DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2E6F JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2E9F DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2E1B JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x2EE6 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1288 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1288 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x846 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x28EF JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x28EF JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x3017 JUMPI POP POP PUSH2 0x2FD3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3070 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x3046 DUP5 DUP7 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x305B JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x2FC3 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3090 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3085 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x846 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x30BD DUP3 PUSH2 0x309C JUMP JUMPDEST PUSH2 0x30CA PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x277C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x30DB PUSH1 0x1F NOT SWAP2 PUSH2 0x309C JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1288 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1288 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH2 0x312E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x3177 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x846 JUMPI PUSH2 0x324B SWAP2 PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x32E8 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x3230 DUP4 PUSH2 0x2F4B JUMP JUMPDEST SWAP3 PUSH2 0x323E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x277C JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x32EC JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x32BD JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x3266 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x32E4 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x32E1 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x3259 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x334E JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3300 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x3309 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3361 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2A58 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x27DB SWAP2 PUSH2 0x33C1 PUSH1 0x64 DUP4 PUSH2 0x277C JUMP JUMPDEST PUSH2 0x31BC JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x38C JUMPI SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1210 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x342B JUMPI JUMPDEST PUSH2 0x3427 JUMPI PUSH1 0x4 SLOAD PUSH2 0x3424 SWAP3 PUSH2 0x3435 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP PUSH1 0x4 SLOAD ISZERO PUSH2 0x3414 JUMP JUMPDEST SWAP2 PUSH1 0x0 NOT DUP3 DUP5 MULMOD SWAP3 DUP3 DUP2 MUL SWAP3 DUP4 DUP1 DUP7 LT SWAP6 SUB SWAP5 DUP1 DUP7 SUB SWAP6 EQ PUSH2 0x34E8 JUMPI DUP5 DUP4 GT ISZERO PUSH2 0x34AB JUMPI DUP3 SWAP2 MULMOD PUSH1 0x1 DUP3 NOT ADD DUP3 AND DUP1 SWAP3 DIV PUSH1 0x2 DUP1 DUP3 PUSH1 0x3 MUL XOR DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 SWAP3 MUL SWAP1 SUB MUL SWAP4 PUSH1 0x1 DUP4 DUP1 PUSH1 0x0 SUB DIV ADD SWAP1 DUP5 DUP4 GT SWAP1 SUB MUL SWAP3 SUB DIV OR MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4D6174683A206D756C446976206F766572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP SWAP1 PUSH2 0x3424 SWAP3 POP PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP1 ISZERO PUSH2 0x3427 JUMPI PUSH1 0x3 SLOAD PUSH2 0x3424 SWAP3 PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x3572 JUMPI DUP1 PUSH2 0x3524 PUSH2 0x3551 SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x7 DUP2 MSTORE PUSH1 0x40 PUSH1 0xFF DUP2 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x3556 JUMPI POP POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x350D JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0xD DUP4 MSTORE PUSH1 0x5 DUP2 PUSH1 0x0 KECCAK256 SLOAD SWAP4 MSTORE PUSH1 0x0 KECCAK256 ADD SSTORE CODESIZE DUP1 PUSH2 0x1178 JUMP JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0xD5D7082309C0384CB5020FEA1D6F9CA02C7024155079C594DF97 DIV PUSH24 0xBB61A364736F6C634300081400332F8788117E7EFF1D82E9 0x26 0xEC PUSH26 0x4901D17C78024A50270940304540A733656F0D00000000000000 ","sourceMap":"894:32072:19:-:0;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;:::i;:::-;;-1:-1:-1;894:32072:19;;;;;;;;;;;;;3984:3;;894:32072;4040:4;;894:32072;4159:1;;894:32072;;;4232:4;894:32072;;;4232:4;894:32072;;;;;;;;;9994:20;;:44;;;;-1:-1:-1;9994:75:19;;;;-1:-1:-1;9990:128:19;;10128:22;;10160:28;894:32072;;-1:-1:-1;;;;;;894:32072:19;;;;;;;;;;;;;3130:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;1751:23:19;894:32072;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;1828:34:19;;894:32072;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;1910:28:19;;894:32072;;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;-1:-1:-1;10400:15:19;;10384:31;894:32072;;;;;;;;10128:22;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7665:149:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;734:10:10;7763:40:0;;;7665:149;;;;;;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;734:10:10;;7763:40:0;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;734:10:10;;7763:40:0;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;734:10:10;7763:40:0;;-1:-1:-1;;;;;;;;;;;7763:40:0;;;7665:149;;9990:128:19;894:32072;;-1:-1:-1;;;10092:15:19;;;;;9994:75;894:32072;;;;10042:27;9994:75;;:44;894:32072;;;;10018:20;9994:44;;894:32072;-1:-1:-1;894:32072:19;;;;;;-1:-1:-1;894:32072:19;;;;;-1:-1:-1;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;;;;;:::o"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":9946,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_43650":{"entryPoint":9924,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_array_address_dyn_calldata":{"entryPoint":9876,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_string_calldata":{"entryPoint":10379,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_address_uint256":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_string":{"entryPoint":10342,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":12517,"id":null,"parameterSlots":3,"returnSlots":1},"allocate_and_zero_memory_array_array_uint256_dyn":{"entryPoint":12467,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_array_uint256_dyn":{"entryPoint":12444,"id":null,"parameterSlots":1,"returnSlots":1},"array_allocation_size_bytes":{"entryPoint":12107,"id":null,"parameterSlots":1,"returnSlots":1},"calldata_array_index_access_address_dyn_calldata":{"entryPoint":13254,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_uint256":{"entryPoint":12094,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256":{"entryPoint":13310,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":12075,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":12565,"id":null,"parameterSlots":2,"returnSlots":1},"clear_storage_range_bytes1":{"entryPoint":12421,"id":null,"parameterSlots":2,"returnSlots":0},"copy_array_from_storage_to_memory_string":{"entryPoint":10141,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10307,"id":null,"parameterSlots":3,"returnSlots":0},"external_fun_MIN_STRATEGY_ALLOCATION":{"entryPoint":9848,"id":null,"parameterSlots":0,"returnSlots":0},"extract_byte_array_length":{"entryPoint":9968,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":10108,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_43661":{"entryPoint":10026,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_43665":{"entryPoint":10054,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_69064":{"entryPoint":10081,"id":null,"parameterSlots":1,"returnSlots":0},"fun_callOptionalReturn":{"entryPoint":12732,"id":1614,"parameterSlots":2,"returnSlots":0},"fun_checkRole":{"entryPoint":11690,"id":92,"parameterSlots":1,"returnSlots":0},"fun_checkRole_43648":{"entryPoint":10501,"id":92,"parameterSlots":0,"returnSlots":0},"fun_checkRole_43654":{"entryPoint":11040,"id":92,"parameterSlots":0,"returnSlots":0},"fun_checkRole_43660":{"entryPoint":11365,"id":92,"parameterSlots":0,"returnSlots":0},"fun_convertToAssets":{"entryPoint":13557,"id":7365,"parameterSlots":1,"returnSlots":1},"fun_convertToShares":{"entryPoint":13320,"id":7343,"parameterSlots":1,"returnSlots":1},"fun_executeRebalance":{"entryPoint":13578,"id":7631,"parameterSlots":0,"returnSlots":0},"fun_mulDiv":{"entryPoint":13365,"id":2868,"parameterSlots":3,"returnSlots":1},"fun_nonReentrantBefore":{"entryPoint":12646,"id":541,"parameterSlots":0,"returnSlots":0},"fun_requireNotPaused":{"entryPoint":12578,"id":452,"parameterSlots":0,"returnSlots":0},"fun_revokeRole":{"entryPoint":11957,"id":314,"parameterSlots":2,"returnSlots":0},"fun_safeTransfer":{"entryPoint":13189,"id":1320,"parameterSlots":3,"returnSlots":0},"fun_toHexString":{"entryPoint":12151,"id":2206,"parameterSlots":1,"returnSlots":1},"fun_verifyCallResultFromTarget":{"entryPoint":13036,"id":1948,"parameterSlots":4,"returnSlots":1},"increment_uint256":{"entryPoint":12550,"id":null,"parameterSlots":1,"returnSlots":1},"memory_array_index_access_bytes":{"entryPoint":12134,"id":null,"parameterSlots":2,"returnSlots":1},"memory_array_index_access_uint256_dyn":{"entryPoint":13290,"id":null,"parameterSlots":2,"returnSlots":1},"read_from_calldatat_address":{"entryPoint":13270,"id":null,"parameterSlots":1,"returnSlots":1},"storage_array_index_access_address_dyn":{"entryPoint":10424,"id":null,"parameterSlots":1,"returnSlots":2},"update_storage_value_address_to_address":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{"6198":[{"length":32,"start":1276},{"length":32,"start":1576},{"length":32,"start":1925},{"length":32,"start":3359},{"length":32,"start":5685},{"length":32,"start":7719},{"length":32,"start":8714}]},"linkReferences":{},"object":"608080604052600436101561001357600080fd5b60003560e01c90816301e1d1141461265d5750806301ffc9a71461260757806307a2d13a146125e95780630e7bd23114610391578063106b9ca1146125cb578063248a9ca31461259c5780632be01190146122c65780632c178bd0146122875780632e1a7d4d146120305780632f2ff15d14611f7d578063357ad7ad14611ee857806336568abe14611e5657806338d52e0f14611e1157806339ebf82314611d705780633a98ef3914611d525780633f4ba83a14611cbe5780634690484014611c95578063490b48f814611c5a57806351858e2714611c01578063527f116f1461155757806354192ad514611423578063552829021461140557806358d1d42a146113e75780635c975abb146113c457806364d60a7d146113a75780636b5cc2941461134157806370a082311461130757806375b238fc146112cc578063767f06ae146112b05780637a6efd47146110d957806387788782146110bb5780638ea447e614610dc85780638ed955b914610b485780638faee2a814610b2b57806391d1485414610ade578063962ca49614610948578063a217fddf1461092c578063a267526b146108ea578063a5ac4dd1146108c7578063a6f7f5d6146108a9578063abcbe0b21461086e578063b6b55f2514610480578063c6e6f5921461045a578063d547741f14610419578063dcdf92fb146103ed578063e1f1c4a7146103d0578063e8f8080c14610396578063ef434d61146103915763f51381da1461023a57600080fd5b3461038c5760208060031936011261038c576102546126c4565b600060a060405161026481612746565b8281528285820152826040820152606080820152826080820152015260018060a01b0316600052600a815260406000206040516102a081612746565b8154815260019283830154928183019384526002810154916040840192835260038201604051908183825491828152019160005283600020908960005b8281106103795750505050816102f491038261277c565b6060850190815260056004840154936080870194855201549360a086019485526040519683885260e08801965184890152516040880152516060870152519360c06080870152845180915281610100870195019160005b82811061036657845160a0890152855160c089015287870388f35b835187529581019592810192880161034b565b83548552938601939281019281016102dd565b600080fd5b612678565b3461038c57602036600319011261038c576001600160a01b036103b76126c4565b16600052600d6020526020604060002054604051908152f35b3461038c57600036600319011261038c5760206040516127108152f35b3461038c57602036600319011261038c57600435600052600b6020526020604060002054604051908152f35b3461038c57604036600319011261038c576104586004356104386126da565b90806000526002602052610453600160406000200154612daa565b612eb5565b005b3461038c57602036600319011261038c576020610478600435613408565b604051908152f35b3461038c57602036600319011261038c57610499613166565b6104a1613122565b6004351561085c576104b4600435613408565b6040516323b872dd60e01b602082015233602482015230604482015260043560648201526064815260a08101908082106001600160401b0383111761084657610520916040527f00000000000000000000000000000000000000000000000000000000000000006131bc565b3360005260086020526040600020610539828254612f3e565b905561054781600454612f3e565b600455610558600435600354612f3e565b60035560005b60065481101561080357610571816128b8565b60018060a01b0391549060031b1c169081600052600760205260ff604060002054166105a7575b6105a29150613106565b61055e565b600560205260406000206127106105c46001830154600435612f2b565b04908115801590816105da575b50505050610598565b90610762575b156106fe5760405163095ea7b360e01b602082018190526001600160a01b0386166024830152604480830185905282526000959092909161064c9061062660648261277c565b7f00000000000000000000000000000000000000000000000000000000000000006131bc565b805460405163b6b55f2560e01b8152600481018690529660209188916024918391906001600160a01b03165af195866106d3575b506105a2956106ba57506106b192506040519160208301526024820152600060448201526044815261062681612761565b838080806105d1565b6106cc92506003915001918254612f3e565b90556106b1565b602090813d83116106f7575b6106e9818361277c565b8101031261038c5787610680565b503d6106df565b60405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b6064820152608490fd5b50604051636eb1769f60e11b8152306004820152602481018590526020816044817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa9081156107f7576000916107c5575b50156105e0565b90506020813d6020116107ef575b816107e06020938361277c565b8101031261038c5751866107be565b3d91506107d3565b6040513d6000823e3d90fd5b602082604051600435815281838201527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1560403392a26001600055604051908152f35b634e487b7160e01b600052604160045260246000fd5b60405163162908e360e11b8152600490fd5b3461038c57600036600319011261038c5760206040517f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b8152f35b3461038c57600036600319011261038c576020600e54604051908152f35b3461038c57600036600319011261038c57602060ff601254166040519015158152f35b3461038c57602036600319011261038c5760043560065481101561038c576109136020916128b8565b905460405160039290921b1c6001600160a01b03168152f35b3461038c57600036600319011261038c57602060405160008152f35b3461038c57600036600319011261038c57600080600091600060068054915b82811061099457602085878681610983575b5050604051908152f35b61098d92506133fe565b8280610979565b61099d816128b8565b60018060a09493941b03809354600392831b1c16600052600760209080825260ff9081604060002054166109df575b505050506109da9150613106565b610967565b948291610a496004969760059283865260406000209060405194610a028661272a565b8683541686526001830154998887019a8b526002840154604088015283015460608701528a830154608087015282015416151560a08501528a81015460c08501520161279d565b60e0820152511660405194858092634b16524b60e11b82525afa928391600094610aae575b5050610a7f5750506109da90613106565b90610a9e6109da939896610a98610aa494518094612f2b565b90612f3e565b95612f3e565b95878080806109cc565b9080929450813d8311610ad7575b610ac6818361277c565b8101031261038c5751918980610a6e565b503d610abc565b3461038c57604036600319011261038c57610af76126da565b600435600052600260205260406000209060018060a01b0316600052602052602060ff604060002054166040519015158152f35b3461038c57600036600319011261038c576020604051610e108152f35b3461038c57600036600319011261038c57610b61613166565b6000805b600654821015610ca357610b78826128b8565b929060018060a01b03938491549060031b1c16806000526020936007855260ff60406000205416610bb7575b5050610bb1919250613106565b90610b65565b846000916005825260408320541660046040518094819363e8d991d160e01b83525af160009181610c74575b50610bf5575050610bb1919250613106565b80610c0b575b5050610bb1919250829184610ba4565b604081610c3c7ff343dfc1e44c65296fb907b287e6e12133eb7945ba79ec463d65ef129757c2ff93610bb197612f3e565b9684600052600a80825283600020610c55848254612f3e565b90558560005281528260002054908351928352820152a2829184610bfb565b9091508581813d8311610c9c575b610c8c818361277c565b8101031261038c57519086610be3565b503d610c82565b620151804204600052602090600b82526040600020610cc3828254612f3e565b905580151580610cdc575b506001600055604051908152f35b600f54908115159081610dc0575b5015610cce57610cfd6127109183612f2b565b6040516370a0823160e01b81523060048201526001600160a01b0392909104907f00000000000000000000000000000000000000000000000000000000000000009085816024818786165afa9081156107f757600091610d93575b50828015159182610d88575b5050610d72575b5050610cce565b610d80926010541690613385565b828080610d6b565b101590508287610d64565b90508581813d8311610db9575b610daa818361277c565b8101031261038c575186610d58565b503d610da0565b905084610cea565b3461038c57604036600319011261038c57610de16126c4565b60249081356001600160401b03811161038c57610e0290369060040161288b565b610e0a612c65565b60018060a01b0380931692836000526020906007825260ff60406000205416156110a95784600052600582526040600020600091600390818301548581610fd2575b50508760005260078552604060002060ff1990818154169055600584019081541690556000600180940155600d855260006040812055826000905b610ed2575b887ff2f3b6b9f2a3bdce56fa5fd5304960564a1d25405f97dec9260b1165ac72850089898989610ec96040519485946040865260408601916130e5565b918301520390a2005b6006805480831015610fcb578a84610ee9856128b8565b905490881b1c1614610f06575050610f0090613106565b83610e87565b9394509260001991828201918211610fb657610f3584610f28610f54946128b8565b905490891b1c16916128b8565b90919082549060031b9160018060a01b03809116831b921b1916179055565b82548015610fa1577ff2f3b6b9f2a3bdce56fa5fd5304960564a1d25405f97dec9260b1165ac728500999a500192610f8b846128b8565b81939154921b1b19169055558594878080610e8c565b8a634e487b7160e01b60005260316004526000fd5b8b634e487b7160e01b60005260116004526000fd5b5050610e8c565b6000918b84875416916040519485938492632e1a7d4d60e01b845260048401525af16000918161107a575b506110735750600085828554168b60405180948193631bfc726f60e21b83523060048401525af160009181611044575b5061103c575b505b8985610e4c565b935089611033565b9091508681813d831161106c575b61105c818361277c565b8101031261038c5751908b61102d565b503d611052565b9350611035565b9091508681813d83116110a2575b611092818361277c565b8101031261038c5751908b610ffd565b503d611088565b604051631b92e95360e31b8152600490fd5b3461038c57600036600319011261038c576020600f54604051908152f35b3461038c57600036600319011261038c576110f2612905565b60ff80601254161561129e57600c54610e1081018091116112885742106112765760068054611120816130b3565b906000805b8281106112265750801580156111b2575b50505060005b82548110156111a4578061115261117f926128b8565b60018060a01b0391549060031b1c16806000526020600781528660406000205416611184575b5050613106565b61113c565b600d9061119184876133ea565b5192600052526040600020558580611178565b6111ac61350a565b42600c55005b611210576127100460005b8281101561113657806111d26111fa926128b8565b60018060a01b0391549060031b1c16600052600760205286604060002054166111ff57613106565b6111bd565b8261120a82876133ea565b52613106565b634e487b7160e01b600052601260045260246000fd5b61122f816128b8565b60018060a01b0391549060031b1c1660005260076020528560406000205416611261575b61125c90613106565b611125565b9061126e61125c91613106565b919050611253565b604051630a7d506f60e31b8152600490fd5b634e487b7160e01b600052601160045260246000fd5b60405163416aebb560e11b8152600490fd5b3461038c57600036600319011261038c576020604051600a8152f35b3461038c57600036600319011261038c5760206040517fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217758152f35b3461038c57602036600319011261038c576001600160a01b036113286126c4565b1660005260086020526020604060002054604051908152f35b3461038c57602036600319011261038c576001600160a01b036113626126c4565b16600052600a60205260a06040600020805490600181015490600281015460056004830154920154926040519485526020850152604084015260608301526080820152f35b3461038c57600036600319011261038c5760206040516113888152f35b3461038c57600036600319011261038c57602060ff600154166040519015158152f35b3461038c57600036600319011261038c576020601154604051908152f35b3461038c57600036600319011261038c57602060405162093a808152f35b3461038c5760208060031936011261038c5761143d6126c4565b90606060e060405161144e8161272a565b600081526000848201526000604082015260008382015260006080820152600060a0820152600060c0820152015260018060a01b0380921660005260058152611553604060002091604051926114a38461272a565b84815416845260018101548285019081526002820154604086019081526003830154606087019081526004840154916080880192835260ff6005860154169360a089019415158552611503600760068801549760c08c019889520161279d565b9660e08a019788526040519a8b9a828c525116908a01525160408901525160608801525160808701525160a086015251151560c08501525160e08401525161010080840152610120830190612866565b0390f35b3461038c57608036600319011261038c576115706126c4565b6024356001600160401b03811161038c5761158f90369060040161288b565b90611598612c65565b6001600160a01b03831615611b69576001600160a01b03831660009081526007602052604090205460ff16611bef57600a6006541015611bdd57604435158015611bd1575b61085c5761138860643511611bbf576040516338d52e0f60e01b81526020816004816001600160a01b0388165afa60009181611b7b575b5061162b57604051632711b74d60e11b8152600490fd5b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116911603611b69576040516116698161272a565b6001600160a01b038416815260643560208201819052604082015260006060820152426080820152600160a082015260443560c08201526116a983612f4b565b6116b6604051918261277c565b838152368484011161038c578383602083013760006020858301015260e082015260018060a01b038416600052600560205260e060406000209160018060a01b038151166bffffffffffffffffffffffff60a01b845416178355602081015160018401556040810151600284015560608101516003840155608081015160048401556005830160a0820151151560ff8019835416911617905560c0810151600684015501518051906001600160401b0382116108465761177960078401546126f0565b601f8111611b29575b50602090601f8311600114611ab9576007929160009183611aae575b50508160011b916000199060031b1c1916179101555b6001600160a01b0383166000908152600760205260409020805460ff19166001179055600654600160401b8110156108465783610f358260016117fa94016006556128b8565b60018060a01b038316600052600d6020526064356040600020556040518060208101106001600160401b0360208301111761084657602081016040526000815260405161184681612746565b60008152602081019160008352604082016000815260608301918252426080840152600060a084015260018060a01b038716600052600a60205260406000209383518555516001850155516002840155518051906001600160401b03821161084657600160401b8211610846576020906003850154836003870155808410611a8e575b500160038401600052602060002060005b838110611a7a575050505060a08160806005930151600485015501519101556000806000600654905b8181106119995750508161196e575b50507fa60bb03b49d64a590d05814bbe4dc62875c4fe9a09567dc78c6de9ea38663b259161194d6040519283926060845260608401916130e5565b604435602083015260643560408301526001600160a01b03909416930390a2005b90611978916133fe565b60115410611987578380611912565b6040516373687cd760e11b8152600490fd5b6119a2816128b8565b60018060a01b0391549060031b1c16600052600760205260ff604060002054166119d5575b6119d090613106565b611903565b92611a726119d09160056020526020611a69604060002096610a98604051986119fd8a61272a565b80546001600160a01b03168a526001810154858b0152600281015460408b0152600381015460608b0152600481015460808b0152600581015460ff16151560a08b0152600681015460c08b0190815290611a599060070161279d565b60e08b015251848a015190612f2b565b95015190612f3e565b9390506119c7565b6001906020845194019381840155016118da565b611aa8906003870160005284846000209182019101613085565b886118c9565b01519050878061179e565b906007840160005260206000209160005b601f1985168110611b115750918391600193600795601f19811610611af8575b505050811b019101556117b4565b015160001960f88460031b161c19169055878080611aea565b91926020600181928685015181550194019201611aca565b611b5990600785016000526020600020601f850160051c81019160208610611b5f575b601f0160051c0190613085565b86611782565b9091508190611b4c565b604051632711b74d60e11b8152600490fd5b9091506020813d602011611bb7575b81611b976020938361277c565b8101031261038c57516001600160a01b038116810361038c579085611614565b3d9150611b8a565b6040516305d7ba1960e11b8152600490fd5b50600a604435116115dd565b604051631f62ca4f60e21b8152600490fd5b60405163c45546f760e01b8152600490fd5b3461038c57600036600319011261038c57611c1a612b20565b611c22613122565b600160ff19815416176001557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a1005b3461038c57600036600319011261038c5760206040517fccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f468152f35b3461038c57600036600319011261038c576010546040516001600160a01b039091168152602090f35b3461038c57600036600319011261038c57611cd7612b20565b60015460ff811615611d165760ff19166001557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a1005b60405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606490fd5b3461038c57600036600319011261038c576020600454604051908152f35b3461038c57602036600319011261038c576001600160a01b0380611d926126c4565b1660005260056020526040600020908154166115536001830154926002810154906003810154600482015460ff60058401541691611dd760076006860154950161279d565b9460405198899889526020890152604088015260608701526080860152151560a085015260c08401526101008060e0850152830190612866565b3461038c57600036600319011261038c576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b3461038c57604036600319011261038c57611e6f6126da565b336001600160a01b03821603611e8b5761045890600435612eb5565b60405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608490fd5b3461038c57608036600319011261038c576004356044356001600160a01b038116906024359082900361038c576064359283151580940361038c57611f2b612b20565b6103e881118015611f72575b61085c57821561085c57600e55600f556bffffffffffffffffffffffff60a01b601054161760105560ff801960125416911617601255600080f35b506107d08211611f37565b3461038c57604036600319011261038c57600435611f996126da565b816000526002602052611fb3600160406000200154612daa565b81600052600260205260406000209060018060a01b0316908160005260205260ff6040600020541615611fe257005b8160005260026020526040600020816000526020526040600020600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d600080a4005b3461038c5760208060031936011261038c5760043561204d613166565b801561085c573360005260088252806040600020541061227557612070816134f5565b8060005b60065481108061226c575b156121c85761208d816128b8565b60018060a09493941b03809354600392831b1c166000526007875260ff604060002054166120c6575b506120c19150613106565b612074565b60058752604060002092876127106120e2600187015489612f2b565b049285019283548088106000146121c35750865b808210156121bb5750915b8261210f575b5050506120b6565b600094955416602460405180968193632e1a7d4d60e01b83528660048401525af16000938161218c575b5061214a575050506120c190613106565b918161216b61217b946120c196979454908181106000146121855790613115565b9055818110156121855790613115565b9186808781612107565b5080613115565b9093508881813d83116121b4575b6121a4818361277c565b8101031261038c57519289612139565b503d61219a565b905091612101565b6120f6565b505090336000526008835260406000206121e3828254613115565b90556121f181600454613115565b60045561220082600354613115565b60035561222e82337f0000000000000000000000000000000000000000000000000000000000000000613385565b60405190828252838201527fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb60403392a26001600055604051908152f35b5081151561207f565b604051631e9acf1760e31b8152600490fd5b3461038c57602036600319011261038c576001600160a01b036122a86126c4565b166000526007602052602060ff604060002054166040519015158152f35b3461038c57604036600319011261038c576001600160401b0360043581811161038c576122f7903690600401612694565b9160243590811161038c57612310903690600401612694565b92909161231b612905565b600c54610e1081018091116112885742106112765783820361085c576000805b8581106125365750600080600654905b8181106124e55750508303611bbf5761271003611bbf5761236b826130b3565b9360005b8381106124aa575060005b838110612466575061238a61350a565b42600c55604051928060808501608086525260a0840192906000905b80821061243c575050506020918381038385015282808751928381520196019060005b8181106124285750505082850360408401528085526001600160fb1b03811161038c577f7255fc1a6ed23f2388aeff823d30ab1eefc7cb342f1481762f8e7bada20c5f2993839160051b809184880137426060830152339501030190a2005b8251885296840196918401916001016123c9565b90919384359060018060a01b03821680920361038c576001918152602080910195019201906123a6565b806124756124a59284886133c6565b356001600160a01b0361249161248c8489896133c6565b6133d6565b16600052600d602052604060002055613106565b61237a565b6124e0906001600160a01b036124c461248c8388886133c6565b16600052600560205260016040600020015461120a82896133ea565b61236f565b6124ee816128b8565b60018060a01b0391549060031b1c16600052600760205260ff60406000205416612521575b61251c90613106565b61234b565b9161252e61251c91613106565b929050612513565b906001600160a01b0361254d61248c8487876133c6565b16600052600760205260ff60406000205416156110a9576113886125728388886133c6565b3511611bbf576125916125979161258a8489896133c6565b3590612f3e565b91613106565b61233b565b3461038c57602036600319011261038c5760043560005260026020526020600160406000200154604051908152f35b3461038c57600036600319011261038c576020600c54604051908152f35b3461038c57602036600319011261038c5760206104786004356134f5565b3461038c57602036600319011261038c5760043563ffffffff60e01b811680910361038c57602090637965db0b60e01b811490811561264c575b506040519015158152f35b6301ffc9a760e01b14905082612641565b3461038c57600036600319011261038c576020906003548152f35b3461038c57600036600319011261038c57602060405160648152f35b9181601f8401121561038c578235916001600160401b03831161038c576020808501948460051b01011161038c57565b600435906001600160a01b038216820361038c57565b602435906001600160a01b038216820361038c57565b90600182811c92168015612720575b602083101461270a57565b634e487b7160e01b600052602260045260246000fd5b91607f16916126ff565b61010081019081106001600160401b0382111761084657604052565b60c081019081106001600160401b0382111761084657604052565b608081019081106001600160401b0382111761084657604052565b90601f801991011681019081106001600160401b0382111761084657604052565b90604051918260008254926127b1846126f0565b90818452600194858116908160001461282057506001146127dd575b50506127db9250038361277c565b565b9093915060005260209081600020936000915b8183106128085750506127db935082010138806127cd565b855488840185015294850194879450918301916127f0565b9150506127db94506020925060ff191682840152151560051b82010138806127cd565b60005b8381106128565750506000910152565b8181015183820152602001612846565b9060209161287f81518092818552858086019101612843565b601f01601f1916010190565b9181601f8401121561038c578235916001600160401b03831161038c576020838186019501011161038c57565b6006548110156128ef5760066000527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f0190600090565b634e487b7160e01b600052603260045260246000fd5b3360009081527fd190f20293c25cf866c072dd5acee973f736c2049fca83b655cd3f77af4eadae602090815260408083205490927fccc64574297998b6c3edf6078cc5e01268465ff116954e3af02ff3a70a730f469160ff16156129695750505050565b61297233612f77565b9184519061297f82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612a9e57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b8401917001034b99036b4b9b9b4b733903937b6329607d1b603784015251809386840190612843565b0103602881018752018561277c565b5192839262461bcd60e51b845260048401526024830190612866565b0390fd5b60648486519062461bcd60e51b825280600483015260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612ace8587612f66565b5360041c928015612ae4576000190191906129b0565b634e487b7160e01b82526011600452602482fd5b634e487b7160e01b83526032600452602483fd5b634e487b7160e01b81526032600452602490fd5b3360009081527fe5ebfa64fca8d502a8e50c1edffd2c31ef4dad5b396e65d9f397fb028f74abc5602090815260408083205490927fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c217759160ff1615612b845750505050565b612b8d33612f77565b91845190612b9a82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612c1f57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612c4f8587612f66565b5360041c928015612ae457600019019190612bcb565b3360009081527f5a10db7eb5fb087477f68987ff09c6ebb13410247d1a97126552f0c97385b266602090815260408083205490927f4170d100a3a3728ae51207936ee755ecaa64a7f6e9383c642ab204a136f90b1b9160ff1615612cc95750505050565b612cd233612f77565b91845190612cdf82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612d6457505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612d948587612f66565b5360041c928015612ae457600019019190612d10565b60009080825260209060028252604092838120338252835260ff848220541615612dd45750505050565b612ddd33612f77565b91845190612dea82612761565b60428252848201926060368537825115612b0c5760308453825190600191821015612b0c5790607860218501536041915b818311612e6f57505050612a5c576048612a58938693612a3c93612a2d985198899376020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8a860152612a04815180928c603789019101612843565b909192600f81166010811015612af8576f181899199a1a9b1b9c1cb0b131b232b360811b901a612e9f8587612f66565b5360041c928015612ae457600019019190612e1b565b906000918083526002602052604083209160018060a01b03169182845260205260ff604084205416612ee657505050565b8083526002602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a4565b8181029291811591840414171561128857565b9190820180921161128857565b6001600160401b03811161084657601f01601f191660200190565b9081518110156128ef570160200190565b60405190606082018281106001600160401b0382111761084657604052602a82526020820160403682378251156128ef576030905381516001908110156128ef57607860218401536029905b808211613017575050612fd35790565b606460405162461bcd60e51b815260206004820152602060248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152fd5b9091600f81166010811015613070576f181899199a1a9b1b9c1cb0b131b232b360811b901a6130468486612f66565b5360041c91801561305b576000190190612fc3565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b818110613090575050565b60008155600101613085565b6001600160401b0381116108465760051b60200190565b906130bd8261309c565b6130ca604051918261277c565b82815280926130db601f199161309c565b0190602036910137565b908060209392818452848401376000828201840152601f01601f1916010190565b60001981146112885760010190565b9190820391821161128857565b60ff6001541661312e57565b60405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606490fd5b600260005414613177576002600055565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b60018060a01b03169060405160408101908082106001600160401b038311176108465761324b916040526020938482527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564858301526000808587829751910182855af13d156132e8573d9161323083612f4b565b9261323e604051948561277c565b83523d868885013e6132ec565b8051918215918483156132bd575b5050509050156132665750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126132e4578201519081151582036132e1575080388084613259565b80fd5b5080fd5b6060915b9192901561334e5750815115613300575090565b3b156133095790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156133615750805190602001fd5b60405162461bcd60e51b815260206004820152908190612a58906024830190612866565b60405163a9059cbb60e01b60208201526001600160a01b039290921660248301526044808301939093529181526127db916133c160648361277c565b6131bc565b91908110156128ef5760051b0190565b356001600160a01b038116810361038c5790565b80518210156128ef5760209160051b010190565b8115611210570490565b6003548015801561342b575b6134275760045461342492613435565b90565b5090565b5060045415613414565b9160001982840992828102928380861095039480860395146134e857848311156134ab578291096001821901821680920460028082600302188083028203028083028203028083028203028083028203028083028203028092029003029360018380600003040190848311900302920304170290565b60405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606490fd5b50509061342492506133fe565b60045480156134275760035461342492613435565b60005b6006548110156135725780613524613551926128b8565b60018060a01b0391549060031b1c16600052602060078152604060ff816000205416613556575050613106565b61350d565b600190600d835260058160002054935260002001553880611178565b5056fea264697066735822122079d5d7082309c0384cb5020fea1d6f9ca02c7024155079c594df970477bb61a364736f6c63430008140033","opcodes":"PUSH1 0x80 DUP1 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT ISZERO PUSH2 0x13 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR SWAP1 DUP2 PUSH4 0x1E1D114 EQ PUSH2 0x265D JUMPI POP DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x2607 JUMPI DUP1 PUSH4 0x7A2D13A EQ PUSH2 0x25E9 JUMPI DUP1 PUSH4 0xE7BD231 EQ PUSH2 0x391 JUMPI DUP1 PUSH4 0x106B9CA1 EQ PUSH2 0x25CB JUMPI DUP1 PUSH4 0x248A9CA3 EQ PUSH2 0x259C JUMPI DUP1 PUSH4 0x2BE01190 EQ PUSH2 0x22C6 JUMPI DUP1 PUSH4 0x2C178BD0 EQ PUSH2 0x2287 JUMPI DUP1 PUSH4 0x2E1A7D4D EQ PUSH2 0x2030 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x1F7D JUMPI DUP1 PUSH4 0x357AD7AD EQ PUSH2 0x1EE8 JUMPI DUP1 PUSH4 0x36568ABE EQ PUSH2 0x1E56 JUMPI DUP1 PUSH4 0x38D52E0F EQ PUSH2 0x1E11 JUMPI DUP1 PUSH4 0x39EBF823 EQ PUSH2 0x1D70 JUMPI DUP1 PUSH4 0x3A98EF39 EQ PUSH2 0x1D52 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x1CBE JUMPI DUP1 PUSH4 0x46904840 EQ PUSH2 0x1C95 JUMPI DUP1 PUSH4 0x490B48F8 EQ PUSH2 0x1C5A JUMPI DUP1 PUSH4 0x51858E27 EQ PUSH2 0x1C01 JUMPI DUP1 PUSH4 0x527F116F EQ PUSH2 0x1557 JUMPI DUP1 PUSH4 0x54192AD5 EQ PUSH2 0x1423 JUMPI DUP1 PUSH4 0x55282902 EQ PUSH2 0x1405 JUMPI DUP1 PUSH4 0x58D1D42A EQ PUSH2 0x13E7 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x13C4 JUMPI DUP1 PUSH4 0x64D60A7D EQ PUSH2 0x13A7 JUMPI DUP1 PUSH4 0x6B5CC294 EQ PUSH2 0x1341 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1307 JUMPI DUP1 PUSH4 0x75B238FC EQ PUSH2 0x12CC JUMPI DUP1 PUSH4 0x767F06AE EQ PUSH2 0x12B0 JUMPI DUP1 PUSH4 0x7A6EFD47 EQ PUSH2 0x10D9 JUMPI DUP1 PUSH4 0x87788782 EQ PUSH2 0x10BB JUMPI DUP1 PUSH4 0x8EA447E6 EQ PUSH2 0xDC8 JUMPI DUP1 PUSH4 0x8ED955B9 EQ PUSH2 0xB48 JUMPI DUP1 PUSH4 0x8FAEE2A8 EQ PUSH2 0xB2B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0xADE JUMPI DUP1 PUSH4 0x962CA496 EQ PUSH2 0x948 JUMPI DUP1 PUSH4 0xA217FDDF EQ PUSH2 0x92C JUMPI DUP1 PUSH4 0xA267526B EQ PUSH2 0x8EA JUMPI DUP1 PUSH4 0xA5AC4DD1 EQ PUSH2 0x8C7 JUMPI DUP1 PUSH4 0xA6F7F5D6 EQ PUSH2 0x8A9 JUMPI DUP1 PUSH4 0xABCBE0B2 EQ PUSH2 0x86E JUMPI DUP1 PUSH4 0xB6B55F25 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xC6E6F592 EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x419 JUMPI DUP1 PUSH4 0xDCDF92FB EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0xE1F1C4A7 EQ PUSH2 0x3D0 JUMPI DUP1 PUSH4 0xE8F8080C EQ PUSH2 0x396 JUMPI DUP1 PUSH4 0xEF434D61 EQ PUSH2 0x391 JUMPI PUSH4 0xF51381DA EQ PUSH2 0x23A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH2 0x254 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xA0 PUSH1 0x40 MLOAD PUSH2 0x264 DUP2 PUSH2 0x2746 JUMP JUMPDEST DUP3 DUP2 MSTORE DUP3 DUP6 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP1 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0xA DUP2 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x40 MLOAD PUSH2 0x2A0 DUP2 PUSH2 0x2746 JUMP JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 SWAP3 DUP4 DUP4 ADD SLOAD SWAP3 DUP2 DUP4 ADD SWAP4 DUP5 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 PUSH1 0x40 DUP5 ADD SWAP3 DUP4 MSTORE PUSH1 0x3 DUP3 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 DUP4 DUP3 SLOAD SWAP2 DUP3 DUP2 MSTORE ADD SWAP2 PUSH1 0x0 MSTORE DUP4 PUSH1 0x0 KECCAK256 SWAP1 DUP10 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x379 JUMPI POP POP POP POP DUP2 PUSH2 0x2F4 SWAP2 SUB DUP3 PUSH2 0x277C JUMP JUMPDEST PUSH1 0x60 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x4 DUP5 ADD SLOAD SWAP4 PUSH1 0x80 DUP8 ADD SWAP5 DUP6 MSTORE ADD SLOAD SWAP4 PUSH1 0xA0 DUP7 ADD SWAP5 DUP6 MSTORE PUSH1 0x40 MLOAD SWAP7 DUP4 DUP9 MSTORE PUSH1 0xE0 DUP9 ADD SWAP7 MLOAD DUP5 DUP10 ADD MSTORE MLOAD PUSH1 0x40 DUP9 ADD MSTORE MLOAD PUSH1 0x60 DUP8 ADD MSTORE MLOAD SWAP4 PUSH1 0xC0 PUSH1 0x80 DUP8 ADD MSTORE DUP5 MLOAD DUP1 SWAP2 MSTORE DUP2 PUSH2 0x100 DUP8 ADD SWAP6 ADD SWAP2 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x366 JUMPI DUP5 MLOAD PUSH1 0xA0 DUP10 ADD MSTORE DUP6 MLOAD PUSH1 0xC0 DUP10 ADD MSTORE DUP8 DUP8 SUB DUP9 RETURN JUMPDEST DUP4 MLOAD DUP8 MSTORE SWAP6 DUP2 ADD SWAP6 SWAP3 DUP2 ADD SWAP3 DUP9 ADD PUSH2 0x34B JUMP JUMPDEST DUP4 SLOAD DUP6 MSTORE SWAP4 DUP7 ADD SWAP4 SWAP3 DUP2 ADD SWAP3 DUP2 ADD PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2678 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x3B7 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x2710 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x458 PUSH1 0x4 CALLDATALOAD PUSH2 0x438 PUSH2 0x26DA JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x453 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x2DAA JUMP JUMPDEST PUSH2 0x2EB5 JUMP JUMPDEST STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH2 0x478 PUSH1 0x4 CALLDATALOAD PUSH2 0x3408 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x499 PUSH2 0x3166 JUMP JUMPDEST PUSH2 0x4A1 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD ISZERO PUSH2 0x85C JUMPI PUSH2 0x4B4 PUSH1 0x4 CALLDATALOAD PUSH2 0x3408 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x4 CALLDATALOAD PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH1 0xA0 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x846 JUMPI PUSH2 0x520 SWAP2 PUSH1 0x40 MSTORE PUSH32 0x0 PUSH2 0x31BC JUMP JUMPDEST CALLER PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x539 DUP3 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x547 DUP2 PUSH1 0x4 SLOAD PUSH2 0x2F3E JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x558 PUSH1 0x4 CALLDATALOAD PUSH1 0x3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x803 JUMPI PUSH2 0x571 DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x5A7 JUMPI JUMPDEST PUSH2 0x5A2 SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x55E JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x2710 PUSH2 0x5C4 PUSH1 0x1 DUP4 ADD SLOAD PUSH1 0x4 CALLDATALOAD PUSH2 0x2F2B JUMP JUMPDEST DIV SWAP1 DUP2 ISZERO DUP1 ISZERO SWAP1 DUP2 PUSH2 0x5DA JUMPI JUMPDEST POP POP POP POP PUSH2 0x598 JUMP JUMPDEST SWAP1 PUSH2 0x762 JUMPI JUMPDEST ISZERO PUSH2 0x6FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x95EA7B3 PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP3 MSTORE PUSH1 0x0 SWAP6 SWAP1 SWAP3 SWAP1 SWAP2 PUSH2 0x64C SWAP1 PUSH2 0x626 PUSH1 0x64 DUP3 PUSH2 0x277C JUMP JUMPDEST PUSH32 0x0 PUSH2 0x31BC JUMP JUMPDEST DUP1 SLOAD PUSH1 0x40 MLOAD PUSH4 0xB6B55F25 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP7 SWAP1 MSTORE SWAP7 PUSH1 0x20 SWAP2 DUP9 SWAP2 PUSH1 0x24 SWAP2 DUP4 SWAP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS CALL SWAP6 DUP7 PUSH2 0x6D3 JUMPI JUMPDEST POP PUSH2 0x5A2 SWAP6 PUSH2 0x6BA JUMPI POP PUSH2 0x6B1 SWAP3 POP PUSH1 0x40 MLOAD SWAP2 PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x44 DUP2 MSTORE PUSH2 0x626 DUP2 PUSH2 0x2761 JUMP JUMPDEST DUP4 DUP1 DUP1 DUP1 PUSH2 0x5D1 JUMP JUMPDEST PUSH2 0x6CC SWAP3 POP PUSH1 0x3 SWAP2 POP ADD SWAP2 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x6B1 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x6F7 JUMPI JUMPDEST PUSH2 0x6E9 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI DUP8 PUSH2 0x680 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x6DF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A20617070726F76652066726F6D206E6F6E2D7A65726F PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x20746F206E6F6E2D7A65726F20616C6C6F77616E6365 PUSH1 0x50 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH4 0x6EB1769F PUSH1 0xE1 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP2 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0x7C5 JUMPI JUMPDEST POP ISZERO PUSH2 0x5E0 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x7EF JUMPI JUMPDEST DUP2 PUSH2 0x7E0 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD DUP7 PUSH2 0x7BE JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x7D3 JUMP JUMPDEST PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH1 0x20 DUP3 PUSH1 0x40 MLOAD PUSH1 0x4 CALLDATALOAD DUP2 MSTORE DUP2 DUP4 DUP3 ADD MSTORE PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x162908E3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xE SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x12 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x38C JUMPI PUSH2 0x913 PUSH1 0x20 SWAP2 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x3 SWAP3 SWAP1 SWAP3 SHL SHR PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x0 DUP1 PUSH1 0x0 SWAP2 PUSH1 0x0 PUSH1 0x6 DUP1 SLOAD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH2 0x994 JUMPI PUSH1 0x20 DUP6 DUP8 DUP7 DUP2 PUSH2 0x983 JUMPI JUMPDEST POP POP PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH2 0x98D SWAP3 POP PUSH2 0x33FE JUMP JUMPDEST DUP3 DUP1 PUSH2 0x979 JUMP JUMPDEST PUSH2 0x99D DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SWAP5 SWAP4 SWAP5 SHL SUB DUP1 SWAP4 SLOAD PUSH1 0x3 SWAP3 DUP4 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP1 DUP3 MSTORE PUSH1 0xFF SWAP1 DUP2 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x9DF JUMPI JUMPDEST POP POP POP POP PUSH2 0x9DA SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x967 JUMP JUMPDEST SWAP5 DUP3 SWAP2 PUSH2 0xA49 PUSH1 0x4 SWAP7 SWAP8 PUSH1 0x5 SWAP3 DUP4 DUP7 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x40 MLOAD SWAP5 PUSH2 0xA02 DUP7 PUSH2 0x272A JUMP JUMPDEST DUP7 DUP4 SLOAD AND DUP7 MSTORE PUSH1 0x1 DUP4 ADD SLOAD SWAP10 DUP9 DUP8 ADD SWAP11 DUP12 MSTORE PUSH1 0x2 DUP5 ADD SLOAD PUSH1 0x40 DUP9 ADD MSTORE DUP4 ADD SLOAD PUSH1 0x60 DUP8 ADD MSTORE DUP11 DUP4 ADD SLOAD PUSH1 0x80 DUP8 ADD MSTORE DUP3 ADD SLOAD AND ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE DUP11 DUP2 ADD SLOAD PUSH1 0xC0 DUP6 ADD MSTORE ADD PUSH2 0x279D JUMP JUMPDEST PUSH1 0xE0 DUP3 ADD MSTORE MLOAD AND PUSH1 0x40 MLOAD SWAP5 DUP6 DUP1 SWAP3 PUSH4 0x4B16524B PUSH1 0xE1 SHL DUP3 MSTORE GAS STATICCALL SWAP3 DUP4 SWAP2 PUSH1 0x0 SWAP5 PUSH2 0xAAE JUMPI JUMPDEST POP POP PUSH2 0xA7F JUMPI POP POP PUSH2 0x9DA SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0xA9E PUSH2 0x9DA SWAP4 SWAP9 SWAP7 PUSH2 0xA98 PUSH2 0xAA4 SWAP5 MLOAD DUP1 SWAP5 PUSH2 0x2F2B JUMP JUMPDEST SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP6 PUSH2 0x2F3E JUMP JUMPDEST SWAP6 DUP8 DUP1 DUP1 DUP1 PUSH2 0x9CC JUMP JUMPDEST SWAP1 DUP1 SWAP3 SWAP5 POP DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xAD7 JUMPI JUMPDEST PUSH2 0xAC6 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP2 DUP10 DUP1 PUSH2 0xA6E JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xABC JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xAF7 PUSH2 0x26DA JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0xE10 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xB61 PUSH2 0x3166 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x6 SLOAD DUP3 LT ISZERO PUSH2 0xCA3 JUMPI PUSH2 0xB78 DUP3 PUSH2 0x28B8 JUMP JUMPDEST SWAP3 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP4 PUSH1 0x7 DUP6 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0xBB7 JUMPI JUMPDEST POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP PUSH2 0x3106 JUMP JUMPDEST SWAP1 PUSH2 0xB65 JUMP JUMPDEST DUP5 PUSH1 0x0 SWAP2 PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 DUP4 KECCAK256 SLOAD AND PUSH1 0x4 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0xE8D991D1 PUSH1 0xE0 SHL DUP4 MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0xC74 JUMPI JUMPDEST POP PUSH2 0xBF5 JUMPI POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP PUSH2 0x3106 JUMP JUMPDEST DUP1 PUSH2 0xC0B JUMPI JUMPDEST POP POP PUSH2 0xBB1 SWAP2 SWAP3 POP DUP3 SWAP2 DUP5 PUSH2 0xBA4 JUMP JUMPDEST PUSH1 0x40 DUP2 PUSH2 0xC3C PUSH32 0xF343DFC1E44C65296FB907B287E6E12133EB7945BA79EC463D65EF129757C2FF SWAP4 PUSH2 0xBB1 SWAP8 PUSH2 0x2F3E JUMP JUMPDEST SWAP7 DUP5 PUSH1 0x0 MSTORE PUSH1 0xA DUP1 DUP3 MSTORE DUP4 PUSH1 0x0 KECCAK256 PUSH2 0xC55 DUP5 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE DUP6 PUSH1 0x0 MSTORE DUP2 MSTORE DUP3 PUSH1 0x0 KECCAK256 SLOAD SWAP1 DUP4 MLOAD SWAP3 DUP4 MSTORE DUP3 ADD MSTORE LOG2 DUP3 SWAP2 DUP5 PUSH2 0xBFB JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xC9C JUMPI JUMPDEST PUSH2 0xC8C DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP7 PUSH2 0xBE3 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xC82 JUMP JUMPDEST PUSH3 0x15180 TIMESTAMP DIV PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0xB DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0xCC3 DUP3 DUP3 SLOAD PUSH2 0x2F3E JUMP JUMPDEST SWAP1 SSTORE DUP1 ISZERO ISZERO DUP1 PUSH2 0xCDC JUMPI JUMPDEST POP PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0xF SLOAD SWAP1 DUP2 ISZERO ISZERO SWAP1 DUP2 PUSH2 0xDC0 JUMPI JUMPDEST POP ISZERO PUSH2 0xCCE JUMPI PUSH2 0xCFD PUSH2 0x2710 SWAP2 DUP4 PUSH2 0x2F2B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP2 DIV SWAP1 PUSH32 0x0 SWAP1 DUP6 DUP2 PUSH1 0x24 DUP2 DUP8 DUP7 AND GAS STATICCALL SWAP1 DUP2 ISZERO PUSH2 0x7F7 JUMPI PUSH1 0x0 SWAP2 PUSH2 0xD93 JUMPI JUMPDEST POP DUP3 DUP1 ISZERO ISZERO SWAP2 DUP3 PUSH2 0xD88 JUMPI JUMPDEST POP POP PUSH2 0xD72 JUMPI JUMPDEST POP POP PUSH2 0xCCE JUMP JUMPDEST PUSH2 0xD80 SWAP3 PUSH1 0x10 SLOAD AND SWAP1 PUSH2 0x3385 JUMP JUMPDEST DUP3 DUP1 DUP1 PUSH2 0xD6B JUMP JUMPDEST LT ISZERO SWAP1 POP DUP3 DUP8 PUSH2 0xD64 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0xDB9 JUMPI JUMPDEST PUSH2 0xDAA DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD DUP7 PUSH2 0xD58 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0xDA0 JUMP JUMPDEST SWAP1 POP DUP5 PUSH2 0xCEA JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0xDE1 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x24 SWAP1 DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH2 0xE02 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x288B JUMP JUMPDEST PUSH2 0xE0A PUSH2 0x2C65 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP4 AND SWAP3 DUP4 PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x7 DUP3 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10A9 JUMPI DUP5 PUSH1 0x0 MSTORE PUSH1 0x5 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP2 PUSH1 0x3 SWAP1 DUP2 DUP4 ADD SLOAD DUP6 DUP2 PUSH2 0xFD2 JUMPI JUMPDEST POP POP DUP8 PUSH1 0x0 MSTORE PUSH1 0x7 DUP6 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0xFF NOT SWAP1 DUP2 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x5 DUP5 ADD SWAP1 DUP2 SLOAD AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0x1 DUP1 SWAP5 ADD SSTORE PUSH1 0xD DUP6 MSTORE PUSH1 0x0 PUSH1 0x40 DUP2 KECCAK256 SSTORE DUP3 PUSH1 0x0 SWAP1 JUMPDEST PUSH2 0xED2 JUMPI JUMPDEST DUP9 PUSH32 0xF2F3B6B9F2A3BDCE56FA5FD5304960564A1D25405F97DEC9260B1165AC728500 DUP10 DUP10 DUP10 DUP10 PUSH2 0xEC9 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP5 PUSH1 0x40 DUP7 MSTORE PUSH1 0x40 DUP7 ADD SWAP2 PUSH2 0x30E5 JUMP JUMPDEST SWAP2 DUP4 ADD MSTORE SUB SWAP1 LOG2 STOP JUMPDEST PUSH1 0x6 DUP1 SLOAD DUP1 DUP4 LT ISZERO PUSH2 0xFCB JUMPI DUP11 DUP5 PUSH2 0xEE9 DUP6 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP9 SHL SHR AND EQ PUSH2 0xF06 JUMPI POP POP PUSH2 0xF00 SWAP1 PUSH2 0x3106 JUMP JUMPDEST DUP4 PUSH2 0xE87 JUMP JUMPDEST SWAP4 SWAP5 POP SWAP3 PUSH1 0x0 NOT SWAP2 DUP3 DUP3 ADD SWAP2 DUP3 GT PUSH2 0xFB6 JUMPI PUSH2 0xF35 DUP5 PUSH2 0xF28 PUSH2 0xF54 SWAP5 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SLOAD SWAP1 DUP10 SHL SHR AND SWAP2 PUSH2 0x28B8 JUMP JUMPDEST SWAP1 SWAP2 SWAP1 DUP3 SLOAD SWAP1 PUSH1 0x3 SHL SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP2 AND DUP4 SHL SWAP3 SHL NOT AND OR SWAP1 SSTORE JUMP JUMPDEST DUP3 SLOAD DUP1 ISZERO PUSH2 0xFA1 JUMPI PUSH32 0xF2F3B6B9F2A3BDCE56FA5FD5304960564A1D25405F97DEC9260B1165AC728500 SWAP10 SWAP11 POP ADD SWAP3 PUSH2 0xF8B DUP5 PUSH2 0x28B8 JUMP JUMPDEST DUP2 SWAP4 SWAP2 SLOAD SWAP3 SHL SHL NOT AND SWAP1 SSTORE SSTORE DUP6 SWAP5 DUP8 DUP1 DUP1 PUSH2 0xE8C JUMP JUMPDEST DUP11 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST DUP12 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH2 0xE8C JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP12 DUP5 DUP8 SLOAD AND SWAP2 PUSH1 0x40 MLOAD SWAP5 DUP6 SWAP4 DUP5 SWAP3 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x107A JUMPI JUMPDEST POP PUSH2 0x1073 JUMPI POP PUSH1 0x0 DUP6 DUP3 DUP6 SLOAD AND DUP12 PUSH1 0x40 MLOAD DUP1 SWAP5 DUP2 SWAP4 PUSH4 0x1BFC726F PUSH1 0xE2 SHL DUP4 MSTORE ADDRESS PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1044 JUMPI JUMPDEST POP PUSH2 0x103C JUMPI JUMPDEST POP JUMPDEST DUP10 DUP6 PUSH2 0xE4C JUMP JUMPDEST SWAP4 POP DUP10 PUSH2 0x1033 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x106C JUMPI JUMPDEST PUSH2 0x105C DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP12 PUSH2 0x102D JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1052 JUMP JUMPDEST SWAP4 POP PUSH2 0x1035 JUMP JUMPDEST SWAP1 SWAP2 POP DUP7 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x10A2 JUMPI JUMPDEST PUSH2 0x1092 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP1 DUP12 PUSH2 0xFFD JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1B92E953 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xF SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x10F2 PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xFF DUP1 PUSH1 0x12 SLOAD AND ISZERO PUSH2 0x129E JUMPI PUSH1 0xC SLOAD PUSH2 0xE10 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1288 JUMPI TIMESTAMP LT PUSH2 0x1276 JUMPI PUSH1 0x6 DUP1 SLOAD PUSH2 0x1120 DUP2 PUSH2 0x30B3 JUMP JUMPDEST SWAP1 PUSH1 0x0 DUP1 JUMPDEST DUP3 DUP2 LT PUSH2 0x1226 JUMPI POP DUP1 ISZERO DUP1 ISZERO PUSH2 0x11B2 JUMPI JUMPDEST POP POP POP PUSH1 0x0 JUMPDEST DUP3 SLOAD DUP2 LT ISZERO PUSH2 0x11A4 JUMPI DUP1 PUSH2 0x1152 PUSH2 0x117F SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND DUP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x7 DUP2 MSTORE DUP7 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1184 JUMPI JUMPDEST POP POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x113C JUMP JUMPDEST PUSH1 0xD SWAP1 PUSH2 0x1191 DUP5 DUP8 PUSH2 0x33EA JUMP JUMPDEST MLOAD SWAP3 PUSH1 0x0 MSTORE MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE DUP6 DUP1 PUSH2 0x1178 JUMP JUMPDEST PUSH2 0x11AC PUSH2 0x350A JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE STOP JUMPDEST PUSH2 0x1210 JUMPI PUSH2 0x2710 DIV PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x1136 JUMPI DUP1 PUSH2 0x11D2 PUSH2 0x11FA SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP7 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x11FF JUMPI PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x11BD JUMP JUMPDEST DUP3 PUSH2 0x120A DUP3 DUP8 PUSH2 0x33EA JUMP JUMPDEST MSTORE PUSH2 0x3106 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x122F DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE DUP6 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x1261 JUMPI JUMPDEST PUSH2 0x125C SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x1125 JUMP JUMPDEST SWAP1 PUSH2 0x126E PUSH2 0x125C SWAP2 PUSH2 0x3106 JUMP JUMPDEST SWAP2 SWAP1 POP PUSH2 0x1253 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA7D506F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x416AEBB5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0xA DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1328 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x1362 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0xA0 PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP1 SLOAD SWAP1 PUSH1 0x1 DUP2 ADD SLOAD SWAP1 PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x5 PUSH1 0x4 DUP4 ADD SLOAD SWAP3 ADD SLOAD SWAP3 PUSH1 0x40 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 DUP3 ADD MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH2 0x1388 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x11 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH3 0x93A80 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH2 0x143D PUSH2 0x26C4 JUMP JUMPDEST SWAP1 PUSH1 0x60 PUSH1 0xE0 PUSH1 0x40 MLOAD PUSH2 0x144E DUP2 PUSH2 0x272A JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x0 DUP5 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 DUP4 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP1 SWAP3 AND PUSH1 0x0 MSTORE PUSH1 0x5 DUP2 MSTORE PUSH2 0x1553 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x14A3 DUP5 PUSH2 0x272A JUMP JUMPDEST DUP5 DUP2 SLOAD AND DUP5 MSTORE PUSH1 0x1 DUP2 ADD SLOAD DUP3 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x40 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x3 DUP4 ADD SLOAD PUSH1 0x60 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0x4 DUP5 ADD SLOAD SWAP2 PUSH1 0x80 DUP9 ADD SWAP3 DUP4 MSTORE PUSH1 0xFF PUSH1 0x5 DUP7 ADD SLOAD AND SWAP4 PUSH1 0xA0 DUP10 ADD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH2 0x1503 PUSH1 0x7 PUSH1 0x6 DUP9 ADD SLOAD SWAP8 PUSH1 0xC0 DUP13 ADD SWAP9 DUP10 MSTORE ADD PUSH2 0x279D JUMP JUMPDEST SWAP7 PUSH1 0xE0 DUP11 ADD SWAP8 DUP9 MSTORE PUSH1 0x40 MLOAD SWAP11 DUP12 SWAP11 DUP3 DUP13 MSTORE MLOAD AND SWAP1 DUP11 ADD MSTORE MLOAD PUSH1 0x40 DUP10 ADD MSTORE MLOAD PUSH1 0x60 DUP9 ADD MSTORE MLOAD PUSH1 0x80 DUP8 ADD MSTORE MLOAD PUSH1 0xA0 DUP7 ADD MSTORE MLOAD ISZERO ISZERO PUSH1 0xC0 DUP6 ADD MSTORE MLOAD PUSH1 0xE0 DUP5 ADD MSTORE MLOAD PUSH2 0x100 DUP1 DUP5 ADD MSTORE PUSH2 0x120 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1570 PUSH2 0x26C4 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x158F SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x288B JUMP JUMPDEST SWAP1 PUSH2 0x1598 PUSH2 0x2C65 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO PUSH2 0x1B69 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1BEF JUMPI PUSH1 0xA PUSH1 0x6 SLOAD LT ISZERO PUSH2 0x1BDD JUMPI PUSH1 0x44 CALLDATALOAD ISZERO DUP1 ISZERO PUSH2 0x1BD1 JUMPI JUMPDEST PUSH2 0x85C JUMPI PUSH2 0x1388 PUSH1 0x64 CALLDATALOAD GT PUSH2 0x1BBF JUMPI PUSH1 0x40 MLOAD PUSH4 0x38D52E0F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x20 DUP2 PUSH1 0x4 DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND GAS STATICCALL PUSH1 0x0 SWAP2 DUP2 PUSH2 0x1B7B JUMPI JUMPDEST POP PUSH2 0x162B JUMPI PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 DUP2 AND SWAP2 AND SUB PUSH2 0x1B69 JUMPI PUSH1 0x40 MLOAD PUSH2 0x1669 DUP2 PUSH2 0x272A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH1 0x60 DUP3 ADD MSTORE TIMESTAMP PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0x44 CALLDATALOAD PUSH1 0xC0 DUP3 ADD MSTORE PUSH2 0x16A9 DUP4 PUSH2 0x2F4B JUMP JUMPDEST PUSH2 0x16B6 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x277C JUMP JUMPDEST DUP4 DUP2 MSTORE CALLDATASIZE DUP5 DUP5 ADD GT PUSH2 0x38C JUMPI DUP4 DUP4 PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE PUSH1 0xE0 DUP3 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0xE0 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP2 MLOAD AND PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL DUP5 SLOAD AND OR DUP4 SSTORE PUSH1 0x20 DUP2 ADD MLOAD PUSH1 0x1 DUP5 ADD SSTORE PUSH1 0x40 DUP2 ADD MLOAD PUSH1 0x2 DUP5 ADD SSTORE PUSH1 0x60 DUP2 ADD MLOAD PUSH1 0x3 DUP5 ADD SSTORE PUSH1 0x80 DUP2 ADD MLOAD PUSH1 0x4 DUP5 ADD SSTORE PUSH1 0x5 DUP4 ADD PUSH1 0xA0 DUP3 ADD MLOAD ISZERO ISZERO PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE PUSH1 0xC0 DUP2 ADD MLOAD PUSH1 0x6 DUP5 ADD SSTORE ADD MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x846 JUMPI PUSH2 0x1779 PUSH1 0x7 DUP5 ADD SLOAD PUSH2 0x26F0 JUMP JUMPDEST PUSH1 0x1F DUP2 GT PUSH2 0x1B29 JUMPI JUMPDEST POP PUSH1 0x20 SWAP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 EQ PUSH2 0x1AB9 JUMPI PUSH1 0x7 SWAP3 SWAP2 PUSH1 0x0 SWAP2 DUP4 PUSH2 0x1AAE JUMPI JUMPDEST POP POP DUP2 PUSH1 0x1 SHL SWAP2 PUSH1 0x0 NOT SWAP1 PUSH1 0x3 SHL SHR NOT AND OR SWAP2 ADD SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 LT ISZERO PUSH2 0x846 JUMPI DUP4 PUSH2 0xF35 DUP3 PUSH1 0x1 PUSH2 0x17FA SWAP5 ADD PUSH1 0x6 SSTORE PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 DUP2 ADD LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x20 DUP4 ADD GT OR PUSH2 0x846 JUMPI PUSH1 0x20 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x0 DUP2 MSTORE PUSH1 0x40 MLOAD PUSH2 0x1846 DUP2 PUSH2 0x2746 JUMP JUMPDEST PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 PUSH1 0x0 DUP4 MSTORE PUSH1 0x40 DUP3 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x60 DUP4 ADD SWAP2 DUP3 MSTORE TIMESTAMP PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0xA0 DUP5 ADD MSTORE PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x0 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP4 DUP4 MLOAD DUP6 SSTORE MLOAD PUSH1 0x1 DUP6 ADD SSTORE MLOAD PUSH1 0x2 DUP5 ADD SSTORE MLOAD DUP1 MLOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT PUSH2 0x846 JUMPI PUSH1 0x1 PUSH1 0x40 SHL DUP3 GT PUSH2 0x846 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 DUP6 ADD SLOAD DUP4 PUSH1 0x3 DUP8 ADD SSTORE DUP1 DUP5 LT PUSH2 0x1A8E JUMPI JUMPDEST POP ADD PUSH1 0x3 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x1A7A JUMPI POP POP POP POP PUSH1 0xA0 DUP2 PUSH1 0x80 PUSH1 0x5 SWAP4 ADD MLOAD PUSH1 0x4 DUP6 ADD SSTORE ADD MLOAD SWAP2 ADD SSTORE PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x6 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x1999 JUMPI POP POP DUP2 PUSH2 0x196E JUMPI JUMPDEST POP POP PUSH32 0xA60BB03B49D64A590D05814BBE4DC62875C4FE9A09567DC78C6DE9EA38663B25 SWAP2 PUSH2 0x194D PUSH1 0x40 MLOAD SWAP3 DUP4 SWAP3 PUSH1 0x60 DUP5 MSTORE PUSH1 0x60 DUP5 ADD SWAP2 PUSH2 0x30E5 JUMP JUMPDEST PUSH1 0x44 CALLDATALOAD PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x64 CALLDATALOAD PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SUB SWAP1 LOG2 STOP JUMPDEST SWAP1 PUSH2 0x1978 SWAP2 PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x11 SLOAD LT PUSH2 0x1987 JUMPI DUP4 DUP1 PUSH2 0x1912 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x73687CD7 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH2 0x19A2 DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x19D5 JUMPI JUMPDEST PUSH2 0x19D0 SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x1903 JUMP JUMPDEST SWAP3 PUSH2 0x1A72 PUSH2 0x19D0 SWAP2 PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH2 0x1A69 PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP7 PUSH2 0xA98 PUSH1 0x40 MLOAD SWAP9 PUSH2 0x19FD DUP11 PUSH2 0x272A JUMP JUMPDEST DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP11 MSTORE PUSH1 0x1 DUP2 ADD SLOAD DUP6 DUP12 ADD MSTORE PUSH1 0x2 DUP2 ADD SLOAD PUSH1 0x40 DUP12 ADD MSTORE PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x60 DUP12 ADD MSTORE PUSH1 0x4 DUP2 ADD SLOAD PUSH1 0x80 DUP12 ADD MSTORE PUSH1 0x5 DUP2 ADD SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0xA0 DUP12 ADD MSTORE PUSH1 0x6 DUP2 ADD SLOAD PUSH1 0xC0 DUP12 ADD SWAP1 DUP2 MSTORE SWAP1 PUSH2 0x1A59 SWAP1 PUSH1 0x7 ADD PUSH2 0x279D JUMP JUMPDEST PUSH1 0xE0 DUP12 ADD MSTORE MLOAD DUP5 DUP11 ADD MLOAD SWAP1 PUSH2 0x2F2B JUMP JUMPDEST SWAP6 ADD MLOAD SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP4 SWAP1 POP PUSH2 0x19C7 JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0x20 DUP5 MLOAD SWAP5 ADD SWAP4 DUP2 DUP5 ADD SSTORE ADD PUSH2 0x18DA JUMP JUMPDEST PUSH2 0x1AA8 SWAP1 PUSH1 0x3 DUP8 ADD PUSH1 0x0 MSTORE DUP5 DUP5 PUSH1 0x0 KECCAK256 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x3085 JUMP JUMPDEST DUP9 PUSH2 0x18C9 JUMP JUMPDEST ADD MLOAD SWAP1 POP DUP8 DUP1 PUSH2 0x179E JUMP JUMPDEST SWAP1 PUSH1 0x7 DUP5 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x0 JUMPDEST PUSH1 0x1F NOT DUP6 AND DUP2 LT PUSH2 0x1B11 JUMPI POP SWAP2 DUP4 SWAP2 PUSH1 0x1 SWAP4 PUSH1 0x7 SWAP6 PUSH1 0x1F NOT DUP2 AND LT PUSH2 0x1AF8 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD SWAP2 ADD SSTORE PUSH2 0x17B4 JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT PUSH1 0xF8 DUP5 PUSH1 0x3 SHL AND SHR NOT AND SWAP1 SSTORE DUP8 DUP1 DUP1 PUSH2 0x1AEA JUMP JUMPDEST SWAP2 SWAP3 PUSH1 0x20 PUSH1 0x1 DUP2 SWAP3 DUP7 DUP6 ADD MLOAD DUP2 SSTORE ADD SWAP5 ADD SWAP3 ADD PUSH2 0x1ACA JUMP JUMPDEST PUSH2 0x1B59 SWAP1 PUSH1 0x7 DUP6 ADD PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD SWAP2 PUSH1 0x20 DUP7 LT PUSH2 0x1B5F JUMPI JUMPDEST PUSH1 0x1F ADD PUSH1 0x5 SHR ADD SWAP1 PUSH2 0x3085 JUMP JUMPDEST DUP7 PUSH2 0x1782 JUMP JUMPDEST SWAP1 SWAP2 POP DUP2 SWAP1 PUSH2 0x1B4C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2711B74D PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP2 RETURNDATASIZE PUSH1 0x20 GT PUSH2 0x1BB7 JUMPI JUMPDEST DUP2 PUSH2 0x1B97 PUSH1 0x20 SWAP4 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x38C JUMPI SWAP1 DUP6 PUSH2 0x1614 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x1B8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x5D7BA19 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST POP PUSH1 0xA PUSH1 0x44 CALLDATALOAD GT PUSH2 0x15DD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1F62CA4F PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xC45546F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1C1A PUSH2 0x2B20 JUMP JUMPDEST PUSH2 0x1C22 PUSH2 0x3122 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xFF NOT DUP2 SLOAD AND OR PUSH1 0x1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH32 0xCCC64574297998B6C3EDF6078CC5E01268465FF116954E3AF02FF3A70A730F46 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x10 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1CD7 PUSH2 0x2B20 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0xFF DUP2 AND ISZERO PUSH2 0x1D16 JUMPI PUSH1 0xFF NOT AND PUSH1 0x1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA PUSH1 0x20 PUSH1 0x40 MLOAD CALLER DUP2 MSTORE LOG1 STOP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x4 SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 PUSH2 0x1D92 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 DUP2 SLOAD AND PUSH2 0x1553 PUSH1 0x1 DUP4 ADD SLOAD SWAP3 PUSH1 0x2 DUP2 ADD SLOAD SWAP1 PUSH1 0x3 DUP2 ADD SLOAD PUSH1 0x4 DUP3 ADD SLOAD PUSH1 0xFF PUSH1 0x5 DUP5 ADD SLOAD AND SWAP2 PUSH2 0x1DD7 PUSH1 0x7 PUSH1 0x6 DUP7 ADD SLOAD SWAP6 ADD PUSH2 0x279D JUMP JUMPDEST SWAP5 PUSH1 0x40 MLOAD SWAP9 DUP10 SWAP9 DUP10 MSTORE PUSH1 0x20 DUP10 ADD MSTORE PUSH1 0x40 DUP9 ADD MSTORE PUSH1 0x60 DUP8 ADD MSTORE PUSH1 0x80 DUP7 ADD MSTORE ISZERO ISZERO PUSH1 0xA0 DUP6 ADD MSTORE PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x100 DUP1 PUSH1 0xE0 DUP6 ADD MSTORE DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x40 MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH2 0x1E6F PUSH2 0x26DA JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SUB PUSH2 0x1E8B JUMPI PUSH2 0x458 SWAP1 PUSH1 0x4 CALLDATALOAD PUSH2 0x2EB5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416363657373436F6E74726F6C3A2063616E206F6E6C792072656E6F756E6365 PUSH1 0x44 DUP3 ADD MSTORE PUSH15 0x103937B632B9903337B91039B2B633 PUSH1 0x89 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x80 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP3 SWAP1 SUB PUSH2 0x38C JUMPI PUSH1 0x64 CALLDATALOAD SWAP3 DUP4 ISZERO ISZERO DUP1 SWAP5 SUB PUSH2 0x38C JUMPI PUSH2 0x1F2B PUSH2 0x2B20 JUMP JUMPDEST PUSH2 0x3E8 DUP2 GT DUP1 ISZERO PUSH2 0x1F72 JUMPI JUMPDEST PUSH2 0x85C JUMPI DUP3 ISZERO PUSH2 0x85C JUMPI PUSH1 0xE SSTORE PUSH1 0xF SSTORE PUSH12 0xFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xA0 SHL PUSH1 0x10 SLOAD AND OR PUSH1 0x10 SSTORE PUSH1 0xFF DUP1 NOT PUSH1 0x12 SLOAD AND SWAP2 AND OR PUSH1 0x12 SSTORE PUSH1 0x0 DUP1 RETURN JUMPDEST POP PUSH2 0x7D0 DUP3 GT PUSH2 0x1F37 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x1F99 PUSH2 0x26DA JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH2 0x1FB3 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x2DAA JUMP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x1FE2 JUMPI STOP JUMPDEST DUP2 PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH1 0x1 PUSH1 0xFF NOT DUP3 SLOAD AND OR SWAP1 SSTORE CALLER SWAP2 PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D PUSH1 0x0 DUP1 LOG4 STOP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH2 0x204D PUSH2 0x3166 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x85C JUMPI CALLER PUSH1 0x0 MSTORE PUSH1 0x8 DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD LT PUSH2 0x2275 JUMPI PUSH2 0x2070 DUP2 PUSH2 0x34F5 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT DUP1 PUSH2 0x226C JUMPI JUMPDEST ISZERO PUSH2 0x21C8 JUMPI PUSH2 0x208D DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SWAP5 SWAP4 SWAP5 SHL SUB DUP1 SWAP4 SLOAD PUSH1 0x3 SWAP3 DUP4 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 DUP8 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x20C6 JUMPI JUMPDEST POP PUSH2 0x20C1 SWAP2 POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x2074 JUMP JUMPDEST PUSH1 0x5 DUP8 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SWAP3 DUP8 PUSH2 0x2710 PUSH2 0x20E2 PUSH1 0x1 DUP8 ADD SLOAD DUP10 PUSH2 0x2F2B JUMP JUMPDEST DIV SWAP3 DUP6 ADD SWAP3 DUP4 SLOAD DUP1 DUP9 LT PUSH1 0x0 EQ PUSH2 0x21C3 JUMPI POP DUP7 JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 0x21BB JUMPI POP SWAP2 JUMPDEST DUP3 PUSH2 0x210F JUMPI JUMPDEST POP POP POP PUSH2 0x20B6 JUMP JUMPDEST PUSH1 0x0 SWAP5 SWAP6 SLOAD AND PUSH1 0x24 PUSH1 0x40 MLOAD DUP1 SWAP7 DUP2 SWAP4 PUSH4 0x2E1A7D4D PUSH1 0xE0 SHL DUP4 MSTORE DUP7 PUSH1 0x4 DUP5 ADD MSTORE GAS CALL PUSH1 0x0 SWAP4 DUP2 PUSH2 0x218C JUMPI JUMPDEST POP PUSH2 0x214A JUMPI POP POP POP PUSH2 0x20C1 SWAP1 PUSH2 0x3106 JUMP JUMPDEST SWAP2 DUP2 PUSH2 0x216B PUSH2 0x217B SWAP5 PUSH2 0x20C1 SWAP7 SWAP8 SWAP5 SLOAD SWAP1 DUP2 DUP2 LT PUSH1 0x0 EQ PUSH2 0x2185 JUMPI SWAP1 PUSH2 0x3115 JUMP JUMPDEST SWAP1 SSTORE DUP2 DUP2 LT ISZERO PUSH2 0x2185 JUMPI SWAP1 PUSH2 0x3115 JUMP JUMPDEST SWAP2 DUP7 DUP1 DUP8 DUP2 PUSH2 0x2107 JUMP JUMPDEST POP DUP1 PUSH2 0x3115 JUMP JUMPDEST SWAP1 SWAP4 POP DUP9 DUP2 DUP2 RETURNDATASIZE DUP4 GT PUSH2 0x21B4 JUMPI JUMPDEST PUSH2 0x21A4 DUP2 DUP4 PUSH2 0x277C JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x38C JUMPI MLOAD SWAP3 DUP10 PUSH2 0x2139 JUMP JUMPDEST POP RETURNDATASIZE PUSH2 0x219A JUMP JUMPDEST SWAP1 POP SWAP2 PUSH2 0x2101 JUMP JUMPDEST PUSH2 0x20F6 JUMP JUMPDEST POP POP SWAP1 CALLER PUSH1 0x0 MSTORE PUSH1 0x8 DUP4 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 PUSH2 0x21E3 DUP3 DUP3 SLOAD PUSH2 0x3115 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x21F1 DUP2 PUSH1 0x4 SLOAD PUSH2 0x3115 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH2 0x2200 DUP3 PUSH1 0x3 SLOAD PUSH2 0x3115 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0x222E DUP3 CALLER PUSH32 0x0 PUSH2 0x3385 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP3 DUP3 MSTORE DUP4 DUP3 ADD MSTORE PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB PUSH1 0x40 CALLER SWAP3 LOG2 PUSH1 0x1 PUSH1 0x0 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP2 ISZERO ISZERO PUSH2 0x207F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x1E9ACF17 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 SWAP1 REVERT JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x22A8 PUSH2 0x26C4 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x40 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB PUSH1 0x4 CALLDATALOAD DUP2 DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x22F7 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2694 JUMP JUMPDEST SWAP2 PUSH1 0x24 CALLDATALOAD SWAP1 DUP2 GT PUSH2 0x38C JUMPI PUSH2 0x2310 SWAP1 CALLDATASIZE SWAP1 PUSH1 0x4 ADD PUSH2 0x2694 JUMP JUMPDEST SWAP3 SWAP1 SWAP2 PUSH2 0x231B PUSH2 0x2905 JUMP JUMPDEST PUSH1 0xC SLOAD PUSH2 0xE10 DUP2 ADD DUP1 SWAP2 GT PUSH2 0x1288 JUMPI TIMESTAMP LT PUSH2 0x1276 JUMPI DUP4 DUP3 SUB PUSH2 0x85C JUMPI PUSH1 0x0 DUP1 JUMPDEST DUP6 DUP2 LT PUSH2 0x2536 JUMPI POP PUSH1 0x0 DUP1 PUSH1 0x6 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT PUSH2 0x24E5 JUMPI POP POP DUP4 SUB PUSH2 0x1BBF JUMPI PUSH2 0x2710 SUB PUSH2 0x1BBF JUMPI PUSH2 0x236B DUP3 PUSH2 0x30B3 JUMP JUMPDEST SWAP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x24AA JUMPI POP PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2466 JUMPI POP PUSH2 0x238A PUSH2 0x350A JUMP JUMPDEST TIMESTAMP PUSH1 0xC SSTORE PUSH1 0x40 MLOAD SWAP3 DUP1 PUSH1 0x80 DUP6 ADD PUSH1 0x80 DUP7 MSTORE MSTORE PUSH1 0xA0 DUP5 ADD SWAP3 SWAP1 PUSH1 0x0 SWAP1 JUMPDEST DUP1 DUP3 LT PUSH2 0x243C JUMPI POP POP POP PUSH1 0x20 SWAP2 DUP4 DUP2 SUB DUP4 DUP6 ADD MSTORE DUP3 DUP1 DUP8 MLOAD SWAP3 DUP4 DUP2 MSTORE ADD SWAP7 ADD SWAP1 PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH2 0x2428 JUMPI POP POP POP DUP3 DUP6 SUB PUSH1 0x40 DUP5 ADD MSTORE DUP1 DUP6 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xFB SHL SUB DUP2 GT PUSH2 0x38C JUMPI PUSH32 0x7255FC1A6ED23F2388AEFF823D30AB1EEFC7CB342F1481762F8E7BADA20C5F29 SWAP4 DUP4 SWAP2 PUSH1 0x5 SHL DUP1 SWAP2 DUP5 DUP9 ADD CALLDATACOPY TIMESTAMP PUSH1 0x60 DUP4 ADD MSTORE CALLER SWAP6 ADD SUB ADD SWAP1 LOG2 STOP JUMPDEST DUP3 MLOAD DUP9 MSTORE SWAP7 DUP5 ADD SWAP7 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x23C9 JUMP JUMPDEST SWAP1 SWAP2 SWAP4 DUP5 CALLDATALOAD SWAP1 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP3 AND DUP1 SWAP3 SUB PUSH2 0x38C JUMPI PUSH1 0x1 SWAP2 DUP2 MSTORE PUSH1 0x20 DUP1 SWAP2 ADD SWAP6 ADD SWAP3 ADD SWAP1 PUSH2 0x23A6 JUMP JUMPDEST DUP1 PUSH2 0x2475 PUSH2 0x24A5 SWAP3 DUP5 DUP9 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x2491 PUSH2 0x248C DUP5 DUP10 DUP10 PUSH2 0x33C6 JUMP JUMPDEST PUSH2 0x33D6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x237A JUMP JUMPDEST PUSH2 0x24E0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x24C4 PUSH2 0x248C DUP4 DUP9 DUP9 PUSH2 0x33C6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH2 0x120A DUP3 DUP10 PUSH2 0x33EA JUMP JUMPDEST PUSH2 0x236F JUMP JUMPDEST PUSH2 0x24EE DUP2 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x2521 JUMPI JUMPDEST PUSH2 0x251C SWAP1 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x234B JUMP JUMPDEST SWAP2 PUSH2 0x252E PUSH2 0x251C SWAP2 PUSH2 0x3106 JUMP JUMPDEST SWAP3 SWAP1 POP PUSH2 0x2513 JUMP JUMPDEST SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x254D PUSH2 0x248C DUP5 DUP8 DUP8 PUSH2 0x33C6 JUMP JUMPDEST AND PUSH1 0x0 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 PUSH1 0x0 KECCAK256 SLOAD AND ISZERO PUSH2 0x10A9 JUMPI PUSH2 0x1388 PUSH2 0x2572 DUP4 DUP9 DUP9 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD GT PUSH2 0x1BBF JUMPI PUSH2 0x2591 PUSH2 0x2597 SWAP2 PUSH2 0x258A DUP5 DUP10 DUP10 PUSH2 0x33C6 JUMP JUMPDEST CALLDATALOAD SWAP1 PUSH2 0x2F3E JUMP JUMPDEST SWAP2 PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x233B JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH1 0x0 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x20 PUSH1 0x1 PUSH1 0x40 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0xC SLOAD PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH2 0x478 PUSH1 0x4 CALLDATALOAD PUSH2 0x34F5 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x4 CALLDATALOAD PUSH4 0xFFFFFFFF PUSH1 0xE0 SHL DUP2 AND DUP1 SWAP2 SUB PUSH2 0x38C JUMPI PUSH1 0x20 SWAP1 PUSH4 0x7965DB0B PUSH1 0xE0 SHL DUP2 EQ SWAP1 DUP2 ISZERO PUSH2 0x264C JUMPI JUMPDEST POP PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE RETURN JUMPDEST PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL EQ SWAP1 POP DUP3 PUSH2 0x2641 JUMP JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD DUP2 MSTORE RETURN JUMPDEST CALLVALUE PUSH2 0x38C JUMPI PUSH1 0x0 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x38C JUMPI PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x64 DUP2 MSTORE RETURN JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x38C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x38C JUMPI PUSH1 0x20 DUP1 DUP6 ADD SWAP5 DUP5 PUSH1 0x5 SHL ADD ADD GT PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x38C JUMPI JUMP JUMPDEST SWAP1 PUSH1 0x1 DUP3 DUP2 SHR SWAP3 AND DUP1 ISZERO PUSH2 0x2720 JUMPI JUMPDEST PUSH1 0x20 DUP4 LT EQ PUSH2 0x270A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x26FF JUMP JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0xC0 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x80 DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH1 0x0 DUP3 SLOAD SWAP3 PUSH2 0x27B1 DUP5 PUSH2 0x26F0 JUMP JUMPDEST SWAP1 DUP2 DUP5 MSTORE PUSH1 0x1 SWAP5 DUP6 DUP2 AND SWAP1 DUP2 PUSH1 0x0 EQ PUSH2 0x2820 JUMPI POP PUSH1 0x1 EQ PUSH2 0x27DD JUMPI JUMPDEST POP POP PUSH2 0x27DB SWAP3 POP SUB DUP4 PUSH2 0x277C JUMP JUMPDEST JUMP JUMPDEST SWAP1 SWAP4 SWAP2 POP PUSH1 0x0 MSTORE PUSH1 0x20 SWAP1 DUP2 PUSH1 0x0 KECCAK256 SWAP4 PUSH1 0x0 SWAP2 JUMPDEST DUP2 DUP4 LT PUSH2 0x2808 JUMPI POP POP PUSH2 0x27DB SWAP4 POP DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x27CD JUMP JUMPDEST DUP6 SLOAD DUP9 DUP5 ADD DUP6 ADD MSTORE SWAP5 DUP6 ADD SWAP5 DUP8 SWAP5 POP SWAP2 DUP4 ADD SWAP2 PUSH2 0x27F0 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x27DB SWAP5 POP PUSH1 0x20 SWAP3 POP PUSH1 0xFF NOT AND DUP3 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 0x5 SHL DUP3 ADD ADD CODESIZE DUP1 PUSH2 0x27CD JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT PUSH2 0x2856 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2846 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP2 PUSH2 0x287F DUP2 MLOAD DUP1 SWAP3 DUP2 DUP6 MSTORE DUP6 DUP1 DUP7 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST SWAP2 DUP2 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH2 0x38C JUMPI DUP3 CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT PUSH2 0x38C JUMPI PUSH1 0x20 DUP4 DUP2 DUP7 ADD SWAP6 ADD ADD GT PUSH2 0x38C JUMPI JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x6 PUSH1 0x0 MSTORE PUSH32 0xF652222313E28459528D920B65115C16C04F3EFC82AAEDC97BE59F3F377C0D3F ADD SWAP1 PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xD190F20293C25CF866C072DD5ACEE973F736C2049FCA83B655CD3F77AF4EADAE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xCCC64574297998B6C3EDF6078CC5E01268465FF116954E3AF02FF3A70A730F46 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2969 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2972 CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x297F DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2A9E JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST DUP5 ADD SWAP2 PUSH17 0x1034B99036B4B9B9B4B733903937B6329 PUSH1 0x7D SHL PUSH1 0x37 DUP5 ADD MSTORE MLOAD DUP1 SWAP4 DUP7 DUP5 ADD SWAP1 PUSH2 0x2843 JUMP JUMPDEST ADD SUB PUSH1 0x28 DUP2 ADD DUP8 MSTORE ADD DUP6 PUSH2 0x277C JUMP JUMPDEST MLOAD SWAP3 DUP4 SWAP3 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP5 MSTORE PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST PUSH1 0x64 DUP5 DUP7 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE DUP1 PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2ACE DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x29B0 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP3 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP4 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 DUP4 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0xE5EBFA64FCA8D502A8E50C1EDFFD2C31EF4DAD5B396E65D9F397FB028F74ABC5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0xA49807205CE4D355092EF5A8A18F56E8913CF4A201FBE287825B095693C21775 SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2B84 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2B8D CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2B9A DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2C1F JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2C4F DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2BCB JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH32 0x5A10DB7EB5FB087477F68987FF09C6EBB13410247D1A97126552F0C97385B266 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD SWAP1 SWAP3 PUSH32 0x4170D100A3A3728AE51207936EE755ECAA64A7F6E9383C642AB204A136F90B1B SWAP2 PUSH1 0xFF AND ISZERO PUSH2 0x2CC9 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2CD2 CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2CDF DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2D64 JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2D94 DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2D10 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP1 DUP3 MSTORE PUSH1 0x20 SWAP1 PUSH1 0x2 DUP3 MSTORE PUSH1 0x40 SWAP3 DUP4 DUP2 KECCAK256 CALLER DUP3 MSTORE DUP4 MSTORE PUSH1 0xFF DUP5 DUP3 KECCAK256 SLOAD AND ISZERO PUSH2 0x2DD4 JUMPI POP POP POP POP JUMP JUMPDEST PUSH2 0x2DDD CALLER PUSH2 0x2F77 JUMP JUMPDEST SWAP2 DUP5 MLOAD SWAP1 PUSH2 0x2DEA DUP3 PUSH2 0x2761 JUMP JUMPDEST PUSH1 0x42 DUP3 MSTORE DUP5 DUP3 ADD SWAP3 PUSH1 0x60 CALLDATASIZE DUP6 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x2B0C JUMPI PUSH1 0x30 DUP5 MSTORE8 DUP3 MLOAD SWAP1 PUSH1 0x1 SWAP2 DUP3 LT ISZERO PUSH2 0x2B0C JUMPI SWAP1 PUSH1 0x78 PUSH1 0x21 DUP6 ADD MSTORE8 PUSH1 0x41 SWAP2 JUMPDEST DUP2 DUP4 GT PUSH2 0x2E6F JUMPI POP POP POP PUSH2 0x2A5C JUMPI PUSH1 0x48 PUSH2 0x2A58 SWAP4 DUP7 SWAP4 PUSH2 0x2A3C SWAP4 PUSH2 0x2A2D SWAP9 MLOAD SWAP9 DUP10 SWAP4 PUSH23 0x20B1B1B2B9B9A1B7B73A3937B61D1030B1B1B7BAB73A1 PUSH1 0x4D SHL DUP11 DUP7 ADD MSTORE PUSH2 0x2A04 DUP2 MLOAD DUP1 SWAP3 DUP13 PUSH1 0x37 DUP10 ADD SWAP2 ADD PUSH2 0x2843 JUMP JUMPDEST SWAP1 SWAP2 SWAP3 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x2AF8 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x2E9F DUP6 DUP8 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP3 DUP1 ISZERO PUSH2 0x2AE4 JUMPI PUSH1 0x0 NOT ADD SWAP2 SWAP1 PUSH2 0x2E1B JUMP JUMPDEST SWAP1 PUSH1 0x0 SWAP2 DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 SWAP2 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP2 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0xFF PUSH1 0x40 DUP5 KECCAK256 SLOAD AND PUSH2 0x2EE6 JUMPI POP POP POP JUMP JUMPDEST DUP1 DUP4 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 DUP3 DUP5 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 DUP4 KECCAK256 PUSH1 0xFF NOT DUP2 SLOAD AND SWAP1 SSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B CALLER SWAP4 DUP1 LOG4 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x1288 JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x1288 JUMPI JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x846 JUMPI PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MLOAD DUP2 LT ISZERO PUSH2 0x28EF JUMPI ADD PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 PUSH1 0x60 DUP3 ADD DUP3 DUP2 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP3 GT OR PUSH2 0x846 JUMPI PUSH1 0x40 MSTORE PUSH1 0x2A DUP3 MSTORE PUSH1 0x20 DUP3 ADD PUSH1 0x40 CALLDATASIZE DUP3 CALLDATACOPY DUP3 MLOAD ISZERO PUSH2 0x28EF JUMPI PUSH1 0x30 SWAP1 MSTORE8 DUP2 MLOAD PUSH1 0x1 SWAP1 DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x78 PUSH1 0x21 DUP5 ADD MSTORE8 PUSH1 0x29 SWAP1 JUMPDEST DUP1 DUP3 GT PUSH2 0x3017 JUMPI POP POP PUSH2 0x2FD3 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x64 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x20 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x537472696E67733A20686578206C656E67746820696E73756666696369656E74 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST SWAP1 SWAP2 PUSH1 0xF DUP2 AND PUSH1 0x10 DUP2 LT ISZERO PUSH2 0x3070 JUMPI PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL SWAP1 BYTE PUSH2 0x3046 DUP5 DUP7 PUSH2 0x2F66 JUMP JUMPDEST MSTORE8 PUSH1 0x4 SHR SWAP2 DUP1 ISZERO PUSH2 0x305B JUMPI PUSH1 0x0 NOT ADD SWAP1 PUSH2 0x2FC3 JUMP JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE REVERT JUMPDEST PUSH1 0x24 PUSH1 0x0 PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE REVERT JUMPDEST DUP2 DUP2 LT PUSH2 0x3090 JUMPI POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x3085 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH2 0x846 JUMPI PUSH1 0x5 SHL PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST SWAP1 PUSH2 0x30BD DUP3 PUSH2 0x309C JUMP JUMPDEST PUSH2 0x30CA PUSH1 0x40 MLOAD SWAP2 DUP3 PUSH2 0x277C JUMP JUMPDEST DUP3 DUP2 MSTORE DUP1 SWAP3 PUSH2 0x30DB PUSH1 0x1F NOT SWAP2 PUSH2 0x309C JUMP JUMPDEST ADD SWAP1 PUSH1 0x20 CALLDATASIZE SWAP2 ADD CALLDATACOPY JUMP JUMPDEST SWAP1 DUP1 PUSH1 0x20 SWAP4 SWAP3 DUP2 DUP5 MSTORE DUP5 DUP5 ADD CALLDATACOPY PUSH1 0x0 DUP3 DUP3 ADD DUP5 ADD MSTORE PUSH1 0x1F ADD PUSH1 0x1F NOT AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 NOT DUP2 EQ PUSH2 0x1288 JUMPI PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x1288 JUMPI JUMP JUMPDEST PUSH1 0xFF PUSH1 0x1 SLOAD AND PUSH2 0x312E JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ PUSH2 0x3177 JUMPI PUSH1 0x2 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH1 0x40 DUP2 ADD SWAP1 DUP1 DUP3 LT PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT OR PUSH2 0x846 JUMPI PUSH2 0x324B SWAP2 PUSH1 0x40 MSTORE PUSH1 0x20 SWAP4 DUP5 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP6 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP6 DUP8 DUP3 SWAP8 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0x32E8 JUMPI RETURNDATASIZE SWAP2 PUSH2 0x3230 DUP4 PUSH2 0x2F4B JUMP JUMPDEST SWAP3 PUSH2 0x323E PUSH1 0x40 MLOAD SWAP5 DUP6 PUSH2 0x277C JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0x32EC JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x32BD JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x3266 JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x32E4 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x32E1 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x3259 JUMP JUMPDEST DUP1 REVERT JUMPDEST POP DUP1 REVERT JUMPDEST PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0x334E JUMPI POP DUP2 MLOAD ISZERO PUSH2 0x3300 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0x3309 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x3361 JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0x2A58 SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x2866 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH2 0x27DB SWAP2 PUSH2 0x33C1 PUSH1 0x64 DUP4 PUSH2 0x277C JUMP JUMPDEST PUSH2 0x31BC JUMP JUMPDEST SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x5 SHL ADD SWAP1 JUMP JUMPDEST CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x38C JUMPI SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP3 LT ISZERO PUSH2 0x28EF JUMPI PUSH1 0x20 SWAP2 PUSH1 0x5 SHL ADD ADD SWAP1 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x1210 JUMPI DIV SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP1 ISZERO DUP1 ISZERO PUSH2 0x342B JUMPI JUMPDEST PUSH2 0x3427 JUMPI PUSH1 0x4 SLOAD PUSH2 0x3424 SWAP3 PUSH2 0x3435 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST POP PUSH1 0x4 SLOAD ISZERO PUSH2 0x3414 JUMP JUMPDEST SWAP2 PUSH1 0x0 NOT DUP3 DUP5 MULMOD SWAP3 DUP3 DUP2 MUL SWAP3 DUP4 DUP1 DUP7 LT SWAP6 SUB SWAP5 DUP1 DUP7 SUB SWAP6 EQ PUSH2 0x34E8 JUMPI DUP5 DUP4 GT ISZERO PUSH2 0x34AB JUMPI DUP3 SWAP2 MULMOD PUSH1 0x1 DUP3 NOT ADD DUP3 AND DUP1 SWAP3 DIV PUSH1 0x2 DUP1 DUP3 PUSH1 0x3 MUL XOR DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 DUP4 MUL DUP3 SUB MUL DUP1 SWAP3 MUL SWAP1 SUB MUL SWAP4 PUSH1 0x1 DUP4 DUP1 PUSH1 0x0 SUB DIV ADD SWAP1 DUP5 DUP4 GT SWAP1 SUB MUL SWAP3 SUB DIV OR MUL SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4D6174683A206D756C446976206F766572666C6F77 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST POP POP SWAP1 PUSH2 0x3424 SWAP3 POP PUSH2 0x33FE JUMP JUMPDEST PUSH1 0x4 SLOAD DUP1 ISZERO PUSH2 0x3427 JUMPI PUSH1 0x3 SLOAD PUSH2 0x3424 SWAP3 PUSH2 0x3435 JUMP JUMPDEST PUSH1 0x0 JUMPDEST PUSH1 0x6 SLOAD DUP2 LT ISZERO PUSH2 0x3572 JUMPI DUP1 PUSH2 0x3524 PUSH2 0x3551 SWAP3 PUSH2 0x28B8 JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB SWAP2 SLOAD SWAP1 PUSH1 0x3 SHL SHR AND PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x7 DUP2 MSTORE PUSH1 0x40 PUSH1 0xFF DUP2 PUSH1 0x0 KECCAK256 SLOAD AND PUSH2 0x3556 JUMPI POP POP PUSH2 0x3106 JUMP JUMPDEST PUSH2 0x350D JUMP JUMPDEST PUSH1 0x1 SWAP1 PUSH1 0xD DUP4 MSTORE PUSH1 0x5 DUP2 PUSH1 0x0 KECCAK256 SLOAD SWAP4 MSTORE PUSH1 0x0 KECCAK256 ADD SSTORE CODESIZE DUP1 PUSH2 0x1178 JUMP JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH26 0xD5D7082309C0384CB5020FEA1D6F9CA02C7024155079C594DF97 DIV PUSH24 0xBB61A364736F6C6343000814003300000000000000000000 ","sourceMap":"894:32072:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25426:19;894:32072;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;:::i;:::-;;;;3825:52;894:32072;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2070:5;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;3687:45;894:32072;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;5486:7:0;894:32072:19;;;;:::i;:::-;;;;;4604:6:0;894:32072:19;;2642:4:0;894:32072:19;;;;4604:22:0;894:32072:19;2642:4:0;:::i;:::-;5486:7;:::i;:::-;894:32072:19;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;2227:103:3;;:::i;:::-;1204:72:2;;:::i;:::-;894:32072:19;;15892:11;15888:39;;15983:23;894:32072;;15983:23;:::i;:::-;894:32072;;;;;;1482:68:8;;;16077:10:19;1482:68:8;;;894:32072:19;16097:4;894:32072;;;;;;;;;;;1482:68:8;;894:32072:19;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;1482:68:8;894:32072:19;;;16054:5;1482:68:8;:::i;:::-;16077:10:19;894:32072;;16149:9;894:32072;;;;;16149:31;894:32072;;;16149:31;:::i;:::-;894:32072;;16190:21;894:32072;;;16190:21;:::i;:::-;894:32072;;16221:21;894:32072;;;;16221:21;:::i;:::-;894:32072;;;26264:3;26243:12;894:32072;26239:23;;;;;26306:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;26339:16;894:32072;;;;;;;;26335:703;;26264:3;;;;;:::i;:::-;26224:13;;26335:703;26425:10;894:32072;;;;;2070:5;26495:32;894:32072;26504:23;;894:32072;;;26495:32;:::i;:::-;894:32072;26582:20;;;;;26578:446;;;;26335:703;;;;;;;26578:446;2142:62:8;;;26578:446:19;894:32072;;;;;-1:-1:-1;;;894:32072:19;2321:62:8;;;;;-1:-1:-1;;;;;894:32072:19;;1482:68:8;2321:62;;894:32072:19;;;;;;;;2321:62:8;;-1:-1:-1;;894:32072:19;;;;2321:62:8;;;894:32072:19;;2321:62:8;:::i;:::-;16054:5:19;2321:62:8;:::i;:::-;894:32072:19;;;;-1:-1:-1;;;26701:47:19;;894:32072;26701:47;;894:32072;;;;;;;;1482:68:8;;894:32072:19;;;-1:-1:-1;;;;;894:32072:19;26701:47;;;;;;26578:446;-1:-1:-1;26264:3:19;;26697:309;;894:32072;2321:62:8;894:32072:19;;;;2321:62:8;894:32072:19;2321:62:8;;;1482:68;2321:62;;894:32072:19;;;;;;;2321:62:8;;;;;:::i;:::-;26578:446:19;;;;;;26697:309;26775:47;:27;;894:32072;26775:27;;;894:32072;;;26775:47;:::i;:::-;894:32072;;26697:309;;26701:47;894:32072;26701:47;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;26701:47;;;;;;;;894:32072;;;-1:-1:-1;;;894:32072:19;;;;;;;;1482:68:8;894:32072:19;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;2142:62:8;-1:-1:-1;894:32072:19;;-1:-1:-1;;;2159:39:8;;16097:4:19;894:32072;2159:39:8;;894:32072:19;1482:68:8;894:32072:19;;;;;;;;;16054:5;-1:-1:-1;;;;;894:32072:19;2159:39:8;;;;;;;894:32072:19;2159:39:8;;;2142:62;2159:44;;2142:62;;2159:39;;;894:32072:19;2159:39:8;;894:32072:19;2159:39:8;;;;;;894:32072:19;2159:39:8;;;:::i;:::-;;;894:32072:19;;;;;2159:39:8;;;;;;-1:-1:-1;2159:39:8;;;894:32072:19;;;;;;;;;26239:23;894:32072;26239:23;894:32072;;;;;;;;;;;16332:35;894:32072;16077:10;16332:35;;894:32072;;;;;;;;;;;;;;;;;;1482:68:8;894:32072:19;;15888:39;894:32072;;-1:-1:-1;;;15912:15:19;;894:32072;;15912:15;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;;1828:34;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;3953:34;894:32072;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;4197:39;894:32072;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;3347:29;894:32072;3347:29;;;;;;894:32072;3347:29;;:::i;:::-;894:32072;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;23073:13;894:32072;23092:12;894:32072;;23068:657;23088:23;;;;;;894:32072;23739:15;;;;23735:87;;23068:657;894:32072;;;;;;;;23735:87;23781:30;;;;:::i;:::-;23735:87;;;;23113:3;23155:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;;;;23188:16;894:32072;;;;;;;;;;;;;23184:531;;23113:3;;;;;;;;;:::i;:::-;23073:13;;23184:531;23273:10;;;894:32072;;23273:10;;;894:32072;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;23336:37;;;;;;;894:32072;23336:37;;;23184:531;-1:-1:-1;;23332:369:19;;23674:8;;23113:3;23674:8;23113:3;:::i;23332:369::-;894:32072;23488:40;23113:3;894:32072;;;23508:20;23550:21;894:32072;;23508:20;;;:::i;:::-;23488:40;;:::i;:::-;23550:21;;:::i;:::-;23332:369;23184:531;;;;;;23336:37;;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;23336:37;;;;;;;;;;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;:::i;:::-;;;;;3130:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2262:7;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;2227:103:3;;:::i;:::-;894:32072:19;;20863:3;20842:12;894:32072;20838:23;;;;;20905:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;;;;;;20938:16;894:32072;;;;;;;;20934:874;;20863:3;;;;;;;;:::i;:::-;20823:13;;;20934:874;894:32072;;;21024:10;894:32072;;;;;;;;;;;;;;;;;21087:36;;;;894:32072;;21087:36;;;20934:874;-1:-1:-1;21083:711:19;;21767:8;;20863:3;21767:8;;;20863:3;:::i;21083:711::-;21183:18;21179:471;;21083:711;;;20863:3;21083:711;;;20934:874;;;;;21179:471;894:32072;21229:37;;21499:128;21229:37;20863:3;21229:37;;:::i;:::-;894:32072;;;;21372:19;894:32072;;;;;;21372:71;894:32072;;;21372:71;:::i;:::-;894:32072;;;;;;;;;;;;;;;;;;;;21499:128;21179:471;;;;;21087:36;;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;21087:36;;;;;;;;;20838:23;21901:6;21883:15;894:32072;;;;;21917:10;894:32072;;;;;21917:40;894:32072;;;21917:40;:::i;:::-;894:32072;;22010:23;;;22006:87;;;20818:1000;894:32072;;;;;;;;;;22006:87;31049:14;894:32072;31049:18;;;;:37;;;;22006:87;31045:358;;22006:87;31045:358;31123:28;2070:5;31123:28;;;:::i;:::-;894:32072;;-1:-1:-1;;;31208:30:19;;31232:4;894:32072;31208:30;;894:32072;-1:-1:-1;;;;;894:32072:19;;;;;31208:5;;894:32072;;;;;;;31208:30;;;;;;;894:32072;31208:30;;;31045:358;31269:13;;;;;:46;;;;31045:358;31265:128;;;;31045:358;;;22006:87;;31265:128;31368:9;894:32072;31354:12;894:32072;;31368:9;;:::i;:::-;31265:128;;;;;31269:46;31286:29;;;-1:-1:-1;31269:46:19;;;;31208:30;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;31208:30;;;;;;;;31049:37;;;;;;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;:::i;:::-;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;:::i;:::-;2642:4:0;;:::i;:::-;894:32072:19;;;;;;;;;;;;;;13507:16;894:32072;;;;;;;;13506:27;13502:59;;894:32072;;;13608:10;894:32072;;;;;;;;13732:27;;;;894:32072;13732:31;;13728:606;;894:32072;;;;;;13507:16;894:32072;;;;;;;;;;;;;;13608:10;14412:19;;894:32072;;;;;;;;14449:23;;;894:32072;14486:17;894:32072;;;;;;;14570:13;894:32072;14565:254;894:32072;;;14565:254;894:32072;14834:50;894:32072;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;14834:50;;;894:32072;14610:3;14589:12;894:32072;;14585:23;;;;;;14633:15;;;;;:::i;:::-;894:32072;;;;;;;14633:27;14629:180;;14610:3;;;;;:::i;:::-;14570:13;;;14629:180;894:32072;;-1:-1:-1;894:32072:19;-1:-1:-1;;894:32072:19;;;;;;;;;14680:15;14698:37;;14680:55;14698:37;;:::i;:::-;894:32072;;;;;;;14680:15;;:::i;:::-;:55;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;14680:55;894:32072;;;;;;14834:50;894:32072;;;;;;;;:::i;:::-;;;;;;;;;;;;;14789:5;;;;;;;894:32072;;;;;;;;;;;;;;;;;;;;;;;;14585:23;;;;;13728:606;894:32072;;;;;;;;;;;;;;;;;;13783:59;;894:32072;13783:59;;894:32072;13783:59;;894:32072;;13783:59;;;13728:606;-1:-1:-1;13779:545:19;;894:32072;;;;;;;;;;;;;;;;;14015:54;;14063:4;894:32072;14015:54;;894:32072;14015:54;;894:32072;;14015:54;;;13779:545;14011:299;;;13779:545;;;13728:606;;;;14011:299;14147:33;-1:-1:-1;14011:299:19;;;14015:54;;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;14015:54;;;;;;;;;13779:545;13903:24;-1:-1:-1;13779:545:19;;13783:59;;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;13783:59;;;;;;;;;13502;894:32072;;-1:-1:-1;;;13542:19:19;;894:32072;;13542:19;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;4008:36;894:32072;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;2642:4:0;;:::i;:::-;894:32072:19;;19905:20;894:32072;;19904:21;19900:49;;19981:13;894:32072;2262:7;894:32072;;;;;;;19963:15;:52;19959:115;;28893:12;894:32072;;28879:34;;;:::i;:::-;29002:23;894:32072;;29055:23;;;;;;29216:15;;;;;29212:297;;29035:159;20254:13;;;894:32072;20294:3;894:32072;;20269:23;;;;;20332:15;;20294:3;20332:15;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;29103:16;894:32072;;;;;;;;20361:116;;20294:3;;;;:::i;:::-;20254:13;;20361:116;20411:17;20441:21;;;;;:::i;:::-;894:32072;;;;;;;;;20361:116;;;;20269:23;20361:116;;:::i;:::-;19963:15;19981:13;894:32072;;29212:297;894:32072;;2070:5;894:32072;;29329:23;;;;;29212:297;29329:23;29398:15;;29354:3;29398:15;;:::i;:::-;894:32072;;;;;;;;;;;;;;29103:16;894:32072;;;;;;;;29377:108;;29354:3;:::i;:::-;29314:13;;29377:108;29438:28;;;;;:::i;:::-;894:32072;29354:3;:::i;894:32072::-;;;;;;19905:20;894:32072;;;;;29080:3;29120:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;29103:16;894:32072;;;;;;;;29099:85;;29080:3;;;;:::i;:::-;29040:13;;29099:85;29156:13;;29080:3;29156:13;;:::i;:::-;29099:85;;;;;19959:115;894:32072;;-1:-1:-1;;;20038:25:19;;894:32072;;20038:25;894:32072;;;;;;;;;;;;19900:49;894:32072;;-1:-1:-1;;;19934:15:19;;894:32072;;19934:15;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2023:2;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;1751:23;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;:::i;:::-;;;;24794:9;894:32072;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;:::i;:::-;;;;3619:62;894:32072;;;;;;;;3619:62;894:32072;3619:62;;894:32072;3619:62;;;;894:32072;3619:62;894:32072;3619:62;;894:32072;3619:62;;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2135:4;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;1685:7:2;894:32072:19;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;4129:31;894:32072;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2349:6;894:32072;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25078:10;894:32072;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;25078:10;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;:::i;:::-;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;:::i;:::-;2642:4:0;;;:::i;:::-;-1:-1:-1;;;;;894:32072:19;;11594:22;11590:52;;-1:-1:-1;;;;;894:32072:19;;;;;;11656:16;894:32072;;;;;;;;11652:62;;2023:2;11728:12;894:32072;11728:37;;11724:72;;894:32072;;11810:14;:32;;;;894:32072;11806:60;;2135:4;894:32072;;11880:47;11876:79;;894:32072;;-1:-1:-1;;;12023:32:19;;894:32072;;;;-1:-1:-1;;;;;894:32072:19;;12023:32;;894:32072;;12023:32;;;894:32072;-1:-1:-1;12019:211:19;;894:32072;;-1:-1:-1;;;12202:17:19;;894:32072;;12202:17;12019:211;-1:-1:-1;;;;;12131:5:19;894:32072;;;;12106:31;12102:61;;894:32072;;;;;:::i;:::-;-1:-1:-1;;;;;894:32072:19;;;;;;;12263:320;;894:32072;;;;12263:320;;894:32072;-1:-1:-1;894:32072:19;12263:320;;894:32072;12473:15;894:32072;12263:320;;894:32072;;;12263:320;;894:32072;;;12263:320;;;894:32072;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;12263:320;;894:32072;;;;;;;;;;12240:10;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;12263:320;;894:32072;;;;;;12263:320;;894:32072;;;;;;12263:320;;894:32072;;;;;;12263:320;;894:32072;;;;;12240:10;894:32072;;;12263:320;;894:32072;;;;;;;;;;;;;;12263:320;;;894:32072;11728:12;894:32072;;;12263:320;894:32072;;;;-1:-1:-1;;;;;894:32072:19;;;;;11656:16;894:32072;;;;:::i;:::-;;;;;;12019:211;894:32072;;;;;;;;;;11656:16;;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;11656:16;894:32072;;;;;;;-1:-1:-1;;894:32072:19;;;;;11728:12;894:32072;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;11728:12;894:32072;;:::i;:::-;;;;;;;;;;12674:17;894:32072;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;12803:236;;894:32072;;;;;12803:236;;894:32072;;;;12803:236;;894:32072;;;12473:15;894:32072;12803:236;;894:32072;;;12803:236;;894:32072;;;;;;;;;;2023:2;894:32072;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12803:236;;;;894:32072;12803:236;894:32072;12240:10;12803:236;;894:32072;;;;;12803:236;894:32072;;;;;;;11728:12;894:32072;30370:397;30390:23;;;;;;30781:15;;;30777:194;;30370:397;894:32072;;13139:59;894:32072;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;13139:59;;;894:32072;30777:194;30830:31;;;;:::i;:::-;30889:12;894:32072;-1:-1:-1;30875:86:19;;30777:194;;;;30875:86;894:32072;;-1:-1:-1;;;30928:18:19;;894:32072;;30928:18;30415:3;30457:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;11656:16;894:32072;;;;;;;;30486:271;;30415:3;;;;:::i;:::-;30375:13;;30486:271;894:32072;30704:38;30415:3;894:32072;12240:10;894:32072;;;30617:69;894:32072;;;;30638:48;894:32072;;;;;;:::i;:::-;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12240:10;894:32072;;;;;;;;;;;11728:12;894:32072;;;12263:320;894:32072;;;;;;;;11656:16;894:32072;;:::i;:::-;;;;;;;;;;30638:48;;:::i;30617:69::-;894:32072;;;30704:38;;:::i;:::-;30486:271;;;;;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;894:32072:19;;;;;;11656:16;894:32072;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;;;;11656:16;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11656:16;894:32072;;;;;;;;;;12240:10;894:32072;;;;;;;;;;;;12240:10;894:32072;;;;:::i;:::-;;;;;;;-1:-1:-1;894:32072:19;;;;12102:61;894:32072;;-1:-1:-1;;;12146:17:19;;894:32072;;12146:17;12023:32;;;;894:32072;12023:32;;894:32072;12023:32;;;;;;894:32072;12023:32;;;:::i;:::-;;;894:32072;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;12023:32;;;;;;;-1:-1:-1;12023:32:19;;11876:79;894:32072;;-1:-1:-1;;;11936:19:19;;894:32072;;11936:19;11810:32;894:32072;2023:2;894:32072;;11828:14;11810:32;;11724:72;894:32072;;-1:-1:-1;;;11774:22:19;;894:32072;;11774:22;11652:62;894:32072;;-1:-1:-1;;;11691:23:19;;894:32072;;11691:23;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;2642:4:0;;:::i;:::-;1204:72:2;;:::i;:::-;2255:4;894:32072:19;;;;;;2255:4:2;894:32072:19;2274:20:2;894:32072:19;;;734:10:10;894:32072:19;;2274:20:2;894:32072:19;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;1910:28;894:32072;;;;;;;;;-1:-1:-1;;894:32072:19;;;;4068:27;894:32072;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;2642:4:0;;:::i;:::-;1685:7:2;894:32072:19;;;;;;;;;;1685:7:2;894:32072:19;2521:22:2;894:32072:19;;;734:10:10;894:32072:19;;2521:22:2;894:32072:19;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;;:::i;:::-;;;;3291:50;894:32072;;;;;;;;;;;3291:50;;894:32072;3291:50;;;;894:32072;3291:50;894:32072;3291:50;;894:32072;;3291:50;;894:32072;;3291:50;;;894:32072;;3291:50;;;;;;894:32072;3291:50;;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;894:32072:19;;;;;;3133:29;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;:::i;:::-;734:10:10;-1:-1:-1;;;;;894:32072:19;;6133:23:0;894:32072:19;;6237:7:0;894:32072:19;;;6237:7:0;:::i;894:32072:19:-;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;2642:4:0;;:::i;:::-;32648::19;32631:21;;:47;;;;894:32072;32627:75;;32731:27;;32727:55;;32793:30;894:32072;32833:32;894:32072;;;;32875:28;894:32072;;;32875:28;894:32072;;;;32913:44;894:32072;;;;;32913:44;894:32072;;;;32631:47;32656:22;32674:4;32656:22;;32631:47;;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;:::i;:::-;;;;4604:6:0;894:32072:19;;2642:4:0;894:32072:19;;;;4604:22:0;894:32072:19;2642:4:0;:::i;:::-;894:32072:19;;;4604:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;7669:23:0;7665:149;;894:32072:19;7665:149:0;894:32072:19;;;4604:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;734:10:10;7763:40:0;;894:32072:19;7763:40:0;;894:32072:19;;;;;;;;;;;;;;;;2227:103:3;;:::i;:::-;16638:11:19;;16634:39;;16697:10;894:32072;;16687:9;894:32072;;;;;;;16687:30;16683:64;;16807:23;;;:::i;:::-;27128:36;894:32072;27306:3;27258:12;894:32072;27254:23;;:50;;;27306:3;27254:50;;;27348:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;;;;;;27381:16;894:32072;;;;;;;;27377:934;;27306:3;;;;;;:::i;:::-;27239:13;;27377:934;27467:10;894:32072;;;;;27565:23;;2070:5;27556:32;894:32072;27565:23;;894:32072;27556:32;;:::i;:::-;894:32072;27727:27;;;894:32072;;;672:5:15;;;:13;:5;;;:13;;;:5;;;;;;:13;;;27795:18:19;27791:506;;672:13:15;27377:934:19;;;;;27791:506;894:32072;;;;;;;;;;;;;;;27841:46;;;894:32072;27841:46;;894:32072;27841:46;;894:32072;;27841:46;;;27791:506;-1:-1:-1;27837:442:19;;28248:8;;;27306:3;28248:8;27306:3;:::i;27837:442::-;894:32072;;27942:84;28052:63;894:32072;27306:3;894:32072;;;;672:13:15;:5;;;:13;:5;;;:13;27942:84:19;:::i;:::-;894:32072;;672:5:15;;;;;;:13;28052:63:19;:::i;:::-;27837:442;27791:506;;;;;;672:13:15;;;28052:63:19;:::i;27841:46::-;;;;;;;;;;;;;;;;;:::i;:::-;;;894:32072;;;;;27841:46;;;;;;;;;672:13:15;;;;;;;;;27254:50:19;;;;16697:10;894:32072;;16687:9;894:32072;;;;;16956:31;894:32072;;;16956:31;:::i;:::-;894:32072;;16997:21;894:32072;;;16997:21;:::i;:::-;894:32072;;17028:21;894:32072;;;17028:21;:::i;:::-;894:32072;;17126:6;16697:10;;17095:5;17126:6;:::i;:::-;894:32072;;;;;;;;;;17149:38;894:32072;16697:10;17149:38;;894:32072;;;;;;;;;27254:50;27281:23;;;;27254:50;;16683:64;894:32072;;-1:-1:-1;;;16726:21:19;;894:32072;;16726:21;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;:::i;:::-;;;;3382:48;894:32072;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;:::i;:::-;2642:4:0;;;;;:::i;:::-;18219:13:19;894:32072;2262:7;894:32072;;;;;;;18201:15;:52;18197:115;;18325:49;;;18321:77;;894:32072;;18498:25;;;;;;18905;894:32072;;29628:12;894:32072;29604:153;29624:23;;;;;;18877:53;;;;18873:85;;2070:5;18972:31;18968:63;;19119:39;;;:::i;:::-;19173:13;894:32072;19188:28;;;;;;19363:13;894:32072;19378:28;;;;;;19427:59;;;:::i;:::-;18201:15;18219:13;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;19644:90;894:32072;;;19257:10;894:32072;;;;;;;18201:15;894:32072;;;;19655:10;894:32072;;19644:90;;;;894:32072;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19408:3;19469:17;;19408:3;19469:17;;;;:::i;:::-;894:32072;-1:-1:-1;;;;;19445:20:19;;;;;;:::i;:::-;;:::i;:::-;894:32072;;;19427:17;894:32072;;;;;;19408:3;:::i;:::-;19363:13;;19218:3;;;-1:-1:-1;;;;;19268:20:19;;894:32072;19268:20;;;:::i;:::-;894:32072;;;19257:10;894:32072;;;;;;19257:43;894:32072;19237:63;;;;:::i;19218:3::-;19173:13;;29649:3;29689:15;;;:::i;:::-;894:32072;;;;;;;;;;;;;;18549:16;894:32072;;;;;;;;29668:79;;29649:3;;;;:::i;:::-;29609:13;;29668:79;29725:7;;29649:3;29725:7;;:::i;:::-;29668:79;;;;;18525:3;894:32072;-1:-1:-1;;;;;18566:20:19;;894:32072;18566:20;;;:::i;:::-;894:32072;;;18549:16;894:32072;;;;;;;;18548:39;18544:71;;2135:4;18633:17;;;;;:::i;:::-;894:32072;18633:47;18629:79;;18722:36;18525:3;18741:17;;;;;;:::i;:::-;894:32072;18722:36;;:::i;:::-;18525:3;;:::i;:::-;18483:13;;894:32072;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;4604:6:0;894:32072:19;;;;;;;4604:22:0;894:32072:19;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;3791:28;894:32072;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2840:47:0;;;:87;;;;894:32072:19;;;;;;;;;;2840:87:0;-1:-1:-1;;;937:40:13;;-1:-1:-1;2840:87:0;;;894:32072:19;;;;;;-1:-1:-1;;894:32072:19;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;;;;2411:3;894:32072;;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;894:32072:19;;;;;;:::o;:::-;;;;-1:-1:-1;;;;;894:32072:19;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;:::o;:::-;12263:320;894:32072;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;:::o;:::-;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;:::o;:::-;;;;;;-1:-1:-1;894:32072:19;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:::o;:::-;;;;;-1:-1:-1;894:32072:19;;;;-1:-1:-1;894:32072:19;;-1:-1:-1;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;894:32072:19;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;-1:-1:-1;;894:32072:19;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;:::o;:::-;29628:12;894:32072;;;;;;29628:12;-1:-1:-1;894:32072:19;;;;-1:-1:-1;894:32072:19;:::o;:::-;;;;;;;;;;;;3460:103:0;734:10:10;-1:-1:-1;894:32072:19;;;;;;;;;;;;;;;1910:28;;894:32072;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;894:32072:19;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;894:32072:19;;;;;;;;;;;2000:15:11;894:32072:19;;;2000:15:11;894:32072:19;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;894:32072:19;;;;;4022:252:0;894:32072:19;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;894:32072:19;;;;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;:::i;:::-;;4022:252:0;;;;;;;;;:::i;:::-;894:32072:19;;;;;;;3970:336:0;;2141:1:11;3970:336:0;;894:32072:19;;;;;;:::i;:::-;3970:336:0;;;278:18:11;;894:32072:19;;;;;;;278:18:11;;;2141:1;278:18;;;;;;894:32072:19;278:18:11;894:32072:19;;;278:18:11;;2065:3;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;894:32072:19;2065:3:11;894:32072:19;;;;-1:-1:-1;;894:32072:19;;2030:26:11;;;894:32072:19;-1:-1:-1;;;894:32072:19;;;2141:1:11;894:32072:19;;;;2096:21:11;-1:-1:-1;;;894:32072:19;;;2141:1:11;894:32072:19;;;;;-1:-1:-1;;;894:32072:19;;;;;;;;3460:103:0;734:10:10;-1:-1:-1;894:32072:19;;;;;;;;;;;;;;;1751:23;;894:32072;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;894:32072:19;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;894:32072:19;;;;;;;;;;;2000:15:11;894:32072:19;;;2000:15:11;894:32072:19;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;894:32072:19;;;;;4022:252:0;894:32072:19;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;894:32072:19;;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;894:32072:19;2065:3:11;894:32072:19;;;;-1:-1:-1;;894:32072:19;;2030:26:11;;;3460:103:0;734:10:10;-1:-1:-1;894:32072:19;;;;;;;;;;;;;;;1828:34;;894:32072;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;1818:437;894:32072:19;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;894:32072:19;;;;;;;;;;;2000:15:11;894:32072:19;;;2000:15:11;894:32072:19;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;894:32072:19;;;;;4022:252:0;894:32072:19;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;894:32072:19;;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;894:32072:19;2065:3:11;894:32072:19;;;;-1:-1:-1;;894:32072:19;;2030:26:11;;;3460:103:0;-1:-1:-1;894:32072:19;;;;;;3130:6:0;894:32072:19;;;;;;;734:10:10;894:32072:19;;;;;;;;;;3931:23:0;3927:390;;3460:103;;;;:::o;3927:390::-;2497:52:11;734:10:10;2497:52:11;:::i;:::-;4214:38:0;894:32072:19;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1975:15:11;;;894:32072:19;;;;;;;;;;;2000:15:11;894:32072:19;;;2000:15:11;894:32072:19;2025:128:11;2058:5;;;;;;2170:10;;;278:18;;894:32072:19;;;;;4022:252:0;894:32072:19;;;;4022:252:0;;;-1:-1:-1;;;4022:252:0;;;894:32072:19;;;;;;;;;;;;;:::i;2065:3:11:-;2105:11;;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;894:32072:19;2065:3:11;894:32072:19;;;;-1:-1:-1;;894:32072:19;;2030:26:11;;;7991:234:0;;-1:-1:-1;894:32072:19;;;;3130:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;8070:149:0;;7991:234;;;:::o;8070:149::-;894:32072:19;;;3130:6:0;894:32072:19;;;;;;;;;;;;;;;;;;;;8168:40:0;734:10:10;8168:40:0;;;7991:234::o;894:32072:19:-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;-1:-1:-1;;;;;894:32072:19;;;;;;-1:-1:-1;;894:32072:19;;;;:::o;:::-;;;;;;;;;;;;;:::o;1818:437:11:-;894:32072:19;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;;;;;;;;;;;;;;1975:15:11;;;894:32072:19;;;;;;;;;2000:15:11;894:32072:19;;;2000:15:11;894:32072:19;2025:128:11;2058:5;;;;;;2170:10;;278:18;;1818:437;:::o;278:18::-;;894:32072:19;;;;;278:18:11;;894:32072:19;2141:1:11;278:18;;;894:32072:19;278:18:11;;;894:32072:19;278:18:11;894:32072:19;;;278:18:11;;2065:3;2105:11;;2113:3;2105:11;;2096:21;;;;;;-1:-1:-1;;;2096:21:11;;2084:33;;;;:::i;:::-;;2141:1;894:32072:19;2065:3:11;894:32072:19;;;;-1:-1:-1;;894:32072:19;;2030:26:11;;894:32072:19;;;;;;;;;2141:1:11;894:32072:19;;2096:21:11;894:32072:19;;;;;;;;2141:1:11;894:32072:19;;;;;;;;;;:::o;:::-;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;;;;;:::o;:::-;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;:::i;:::-;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;894:32072:19;;;;;;;;-1:-1:-1;;894:32072:19;;;;:::o;:::-;-1:-1:-1;;894:32072:19;;;;;;;:::o;:::-;;;;;;;;;;:::o;1767:106:2:-;894:32072:19;1685:7:2;894:32072:19;;;;1767:106:2:o;894:32072:19:-;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;2336:287:3;1759:1;2468:7;894:32072:19;2468:19:3;1759:1;;;2468:7;894:32072:19;2336:287:3:o;1759:1::-;894:32072:19;;-1:-1:-1;;;1759:1:3;;;;;;;;;;;894:32072:19;1759:1:3;894:32072:19;;;1759:1:3;;;;5196:642:8;894:32072:19;;;;;;;;;;;;;;;;-1:-1:-1;;;;;894:32072:19;;;;;5535:69:9;894:32072:19;;;;;;;;;;;;;-1:-1:-1;5487:31:9;;;;;;;;;;;;894:32072:19;;;;;;;;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;;5535:69:9;:::i;:::-;894:32072:19;;5728:22:8;;;:56;;;;;;894:32072:19;;;;;;;;;5196:642:8;:::o;894:32072:19:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;5728:56:8;5754:30;;;;;;;894:32072:19;;;;5754:30:8;;894:32072:19;;;;;;;;;5728:56:8;;;;;;;894:32072:19;;;;;;;;;;7671:628:9;;;;7875:418;;;894:32072:19;;;7906:22:9;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;894:32072:19;;8201:17:9;:::o;894:32072:19:-;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;;;;;;;;;7875:418:9;894:32072:19;;;;-1:-1:-1;8980:21:9;:17;;9152:142;;;;;;;8976:379;894:32072:19;;-1:-1:-1;;;9324:20:9;;894:32072:19;9324:20:9;;;894:32072:19;;;;;;;;;;;:::i;941:175:8:-;894:32072:19;;-1:-1:-1;;;1050:58:8;;;;-1:-1:-1;;;;;894:32072:19;;;;1050:58:8;;;894:32072:19;;;;;;;;;1050:58:8;;;;;;894:32072:19;;1050:58:8;:::i;:::-;;:::i;894:32072:19:-;;;;;;;;;;;;:::o;:::-;;-1:-1:-1;;;;;894:32072:19;;;;;;;:::o;:::-;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;23974:230::-;24066:11;894:32072;24066:16;;:36;;;;23974:230;24062:80;;24172:11;894:32072;24158:39;;;:::i;:::-;23974:230;:::o;24062:80::-;24118:13;;:::o;24066:36::-;894:32072;24086:11;894:32072;24086:16;24066:36;;1667:4213:15;;-1:-1:-1;;2239:166:15;1667:4213;2239:166;;;;;;;;;;;;;;;;2486:10;;2482:368;;2960:19;;;894:32072:19;;;3292:300:15;;;3944:1;3929:12;;894:32072:19;3914:32:15;;3960:371;;;4774:1;894:32072:19;;4755:1:15;894:32072:19;4754:21:15;894:32072:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3960:371:15;3944:1;3960:371;;894:32072:19;3960:371:15;;;3292:300;;;;;;894:32072:19;3292:300:15;;3960:371;4397:21;894:32072:19;1667:4213:15;:::o;894:32072:19:-;;;-1:-1:-1;;;894:32072:19;;;;;;;;;;;;-1:-1:-1;;;894:32072:19;;;;;;;2482:368:15;2816:19;;;;;;;:::i;24350:210:19:-;24442:11;894:32072;24442:16;;24438:60;;24528:11;894:32072;24514:39;;;:::i;28333:423::-;28503:1;28531:3;28510:12;894:32072;28506:23;;;;;28573:15;;28531:3;28573:15;;:::i;:::-;894:32072;;;;;;;;;;;;28503:1;894:32072;;28606:16;894:32072;;;;;28503:1;894:32072;;;28602:138;;28531:3;;;:::i;:::-;28491:13;;28602:138;894:32072;;28694:17;894:32072;;28656:10;894:32072;28503:1;894:32072;;;;28503:1;894:32072;28656:35;894:32072;28602:138;;;;28506:23;;28333:423::o"},"gasEstimates":{"creation":{"codeDepositCost":"2747800","executionCost":"infinite","totalCost":"infinite"},"external":{"ADMIN_ROLE()":"749","BASIS_POINTS()":"1145","DEFAULT_ADMIN_ROLE()":"947","MAX_ALLOCATION_PER_STRATEGY()":"683","MAX_STRATEGIES()":"771","MIN_REBALANCE_THRESHOLD()":"1201","MIN_STRATEGY_ALLOCATION()":"233","PERFORMANCE_WINDOW()":"617","REBALANCER_ROLE()":"529","REBALANCE_COOLDOWN()":"881","STRATEGY_MANAGER_ROLE()":"1035","activeStrategies(address)":"2575","addStrategy(address,string,uint256,uint256)":"infinite","asset()":"infinite","autoRebalance()":"infinite","autoRebalanceEnabled()":"3106","balanceOf(address)":"2981","convertToAssets(uint256)":"4864","convertToShares(uint256)":"7884","dailyYield(uint256)":"3292","deposit(uint256)":"infinite","emergencyPause()":"infinite","feeRecipient()":"2634","getCurrentAPY()":"infinite","getRoleAdmin(bytes32)":"2440","getStrategyInfo(address)":"infinite","getStrategyPerformance(address)":"infinite","grantRole(bytes32,address)":"infinite","harvestAll()":"infinite","hasRole(bytes32,address)":"3238","lastRebalance()":"2346","managementFee()":"3116","maxTotalRisk()":"2742","paused()":"2776","performanceFee()":"2918","rebalance(address[],uint256[])":"infinite","removeStrategy(address,string)":"infinite","renounceRole(bytes32,address)":"29030","revokeRole(bytes32,address)":"infinite","strategies(address)":"infinite","strategyList(uint256)":"7412","strategyPerformance(address)":"11467","supportsInterface(bytes4)":"301","targetAllocations(address)":"3421","totalAssets()":"2250","totalShares()":"2566","unpause()":"infinite","updateVaultParameters(uint256,uint256,address,bool)":"infinite","withdraw(uint256)":"infinite"},"internal":{"_allocateToStrategies(uint256)":"infinite","_calculateOptimalAllocations()":"infinite","_collectFees(uint256)":"infinite","_executeRebalance()":"infinite","_getActiveStrategyCount()":"infinite","_validateRiskLimits()":"infinite","_validateTotalAllocations()":"infinite","_withdrawFromStrategies(uint256)":"infinite"}},"methodIdentifiers":{"ADMIN_ROLE()":"75b238fc","BASIS_POINTS()":"e1f1c4a7","DEFAULT_ADMIN_ROLE()":"a217fddf","MAX_ALLOCATION_PER_STRATEGY()":"64d60a7d","MAX_STRATEGIES()":"767f06ae","MIN_REBALANCE_THRESHOLD()":"ef434d61","MIN_STRATEGY_ALLOCATION()":"0e7bd231","PERFORMANCE_WINDOW()":"55282902","REBALANCER_ROLE()":"490b48f8","REBALANCE_COOLDOWN()":"8faee2a8","STRATEGY_MANAGER_ROLE()":"abcbe0b2","activeStrategies(address)":"2c178bd0","addStrategy(address,string,uint256,uint256)":"527f116f","asset()":"38d52e0f","autoRebalance()":"7a6efd47","autoRebalanceEnabled()":"a5ac4dd1","balanceOf(address)":"70a08231","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","dailyYield(uint256)":"dcdf92fb","deposit(uint256)":"b6b55f25","emergencyPause()":"51858e27","feeRecipient()":"46904840","getCurrentAPY()":"962ca496","getRoleAdmin(bytes32)":"248a9ca3","getStrategyInfo(address)":"54192ad5","getStrategyPerformance(address)":"f51381da","grantRole(bytes32,address)":"2f2ff15d","harvestAll()":"8ed955b9","hasRole(bytes32,address)":"91d14854","lastRebalance()":"106b9ca1","managementFee()":"a6f7f5d6","maxTotalRisk()":"58d1d42a","paused()":"5c975abb","performanceFee()":"87788782","rebalance(address[],uint256[])":"2be01190","removeStrategy(address,string)":"8ea447e6","renounceRole(bytes32,address)":"36568abe","revokeRole(bytes32,address)":"d547741f","strategies(address)":"39ebf823","strategyList(uint256)":"a267526b","strategyPerformance(address)":"6b5cc294","supportsInterface(bytes4)":"01ffc9a7","targetAllocations(address)":"e8f8080c","totalAssets()":"01e1d114","totalShares()":"3a98ef39","unpause()":"3f4ba83a","updateVaultParameters(uint256,uint256,address,bool)":"357ad7ad","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedsRiskLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAllocation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTarget\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxStrategiesReached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RebalanceCooldownActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"action\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyAction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAPY\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sharpeRatio\",\"type\":\"uint256\"}],\"name\":\"PerformanceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"oldAllocations\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"newAllocations\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Rebalanced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialAllocation\",\"type\":\"uint256\"}],\"name\":\"StrategyAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsWithdrawn\",\"type\":\"uint256\"}],\"name\":\"StrategyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalYield\",\"type\":\"uint256\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BASIS_POINTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ALLOCATION_PER_STRATEGY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_STRATEGIES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_REBALANCE_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_STRATEGY_ALLOCATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERFORMANCE_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REBALANCE_COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialAllocation\",\"type\":\"uint256\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebalanceEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dailyYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultAPY\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IYieldStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct YieldVault.StrategyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getStrategyPerformance\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalYieldGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"apyHistory\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"lastPerformanceUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharpeRatio\",\"type\":\"uint256\"}],\"internalType\":\"struct YieldVault.PerformanceData\",\"name\":\"performance\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalYieldHarvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTotalRisk\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"strategyAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"newAllocations\",\"type\":\"uint256[]\"}],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"removeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"contract IYieldStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetAllocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdate\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyPerformance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalYieldGenerated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averageAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastPerformanceUpdate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sharpeRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"targetAllocations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_managementFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_autoRebalanceEnabled\",\"type\":\"bool\"}],\"name\":\"updateVaultParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"YieldRails Team  Key Features: - Multi-strategy yield optimization - Automatic rebalancing based on APY and risk scores - Emergency withdrawal capabilities - Real-time performance tracking - Risk-adjusted allocation algorithms\",\"details\":\"Manages multiple yield strategies and optimizes yield allocation\",\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addStrategy(address,string,uint256,uint256)\":{\"details\":\"Adds a new yield strategy to the vault\",\"params\":{\"initialAllocation\":\"Initial allocation in basis points\",\"name\":\"The strategy name\",\"riskScore\":\"The risk score (1-10)\",\"strategy\":\"The strategy contract address\"}},\"autoRebalance()\":{\"details\":\"Automatically rebalances based on performance and risk\"},\"balanceOf(address)\":{\"details\":\"Gets user's share balance\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"balance\":\"The user's share balance\"}},\"constructor\":{\"details\":\"Initialize the YieldVault\",\"params\":{\"_admin\":\"The admin address\",\"_asset\":\"The base asset for the vault (e.g., USDC)\",\"_feeRecipient\":\"The fee recipient address\"}},\"convertToAssets(uint256)\":{\"details\":\"Converts shares to assets\",\"params\":{\"shares\":\"The number of shares\"},\"returns\":{\"assets\":\"The equivalent assets\"}},\"convertToShares(uint256)\":{\"details\":\"Converts assets to shares\",\"params\":{\"assets\":\"The amount of assets\"},\"returns\":{\"shares\":\"The equivalent shares\"}},\"deposit(uint256)\":{\"details\":\"Deposits assets into the vault and allocates to strategies\",\"params\":{\"assets\":\"The amount of assets to deposit\"},\"returns\":{\"shares\":\"The number of shares minted\"}},\"emergencyPause()\":{\"details\":\"Emergency pause function\"},\"getCurrentAPY()\":{\"details\":\"Gets the current vault APY based on strategy performance\",\"returns\":{\"vaultAPY\":\"The weighted average APY\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getStrategyInfo(address)\":{\"details\":\"Gets strategy allocation data\",\"params\":{\"strategy\":\"The strategy address\"},\"returns\":{\"info\":\"The strategy information\"}},\"getStrategyPerformance(address)\":{\"details\":\"Gets performance data for a strategy\",\"params\":{\"strategy\":\"The strategy address\"},\"returns\":{\"performance\":\"The performance data\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"harvestAll()\":{\"details\":\"Harvests yield from all strategies\",\"returns\":{\"totalYieldHarvested\":\"The total yield harvested\"}},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"rebalance(address[],uint256[])\":{\"details\":\"Rebalances allocations across strategies\",\"params\":{\"newAllocations\":\"Array of new allocations (must sum to 10000)\"}},\"removeStrategy(address,string)\":{\"details\":\"Removes a strategy from the vault\",\"params\":{\"reason\":\"The reason for removal\",\"strategy\":\"The strategy to remove\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unpause()\":{\"details\":\"Resume operations\"},\"updateVaultParameters(uint256,uint256,address,bool)\":{\"details\":\"Updates vault parameters\"},\"withdraw(uint256)\":{\"details\":\"Withdraws assets from the vault\",\"params\":{\"shares\":\"The number of shares to burn\"},\"returns\":{\"assets\":\"The amount of assets withdrawn\"}}},\"title\":\"YieldVault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Central vault for yield generation across multiple DeFi protocols\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/YieldVault.sol\":\"YieldVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"src/YieldVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IYieldStrategy.sol\\\";\\n\\n/**\\n * @title YieldVault\\n * @dev Manages multiple yield strategies and optimizes yield allocation\\n * @notice Central vault for yield generation across multiple DeFi protocols\\n * @author YieldRails Team\\n * \\n * Key Features:\\n * - Multi-strategy yield optimization\\n * - Automatic rebalancing based on APY and risk scores\\n * - Emergency withdrawal capabilities\\n * - Real-time performance tracking\\n * - Risk-adjusted allocation algorithms\\n */\\ncontract YieldVault is ReentrancyGuard, Pausable, AccessControl {\\n    using SafeERC20 for IERC20;\\n    using Math for uint256;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTANTS & IMMUTABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant STRATEGY_MANAGER_ROLE = keccak256(\\\"STRATEGY_MANAGER_ROLE\\\");\\n    bytes32 public constant REBALANCER_ROLE = keccak256(\\\"REBALANCER_ROLE\\\");\\n\\n    // Risk and allocation constants\\n    uint256 public constant MAX_STRATEGIES = 10;\\n    uint256 public constant BASIS_POINTS = 10000;\\n    uint256 public constant MAX_ALLOCATION_PER_STRATEGY = 5000; // 50%\\n    uint256 public constant MIN_REBALANCE_THRESHOLD = 100; // 1%\\n    uint256 public constant REBALANCE_COOLDOWN = 1 hours;\\n\\n    // Performance tracking\\n    uint256 public constant PERFORMANCE_WINDOW = 7 days;\\n    uint256 public constant MIN_STRATEGY_ALLOCATION = 100; // 1%\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STATE VARIABLES\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    // Core vault state\\n    IERC20 public immutable asset; // Base asset (e.g., USDC)\\n    uint256 public totalAssets;\\n    uint256 public totalShares;\\n    \\n    // Strategy management\\n    mapping(address => StrategyInfo) public strategies;\\n    address[] public strategyList;\\n    mapping(address => bool) public activeStrategies;\\n    \\n    // User balances\\n    mapping(address => uint256) private _balances;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n    \\n    // Performance tracking\\n    mapping(address => PerformanceData) public strategyPerformance;\\n    mapping(uint256 => uint256) public dailyYield; // day => yield amount\\n    \\n    // Rebalancing state\\n    uint256 public lastRebalance;\\n    mapping(address => uint256) public targetAllocations; // strategy => allocation (basis points)\\n    \\n    // Vault parameters\\n    uint256 public managementFee = 200; // 2% annually\\n    uint256 public performanceFee = 1000; // 10% of profits\\n    address public feeRecipient;\\n    \\n    // Risk management\\n    uint256 public maxTotalRisk = 5; // Maximum weighted risk score\\n    bool public autoRebalanceEnabled = true;\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy information and allocation data\\n     */\\n    struct StrategyInfo {\\n        IYieldStrategy strategy;        // Strategy contract\\n        uint256 allocation;            // Current allocation (basis points)\\n        uint256 targetAllocation;     // Target allocation (basis points)\\n        uint256 totalDeposited;       // Total amount deposited to strategy\\n        uint256 lastUpdate;           // Last update timestamp\\n        bool active;                  // Whether strategy is active\\n        uint256 riskScore;            // Risk score (1-10)\\n        string name;                  // Strategy name\\n    }\\n\\n    /**\\n     * @dev Performance tracking data\\n     */\\n    struct PerformanceData {\\n        uint256 totalYieldGenerated;   // Total yield generated\\n        uint256 averageAPY;           // Historical average APY\\n        uint256 lastAPY;              // Last recorded APY\\n        uint256[] apyHistory;         // APY history for performance analysis\\n        uint256 lastPerformanceUpdate; // Last performance update\\n        uint256 sharpeRatio;          // Risk-adjusted returns\\n    }\\n\\n    /**\\n     * @dev Rebalancing proposal\\n     */\\n    struct RebalanceProposal {\\n        address[] strategies;\\n        uint256[] newAllocations;\\n        uint256 timestamp;\\n        string reason;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    event StrategyAdded(\\n        address indexed strategy,\\n        string name,\\n        uint256 riskScore,\\n        uint256 initialAllocation\\n    );\\n\\n    event StrategyRemoved(\\n        address indexed strategy,\\n        string reason,\\n        uint256 fundsWithdrawn\\n    );\\n\\n    event Deposit(\\n        address indexed user,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Withdrawal(\\n        address indexed user,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    event Rebalanced(\\n        address indexed rebalancer,\\n        address[] strategies,\\n        uint256[] oldAllocations,\\n        uint256[] newAllocations,\\n        uint256 timestamp\\n    );\\n\\n    event YieldHarvested(\\n        address indexed strategy,\\n        uint256 yieldAmount,\\n        uint256 newTotalYield\\n    );\\n\\n    event PerformanceUpdated(\\n        address indexed strategy,\\n        uint256 newAPY,\\n        uint256 sharpeRatio\\n    );\\n\\n    event EmergencyAction(\\n        address indexed admin,\\n        string action,\\n        address indexed strategy,\\n        uint256 amount\\n    );\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ERRORS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    error InvalidStrategy();\\n    error StrategyAlreadyExists();\\n    error StrategyNotActive();\\n    error MaxStrategiesReached();\\n    error InvalidAllocation();\\n    error InsufficientBalance();\\n    error InvalidAmount();\\n    error RebalanceCooldownActive();\\n    error ExceedsRiskLimit();\\n    error InvalidTarget();\\n    error TransferFailed();\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // CONSTRUCTOR\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Initialize the YieldVault\\n     * @param _asset The base asset for the vault (e.g., USDC)\\n     * @param _admin The admin address\\n     * @param _feeRecipient The fee recipient address\\n     */\\n    constructor(\\n        address _asset,\\n        address _admin,\\n        address _feeRecipient\\n    ) {\\n        if (_asset == address(0) || _admin == address(0) || _feeRecipient == address(0)) {\\n            revert InvalidAmount();\\n        }\\n\\n        asset = IERC20(_asset);\\n        feeRecipient = _feeRecipient;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\\n        _grantRole(ADMIN_ROLE, _admin);\\n        _grantRole(STRATEGY_MANAGER_ROLE, _admin);\\n        _grantRole(REBALANCER_ROLE, _admin);\\n\\n        lastRebalance = block.timestamp;\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY MANAGEMENT FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Adds a new yield strategy to the vault\\n     * @param strategy The strategy contract address\\n     * @param name The strategy name\\n     * @param riskScore The risk score (1-10)\\n     * @param initialAllocation Initial allocation in basis points\\n     */\\n    function addStrategy(\\n        address strategy,\\n        string calldata name,\\n        uint256 riskScore,\\n        uint256 initialAllocation\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (strategy == address(0)) revert InvalidStrategy();\\n        if (activeStrategies[strategy]) revert StrategyAlreadyExists();\\n        if (strategyList.length >= MAX_STRATEGIES) revert MaxStrategiesReached();\\n        if (riskScore == 0 || riskScore > 10) revert InvalidAmount();\\n        if (initialAllocation > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\\n\\n        // Verify strategy implements IYieldStrategy\\n        try IYieldStrategy(strategy).asset() returns (address strategyAsset) {\\n            if (strategyAsset != address(asset)) revert InvalidStrategy();\\n        } catch {\\n            revert InvalidStrategy();\\n        }\\n\\n        strategies[strategy] = StrategyInfo({\\n            strategy: IYieldStrategy(strategy),\\n            allocation: initialAllocation,\\n            targetAllocation: initialAllocation,\\n            totalDeposited: 0,\\n            lastUpdate: block.timestamp,\\n            active: true,\\n            riskScore: riskScore,\\n            name: name\\n        });\\n\\n        activeStrategies[strategy] = true;\\n        strategyList.push(strategy);\\n        targetAllocations[strategy] = initialAllocation;\\n\\n        // Initialize performance data\\n        strategyPerformance[strategy] = PerformanceData({\\n            totalYieldGenerated: 0,\\n            averageAPY: 0,\\n            lastAPY: 0,\\n            apyHistory: new uint256[](0),\\n            lastPerformanceUpdate: block.timestamp,\\n            sharpeRatio: 0\\n        });\\n\\n        // Validate total risk doesn't exceed limit\\n        _validateRiskLimits();\\n\\n        emit StrategyAdded(strategy, name, riskScore, initialAllocation);\\n    }\\n\\n    /**\\n     * @dev Removes a strategy from the vault\\n     * @param strategy The strategy to remove\\n     * @param reason The reason for removal\\n     */\\n    function removeStrategy(\\n        address strategy,\\n        string calldata reason\\n    ) external onlyRole(STRATEGY_MANAGER_ROLE) {\\n        if (!activeStrategies[strategy]) revert StrategyNotActive();\\n\\n        StrategyInfo storage strategyInfo = strategies[strategy];\\n        \\n        // Withdraw all funds from strategy\\n        uint256 withdrawnAmount = 0;\\n        if (strategyInfo.totalDeposited > 0) {\\n            try strategyInfo.strategy.withdraw(strategyInfo.totalDeposited) \\n                returns (uint256 amount) {\\n                withdrawnAmount = amount;\\n            } catch {\\n                // Try emergency withdrawal\\n                try strategyInfo.strategy.emergencyWithdraw(address(this)) \\n                    returns (uint256 emergencyAmount) {\\n                    withdrawnAmount = emergencyAmount;\\n                } catch {\\n                    // Strategy withdrawal failed - mark as inactive but keep record\\n                }\\n            }\\n        }\\n\\n        // Update state\\n        activeStrategies[strategy] = false;\\n        strategyInfo.active = false;\\n        strategyInfo.allocation = 0;\\n        targetAllocations[strategy] = 0;\\n\\n        // Remove from strategy list\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (strategyList[i] == strategy) {\\n                strategyList[i] = strategyList[strategyList.length - 1];\\n                strategyList.pop();\\n                break;\\n            }\\n        }\\n\\n        emit StrategyRemoved(strategy, reason, withdrawnAmount);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the vault and allocates to strategies\\n     * @param assets The amount of assets to deposit\\n     * @return shares The number of shares minted\\n     */\\n    function deposit(uint256 assets) external nonReentrant whenNotPaused returns (uint256 shares) {\\n        if (assets == 0) revert InvalidAmount();\\n\\n        // Calculate shares to mint\\n        shares = convertToShares(assets);\\n\\n        // Transfer assets from user\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        // Update balances\\n        _balances[msg.sender] += shares;\\n        totalShares += shares;\\n        totalAssets += assets;\\n\\n        // Allocate to strategies\\n        _allocateToStrategies(assets);\\n\\n        emit Deposit(msg.sender, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraws assets from the vault\\n     * @param shares The number of shares to burn\\n     * @return assets The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external nonReentrant returns (uint256 assets) {\\n        if (shares == 0) revert InvalidAmount();\\n        if (_balances[msg.sender] < shares) revert InsufficientBalance();\\n\\n        // Calculate assets to withdraw\\n        assets = convertToAssets(shares);\\n\\n        // Withdraw from strategies as needed\\n        _withdrawFromStrategies(assets);\\n\\n        // Update balances\\n        _balances[msg.sender] -= shares;\\n        totalShares -= shares;\\n        totalAssets -= assets;\\n\\n        // Transfer assets to user\\n        asset.safeTransfer(msg.sender, assets);\\n\\n        emit Withdrawal(msg.sender, assets, shares);\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD OPTIMIZATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Rebalances allocations across strategies\\n     * @param newAllocations Array of new allocations (must sum to 10000)\\n     */\\n    function rebalance(\\n        address[] calldata strategyAddresses,\\n        uint256[] calldata newAllocations\\n    ) external onlyRole(REBALANCER_ROLE) {\\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\\n            revert RebalanceCooldownActive();\\n        }\\n        if (strategyAddresses.length != newAllocations.length) revert InvalidAmount();\\n\\n        // Validate allocations\\n        uint256 totalAllocation = 0;\\n        for (uint256 i = 0; i < newAllocations.length; i++) {\\n            if (!activeStrategies[strategyAddresses[i]]) revert StrategyNotActive();\\n            if (newAllocations[i] > MAX_ALLOCATION_PER_STRATEGY) revert InvalidAllocation();\\n            totalAllocation += newAllocations[i];\\n        }\\n        \\n        // For rebalance, we require that all strategies are included and sum to 100%\\n        if (strategyAddresses.length != _getActiveStrategyCount()) revert InvalidAllocation();\\n        if (totalAllocation != BASIS_POINTS) revert InvalidAllocation();\\n\\n        // Store old allocations for event\\n        uint256[] memory oldAllocations = new uint256[](strategyAddresses.length);\\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\\n            oldAllocations[i] = strategies[strategyAddresses[i]].allocation;\\n        }\\n\\n        // Update target allocations\\n        for (uint256 i = 0; i < strategyAddresses.length; i++) {\\n            targetAllocations[strategyAddresses[i]] = newAllocations[i];\\n        }\\n\\n        // Execute rebalancing (updates actual allocations)\\n        _executeRebalance();\\n\\n        lastRebalance = block.timestamp;\\n\\n        emit Rebalanced(msg.sender, strategyAddresses, oldAllocations, newAllocations, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Automatically rebalances based on performance and risk\\n     */\\n    function autoRebalance() external onlyRole(REBALANCER_ROLE) {\\n        if (!autoRebalanceEnabled) revert InvalidTarget();\\n        if (block.timestamp < lastRebalance + REBALANCE_COOLDOWN) {\\n            revert RebalanceCooldownActive();\\n        }\\n\\n        // Calculate optimal allocations\\n        uint256[] memory optimalAllocations = _calculateOptimalAllocations();\\n        \\n        // Update target allocations\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategy = strategyList[i];\\n            if (activeStrategies[strategy]) {\\n                targetAllocations[strategy] = optimalAllocations[i];\\n            }\\n        }\\n\\n        // Execute rebalancing\\n        _executeRebalance();\\n\\n        lastRebalance = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Harvests yield from all strategies\\n     * @return totalYieldHarvested The total yield harvested\\n     */\\n    function harvestAll() external nonReentrant returns (uint256 totalYieldHarvested) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                \\n                try strategyInfo.strategy.harvestYield() returns (uint256 yieldHarvested) {\\n                    if (yieldHarvested > 0) {\\n                        totalYieldHarvested += yieldHarvested;\\n                        \\n                        // Update performance tracking\\n                        strategyPerformance[strategyAddr].totalYieldGenerated += yieldHarvested;\\n                        \\n                        emit YieldHarvested(strategyAddr, yieldHarvested, \\n                            strategyPerformance[strategyAddr].totalYieldGenerated);\\n                    }\\n                } catch {\\n                    // Strategy harvest failed - continue with others\\n                    continue;\\n                }\\n            }\\n        }\\n\\n        // Update daily yield tracking\\n        uint256 today = block.timestamp / 1 days;\\n        dailyYield[today] += totalYieldHarvested;\\n\\n        // Collect fees if applicable\\n        if (totalYieldHarvested > 0) {\\n            _collectFees(totalYieldHarvested);\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // VIEW FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets the current vault APY based on strategy performance\\n     * @return vaultAPY The weighted average APY\\n     */\\n    function getCurrentAPY() external view returns (uint256 vaultAPY) {\\n        uint256 totalWeightedAPY = 0;\\n        uint256 totalWeight = 0;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\\n                \\n                try strategyInfo.strategy.getCurrentAPY() returns (uint256 strategyAPY) {\\n                    uint256 weight = strategyInfo.allocation;\\n                    totalWeightedAPY += strategyAPY * weight;\\n                    totalWeight += weight;\\n                } catch {\\n                    // Strategy APY call failed - skip\\n                    continue;\\n                }\\n            }\\n        }\\n\\n        if (totalWeight > 0) {\\n            vaultAPY = totalWeightedAPY / totalWeight;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent shares\\n     */\\n    function convertToShares(uint256 assets) public view returns (uint256 shares) {\\n        if (totalAssets == 0 || totalShares == 0) {\\n            return assets;\\n        }\\n        return assets.mulDiv(totalShares, totalAssets);\\n    }\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent assets\\n     */\\n    function convertToAssets(uint256 shares) public view returns (uint256 assets) {\\n        if (totalShares == 0) {\\n            return shares;\\n        }\\n        return shares.mulDiv(totalAssets, totalShares);\\n    }\\n\\n    /**\\n     * @dev Gets user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance) {\\n        return _balances[user];\\n    }\\n\\n    /**\\n     * @dev Gets strategy allocation data\\n     * @param strategy The strategy address\\n     * @return info The strategy information\\n     */\\n    function getStrategyInfo(address strategy) external view returns (StrategyInfo memory info) {\\n        return strategies[strategy];\\n    }\\n\\n    /**\\n     * @dev Gets performance data for a strategy\\n     * @param strategy The strategy address\\n     * @return performance The performance data\\n     */\\n    function getStrategyPerformance(address strategy) \\n        external \\n        view \\n        returns (PerformanceData memory performance) \\n    {\\n        return strategyPerformance[strategy];\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // INTERNAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    function _allocateToStrategies(uint256 assets) internal {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                uint256 allocationAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\\n                \\n                if (allocationAmount > 0) {\\n                    asset.safeApprove(strategyAddr, allocationAmount);\\n                    try strategyInfo.strategy.deposit(allocationAmount) {\\n                        strategyInfo.totalDeposited += allocationAmount;\\n                    } catch {\\n                        // Strategy deposit failed - handle gracefully\\n                        asset.safeApprove(strategyAddr, 0);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _withdrawFromStrategies(uint256 assets) internal {\\n        uint256 remainingToWithdraw = assets;\\n        \\n        // Withdraw proportionally from strategies\\n        for (uint256 i = 0; i < strategyList.length && remainingToWithdraw > 0; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo storage strategyInfo = strategies[strategyAddr];\\n                \\n                uint256 proportionalAmount = (assets * strategyInfo.allocation) / BASIS_POINTS;\\n                uint256 withdrawAmount = Math.min(proportionalAmount, \\n                    Math.min(remainingToWithdraw, strategyInfo.totalDeposited));\\n                \\n                if (withdrawAmount > 0) {\\n                    try strategyInfo.strategy.withdraw(withdrawAmount) returns (uint256 withdrawn) {\\n                        strategyInfo.totalDeposited -= Math.min(withdrawAmount, strategyInfo.totalDeposited);\\n                        remainingToWithdraw -= Math.min(withdrawn, remainingToWithdraw);\\n                    } catch {\\n                        // Strategy withdrawal failed - continue with others\\n                        continue;\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    function _executeRebalance() internal {\\n        // Implementation would involve complex rebalancing logic\\n        // For now, update allocations\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                strategies[strategyAddr].allocation = targetAllocations[strategyAddr];\\n            }\\n        }\\n    }\\n\\n    function _calculateOptimalAllocations() internal view returns (uint256[] memory allocations) {\\n        allocations = new uint256[](strategyList.length);\\n        \\n        // Simple implementation - equal weight for active strategies\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                activeCount++;\\n            }\\n        }\\n        \\n        if (activeCount > 0) {\\n            uint256 equalWeight = BASIS_POINTS / activeCount;\\n            for (uint256 i = 0; i < strategyList.length; i++) {\\n                if (activeStrategies[strategyList[i]]) {\\n                    allocations[i] = equalWeight;\\n                }\\n            }\\n        }\\n    }\\n\\n    function _getActiveStrategyCount() internal view returns (uint256 count) {\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            if (activeStrategies[strategyList[i]]) {\\n                count++;\\n            }\\n        }\\n    }\\n\\n    function _validateTotalAllocations() internal view {\\n        uint256 totalAllocation = 0;\\n        \\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                totalAllocation += strategies[strategyAddr].allocation;\\n            }\\n        }\\n        \\n        if (totalAllocation > BASIS_POINTS) {\\n            revert InvalidAllocation();\\n        }\\n    }\\n\\n    function _validateRiskLimits() internal view {\\n        uint256 totalWeightedRisk = 0;\\n        uint256 totalWeight = 0;\\n\\n        for (uint256 i = 0; i < strategyList.length; i++) {\\n            address strategyAddr = strategyList[i];\\n            if (activeStrategies[strategyAddr]) {\\n                StrategyInfo memory strategyInfo = strategies[strategyAddr];\\n                totalWeightedRisk += strategyInfo.riskScore * strategyInfo.allocation;\\n                totalWeight += strategyInfo.allocation;\\n            }\\n        }\\n\\n        if (totalWeight > 0) {\\n            uint256 avgRisk = totalWeightedRisk / totalWeight;\\n            if (avgRisk > maxTotalRisk) {\\n                revert ExceedsRiskLimit();\\n            }\\n        }\\n    }\\n\\n    function _collectFees(uint256 yieldAmount) internal {\\n        if (performanceFee > 0 && yieldAmount > 0) {\\n            uint256 feeAmount = (yieldAmount * performanceFee) / BASIS_POINTS;\\n            uint256 availableBalance = asset.balanceOf(address(this));\\n            \\n            if (feeAmount > 0 && availableBalance >= feeAmount) {\\n                asset.safeTransfer(feeRecipient, feeAmount);\\n            }\\n        }\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // ADMIN FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emergency pause function\\n     */\\n    function emergencyPause() external onlyRole(ADMIN_ROLE) {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Resume operations\\n     */\\n    function unpause() external onlyRole(ADMIN_ROLE) {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Updates vault parameters\\n     */\\n    function updateVaultParameters(\\n        uint256 _managementFee,\\n        uint256 _performanceFee,\\n        address _feeRecipient,\\n        bool _autoRebalanceEnabled\\n    ) external onlyRole(ADMIN_ROLE) {\\n        if (_managementFee > 1000 || _performanceFee > 2000) revert InvalidAmount(); // Max 10%/20%\\n        if (_feeRecipient == address(0)) revert InvalidAmount();\\n\\n        managementFee = _managementFee;\\n        performanceFee = _performanceFee;\\n        feeRecipient = _feeRecipient;\\n        autoRebalanceEnabled = _autoRebalanceEnabled;\\n    }\\n}\",\"keccak256\":\"0xad55d41ac76e13afaa73d75d0d774202a68b3b89713d2c07e7b3eafdbe7168c6\",\"license\":\"MIT\"},\"src/interfaces/IYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IYieldStrategy\\n * @dev Interface for yield generation strategies in YieldRails\\n * @notice All yield strategies must implement this interface for compatibility\\n * @author YieldRails Team\\n */\\ninterface IYieldStrategy {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emitted when funds are deposited into the strategy\\n     * @param user The address that deposited funds\\n     * @param amount The amount deposited\\n     * @param shares The number of shares minted\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when funds are withdrawn from the strategy\\n     * @param user The address that withdrew funds\\n     * @param amount The amount withdrawn\\n     * @param shares The number of shares burned\\n     */\\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when yield is harvested\\n     * @param yieldAmount The amount of yield harvested\\n     * @param newTotalAssets The new total assets under management\\n     */\\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\\n\\n    /**\\n     * @dev Emitted when strategy parameters are updated\\n     * @param parameter The parameter that was updated\\n     * @param oldValue The old value\\n     * @param newValue The new value\\n     */\\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy metadata and performance metrics\\n     */\\n    struct StrategyInfo {\\n        string name;                // Strategy name (e.g., \\\"T-Bill Strategy\\\")\\n        string description;         // Strategy description\\n        uint256 totalAssets;        // Total assets under management\\n        uint256 totalShares;        // Total shares outstanding\\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\\n        uint256 lastHarvest;        // Timestamp of last yield harvest\\n        bool active;                // Whether strategy is active\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the yield strategy\\n     * @param amount The amount of assets to deposit\\n     * @return shares The number of shares minted to the depositor\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Withdraws assets from the yield strategy\\n     * @param shares The number of shares to burn\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external returns (uint256 amount);\\n\\n    /**\\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\\n     * @param user The address to withdraw funds for\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function emergencyWithdraw(address user) external returns (uint256 amount);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates the current APY of the strategy\\n     * @return apy The current APY in basis points\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @dev Calculates yield generated for a specific user\\n     * @param user The user address\\n     * @return yieldAmount The amount of yield generated\\n     */\\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\\n\\n    /**\\n     * @dev Calculates the total yield generated by the strategy\\n     * @return totalYield The total yield generated\\n     */\\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\\n\\n    /**\\n     * @dev Harvests yield from the underlying protocol\\n     * @return yieldHarvested The amount of yield harvested\\n     */\\n    function harvestYield() external returns (uint256 yieldHarvested);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // SHARE CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent number of shares\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent amount of assets\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Gets the user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY INFORMATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets comprehensive strategy information\\n     * @return info The strategy information struct\\n     */\\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\\n\\n    /**\\n     * @dev Gets the underlying asset address\\n     * @return asset The address of the underlying asset (e.g., USDC)\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     * @dev Gets the total assets under management\\n     * @return totalManagedAssets The total assets managed by this strategy\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Gets the strategy's risk score\\n     * @return risk The risk score from 1-10 (1 = lowest risk)\\n     */\\n    function getRiskScore() external view returns (uint256 risk);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PERFORMANCE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets historical performance data\\n     * @param period The time period to look back (in seconds)\\n     * @return performance The performance data for the specified period\\n     */\\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\\n\\n    /**\\n     * @dev Checks if the strategy is profitable\\n     * @return profitable Whether the strategy is currently profitable\\n     */\\n    function isProfitable() external view returns (bool profitable);\\n\\n    /**\\n     * @dev Gets the maximum capacity of the strategy\\n     * @return maxCapacity The maximum amount of assets the strategy can handle\\n     */\\n    function maxCapacity() external view returns (uint256 maxCapacity);\\n\\n    /**\\n     * @dev Gets the current utilization rate\\n     * @return utilization The utilization rate as a percentage (basis points)\\n     */\\n    function utilizationRate() external view returns (uint256 utilization);\\n}\",\"keccak256\":\"0x3dbcde8604a18aff443ee40442187a697d0c9772bfe40e650f9e3b4da40b38cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":507,"contract":"src/YieldVault.sol:YieldVault","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":406,"contract":"src/YieldVault.sol:YieldVault","label":"_paused","offset":0,"slot":"1","type":"t_bool"},{"astId":24,"contract":"src/YieldVault.sol:YieldVault","label":"_roles","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_struct(RoleData)19_storage)"},{"astId":6200,"contract":"src/YieldVault.sol:YieldVault","label":"totalAssets","offset":0,"slot":"3","type":"t_uint256"},{"astId":6202,"contract":"src/YieldVault.sol:YieldVault","label":"totalShares","offset":0,"slot":"4","type":"t_uint256"},{"astId":6207,"contract":"src/YieldVault.sol:YieldVault","label":"strategies","offset":0,"slot":"5","type":"t_mapping(t_address,t_struct(StrategyInfo)6272_storage)"},{"astId":6210,"contract":"src/YieldVault.sol:YieldVault","label":"strategyList","offset":0,"slot":"6","type":"t_array(t_address)dyn_storage"},{"astId":6214,"contract":"src/YieldVault.sol:YieldVault","label":"activeStrategies","offset":0,"slot":"7","type":"t_mapping(t_address,t_bool)"},{"astId":6218,"contract":"src/YieldVault.sol:YieldVault","label":"_balances","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"},{"astId":6224,"contract":"src/YieldVault.sol:YieldVault","label":"_allowances","offset":0,"slot":"9","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":6229,"contract":"src/YieldVault.sol:YieldVault","label":"strategyPerformance","offset":0,"slot":"10","type":"t_mapping(t_address,t_struct(PerformanceData)6287_storage)"},{"astId":6233,"contract":"src/YieldVault.sol:YieldVault","label":"dailyYield","offset":0,"slot":"11","type":"t_mapping(t_uint256,t_uint256)"},{"astId":6235,"contract":"src/YieldVault.sol:YieldVault","label":"lastRebalance","offset":0,"slot":"12","type":"t_uint256"},{"astId":6239,"contract":"src/YieldVault.sol:YieldVault","label":"targetAllocations","offset":0,"slot":"13","type":"t_mapping(t_address,t_uint256)"},{"astId":6242,"contract":"src/YieldVault.sol:YieldVault","label":"managementFee","offset":0,"slot":"14","type":"t_uint256"},{"astId":6245,"contract":"src/YieldVault.sol:YieldVault","label":"performanceFee","offset":0,"slot":"15","type":"t_uint256"},{"astId":6247,"contract":"src/YieldVault.sol:YieldVault","label":"feeRecipient","offset":0,"slot":"16","type":"t_address"},{"astId":6250,"contract":"src/YieldVault.sol:YieldVault","label":"maxTotalRisk","offset":0,"slot":"17","type":"t_uint256"},{"astId":6253,"contract":"src/YieldVault.sol:YieldVault","label":"autoRebalanceEnabled","offset":0,"slot":"18","type":"t_bool"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_address)dyn_storage":{"base":"t_address","encoding":"dynamic_array","label":"address[]","numberOfBytes":"32"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_contract(IYieldStrategy)8169":{"encoding":"inplace","label":"contract IYieldStrategy","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_struct(PerformanceData)6287_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct YieldVault.PerformanceData)","numberOfBytes":"32","value":"t_struct(PerformanceData)6287_storage"},"t_mapping(t_address,t_struct(StrategyInfo)6272_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct YieldVault.StrategyInfo)","numberOfBytes":"32","value":"t_struct(StrategyInfo)6272_storage"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_struct(RoleData)19_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AccessControl.RoleData)","numberOfBytes":"32","value":"t_struct(RoleData)19_storage"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(PerformanceData)6287_storage":{"encoding":"inplace","label":"struct YieldVault.PerformanceData","members":[{"astId":6275,"contract":"src/YieldVault.sol:YieldVault","label":"totalYieldGenerated","offset":0,"slot":"0","type":"t_uint256"},{"astId":6277,"contract":"src/YieldVault.sol:YieldVault","label":"averageAPY","offset":0,"slot":"1","type":"t_uint256"},{"astId":6279,"contract":"src/YieldVault.sol:YieldVault","label":"lastAPY","offset":0,"slot":"2","type":"t_uint256"},{"astId":6282,"contract":"src/YieldVault.sol:YieldVault","label":"apyHistory","offset":0,"slot":"3","type":"t_array(t_uint256)dyn_storage"},{"astId":6284,"contract":"src/YieldVault.sol:YieldVault","label":"lastPerformanceUpdate","offset":0,"slot":"4","type":"t_uint256"},{"astId":6286,"contract":"src/YieldVault.sol:YieldVault","label":"sharpeRatio","offset":0,"slot":"5","type":"t_uint256"}],"numberOfBytes":"192"},"t_struct(RoleData)19_storage":{"encoding":"inplace","label":"struct AccessControl.RoleData","members":[{"astId":16,"contract":"src/YieldVault.sol:YieldVault","label":"members","offset":0,"slot":"0","type":"t_mapping(t_address,t_bool)"},{"astId":18,"contract":"src/YieldVault.sol:YieldVault","label":"adminRole","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_struct(StrategyInfo)6272_storage":{"encoding":"inplace","label":"struct YieldVault.StrategyInfo","members":[{"astId":6257,"contract":"src/YieldVault.sol:YieldVault","label":"strategy","offset":0,"slot":"0","type":"t_contract(IYieldStrategy)8169"},{"astId":6259,"contract":"src/YieldVault.sol:YieldVault","label":"allocation","offset":0,"slot":"1","type":"t_uint256"},{"astId":6261,"contract":"src/YieldVault.sol:YieldVault","label":"targetAllocation","offset":0,"slot":"2","type":"t_uint256"},{"astId":6263,"contract":"src/YieldVault.sol:YieldVault","label":"totalDeposited","offset":0,"slot":"3","type":"t_uint256"},{"astId":6265,"contract":"src/YieldVault.sol:YieldVault","label":"lastUpdate","offset":0,"slot":"4","type":"t_uint256"},{"astId":6267,"contract":"src/YieldVault.sol:YieldVault","label":"active","offset":0,"slot":"5","type":"t_bool"},{"astId":6269,"contract":"src/YieldVault.sol:YieldVault","label":"riskScore","offset":0,"slot":"6","type":"t_uint256"},{"astId":6271,"contract":"src/YieldVault.sol:YieldVault","label":"name","offset":0,"slot":"7","type":"t_string_storage"}],"numberOfBytes":"256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"notice":"Central vault for yield generation across multiple DeFi protocols","version":1}}},"src/interfaces/IYieldStrategy.sol":{"IYieldStrategy":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"parameter","type":"string"},{"indexed":false,"internalType":"uint256","name":"oldValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newValue","type":"uint256"}],"name":"StrategyUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalAssets","type":"uint256"}],"name":"YieldHarvested","type":"event"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"asset","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"calculateUserYield","outputs":[{"internalType":"uint256","name":"yieldAmount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"emergencyWithdraw","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCurrentAPY","outputs":[{"internalType":"uint256","name":"apy","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"period","type":"uint256"}],"name":"getPerformanceData","outputs":[{"internalType":"uint256","name":"performance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRiskScore","outputs":[{"internalType":"uint256","name":"risk","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getStrategyInfo","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"totalAssets","type":"uint256"},{"internalType":"uint256","name":"totalShares","type":"uint256"},{"internalType":"uint256","name":"currentAPY","type":"uint256"},{"internalType":"uint256","name":"riskScore","type":"uint256"},{"internalType":"uint256","name":"lastHarvest","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct IYieldStrategy.StrategyInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalYieldGenerated","outputs":[{"internalType":"uint256","name":"totalYield","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvestYield","outputs":[{"internalType":"uint256","name":"yieldHarvested","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isProfitable","outputs":[{"internalType":"bool","name":"profitable","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"maxCapacity","outputs":[{"internalType":"uint256","name":"maxCapacity","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"totalManagedAssets","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"utilizationRate","outputs":[{"internalType":"uint256","name":"utilization","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"YieldRails Team","details":"Interface for yield generation strategies in YieldRails","events":{"Deposit(address,uint256,uint256)":{"details":"Emitted when funds are deposited into the strategy","params":{"amount":"The amount deposited","shares":"The number of shares minted","user":"The address that deposited funds"}},"StrategyUpdated(string,uint256,uint256)":{"details":"Emitted when strategy parameters are updated","params":{"newValue":"The new value","oldValue":"The old value","parameter":"The parameter that was updated"}},"Withdrawal(address,uint256,uint256)":{"details":"Emitted when funds are withdrawn from the strategy","params":{"amount":"The amount withdrawn","shares":"The number of shares burned","user":"The address that withdrew funds"}},"YieldHarvested(uint256,uint256)":{"details":"Emitted when yield is harvested","params":{"newTotalAssets":"The new total assets under management","yieldAmount":"The amount of yield harvested"}}},"kind":"dev","methods":{"asset()":{"details":"Gets the underlying asset address","returns":{"asset":"The address of the underlying asset (e.g., USDC)"}},"balanceOf(address)":{"details":"Gets the user's share balance","params":{"user":"The user address"},"returns":{"balance":"The user's share balance"}},"calculateUserYield(address)":{"details":"Calculates yield generated for a specific user","params":{"user":"The user address"},"returns":{"yieldAmount":"The amount of yield generated"}},"convertToAssets(uint256)":{"details":"Converts shares to assets","params":{"shares":"The number of shares"},"returns":{"assets":"The equivalent amount of assets"}},"convertToShares(uint256)":{"details":"Converts assets to shares","params":{"assets":"The amount of assets"},"returns":{"shares":"The equivalent number of shares"}},"deposit(uint256)":{"details":"Deposits assets into the yield strategy","params":{"amount":"The amount of assets to deposit"},"returns":{"shares":"The number of shares minted to the depositor"}},"emergencyWithdraw(address)":{"details":"Emergency withdrawal of all user funds (may incur penalties)","params":{"user":"The address to withdraw funds for"},"returns":{"amount":"The amount of assets withdrawn"}},"getCurrentAPY()":{"details":"Calculates the current APY of the strategy","returns":{"apy":"The current APY in basis points"}},"getPerformanceData(uint256)":{"details":"Gets historical performance data","params":{"period":"The time period to look back (in seconds)"},"returns":{"performance":"The performance data for the specified period"}},"getRiskScore()":{"details":"Gets the strategy's risk score","returns":{"risk":"The risk score from 1-10 (1 = lowest risk)"}},"getStrategyInfo()":{"details":"Gets comprehensive strategy information","returns":{"info":"The strategy information struct"}},"getTotalYieldGenerated()":{"details":"Calculates the total yield generated by the strategy","returns":{"totalYield":"The total yield generated"}},"harvestYield()":{"details":"Harvests yield from the underlying protocol","returns":{"yieldHarvested":"The amount of yield harvested"}},"isProfitable()":{"details":"Checks if the strategy is profitable","returns":{"profitable":"Whether the strategy is currently profitable"}},"maxCapacity()":{"details":"Gets the maximum capacity of the strategy","returns":{"maxCapacity":"The maximum amount of assets the strategy can handle"}},"totalAssets()":{"details":"Gets the total assets under management","returns":{"totalManagedAssets":"The total assets managed by this strategy"}},"utilizationRate()":{"details":"Gets the current utilization rate","returns":{"utilization":"The utilization rate as a percentage (basis points)"}},"withdraw(uint256)":{"details":"Withdraws assets from the yield strategy","params":{"shares":"The number of shares to burn"},"returns":{"amount":"The amount of assets withdrawn"}}},"title":"IYieldStrategy","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"asset()":"38d52e0f","balanceOf(address)":"70a08231","calculateUserYield(address)":"6f7c99d2","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","deposit(uint256)":"b6b55f25","emergencyWithdraw(address)":"6ff1c9bc","getCurrentAPY()":"962ca496","getPerformanceData(uint256)":"3fd18893","getRiskScore()":"2b35f739","getStrategyInfo()":"9613092d","getTotalYieldGenerated()":"39c1a8e8","harvestYield()":"e8d991d1","isProfitable()":"3612ddda","maxCapacity()":"59b6a0c9","totalAssets()":"01e1d114","utilizationRate()":"6c321c8a","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalAssets\",\"type\":\"uint256\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateUserYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"getPerformanceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"performance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"risk\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IYieldStrategy.StrategyInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalYield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yieldHarvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProfitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"profitable\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxCapacity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalManagedAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"utilization\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"YieldRails Team\",\"details\":\"Interface for yield generation strategies in YieldRails\",\"events\":{\"Deposit(address,uint256,uint256)\":{\"details\":\"Emitted when funds are deposited into the strategy\",\"params\":{\"amount\":\"The amount deposited\",\"shares\":\"The number of shares minted\",\"user\":\"The address that deposited funds\"}},\"StrategyUpdated(string,uint256,uint256)\":{\"details\":\"Emitted when strategy parameters are updated\",\"params\":{\"newValue\":\"The new value\",\"oldValue\":\"The old value\",\"parameter\":\"The parameter that was updated\"}},\"Withdrawal(address,uint256,uint256)\":{\"details\":\"Emitted when funds are withdrawn from the strategy\",\"params\":{\"amount\":\"The amount withdrawn\",\"shares\":\"The number of shares burned\",\"user\":\"The address that withdrew funds\"}},\"YieldHarvested(uint256,uint256)\":{\"details\":\"Emitted when yield is harvested\",\"params\":{\"newTotalAssets\":\"The new total assets under management\",\"yieldAmount\":\"The amount of yield harvested\"}}},\"kind\":\"dev\",\"methods\":{\"asset()\":{\"details\":\"Gets the underlying asset address\",\"returns\":{\"asset\":\"The address of the underlying asset (e.g., USDC)\"}},\"balanceOf(address)\":{\"details\":\"Gets the user's share balance\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"balance\":\"The user's share balance\"}},\"calculateUserYield(address)\":{\"details\":\"Calculates yield generated for a specific user\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"yieldAmount\":\"The amount of yield generated\"}},\"convertToAssets(uint256)\":{\"details\":\"Converts shares to assets\",\"params\":{\"shares\":\"The number of shares\"},\"returns\":{\"assets\":\"The equivalent amount of assets\"}},\"convertToShares(uint256)\":{\"details\":\"Converts assets to shares\",\"params\":{\"assets\":\"The amount of assets\"},\"returns\":{\"shares\":\"The equivalent number of shares\"}},\"deposit(uint256)\":{\"details\":\"Deposits assets into the yield strategy\",\"params\":{\"amount\":\"The amount of assets to deposit\"},\"returns\":{\"shares\":\"The number of shares minted to the depositor\"}},\"emergencyWithdraw(address)\":{\"details\":\"Emergency withdrawal of all user funds (may incur penalties)\",\"params\":{\"user\":\"The address to withdraw funds for\"},\"returns\":{\"amount\":\"The amount of assets withdrawn\"}},\"getCurrentAPY()\":{\"details\":\"Calculates the current APY of the strategy\",\"returns\":{\"apy\":\"The current APY in basis points\"}},\"getPerformanceData(uint256)\":{\"details\":\"Gets historical performance data\",\"params\":{\"period\":\"The time period to look back (in seconds)\"},\"returns\":{\"performance\":\"The performance data for the specified period\"}},\"getRiskScore()\":{\"details\":\"Gets the strategy's risk score\",\"returns\":{\"risk\":\"The risk score from 1-10 (1 = lowest risk)\"}},\"getStrategyInfo()\":{\"details\":\"Gets comprehensive strategy information\",\"returns\":{\"info\":\"The strategy information struct\"}},\"getTotalYieldGenerated()\":{\"details\":\"Calculates the total yield generated by the strategy\",\"returns\":{\"totalYield\":\"The total yield generated\"}},\"harvestYield()\":{\"details\":\"Harvests yield from the underlying protocol\",\"returns\":{\"yieldHarvested\":\"The amount of yield harvested\"}},\"isProfitable()\":{\"details\":\"Checks if the strategy is profitable\",\"returns\":{\"profitable\":\"Whether the strategy is currently profitable\"}},\"maxCapacity()\":{\"details\":\"Gets the maximum capacity of the strategy\",\"returns\":{\"maxCapacity\":\"The maximum amount of assets the strategy can handle\"}},\"totalAssets()\":{\"details\":\"Gets the total assets under management\",\"returns\":{\"totalManagedAssets\":\"The total assets managed by this strategy\"}},\"utilizationRate()\":{\"details\":\"Gets the current utilization rate\",\"returns\":{\"utilization\":\"The utilization rate as a percentage (basis points)\"}},\"withdraw(uint256)\":{\"details\":\"Withdraws assets from the yield strategy\",\"params\":{\"shares\":\"The number of shares to burn\"},\"returns\":{\"amount\":\"The amount of assets withdrawn\"}}},\"title\":\"IYieldStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"All yield strategies must implement this interface for compatibility\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IYieldStrategy.sol\":\"IYieldStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/interfaces/IYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IYieldStrategy\\n * @dev Interface for yield generation strategies in YieldRails\\n * @notice All yield strategies must implement this interface for compatibility\\n * @author YieldRails Team\\n */\\ninterface IYieldStrategy {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emitted when funds are deposited into the strategy\\n     * @param user The address that deposited funds\\n     * @param amount The amount deposited\\n     * @param shares The number of shares minted\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when funds are withdrawn from the strategy\\n     * @param user The address that withdrew funds\\n     * @param amount The amount withdrawn\\n     * @param shares The number of shares burned\\n     */\\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when yield is harvested\\n     * @param yieldAmount The amount of yield harvested\\n     * @param newTotalAssets The new total assets under management\\n     */\\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\\n\\n    /**\\n     * @dev Emitted when strategy parameters are updated\\n     * @param parameter The parameter that was updated\\n     * @param oldValue The old value\\n     * @param newValue The new value\\n     */\\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy metadata and performance metrics\\n     */\\n    struct StrategyInfo {\\n        string name;                // Strategy name (e.g., \\\"T-Bill Strategy\\\")\\n        string description;         // Strategy description\\n        uint256 totalAssets;        // Total assets under management\\n        uint256 totalShares;        // Total shares outstanding\\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\\n        uint256 lastHarvest;        // Timestamp of last yield harvest\\n        bool active;                // Whether strategy is active\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the yield strategy\\n     * @param amount The amount of assets to deposit\\n     * @return shares The number of shares minted to the depositor\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Withdraws assets from the yield strategy\\n     * @param shares The number of shares to burn\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external returns (uint256 amount);\\n\\n    /**\\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\\n     * @param user The address to withdraw funds for\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function emergencyWithdraw(address user) external returns (uint256 amount);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates the current APY of the strategy\\n     * @return apy The current APY in basis points\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @dev Calculates yield generated for a specific user\\n     * @param user The user address\\n     * @return yieldAmount The amount of yield generated\\n     */\\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\\n\\n    /**\\n     * @dev Calculates the total yield generated by the strategy\\n     * @return totalYield The total yield generated\\n     */\\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\\n\\n    /**\\n     * @dev Harvests yield from the underlying protocol\\n     * @return yieldHarvested The amount of yield harvested\\n     */\\n    function harvestYield() external returns (uint256 yieldHarvested);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // SHARE CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent number of shares\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent amount of assets\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Gets the user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY INFORMATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets comprehensive strategy information\\n     * @return info The strategy information struct\\n     */\\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\\n\\n    /**\\n     * @dev Gets the underlying asset address\\n     * @return asset The address of the underlying asset (e.g., USDC)\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     * @dev Gets the total assets under management\\n     * @return totalManagedAssets The total assets managed by this strategy\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Gets the strategy's risk score\\n     * @return risk The risk score from 1-10 (1 = lowest risk)\\n     */\\n    function getRiskScore() external view returns (uint256 risk);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PERFORMANCE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets historical performance data\\n     * @param period The time period to look back (in seconds)\\n     * @return performance The performance data for the specified period\\n     */\\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\\n\\n    /**\\n     * @dev Checks if the strategy is profitable\\n     * @return profitable Whether the strategy is currently profitable\\n     */\\n    function isProfitable() external view returns (bool profitable);\\n\\n    /**\\n     * @dev Gets the maximum capacity of the strategy\\n     * @return maxCapacity The maximum amount of assets the strategy can handle\\n     */\\n    function maxCapacity() external view returns (uint256 maxCapacity);\\n\\n    /**\\n     * @dev Gets the current utilization rate\\n     * @return utilization The utilization rate as a percentage (basis points)\\n     */\\n    function utilizationRate() external view returns (uint256 utilization);\\n}\",\"keccak256\":\"0x3dbcde8604a18aff443ee40442187a697d0c9772bfe40e650f9e3b4da40b38cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"All yield strategies must implement this interface for compatibility","version":1}}},"src/mocks/MockERC20.sol":{"MockERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"symbol","type":"string"},{"internalType":"uint8","name":"decimals_","type":"uint8"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Mock ERC20 token for testing purposes","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"title":"MockERC20","version":1},"evm":{"bytecode":{"functionDebugData":{"abi_decode_string_fromMemory":{"entryPoint":870,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":832,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"linkReferences":{},"object":"6080604052346200033b5762000e8a803803806200001d8162000340565b92833981016060828203126200033b5781516001600160401b03908181116200033b57826200004e91850162000366565b90602092838501518281116200033b576040916200006e91870162000366565b9401519360ff85168095036200033b5782518281116200023b576003918254916001958684811c9416801562000330575b888510146200031a578190601f94858111620002c4575b5088908583116001146200025d5760009262000251575b505060001982861b1c191690861b1783555b80519384116200023b5760049586548681811c9116801562000230575b828210146200021b57838111620001d0575b508092851160011462000162575093839491849260009562000156575b50501b92600019911b1c19161790555b60ff196005541617600555604051610ab19081620003d98239f35b0151935038806200012b565b92919084601f1981168860005285600020956000905b89838310620001b557505050106200019a575b50505050811b0190556200013b565b01519060f884600019921b161c19169055388080806200018b565b85870151895590970196948501948893509081019062000178565b87600052816000208480880160051c82019284891062000211575b0160051c019087905b828110620002045750506200010e565b60008155018790620001f4565b92508192620001eb565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000fc565b634e487b7160e01b600052604160045260246000fd5b015190503880620000cd565b90889350601f19831691876000528a6000209260005b8c828210620002ad575050841162000294575b505050811b018355620000df565b015160001983881b60f8161c1916905538808062000286565b8385015186558c9790950194938401930162000273565b90915085600052886000208580850160051c8201928b861062000310575b918a91869594930160051c01915b82811062000300575050620000b6565b600081558594508a9101620002f0565b92508192620002e2565b634e487b7160e01b600052602260045260246000fd5b93607f16936200009f565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200023b57604052565b919080601f840112156200033b5782516001600160401b0381116200023b576020906200039c601f8201601f1916830162000340565b928184528282870101116200033b5760005b818110620003c457508260009394955001015290565b8581018301518482018401528201620003ae56fe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461069657508163095ea7b31461066c57816318160ddd1461064d57816323b872dd14610583578163313ce56714610561578163395093511461051157816340c10f191461044e57816370a082311461041757816395d89b41146102f85781639dc29fac146101d7578163a457c2d71461012f57508063a9059cbb146100ff5763dd62ed3e146100b457600080fd5b346100fb57806003193601126100fb57806020926100d06107b7565b6100d86107d2565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100fb57806003193601126100fb5760209061012861011e6107b7565b602435903361080b565b5160018152f35b905082346101d457826003193601126101d45761014a6107b7565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610183576020856101288585038733610979565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b839150346100fb57826003193601126100fb576101f26107b7565b6001600160a01b0316906024359082156102ab5782845283602052848420549082821061025d57508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b608490602087519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b608490602086519162461bcd60e51b8352820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b8383346100fb57816003193601126100fb57805190828454600181811c9080831692831561040d575b60209384841081146103fa578388529081156103de5750600114610389575b505050829003601f01601f191682019267ffffffffffffffff841183851017610376575082918261037292528261076e565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106103ca5750505050830101858080610340565b8054888601830152930192849082016103b4565b60ff1916878501525050151560051b8401019050858080610340565b634e487b7160e01b895260228a52602489fd5b91607f1691610321565b5050346100fb5760203660031901126100fb5760209181906001600160a01b0361043f6107b7565b16815280845220549051908152f35b9190503461050d578060031936011261050d576104696107b7565b6001600160a01b031691602435919083156104cb57506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926104b187956002546107e8565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b8280fd5b5050346100fb57806003193601126100fb5761012860209261055a6105346107b7565b338352600186528483206001600160a01b038216845286529184902054602435906107e8565b9033610979565b5050346100fb57816003193601126100fb5760209060ff600554169051908152f35b839150346100fb5760603660031901126100fb5761059f6107b7565b6105a76107d2565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036105e1575b60208661012887878761080b565b84821061060a57509183916105ff6020969561012895033383610979565b9193948193506105d3565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100fb57816003193601126100fb576020906002549051908152f35b5050346100fb57806003193601126100fb5760209061012861068c6107b7565b6024359033610979565b8490843461050d578260031936011261050d5782600354600181811c90808316928315610764575b60209384841081146103fa578388529081156103de575060011461070e57505050829003601f01601f191682019267ffffffffffffffff841183851017610376575082918261037292528261076e565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107505750505050830101858080610340565b80548886018301529301928490820161073a565b91607f16916106be565b6020808252825181830181905290939260005b8281106107a357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610781565b600435906001600160a01b03821682036107cd57565b600080fd5b602435906001600160a01b03821682036107cd57565b919082018092116107f557565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561092657169182156108d55760008281528060205260408120549180831061088157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a2a57169182156109da5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220be497d7da78cde54c472dc9214b95e46d6f5759ccb0263e73dde2e5f87c9b4d064736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE PUSH3 0x33B JUMPI PUSH3 0xE8A DUP1 CODESIZE SUB DUP1 PUSH3 0x1D DUP2 PUSH3 0x340 JUMP JUMPDEST SWAP3 DUP4 CODECOPY DUP2 ADD PUSH1 0x60 DUP3 DUP3 SUB SLT PUSH3 0x33B JUMPI DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB SWAP1 DUP2 DUP2 GT PUSH3 0x33B JUMPI DUP3 PUSH3 0x4E SWAP2 DUP6 ADD PUSH3 0x366 JUMP JUMPDEST SWAP1 PUSH1 0x20 SWAP3 DUP4 DUP6 ADD MLOAD DUP3 DUP2 GT PUSH3 0x33B JUMPI PUSH1 0x40 SWAP2 PUSH3 0x6E SWAP2 DUP8 ADD PUSH3 0x366 JUMP JUMPDEST SWAP5 ADD MLOAD SWAP4 PUSH1 0xFF DUP6 AND DUP1 SWAP6 SUB PUSH3 0x33B JUMPI DUP3 MLOAD DUP3 DUP2 GT PUSH3 0x23B JUMPI PUSH1 0x3 SWAP2 DUP3 SLOAD SWAP2 PUSH1 0x1 SWAP6 DUP7 DUP5 DUP2 SHR SWAP5 AND DUP1 ISZERO PUSH3 0x330 JUMPI JUMPDEST DUP9 DUP6 LT EQ PUSH3 0x31A JUMPI DUP2 SWAP1 PUSH1 0x1F SWAP5 DUP6 DUP2 GT PUSH3 0x2C4 JUMPI JUMPDEST POP DUP9 SWAP1 DUP6 DUP4 GT PUSH1 0x1 EQ PUSH3 0x25D JUMPI PUSH1 0x0 SWAP3 PUSH3 0x251 JUMPI JUMPDEST POP POP PUSH1 0x0 NOT DUP3 DUP7 SHL SHR NOT AND SWAP1 DUP7 SHL OR DUP4 SSTORE JUMPDEST DUP1 MLOAD SWAP4 DUP5 GT PUSH3 0x23B JUMPI PUSH1 0x4 SWAP6 DUP7 SLOAD DUP7 DUP2 DUP2 SHR SWAP2 AND DUP1 ISZERO PUSH3 0x230 JUMPI JUMPDEST DUP3 DUP3 LT EQ PUSH3 0x21B JUMPI DUP4 DUP2 GT PUSH3 0x1D0 JUMPI JUMPDEST POP DUP1 SWAP3 DUP6 GT PUSH1 0x1 EQ PUSH3 0x162 JUMPI POP SWAP4 DUP4 SWAP5 SWAP2 DUP5 SWAP3 PUSH1 0x0 SWAP6 PUSH3 0x156 JUMPI JUMPDEST POP POP SHL SWAP3 PUSH1 0x0 NOT SWAP2 SHL SHR NOT AND OR SWAP1 SSTORE JUMPDEST PUSH1 0xFF NOT PUSH1 0x5 SLOAD AND OR PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD PUSH2 0xAB1 SWAP1 DUP2 PUSH3 0x3D9 DUP3 CODECOPY RETURN JUMPDEST ADD MLOAD SWAP4 POP CODESIZE DUP1 PUSH3 0x12B JUMP JUMPDEST SWAP3 SWAP2 SWAP1 DUP5 PUSH1 0x1F NOT DUP2 AND DUP9 PUSH1 0x0 MSTORE DUP6 PUSH1 0x0 KECCAK256 SWAP6 PUSH1 0x0 SWAP1 JUMPDEST DUP10 DUP4 DUP4 LT PUSH3 0x1B5 JUMPI POP POP POP LT PUSH3 0x19A JUMPI JUMPDEST POP POP POP POP DUP2 SHL ADD SWAP1 SSTORE PUSH3 0x13B JUMP JUMPDEST ADD MLOAD SWAP1 PUSH1 0xF8 DUP5 PUSH1 0x0 NOT SWAP3 SHL AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 DUP1 PUSH3 0x18B JUMP JUMPDEST DUP6 DUP8 ADD MLOAD DUP10 SSTORE SWAP1 SWAP8 ADD SWAP7 SWAP5 DUP6 ADD SWAP5 DUP9 SWAP4 POP SWAP1 DUP2 ADD SWAP1 PUSH3 0x178 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE DUP2 PUSH1 0x0 KECCAK256 DUP5 DUP1 DUP9 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP5 DUP10 LT PUSH3 0x211 JUMPI JUMPDEST ADD PUSH1 0x5 SHR ADD SWAP1 DUP8 SWAP1 JUMPDEST DUP3 DUP2 LT PUSH3 0x204 JUMPI POP POP PUSH3 0x10E JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE ADD DUP8 SWAP1 PUSH3 0x1F4 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x1EB JUMP JUMPDEST PUSH1 0x22 DUP9 PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x7F AND SWAP1 PUSH3 0xFC JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADD MLOAD SWAP1 POP CODESIZE DUP1 PUSH3 0xCD JUMP JUMPDEST SWAP1 DUP9 SWAP4 POP PUSH1 0x1F NOT DUP4 AND SWAP2 DUP8 PUSH1 0x0 MSTORE DUP11 PUSH1 0x0 KECCAK256 SWAP3 PUSH1 0x0 JUMPDEST DUP13 DUP3 DUP3 LT PUSH3 0x2AD JUMPI POP POP DUP5 GT PUSH3 0x294 JUMPI JUMPDEST POP POP POP DUP2 SHL ADD DUP4 SSTORE PUSH3 0xDF JUMP JUMPDEST ADD MLOAD PUSH1 0x0 NOT DUP4 DUP9 SHL PUSH1 0xF8 AND SHR NOT AND SWAP1 SSTORE CODESIZE DUP1 DUP1 PUSH3 0x286 JUMP JUMPDEST DUP4 DUP6 ADD MLOAD DUP7 SSTORE DUP13 SWAP8 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP5 ADD SWAP4 ADD PUSH3 0x273 JUMP JUMPDEST SWAP1 SWAP2 POP DUP6 PUSH1 0x0 MSTORE DUP9 PUSH1 0x0 KECCAK256 DUP6 DUP1 DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP3 DUP12 DUP7 LT PUSH3 0x310 JUMPI JUMPDEST SWAP2 DUP11 SWAP2 DUP7 SWAP6 SWAP5 SWAP4 ADD PUSH1 0x5 SHR ADD SWAP2 JUMPDEST DUP3 DUP2 LT PUSH3 0x300 JUMPI POP POP PUSH3 0xB6 JUMP JUMPDEST PUSH1 0x0 DUP2 SSTORE DUP6 SWAP5 POP DUP11 SWAP2 ADD PUSH3 0x2F0 JUMP JUMPDEST SWAP3 POP DUP2 SWAP3 PUSH3 0x2E2 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP4 PUSH1 0x7F AND SWAP4 PUSH3 0x9F JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD SWAP2 SWAP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT DUP4 DUP3 LT OR PUSH3 0x23B JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP2 SWAP1 DUP1 PUSH1 0x1F DUP5 ADD SLT ISZERO PUSH3 0x33B JUMPI DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT PUSH3 0x23B JUMPI PUSH1 0x20 SWAP1 PUSH3 0x39C PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD PUSH3 0x340 JUMP JUMPDEST SWAP3 DUP2 DUP5 MSTORE DUP3 DUP3 DUP8 ADD ADD GT PUSH3 0x33B JUMPI PUSH1 0x0 JUMPDEST DUP2 DUP2 LT PUSH3 0x3C4 JUMPI POP DUP3 PUSH1 0x0 SWAP4 SWAP5 SWAP6 POP ADD ADD MSTORE SWAP1 JUMP JUMPDEST DUP6 DUP2 ADD DUP4 ADD MLOAD DUP5 DUP3 ADD DUP5 ADD MSTORE DUP3 ADD PUSH3 0x3AE JUMP INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x696 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x66C JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x64D JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x583 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x561 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x511 JUMPI DUP2 PUSH4 0x40C10F19 EQ PUSH2 0x44E JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x417 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x2F8 JUMPI DUP2 PUSH4 0x9DC29FAC EQ PUSH2 0x1D7 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x12F JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xFF JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0xB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD0 PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0xD8 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH2 0x128 PUSH2 0x11E PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x80B JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1D4 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D4 JUMPI PUSH2 0x14A PUSH2 0x7B7 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x183 JUMPI PUSH1 0x20 DUP6 PUSH2 0x128 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x979 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xFB JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH2 0x1F2 PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP3 ISZERO PUSH2 0x2AB JUMPI DUP3 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP5 DUP5 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x25D JUMPI POP DUP2 DUP5 SWAP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH1 0x20 SWAP4 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x40D JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x3FA JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x3DE JUMPI POP PUSH1 0x1 EQ PUSH2 0x389 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x376 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x372 SWAP3 MSTORE DUP3 PUSH2 0x76E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x3CA JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x321 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x43F PUSH2 0x7B7 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x50D JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x50D JUMPI PUSH2 0x469 PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 DUP4 ISZERO PUSH2 0x4CB JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0x4B1 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH2 0x128 PUSH1 0x20 SWAP3 PUSH2 0x55A PUSH2 0x534 PUSH2 0x7B7 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x7E8 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x979 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x5 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xFB JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFB JUMPI PUSH2 0x59F PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0x5A7 PUSH2 0x7D2 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x5E1 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x128 DUP8 DUP8 DUP8 PUSH2 0x80B JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x60A JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x5FF PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x128 SWAP6 SUB CALLER DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x5D3 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH2 0x128 PUSH2 0x68C PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x979 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x50D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x50D JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x764 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x3FA JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x3DE JUMPI POP PUSH1 0x1 EQ PUSH2 0x70E JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x376 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x372 SWAP3 MSTORE DUP3 PUSH2 0x76E JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x750 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x73A JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x7A3 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x781 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x7CD JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x7CD JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7F5 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x926 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x881 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xA2A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x9DA JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x49 PUSH30 0x7DA78CDE54C472DC9214B95E46D6F5759CCB0263E73DDE2E5F87C9B4D064 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"189:529:21:-:0;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;-1:-1:-1;;;;;189:529:21;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;2046:13:4;189:529:21;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;-1:-1:-1;189:529:21;;;;-1:-1:-1;;;;189:529:21;;;;;;;;;;;;;;;;;;;;2069:17:4;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;390:27;189:529;;;390:27;189:529;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;-1:-1:-1;189:529:21;;;;;;;;;;;;-1:-1:-1;189:529:21;;2069:17:4;189:529:21;;-1:-1:-1;189:529:21;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;-1:-1:-1;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;-1:-1:-1;189:529:21;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;-1:-1:-1;;189:529:21;;;-1:-1:-1;;;;;189:529:21;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;-1:-1:-1;;;;;189:529:21;;;;;;;;;;-1:-1:-1;;189:529:21;;;;:::i;:::-;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"abi_decode_address":{"entryPoint":2002,"id":null,"parameterSlots":0,"returnSlots":1},"abi_decode_address_6708":{"entryPoint":1975,"id":null,"parameterSlots":0,"returnSlots":1},"abi_encode_string":{"entryPoint":1902,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":2024,"id":null,"parameterSlots":2,"returnSlots":1},"fun_approve":{"entryPoint":2425,"id":1082,"parameterSlots":3,"returnSlots":0},"fun_transfer":{"entryPoint":2059,"id":908,"parameterSlots":3,"returnSlots":0}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461069657508163095ea7b31461066c57816318160ddd1461064d57816323b872dd14610583578163313ce56714610561578163395093511461051157816340c10f191461044e57816370a082311461041757816395d89b41146102f85781639dc29fac146101d7578163a457c2d71461012f57508063a9059cbb146100ff5763dd62ed3e146100b457600080fd5b346100fb57806003193601126100fb57806020926100d06107b7565b6100d86107d2565b6001600160a01b0391821683526001865283832091168252845220549051908152f35b5080fd5b50346100fb57806003193601126100fb5760209061012861011e6107b7565b602435903361080b565b5160018152f35b905082346101d457826003193601126101d45761014a6107b7565b918360243592338152600160205281812060018060a01b0386168252602052205490828210610183576020856101288585038733610979565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b839150346100fb57826003193601126100fb576101f26107b7565b6001600160a01b0316906024359082156102ab5782845283602052848420549082821061025d57508184957fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef936020938688528785520381872055816002540360025551908152a380f35b608490602087519162461bcd60e51b8352820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152fd5b608490602086519162461bcd60e51b8352820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152fd5b8383346100fb57816003193601126100fb57805190828454600181811c9080831692831561040d575b60209384841081146103fa578388529081156103de5750600114610389575b505050829003601f01601f191682019267ffffffffffffffff841183851017610376575082918261037292528261076e565b0390f35b634e487b7160e01b815260418552602490fd5b8787529192508591837f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8385106103ca5750505050830101858080610340565b8054888601830152930192849082016103b4565b60ff1916878501525050151560051b8401019050858080610340565b634e487b7160e01b895260228a52602489fd5b91607f1691610321565b5050346100fb5760203660031901126100fb5760209181906001600160a01b0361043f6107b7565b16815280845220549051908152f35b9190503461050d578060031936011261050d576104696107b7565b6001600160a01b031691602435919083156104cb57506020827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926104b187956002546107e8565b60025585855284835280852082815401905551908152a380f35b6020606492519162461bcd60e51b8352820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152fd5b8280fd5b5050346100fb57806003193601126100fb5761012860209261055a6105346107b7565b338352600186528483206001600160a01b038216845286529184902054602435906107e8565b9033610979565b5050346100fb57816003193601126100fb5760209060ff600554169051908152f35b839150346100fb5760603660031901126100fb5761059f6107b7565b6105a76107d2565b91846044359460018060a01b0384168152600160205281812033825260205220549060001982036105e1575b60208661012887878761080b565b84821061060a57509183916105ff6020969561012895033383610979565b9193948193506105d3565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b5050346100fb57816003193601126100fb576020906002549051908152f35b5050346100fb57806003193601126100fb5760209061012861068c6107b7565b6024359033610979565b8490843461050d578260031936011261050d5782600354600181811c90808316928315610764575b60209384841081146103fa578388529081156103de575060011461070e57505050829003601f01601f191682019267ffffffffffffffff841183851017610376575082918261037292528261076e565b600387529192508591837fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8385106107505750505050830101858080610340565b80548886018301529301928490820161073a565b91607f16916106be565b6020808252825181830181905290939260005b8281106107a357505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610781565b600435906001600160a01b03821682036107cd57565b600080fd5b602435906001600160a01b03821682036107cd57565b919082018092116107f557565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0390811691821561092657169182156108d55760008281528060205260408120549180831061088157604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610a2a57169182156109da5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220be497d7da78cde54c472dc9214b95e46d6f5759ccb0263e73dde2e5f87c9b4d064736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x6FDDE03 EQ PUSH2 0x696 JUMPI POP DUP2 PUSH4 0x95EA7B3 EQ PUSH2 0x66C JUMPI DUP2 PUSH4 0x18160DDD EQ PUSH2 0x64D JUMPI DUP2 PUSH4 0x23B872DD EQ PUSH2 0x583 JUMPI DUP2 PUSH4 0x313CE567 EQ PUSH2 0x561 JUMPI DUP2 PUSH4 0x39509351 EQ PUSH2 0x511 JUMPI DUP2 PUSH4 0x40C10F19 EQ PUSH2 0x44E JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x417 JUMPI DUP2 PUSH4 0x95D89B41 EQ PUSH2 0x2F8 JUMPI DUP2 PUSH4 0x9DC29FAC EQ PUSH2 0x1D7 JUMPI DUP2 PUSH4 0xA457C2D7 EQ PUSH2 0x12F JUMPI POP DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xFF JUMPI PUSH4 0xDD62ED3E EQ PUSH2 0xB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI DUP1 PUSH1 0x20 SWAP3 PUSH2 0xD0 PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0xD8 PUSH2 0x7D2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP4 DUP4 KECCAK256 SWAP2 AND DUP3 MSTORE DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH2 0x128 PUSH2 0x11E PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x80B JUMP JUMPDEST MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x1D4 JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x1D4 JUMPI PUSH2 0x14A PUSH2 0x7B7 JUMP JUMPDEST SWAP2 DUP4 PUSH1 0x24 CALLDATALOAD SWAP3 CALLER DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP7 AND DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x183 JUMPI PUSH1 0x20 DUP6 PUSH2 0x128 DUP6 DUP6 SUB DUP8 CALLER PUSH2 0x979 JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP1 REVERT JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xFB JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH2 0x1F2 PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 DUP3 ISZERO PUSH2 0x2AB JUMPI DUP3 DUP5 MSTORE DUP4 PUSH1 0x20 MSTORE DUP5 DUP5 KECCAK256 SLOAD SWAP1 DUP3 DUP3 LT PUSH2 0x25D JUMPI POP DUP2 DUP5 SWAP6 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP4 PUSH1 0x20 SWAP4 DUP7 DUP9 MSTORE DUP8 DUP6 MSTORE SUB DUP2 DUP8 KECCAK256 SSTORE DUP2 PUSH1 0x2 SLOAD SUB PUSH1 0x2 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E20616D6F756E7420657863656564732062616C616E PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6365 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x20 DUP7 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x21 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206275726E2066726F6D20746865207A65726F20616464726573 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x73 PUSH1 0xF8 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI DUP1 MLOAD SWAP1 DUP3 DUP5 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x40D JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x3FA JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x3DE JUMPI POP PUSH1 0x1 EQ PUSH2 0x389 JUMPI JUMPDEST POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x376 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x372 SWAP3 MSTORE DUP3 PUSH2 0x76E JUMP JUMPDEST SUB SWAP1 RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x41 DUP6 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST DUP8 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0x8A35ACFBC15FF81A39AE7D344FD709F28E8600B4AA8C65C6B64BFE7FE36BD19B JUMPDEST DUP4 DUP6 LT PUSH2 0x3CA JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x3B4 JUMP JUMPDEST PUSH1 0xFF NOT AND DUP8 DUP6 ADD MSTORE POP POP ISZERO ISZERO PUSH1 0x5 SHL DUP5 ADD ADD SWAP1 POP DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP10 MSTORE PUSH1 0x22 DUP11 MSTORE PUSH1 0x24 DUP10 REVERT JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x321 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP2 DUP2 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH2 0x43F PUSH2 0x7B7 JUMP JUMPDEST AND DUP2 MSTORE DUP1 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 POP CALLVALUE PUSH2 0x50D JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x50D JUMPI PUSH2 0x469 PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH1 0x24 CALLDATALOAD SWAP2 SWAP1 DUP4 ISZERO PUSH2 0x4CB JUMPI POP PUSH1 0x20 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 PUSH2 0x4B1 DUP8 SWAP6 PUSH1 0x2 SLOAD PUSH2 0x7E8 JUMP JUMPDEST PUSH1 0x2 SSTORE DUP6 DUP6 MSTORE DUP5 DUP4 MSTORE DUP1 DUP6 KECCAK256 DUP3 DUP2 SLOAD ADD SWAP1 SSTORE MLOAD SWAP1 DUP2 MSTORE LOG3 DUP1 RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH2 0x128 PUSH1 0x20 SWAP3 PUSH2 0x55A PUSH2 0x534 PUSH2 0x7B7 JUMP JUMPDEST CALLER DUP4 MSTORE PUSH1 0x1 DUP7 MSTORE DUP5 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP5 MSTORE DUP7 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 SLOAD PUSH1 0x24 CALLDATALOAD SWAP1 PUSH2 0x7E8 JUMP JUMPDEST SWAP1 CALLER PUSH2 0x979 JUMP JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH1 0xFF PUSH1 0x5 SLOAD AND SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP2 POP CALLVALUE PUSH2 0xFB JUMPI PUSH1 0x60 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0xFB JUMPI PUSH2 0x59F PUSH2 0x7B7 JUMP JUMPDEST PUSH2 0x5A7 PUSH2 0x7D2 JUMP JUMPDEST SWAP2 DUP5 PUSH1 0x44 CALLDATALOAD SWAP5 PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE DUP2 DUP2 KECCAK256 CALLER DUP3 MSTORE PUSH1 0x20 MSTORE KECCAK256 SLOAD SWAP1 PUSH1 0x0 NOT DUP3 SUB PUSH2 0x5E1 JUMPI JUMPDEST PUSH1 0x20 DUP7 PUSH2 0x128 DUP8 DUP8 DUP8 PUSH2 0x80B JUMP JUMPDEST DUP5 DUP3 LT PUSH2 0x60A JUMPI POP SWAP2 DUP4 SWAP2 PUSH2 0x5FF PUSH1 0x20 SWAP7 SWAP6 PUSH2 0x128 SWAP6 SUB CALLER DUP4 PUSH2 0x979 JUMP JUMPDEST SWAP2 SWAP4 SWAP5 DUP2 SWAP4 POP PUSH2 0x5D3 JUMP JUMPDEST PUSH1 0x64 SWAP1 PUSH1 0x20 DUP8 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0xFB JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0xFB JUMPI PUSH1 0x20 SWAP1 PUSH2 0x128 PUSH2 0x68C PUSH2 0x7B7 JUMP JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 CALLER PUSH2 0x979 JUMP JUMPDEST DUP5 SWAP1 DUP5 CALLVALUE PUSH2 0x50D JUMPI DUP3 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x50D JUMPI DUP3 PUSH1 0x3 SLOAD PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP1 DUP4 AND SWAP3 DUP4 ISZERO PUSH2 0x764 JUMPI JUMPDEST PUSH1 0x20 SWAP4 DUP5 DUP5 LT DUP2 EQ PUSH2 0x3FA JUMPI DUP4 DUP9 MSTORE SWAP1 DUP2 ISZERO PUSH2 0x3DE JUMPI POP PUSH1 0x1 EQ PUSH2 0x70E JUMPI POP POP POP DUP3 SWAP1 SUB PUSH1 0x1F ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP3 PUSH8 0xFFFFFFFFFFFFFFFF DUP5 GT DUP4 DUP6 LT OR PUSH2 0x376 JUMPI POP DUP3 SWAP2 DUP3 PUSH2 0x372 SWAP3 MSTORE DUP3 PUSH2 0x76E JUMP JUMPDEST PUSH1 0x3 DUP8 MSTORE SWAP2 SWAP3 POP DUP6 SWAP2 DUP4 PUSH32 0xC2575A0E9E593C00F959F8C92F12DB2869C3395A3B0502D05E2516446F71F85B JUMPDEST DUP4 DUP6 LT PUSH2 0x750 JUMPI POP POP POP POP DUP4 ADD ADD DUP6 DUP1 DUP1 PUSH2 0x340 JUMP JUMPDEST DUP1 SLOAD DUP9 DUP7 ADD DUP4 ADD MSTORE SWAP4 ADD SWAP3 DUP5 SWAP1 DUP3 ADD PUSH2 0x73A JUMP JUMPDEST SWAP2 PUSH1 0x7F AND SWAP2 PUSH2 0x6BE JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP2 DUP4 ADD DUP2 SWAP1 MSTORE SWAP1 SWAP4 SWAP3 PUSH1 0x0 JUMPDEST DUP3 DUP2 LT PUSH2 0x7A3 JUMPI POP POP PUSH1 0x40 SWAP3 SWAP4 POP PUSH1 0x0 DUP4 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP7 ADD MLOAD DUP5 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP6 ADD PUSH2 0x781 JUMP JUMPDEST PUSH1 0x4 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x7CD JUMPI JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND DUP3 SUB PUSH2 0x7CD JUMPI JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x7F5 JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0x926 JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x8D5 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE DUP1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP2 DUP1 DUP4 LT PUSH2 0x881 JUMPI PUSH1 0x40 DUP3 DUP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP6 DUP8 PUSH1 0x20 SWAP7 MSTORE DUP3 DUP7 MSTORE SUB DUP3 DUP3 KECCAK256 SSTORE DUP7 DUP2 MSTORE KECCAK256 DUP2 DUP2 SLOAD ADD SWAP1 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP2 DUP3 ISZERO PUSH2 0xA2A JUMPI AND SWAP2 DUP3 ISZERO PUSH2 0x9DA JUMPI PUSH1 0x20 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 DUP4 PUSH1 0x0 MSTORE PUSH1 0x1 DUP3 MSTORE PUSH1 0x40 PUSH1 0x0 KECCAK256 DUP6 PUSH1 0x0 MSTORE DUP3 MSTORE DUP1 PUSH1 0x40 PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE LOG3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 SWAP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBE 0x49 PUSH30 0x7DA78CDE54C472DC9214B95E46D6F5759CCB0263E73DDE2E5F87C9B4D064 PUSH20 0x6F6C634300081400330000000000000000000000 ","sourceMap":"189:529:21:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::i;:::-;-1:-1:-1;;;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3894:6:4;189:529:21;;:::i;:::-;;;734:10:10;;3894:6:4;:::i;:::-;189:529:21;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;734:10:10;;189:529:21;;;;;;;;;;;;;;;;;;;;;6792:35:4;;;;189:529:21;;;;6928:34:4;189:529:21;;;;734:10:10;6928:34:4;:::i;189:529:21:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;189:529:21;;;;;9458:21:4;;189:529:21;;;;;;;;;;;;9649:24:4;;;;189:529:21;;;;;;9931:37:4;189:529:21;;;;;;;;;;;;;;;9883:22:4;189:529:21;;9883:22:4;189:529:21;;;;;9931:37:4;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;-1:-1:-1;;189:529:21;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;189:529:21;;;;;-1:-1:-1;;189:529:21;;;;;;;;-1:-1:-1;189:529:21;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;189:529:21;;;;;;;;-1:-1:-1;;;;;189:529:21;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;189:529:21;;;;;;8603:21:4;;189:529:21;;;;;8952:37:4;189:529:21;8731:22:4;189:529:21;;8731:22:4;189:529:21;8731:22:4;:::i;:::-;;189:529:21;;;;;;;;;;;;;;;;;;;;8952:37:4;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6021:38:4;189:529:21;;6021:38:4;189:529:21;;:::i;:::-;734:10:10;189:529:21;;;;;;;;-1:-1:-1;;;;;189:529:21;;;;;;;;;;;;;;6021:38:4;:::i;:::-;734:10:10;;6021:38:4;:::i;189:529:21:-;;;;;;;;;;;;;;;;;512:15;189:529;;;;;;;;;;;;;;;;;-1:-1:-1;;189:529:21;;;;;;:::i;:::-;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;734:10:10;189:529:21;;;;;;11264:17:4;;;11244:37;;11240:243;;189:529:21;;5424:6:4;;;;;;:::i;11240:243::-;11305:26;;;189:529:21;;;;;;11432:25:4;189:529:21;;;5424:6:4;189:529:21;;734:10:10;11432:25:4;;:::i;:::-;11240:243;;;;;;;;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3342:12:4;189:529:21;;;;;;;;;;;;;;;;;;;;;;;4606:6:4;189:529:21;;:::i;:::-;;;734:10:10;;4606:6:4;:::i;189:529:21:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;-1:-1:-1;;189:529:21;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;189:529:21;;;;;;:::o;:::-;;;;;;;;-1:-1:-1;;;;;189:529:21;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;;;7456:788:4;-1:-1:-1;;;;;189:529:21;;;;7552:18:4;;189:529:21;;;7630:16:4;;;189:529:21;;7568:1:4;189:529:21;;;;;;;;;;7801:21:4;;;;189:529:21;;;;;8163:26:4;189:529:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;8163:26:4;7456:788::o;189:529:21:-;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;10457:340:4;-1:-1:-1;;;;;189:529:21;;;;10558:19:4;;189:529:21;;;10636:21:4;;;189:529:21;;;10758:32:4;189:529:21;;10575:1:4;189:529:21;;;;;10575:1:4;189:529:21;;10575:1:4;189:529:21;;;;;10575:1:4;189:529:21;;;;;;;10758:32:4;10457:340::o;189:529:21:-;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;;;;;;;;;;;;-1:-1:-1;;;189:529:21;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"547400","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"2832","approve(address,uint256)":"24387","balanceOf(address)":"2585","burn(address,uint256)":"50846","decimals()":"2374","decreaseAllowance(address,uint256)":"26872","increaseAllowance(address,uint256)":"26785","mint(address,uint256)":"50750","name()":"infinite","symbol()":"infinite","totalSupply()":"2324","transfer(address,uint256)":"51010","transferFrom(address,address,uint256)":"77385"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(address,uint256)":"9dc29fac","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(address,uint256)":"40c10f19","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock ERC20 token for testing purposes\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"title\":\"MockERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mocks/MockERC20.sol\":\"MockERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"src/mocks/MockERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @title MockERC20\\n * @dev Mock ERC20 token for testing purposes\\n */\\ncontract MockERC20 is ERC20 {\\n    uint8 private _customDecimals;\\n\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint8 decimals_\\n    ) ERC20(name, symbol) {\\n        _customDecimals = decimals_;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return _customDecimals;\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) public {\\n        _burn(from, amount);\\n    }\\n}\",\"keccak256\":\"0x68220dc5a87182c7ba621544c1e3cafcfe7e699015f3f6c5903fcd9b54cf3412\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":577,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":583,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":585,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":587,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":589,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"},{"astId":8177,"contract":"src/mocks/MockERC20.sol:MockERC20","label":"_customDecimals","offset":0,"slot":"5","type":"t_uint8"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint8":{"encoding":"inplace","label":"uint8","numberOfBytes":"1"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"src/mocks/MockYieldStrategy.sol":{"MockYieldStrategy":{"abi":[{"inputs":[{"internalType":"address","name":"_asset","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Deposit","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"parameter","type":"string"},{"indexed":false,"internalType":"uint256","name":"oldValue","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newValue","type":"uint256"}],"name":"StrategyUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"shares","type":"uint256"}],"name":"Withdrawal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"yieldAmount","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"newTotalAssets","type":"uint256"}],"name":"YieldHarvested","type":"event"},{"inputs":[],"name":"asset","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"calculateUserYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"convertToAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"assets","type":"uint256"}],"name":"convertToShares","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"deposit","outputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"emergencyWithdraw","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getCurrentAPY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"getPerformanceData","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getRiskScore","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"getStrategyInfo","outputs":[{"components":[{"internalType":"string","name":"name","type":"string"},{"internalType":"string","name":"description","type":"string"},{"internalType":"uint256","name":"totalAssets","type":"uint256"},{"internalType":"uint256","name":"totalShares","type":"uint256"},{"internalType":"uint256","name":"currentAPY","type":"uint256"},{"internalType":"uint256","name":"riskScore","type":"uint256"},{"internalType":"uint256","name":"lastHarvest","type":"uint256"},{"internalType":"bool","name":"active","type":"bool"}],"internalType":"struct IYieldStrategy.StrategyInfo","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getTotalYieldGenerated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"harvestYield","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"isProfitable","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"maxCapacity","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"apy","type":"uint256"}],"name":"setCurrentAPY","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bool","name":"shouldFail","type":"bool"}],"name":"setShouldFail","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"setUserYield","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"totalAssets","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"utilizationRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"shares","type":"uint256"}],"name":"withdraw","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Mock yield strategy for testing purposes","events":{"Deposit(address,uint256,uint256)":{"details":"Emitted when funds are deposited into the strategy","params":{"amount":"The amount deposited","shares":"The number of shares minted","user":"The address that deposited funds"}},"StrategyUpdated(string,uint256,uint256)":{"details":"Emitted when strategy parameters are updated","params":{"newValue":"The new value","oldValue":"The old value","parameter":"The parameter that was updated"}},"Withdrawal(address,uint256,uint256)":{"details":"Emitted when funds are withdrawn from the strategy","params":{"amount":"The amount withdrawn","shares":"The number of shares burned","user":"The address that withdrew funds"}},"YieldHarvested(uint256,uint256)":{"details":"Emitted when yield is harvested","params":{"newTotalAssets":"The new total assets under management","yieldAmount":"The amount of yield harvested"}}},"kind":"dev","methods":{"balanceOf(address)":{"details":"Gets the user's share balance","params":{"user":"The user address"},"returns":{"_0":"The user's share balance"}},"calculateUserYield(address)":{"details":"Calculates yield generated for a specific user","params":{"user":"The user address"},"returns":{"_0":"The amount of yield generated"}},"convertToAssets(uint256)":{"details":"Converts shares to assets","params":{"shares":"The number of shares"},"returns":{"_0":"The equivalent amount of assets"}},"convertToShares(uint256)":{"details":"Converts assets to shares","params":{"assets":"The amount of assets"},"returns":{"_0":"The equivalent number of shares"}},"deposit(uint256)":{"details":"Deposits assets into the yield strategy","params":{"amount":"The amount of assets to deposit"},"returns":{"shares":"The number of shares minted to the depositor"}},"emergencyWithdraw(address)":{"details":"Emergency withdrawal of all user funds (may incur penalties)","params":{"user":"The address to withdraw funds for"},"returns":{"amount":"The amount of assets withdrawn"}},"getCurrentAPY()":{"details":"Calculates the current APY of the strategy","returns":{"_0":"The current APY in basis points"}},"getRiskScore()":{"details":"Gets the strategy's risk score","returns":{"_0":"The risk score from 1-10 (1 = lowest risk)"}},"getStrategyInfo()":{"details":"Gets comprehensive strategy information","returns":{"_0":"The strategy information struct"}},"getTotalYieldGenerated()":{"details":"Calculates the total yield generated by the strategy","returns":{"_0":"The total yield generated"}},"harvestYield()":{"details":"Harvests yield from the underlying protocol","returns":{"_0":"The amount of yield harvested"}},"isProfitable()":{"details":"Checks if the strategy is profitable","returns":{"_0":"Whether the strategy is currently profitable"}},"maxCapacity()":{"details":"Gets the maximum capacity of the strategy","returns":{"_0":"The maximum amount of assets the strategy can handle"}},"totalAssets()":{"details":"Gets the total assets under management","returns":{"_0":"The total assets managed by this strategy"}},"utilizationRate()":{"details":"Gets the current utilization rate","returns":{"_0":"The utilization rate as a percentage (basis points)"}},"withdraw(uint256)":{"details":"Withdraws assets from the yield strategy","params":{"shares":"The number of shares to burn"},"returns":{"amount":"The amount of assets withdrawn"}}},"stateVariables":{"asset":{"details":"Gets the underlying asset address","return":"The address of the underlying asset (e.g., USDC)","returns":{"_0":"The address of the underlying asset (e.g., USDC)"}}},"title":"MockYieldStrategy","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60a03461008f57601f610cfe38819003918201601f19168301916001600160401b038311848410176100945780849260209460405283398101031261008f57516001600160a01b038116810361008f5761019060035560ff1960045416600455608052604051610c5390816100ab82396080518181816101e30152818161067f015281816107380152610b800152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826301e1d114146107f35750816307a2d13a146107d35781632b35f739146106ae5781632e1a7d4d146106ca5781633612ddda146106ae57816338d52e0f1461066a57816339a243331461065057816339c1a8e8146106315781633fd188931461061157816359b6a0c9146105f45781636c321c8a146105325781636f7c99d2146104bc5781636ff1c9bc1461048b57816370a08231146104515781638b66268c146104375781639613092d146102e6578163962ca496146102c7578163a5aa5c1214610295578163b6b55f2514610186578163c6e6f5921461015c575063e8d991d11461010c57600080fd5b3461015857816003193601126101585790817f3fb12fb590bb295327f3bfc48158ada0b1147f8f823e0c7a09b98b301d186774602093600254935481519085825286820152a151908152f35b5080fd5b828434610183576020366003190112610183575061017c60209235610be2565b9051908152f35b80fd5b83833461015857602036600319011261015857823581516323b872dd60e01b60208201523360248201523060448201528160648201526064815260a0810181811067ffffffffffffffff82111761028257835260209450610210907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108e1565b61021981610be2565b923381526005855282812061022f85825461084d565b905561023d8460015461084d565b60015561024b82825461084d565b9055815190815282848201527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15823392a251908152f35b634e487b7160e01b855260418652602485fd5b8390346101585760203660031901126101585780358015158091036102c35760ff8019835416911617905580f35b8280fd5b5050346101585781600319360112610158576020906003549051908152f35b50503461015857816003193601126101585780516103fa9261030782610870565b606082528060e060209360608582015282868201528260608201528260808201528260a08201528260c0820152015254906001549260035481519461034b86610870565b8251610356816108a3565b600d81526c4d6f636b20537472617465677960981b85820152865282519161037d836108a3565b601f83527f4d6f636b207969656c6420737472617465677920666f722074657374696e670085840152848701928352838701958652606087019182526080870190815260a08701916001835261040d60c089019442865260e08a01966001885280519b8c9b8a8d52518c6101009b8c9101526101208d019061080d565b915190601f198c840301908c015261080d565b965160608901525160808801525160a08701525160c08601525160e0850152511515908301520390f35b839034610158576020366003190112610158573560025580f35b9050346102c35760203660031901126102c357356001600160a01b038116908190036102c357828291602094526005845220549051908152f35b9050346102c35760203660031901126102c35735916001600160a01b0383168303610183575061017c602092610b21565b905082346101835760203660031901126101835781356001600160a01b03811603610183575060ff8154166104f8576020826002549051908152f35b6020606492519162461bcd60e51b835282015260156024820152744d6f636b207374726174656779206661696c75726560581b6044820152fd5b8284346101835780600319360112610183578054928315806105e8576127108086029586041417156105d5576020835180926359b6a0c960e01b825281305afa9182156105ca578092610594575b505061017c90602093610bc2565b51908152f35b9091506020823d82116105c2575b816105af602093836108bf565b810103126101835750518261017c610580565b3d91506105a2565b8351903d90823e3d90fd5b634e487b7160e01b825260119052602490fd5b5050602092509061058e565b505034610158578160031936011261015857516000198152602090f35b505034610158576020366003190112610158576020906003549051908152f35b5050346101585781600319360112610158576020906002549051908152f35b839034610158576020366003190112610158573560035580f35b505034610158578160031936011261015857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101585781600319360112610158576020905160018152f35b83833461015857602092836003193601126102c3578035903384526005855281838520541061079a57506106fd81610c04565b9233815260058552828120610713838254610ac2565b905561072182600154610ac2565b60015561072f848254610ac2565b905561076583337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610acf565b815190838252848201527fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb823392a251908152f35b825162461bcd60e51b81529081018590526013602482015272496e73756666696369656e742073686172657360681b6044820152606490fd5b828434610183576020366003190112610183575061017c60209235610c04565b849034610158578160031936011261015857602091548152f35b919082519283825260005b848110610839575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610818565b9190820180921161085a57565b634e487b7160e01b600052601160045260246000fd5b610100810190811067ffffffffffffffff82111761088d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761088d57604052565b90601f8019910116810190811067ffffffffffffffff82111761088d57604052565b60018060a01b0316906040516108f6816108a3565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d15610a1b573d9167ffffffffffffffff8311610a0757906109719392916040519261096488601f19601f84011601856108bf565b83523d868885013e610a25565b8051918215918483156109e3575b50505090501561098c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126101585782015190811515820361018357508038808461097f565b634e487b7160e01b85526041600452602485fd5b9061097192916060915b91929015610a875750815115610a39575090565b3b15610a425790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610a9a5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610abe90602483019061080d565b0390fd5b9190820391821161085a57565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761088d57610b1f926040526108e1565b565b6001600160a01b03818116600081815260056020526040812054909390928315610ba8578394610b6e610b56610ba596610c04565b96879583526005602052826040812055600154610ac2565b600155610b7c848254610ac2565b90557f000000000000000000000000000000000000000000000000000000000000000016610acf565b90565b5050505090565b8181029291811591840414171561085a57565b8115610bcc570490565b634e487b7160e01b600052601260045260246000fd5b6000548015610c0057610bfb610ba59260015490610baf565b610bc2565b5090565b6001548015610c0057610bfb610ba59260005490610baf56fea264697066735822122012d25b7e44b6ebd2e86131d5a15b35f4cfeb207dcfc24e11a19c54a5f8f16ac064736f6c63430008140033","opcodes":"PUSH1 0xA0 CALLVALUE PUSH2 0x8F JUMPI PUSH1 0x1F PUSH2 0xCFE CODESIZE DUP2 SWAP1 SUB SWAP2 DUP3 ADD PUSH1 0x1F NOT AND DUP4 ADD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP4 GT DUP5 DUP5 LT OR PUSH2 0x94 JUMPI DUP1 DUP5 SWAP3 PUSH1 0x20 SWAP5 PUSH1 0x40 MSTORE DUP4 CODECOPY DUP2 ADD SUB SLT PUSH2 0x8F JUMPI MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 SUB PUSH2 0x8F JUMPI PUSH2 0x190 PUSH1 0x3 SSTORE PUSH1 0xFF NOT PUSH1 0x4 SLOAD AND PUSH1 0x4 SSTORE PUSH1 0x80 MSTORE PUSH1 0x40 MLOAD PUSH2 0xC53 SWAP1 DUP2 PUSH2 0xAB DUP3 CODECOPY PUSH1 0x80 MLOAD DUP2 DUP2 DUP2 PUSH2 0x1E3 ADD MSTORE DUP2 DUP2 PUSH2 0x67F ADD MSTORE DUP2 DUP2 PUSH2 0x738 ADD MSTORE PUSH2 0xB80 ADD MSTORE RETURN JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x1E1D114 EQ PUSH2 0x7F3 JUMPI POP DUP2 PUSH4 0x7A2D13A EQ PUSH2 0x7D3 JUMPI DUP2 PUSH4 0x2B35F739 EQ PUSH2 0x6AE JUMPI DUP2 PUSH4 0x2E1A7D4D EQ PUSH2 0x6CA JUMPI DUP2 PUSH4 0x3612DDDA EQ PUSH2 0x6AE JUMPI DUP2 PUSH4 0x38D52E0F EQ PUSH2 0x66A JUMPI DUP2 PUSH4 0x39A24333 EQ PUSH2 0x650 JUMPI DUP2 PUSH4 0x39C1A8E8 EQ PUSH2 0x631 JUMPI DUP2 PUSH4 0x3FD18893 EQ PUSH2 0x611 JUMPI DUP2 PUSH4 0x59B6A0C9 EQ PUSH2 0x5F4 JUMPI DUP2 PUSH4 0x6C321C8A EQ PUSH2 0x532 JUMPI DUP2 PUSH4 0x6F7C99D2 EQ PUSH2 0x4BC JUMPI DUP2 PUSH4 0x6FF1C9BC EQ PUSH2 0x48B JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x451 JUMPI DUP2 PUSH4 0x8B66268C EQ PUSH2 0x437 JUMPI DUP2 PUSH4 0x9613092D EQ PUSH2 0x2E6 JUMPI DUP2 PUSH4 0x962CA496 EQ PUSH2 0x2C7 JUMPI DUP2 PUSH4 0xA5AA5C12 EQ PUSH2 0x295 JUMPI DUP2 PUSH4 0xB6B55F25 EQ PUSH2 0x186 JUMPI DUP2 PUSH4 0xC6E6F592 EQ PUSH2 0x15C JUMPI POP PUSH4 0xE8D991D1 EQ PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI SWAP1 DUP2 PUSH32 0x3FB12FB590BB295327F3BFC48158ADA0B1147F8F823E0C7A09B98B301D186774 PUSH1 0x20 SWAP4 PUSH1 0x2 SLOAD SWAP4 SLOAD DUP2 MLOAD SWAP1 DUP6 DUP3 MSTORE DUP7 DUP3 ADD MSTORE LOG1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0xBE2 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI DUP3 CALLDATALOAD DUP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE DUP2 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x282 JUMPI DUP4 MSTORE PUSH1 0x20 SWAP5 POP PUSH2 0x210 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8E1 JUMP JUMPDEST PUSH2 0x219 DUP2 PUSH2 0xBE2 JUMP JUMPDEST SWAP3 CALLER DUP2 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP2 KECCAK256 PUSH2 0x22F DUP6 DUP3 SLOAD PUSH2 0x84D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x23D DUP5 PUSH1 0x1 SLOAD PUSH2 0x84D JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0x24B DUP3 DUP3 SLOAD PUSH2 0x84D JUMP JUMPDEST SWAP1 SSTORE DUP2 MLOAD SWAP1 DUP2 MSTORE DUP3 DUP5 DUP3 ADD MSTORE PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 DUP3 CALLER SWAP3 LOG2 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x2C3 JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI DUP1 MLOAD PUSH2 0x3FA SWAP3 PUSH2 0x307 DUP3 PUSH2 0x870 JUMP JUMPDEST PUSH1 0x60 DUP3 MSTORE DUP1 PUSH1 0xE0 PUSH1 0x20 SWAP4 PUSH1 0x60 DUP6 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE SLOAD SWAP1 PUSH1 0x1 SLOAD SWAP3 PUSH1 0x3 SLOAD DUP2 MLOAD SWAP5 PUSH2 0x34B DUP7 PUSH2 0x870 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x356 DUP2 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x4D6F636B205374726174656779 PUSH1 0x98 SHL DUP6 DUP3 ADD MSTORE DUP7 MSTORE DUP3 MLOAD SWAP2 PUSH2 0x37D DUP4 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x1F DUP4 MSTORE PUSH32 0x4D6F636B207969656C6420737472617465677920666F722074657374696E6700 DUP6 DUP5 ADD MSTORE DUP5 DUP8 ADD SWAP3 DUP4 MSTORE DUP4 DUP8 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP8 ADD SWAP2 PUSH1 0x1 DUP4 MSTORE PUSH2 0x40D PUSH1 0xC0 DUP10 ADD SWAP5 TIMESTAMP DUP7 MSTORE PUSH1 0xE0 DUP11 ADD SWAP7 PUSH1 0x1 DUP9 MSTORE DUP1 MLOAD SWAP12 DUP13 SWAP12 DUP11 DUP14 MSTORE MLOAD DUP13 PUSH2 0x100 SWAP12 DUP13 SWAP2 ADD MSTORE PUSH2 0x120 DUP14 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST SWAP2 MLOAD SWAP1 PUSH1 0x1F NOT DUP13 DUP5 SUB ADD SWAP1 DUP13 ADD MSTORE PUSH2 0x80D JUMP JUMPDEST SWAP7 MLOAD PUSH1 0x60 DUP10 ADD MSTORE MLOAD PUSH1 0x80 DUP9 ADD MSTORE MLOAD PUSH1 0xA0 DUP8 ADD MSTORE MLOAD PUSH1 0xC0 DUP7 ADD MSTORE MLOAD PUSH1 0xE0 DUP6 ADD MSTORE MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI CALLDATALOAD PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2C3 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2C3 JUMPI DUP3 DUP3 SWAP2 PUSH1 0x20 SWAP5 MSTORE PUSH1 0x5 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2C3 JUMPI CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 PUSH2 0xB21 JUMP JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x183 JUMPI POP PUSH1 0xFF DUP2 SLOAD AND PUSH2 0x4F8 JUMPI PUSH1 0x20 DUP3 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4D6F636B207374726174656779206661696C757265 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x183 JUMPI DUP1 SLOAD SWAP3 DUP4 ISZERO DUP1 PUSH2 0x5E8 JUMPI PUSH2 0x2710 DUP1 DUP7 MUL SWAP6 DUP7 DIV EQ OR ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x20 DUP4 MLOAD DUP1 SWAP3 PUSH4 0x59B6A0C9 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 ADDRESS GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x5CA JUMPI DUP1 SWAP3 PUSH2 0x594 JUMPI JUMPDEST POP POP PUSH2 0x17C SWAP1 PUSH1 0x20 SWAP4 PUSH2 0xBC2 JUMP JUMPDEST MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x5C2 JUMPI JUMPDEST DUP2 PUSH2 0x5AF PUSH1 0x20 SWAP4 DUP4 PUSH2 0x8BF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x183 JUMPI POP MLOAD DUP3 PUSH2 0x17C PUSH2 0x580 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5A2 JUMP JUMPDEST DUP4 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x20 SWAP3 POP SWAP1 PUSH2 0x58E JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI MLOAD PUSH1 0x0 NOT DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI CALLDATALOAD PUSH1 0x3 SSTORE DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C3 JUMPI DUP1 CALLDATALOAD SWAP1 CALLER DUP5 MSTORE PUSH1 0x5 DUP6 MSTORE DUP2 DUP4 DUP6 KECCAK256 SLOAD LT PUSH2 0x79A JUMPI POP PUSH2 0x6FD DUP2 PUSH2 0xC04 JUMP JUMPDEST SWAP3 CALLER DUP2 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP2 KECCAK256 PUSH2 0x713 DUP4 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x721 DUP3 PUSH1 0x1 SLOAD PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0x72F DUP5 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x765 DUP4 CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xACF JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP4 DUP3 MSTORE DUP5 DUP3 ADD MSTORE PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB DUP3 CALLER SWAP3 LOG2 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E73756666696369656E7420736861726573 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0xC04 JUMP JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP2 SLOAD DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x839 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x818 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x85A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH2 0x8F6 DUP2 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP5 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP5 DUP7 DUP3 SWAP7 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0xA1B JUMPI RETURNDATASIZE SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA07 JUMPI SWAP1 PUSH2 0x971 SWAP4 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x964 DUP9 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP6 PUSH2 0x8BF JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0xA25 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x9E3 JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x98C JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x158 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x183 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x97F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 PUSH2 0x971 SWAP3 SWAP2 PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0xA87 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0xA39 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0xA42 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA9A JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0xABE SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x85A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x88D JUMPI PUSH2 0xB1F SWAP3 PUSH1 0x40 MSTORE PUSH2 0x8E1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP4 SWAP1 SWAP3 DUP4 ISZERO PUSH2 0xBA8 JUMPI DUP4 SWAP5 PUSH2 0xB6E PUSH2 0xB56 PUSH2 0xBA5 SWAP7 PUSH2 0xC04 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP4 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x1 SLOAD PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0xB7C DUP5 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH32 0x0 AND PUSH2 0xACF JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x85A JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0xBCC JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH2 0xBFB PUSH2 0xBA5 SWAP3 PUSH1 0x1 SLOAD SWAP1 PUSH2 0xBAF JUMP JUMPDEST PUSH2 0xBC2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH2 0xBFB PUSH2 0xBA5 SWAP3 PUSH1 0x0 SLOAD SWAP1 PUSH2 0xBAF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xD2 JUMPDEST PUSH31 0x44B6EBD2E86131D5A15B35F4CFEB207DCFC24E11A19C54A5F8F16AC064736F PUSH13 0x63430008140033000000000000 ","sourceMap":"310:4236:22:-:0;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;-1:-1:-1;;;;;310:4236:22;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;310:4236:22;;;;;;569:3;;310:4236;;;619:5;310:4236;;619:5;310:4236;721:14;;310:4236;;;;;;;;721:14;310:4236;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;310:4236:22;;;;;;-1:-1:-1;310:4236:22;;;;;-1:-1:-1;310:4236:22"},"deployedBytecode":{"functionDebugData":{"abi_encode_string":{"entryPoint":2061,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_uint256":{"entryPoint":2125,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_uint256":{"entryPoint":3010,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_uint256":{"entryPoint":2991,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_uint256":{"entryPoint":2754,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":2239,"id":null,"parameterSlots":2,"returnSlots":0},"finalize_allocation_7083":{"entryPoint":2160,"id":null,"parameterSlots":1,"returnSlots":0},"finalize_allocation_8560":{"entryPoint":2211,"id":null,"parameterSlots":1,"returnSlots":0},"fun_callOptionalReturn":{"entryPoint":2273,"id":1614,"parameterSlots":2,"returnSlots":0},"fun_convertToAssets":{"entryPoint":3076,"id":8557,"parameterSlots":1,"returnSlots":1},"fun_convertToShares":{"entryPoint":3042,"id":8535,"parameterSlots":1,"returnSlots":1},"fun_emergencyWithdraw":{"entryPoint":2849,"id":8463,"parameterSlots":1,"returnSlots":1},"fun_safeTransfer":{"entryPoint":2767,"id":1320,"parameterSlots":3,"returnSlots":0},"fun_verifyCallResultFromTarget":{"entryPoint":2597,"id":1948,"parameterSlots":4,"returnSlots":1}},"generatedSources":[],"immutableReferences":{"8246":[{"length":32,"start":483},{"length":32,"start":1663},{"length":32,"start":1848},{"length":32,"start":2944}]},"linkReferences":{},"object":"608060408181526004918236101561001657600080fd5b600092833560e01c91826301e1d114146107f35750816307a2d13a146107d35781632b35f739146106ae5781632e1a7d4d146106ca5781633612ddda146106ae57816338d52e0f1461066a57816339a243331461065057816339c1a8e8146106315781633fd188931461061157816359b6a0c9146105f45781636c321c8a146105325781636f7c99d2146104bc5781636ff1c9bc1461048b57816370a08231146104515781638b66268c146104375781639613092d146102e6578163962ca496146102c7578163a5aa5c1214610295578163b6b55f2514610186578163c6e6f5921461015c575063e8d991d11461010c57600080fd5b3461015857816003193601126101585790817f3fb12fb590bb295327f3bfc48158ada0b1147f8f823e0c7a09b98b301d186774602093600254935481519085825286820152a151908152f35b5080fd5b828434610183576020366003190112610183575061017c60209235610be2565b9051908152f35b80fd5b83833461015857602036600319011261015857823581516323b872dd60e01b60208201523360248201523060448201528160648201526064815260a0810181811067ffffffffffffffff82111761028257835260209450610210907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108e1565b61021981610be2565b923381526005855282812061022f85825461084d565b905561023d8460015461084d565b60015561024b82825461084d565b9055815190815282848201527f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15823392a251908152f35b634e487b7160e01b855260418652602485fd5b8390346101585760203660031901126101585780358015158091036102c35760ff8019835416911617905580f35b8280fd5b5050346101585781600319360112610158576020906003549051908152f35b50503461015857816003193601126101585780516103fa9261030782610870565b606082528060e060209360608582015282868201528260608201528260808201528260a08201528260c0820152015254906001549260035481519461034b86610870565b8251610356816108a3565b600d81526c4d6f636b20537472617465677960981b85820152865282519161037d836108a3565b601f83527f4d6f636b207969656c6420737472617465677920666f722074657374696e670085840152848701928352838701958652606087019182526080870190815260a08701916001835261040d60c089019442865260e08a01966001885280519b8c9b8a8d52518c6101009b8c9101526101208d019061080d565b915190601f198c840301908c015261080d565b965160608901525160808801525160a08701525160c08601525160e0850152511515908301520390f35b839034610158576020366003190112610158573560025580f35b9050346102c35760203660031901126102c357356001600160a01b038116908190036102c357828291602094526005845220549051908152f35b9050346102c35760203660031901126102c35735916001600160a01b0383168303610183575061017c602092610b21565b905082346101835760203660031901126101835781356001600160a01b03811603610183575060ff8154166104f8576020826002549051908152f35b6020606492519162461bcd60e51b835282015260156024820152744d6f636b207374726174656779206661696c75726560581b6044820152fd5b8284346101835780600319360112610183578054928315806105e8576127108086029586041417156105d5576020835180926359b6a0c960e01b825281305afa9182156105ca578092610594575b505061017c90602093610bc2565b51908152f35b9091506020823d82116105c2575b816105af602093836108bf565b810103126101835750518261017c610580565b3d91506105a2565b8351903d90823e3d90fd5b634e487b7160e01b825260119052602490fd5b5050602092509061058e565b505034610158578160031936011261015857516000198152602090f35b505034610158576020366003190112610158576020906003549051908152f35b5050346101585781600319360112610158576020906002549051908152f35b839034610158576020366003190112610158573560035580f35b505034610158578160031936011261015857517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5050346101585781600319360112610158576020905160018152f35b83833461015857602092836003193601126102c3578035903384526005855281838520541061079a57506106fd81610c04565b9233815260058552828120610713838254610ac2565b905561072182600154610ac2565b60015561072f848254610ac2565b905561076583337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610acf565b815190838252848201527fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb823392a251908152f35b825162461bcd60e51b81529081018590526013602482015272496e73756666696369656e742073686172657360681b6044820152606490fd5b828434610183576020366003190112610183575061017c60209235610c04565b849034610158578160031936011261015857602091548152f35b919082519283825260005b848110610839575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610818565b9190820180921161085a57565b634e487b7160e01b600052601160045260246000fd5b610100810190811067ffffffffffffffff82111761088d57604052565b634e487b7160e01b600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761088d57604052565b90601f8019910116810190811067ffffffffffffffff82111761088d57604052565b60018060a01b0316906040516108f6816108a3565b6020928382527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564848301526000808486829651910182855af13d15610a1b573d9167ffffffffffffffff8311610a0757906109719392916040519261096488601f19601f84011601856108bf565b83523d868885013e610a25565b8051918215918483156109e3575b50505090501561098c5750565b6084906040519062461bcd60e51b82526004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152fd5b9193818094500103126101585782015190811515820361018357508038808461097f565b634e487b7160e01b85526041600452602485fd5b9061097192916060915b91929015610a875750815115610a39575090565b3b15610a425790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b825190915015610a9a5750805190602001fd5b60405162461bcd60e51b815260206004820152908190610abe90602483019061080d565b0390fd5b9190820391821161085a57565b60405163a9059cbb60e01b60208201526001600160a01b039092166024830152604480830193909352918152608081019167ffffffffffffffff83118284101761088d57610b1f926040526108e1565b565b6001600160a01b03818116600081815260056020526040812054909390928315610ba8578394610b6e610b56610ba596610c04565b96879583526005602052826040812055600154610ac2565b600155610b7c848254610ac2565b90557f000000000000000000000000000000000000000000000000000000000000000016610acf565b90565b5050505090565b8181029291811591840414171561085a57565b8115610bcc570490565b634e487b7160e01b600052601260045260246000fd5b6000548015610c0057610bfb610ba59260015490610baf565b610bc2565b5090565b6001548015610c0057610bfb610ba59260005490610baf56fea264697066735822122012d25b7e44b6ebd2e86131d5a15b35f4cfeb207dcfc24e11a19c54a5f8f16ac064736f6c63430008140033","opcodes":"PUSH1 0x80 PUSH1 0x40 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP2 DUP3 CALLDATASIZE LT ISZERO PUSH2 0x16 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP3 DUP4 CALLDATALOAD PUSH1 0xE0 SHR SWAP2 DUP3 PUSH4 0x1E1D114 EQ PUSH2 0x7F3 JUMPI POP DUP2 PUSH4 0x7A2D13A EQ PUSH2 0x7D3 JUMPI DUP2 PUSH4 0x2B35F739 EQ PUSH2 0x6AE JUMPI DUP2 PUSH4 0x2E1A7D4D EQ PUSH2 0x6CA JUMPI DUP2 PUSH4 0x3612DDDA EQ PUSH2 0x6AE JUMPI DUP2 PUSH4 0x38D52E0F EQ PUSH2 0x66A JUMPI DUP2 PUSH4 0x39A24333 EQ PUSH2 0x650 JUMPI DUP2 PUSH4 0x39C1A8E8 EQ PUSH2 0x631 JUMPI DUP2 PUSH4 0x3FD18893 EQ PUSH2 0x611 JUMPI DUP2 PUSH4 0x59B6A0C9 EQ PUSH2 0x5F4 JUMPI DUP2 PUSH4 0x6C321C8A EQ PUSH2 0x532 JUMPI DUP2 PUSH4 0x6F7C99D2 EQ PUSH2 0x4BC JUMPI DUP2 PUSH4 0x6FF1C9BC EQ PUSH2 0x48B JUMPI DUP2 PUSH4 0x70A08231 EQ PUSH2 0x451 JUMPI DUP2 PUSH4 0x8B66268C EQ PUSH2 0x437 JUMPI DUP2 PUSH4 0x9613092D EQ PUSH2 0x2E6 JUMPI DUP2 PUSH4 0x962CA496 EQ PUSH2 0x2C7 JUMPI DUP2 PUSH4 0xA5AA5C12 EQ PUSH2 0x295 JUMPI DUP2 PUSH4 0xB6B55F25 EQ PUSH2 0x186 JUMPI DUP2 PUSH4 0xC6E6F592 EQ PUSH2 0x15C JUMPI POP PUSH4 0xE8D991D1 EQ PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI SWAP1 DUP2 PUSH32 0x3FB12FB590BB295327F3BFC48158ADA0B1147F8F823E0C7A09B98B301D186774 PUSH1 0x20 SWAP4 PUSH1 0x2 SLOAD SWAP4 SLOAD DUP2 MLOAD SWAP1 DUP6 DUP3 MSTORE DUP7 DUP3 ADD MSTORE LOG1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP DUP1 REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0xBE2 JUMP JUMPDEST SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP1 REVERT JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI DUP3 CALLDATALOAD DUP2 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE DUP2 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x64 DUP2 MSTORE PUSH1 0xA0 DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x282 JUMPI DUP4 MSTORE PUSH1 0x20 SWAP5 POP PUSH2 0x210 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x8E1 JUMP JUMPDEST PUSH2 0x219 DUP2 PUSH2 0xBE2 JUMP JUMPDEST SWAP3 CALLER DUP2 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP2 KECCAK256 PUSH2 0x22F DUP6 DUP3 SLOAD PUSH2 0x84D JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x23D DUP5 PUSH1 0x1 SLOAD PUSH2 0x84D JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0x24B DUP3 DUP3 SLOAD PUSH2 0x84D JUMP JUMPDEST SWAP1 SSTORE DUP2 MLOAD SWAP1 DUP2 MSTORE DUP3 DUP5 DUP3 ADD MSTORE PUSH32 0x90890809C654F11D6E72A28FA60149770A0D11EC6C92319D6CEB2BB0A4EA1A15 DUP3 CALLER SWAP3 LOG2 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 DUP7 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP1 SWAP2 SUB PUSH2 0x2C3 JUMPI PUSH1 0xFF DUP1 NOT DUP4 SLOAD AND SWAP2 AND OR SWAP1 SSTORE DUP1 RETURN JUMPDEST DUP3 DUP1 REVERT JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI DUP1 MLOAD PUSH2 0x3FA SWAP3 PUSH2 0x307 DUP3 PUSH2 0x870 JUMP JUMPDEST PUSH1 0x60 DUP3 MSTORE DUP1 PUSH1 0xE0 PUSH1 0x20 SWAP4 PUSH1 0x60 DUP6 DUP3 ADD MSTORE DUP3 DUP7 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE DUP3 PUSH1 0x80 DUP3 ADD MSTORE DUP3 PUSH1 0xA0 DUP3 ADD MSTORE DUP3 PUSH1 0xC0 DUP3 ADD MSTORE ADD MSTORE SLOAD SWAP1 PUSH1 0x1 SLOAD SWAP3 PUSH1 0x3 SLOAD DUP2 MLOAD SWAP5 PUSH2 0x34B DUP7 PUSH2 0x870 JUMP JUMPDEST DUP3 MLOAD PUSH2 0x356 DUP2 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0xD DUP2 MSTORE PUSH13 0x4D6F636B205374726174656779 PUSH1 0x98 SHL DUP6 DUP3 ADD MSTORE DUP7 MSTORE DUP3 MLOAD SWAP2 PUSH2 0x37D DUP4 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x1F DUP4 MSTORE PUSH32 0x4D6F636B207969656C6420737472617465677920666F722074657374696E6700 DUP6 DUP5 ADD MSTORE DUP5 DUP8 ADD SWAP3 DUP4 MSTORE DUP4 DUP8 ADD SWAP6 DUP7 MSTORE PUSH1 0x60 DUP8 ADD SWAP2 DUP3 MSTORE PUSH1 0x80 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 0xA0 DUP8 ADD SWAP2 PUSH1 0x1 DUP4 MSTORE PUSH2 0x40D PUSH1 0xC0 DUP10 ADD SWAP5 TIMESTAMP DUP7 MSTORE PUSH1 0xE0 DUP11 ADD SWAP7 PUSH1 0x1 DUP9 MSTORE DUP1 MLOAD SWAP12 DUP13 SWAP12 DUP11 DUP14 MSTORE MLOAD DUP13 PUSH2 0x100 SWAP12 DUP13 SWAP2 ADD MSTORE PUSH2 0x120 DUP14 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST SWAP2 MLOAD SWAP1 PUSH1 0x1F NOT DUP13 DUP5 SUB ADD SWAP1 DUP13 ADD MSTORE PUSH2 0x80D JUMP JUMPDEST SWAP7 MLOAD PUSH1 0x60 DUP10 ADD MSTORE MLOAD PUSH1 0x80 DUP9 ADD MSTORE MLOAD PUSH1 0xA0 DUP8 ADD MSTORE MLOAD PUSH1 0xC0 DUP7 ADD MSTORE MLOAD PUSH1 0xE0 DUP6 ADD MSTORE MLOAD ISZERO ISZERO SWAP1 DUP4 ADD MSTORE SUB SWAP1 RETURN JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI CALLDATALOAD PUSH1 0x2 SSTORE DUP1 RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2C3 JUMPI CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SWAP1 DUP2 SWAP1 SUB PUSH2 0x2C3 JUMPI DUP3 DUP3 SWAP2 PUSH1 0x20 SWAP5 MSTORE PUSH1 0x5 DUP5 MSTORE KECCAK256 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 POP CALLVALUE PUSH2 0x2C3 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x2C3 JUMPI CALLDATALOAD SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND DUP4 SUB PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 PUSH2 0xB21 JUMP JUMPDEST SWAP1 POP DUP3 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND SUB PUSH2 0x183 JUMPI POP PUSH1 0xFF DUP2 SLOAD AND PUSH2 0x4F8 JUMPI PUSH1 0x20 DUP3 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST PUSH1 0x20 PUSH1 0x64 SWAP3 MLOAD SWAP2 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP4 MSTORE DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH21 0x4D6F636B207374726174656779206661696C757265 PUSH1 0x58 SHL PUSH1 0x44 DUP3 ADD MSTORE REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI DUP1 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x183 JUMPI DUP1 SLOAD SWAP3 DUP4 ISZERO DUP1 PUSH2 0x5E8 JUMPI PUSH2 0x2710 DUP1 DUP7 MUL SWAP6 DUP7 DIV EQ OR ISZERO PUSH2 0x5D5 JUMPI PUSH1 0x20 DUP4 MLOAD DUP1 SWAP3 PUSH4 0x59B6A0C9 PUSH1 0xE0 SHL DUP3 MSTORE DUP2 ADDRESS GAS STATICCALL SWAP2 DUP3 ISZERO PUSH2 0x5CA JUMPI DUP1 SWAP3 PUSH2 0x594 JUMPI JUMPDEST POP POP PUSH2 0x17C SWAP1 PUSH1 0x20 SWAP4 PUSH2 0xBC2 JUMP JUMPDEST MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST SWAP1 SWAP2 POP PUSH1 0x20 DUP3 RETURNDATASIZE DUP3 GT PUSH2 0x5C2 JUMPI JUMPDEST DUP2 PUSH2 0x5AF PUSH1 0x20 SWAP4 DUP4 PUSH2 0x8BF JUMP JUMPDEST DUP2 ADD SUB SLT PUSH2 0x183 JUMPI POP MLOAD DUP3 PUSH2 0x17C PUSH2 0x580 JUMP JUMPDEST RETURNDATASIZE SWAP2 POP PUSH2 0x5A2 JUMP JUMPDEST DUP4 MLOAD SWAP1 RETURNDATASIZE SWAP1 DUP3 RETURNDATACOPY RETURNDATASIZE SWAP1 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP3 MSTORE PUSH1 0x11 SWAP1 MSTORE PUSH1 0x24 SWAP1 REVERT JUMPDEST POP POP PUSH1 0x20 SWAP3 POP SWAP1 PUSH2 0x58E JUMP JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI MLOAD PUSH1 0x0 NOT DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x3 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 PUSH1 0x2 SLOAD SWAP1 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP4 SWAP1 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x158 JUMPI CALLDATALOAD PUSH1 0x3 SSTORE DUP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI MLOAD PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 SWAP1 RETURN JUMPDEST POP POP CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP1 MLOAD PUSH1 0x1 DUP2 MSTORE RETURN JUMPDEST DUP4 DUP4 CALLVALUE PUSH2 0x158 JUMPI PUSH1 0x20 SWAP3 DUP4 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x2C3 JUMPI DUP1 CALLDATALOAD SWAP1 CALLER DUP5 MSTORE PUSH1 0x5 DUP6 MSTORE DUP2 DUP4 DUP6 KECCAK256 SLOAD LT PUSH2 0x79A JUMPI POP PUSH2 0x6FD DUP2 PUSH2 0xC04 JUMP JUMPDEST SWAP3 CALLER DUP2 MSTORE PUSH1 0x5 DUP6 MSTORE DUP3 DUP2 KECCAK256 PUSH2 0x713 DUP4 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x721 DUP3 PUSH1 0x1 SLOAD PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0x72F DUP5 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH2 0x765 DUP4 CALLER PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xACF JUMP JUMPDEST DUP2 MLOAD SWAP1 DUP4 DUP3 MSTORE DUP5 DUP3 ADD MSTORE PUSH32 0xDF273CB619D95419A9CD0EC88123A0538C85064229BAA6363788F743FFF90DEB DUP3 CALLER SWAP3 LOG2 MLOAD SWAP1 DUP2 MSTORE RETURN JUMPDEST DUP3 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x13 PUSH1 0x24 DUP3 ADD MSTORE PUSH19 0x496E73756666696369656E7420736861726573 PUSH1 0x68 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 DUP5 CALLVALUE PUSH2 0x183 JUMPI PUSH1 0x20 CALLDATASIZE PUSH1 0x3 NOT ADD SLT PUSH2 0x183 JUMPI POP PUSH2 0x17C PUSH1 0x20 SWAP3 CALLDATALOAD PUSH2 0xC04 JUMP JUMPDEST DUP5 SWAP1 CALLVALUE PUSH2 0x158 JUMPI DUP2 PUSH1 0x3 NOT CALLDATASIZE ADD SLT PUSH2 0x158 JUMPI PUSH1 0x20 SWAP2 SLOAD DUP2 MSTORE RETURN JUMPDEST SWAP2 SWAP1 DUP3 MLOAD SWAP3 DUP4 DUP3 MSTORE PUSH1 0x0 JUMPDEST DUP5 DUP2 LT PUSH2 0x839 JUMPI POP POP DUP3 PUSH1 0x0 PUSH1 0x20 DUP1 SWAP5 SWAP6 DUP5 ADD ADD MSTORE PUSH1 0x1F DUP1 NOT SWAP2 ADD AND ADD ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD DUP5 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x818 JUMP JUMPDEST SWAP2 SWAP1 DUP3 ADD DUP1 SWAP3 GT PUSH2 0x85A JUMPI JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x100 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST SWAP1 PUSH1 0x1F DUP1 NOT SWAP2 ADD AND DUP2 ADD SWAP1 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR PUSH2 0x88D JUMPI PUSH1 0x40 MSTORE JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH1 0x40 MLOAD PUSH2 0x8F6 DUP2 PUSH2 0x8A3 JUMP JUMPDEST PUSH1 0x20 SWAP3 DUP4 DUP3 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP5 DUP4 ADD MSTORE PUSH1 0x0 DUP1 DUP5 DUP7 DUP3 SWAP7 MLOAD SWAP2 ADD DUP3 DUP6 GAS CALL RETURNDATASIZE ISZERO PUSH2 0xA1B JUMPI RETURNDATASIZE SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT PUSH2 0xA07 JUMPI SWAP1 PUSH2 0x971 SWAP4 SWAP3 SWAP2 PUSH1 0x40 MLOAD SWAP3 PUSH2 0x964 DUP9 PUSH1 0x1F NOT PUSH1 0x1F DUP5 ADD AND ADD DUP6 PUSH2 0x8BF JUMP JUMPDEST DUP4 MSTORE RETURNDATASIZE DUP7 DUP9 DUP6 ADD RETURNDATACOPY PUSH2 0xA25 JUMP JUMPDEST DUP1 MLOAD SWAP2 DUP3 ISZERO SWAP2 DUP5 DUP4 ISZERO PUSH2 0x9E3 JUMPI JUMPDEST POP POP POP SWAP1 POP ISZERO PUSH2 0x98C JUMPI POP JUMP JUMPDEST PUSH1 0x84 SWAP1 PUSH1 0x40 MLOAD SWAP1 PUSH3 0x461BCD PUSH1 0xE5 SHL DUP3 MSTORE PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x64 DUP3 ADD MSTORE REVERT JUMPDEST SWAP2 SWAP4 DUP2 DUP1 SWAP5 POP ADD SUB SLT PUSH2 0x158 JUMPI DUP3 ADD MLOAD SWAP1 DUP2 ISZERO ISZERO DUP3 SUB PUSH2 0x183 JUMPI POP DUP1 CODESIZE DUP1 DUP5 PUSH2 0x97F JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP6 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 DUP6 REVERT JUMPDEST SWAP1 PUSH2 0x971 SWAP3 SWAP2 PUSH1 0x60 SWAP2 JUMPDEST SWAP2 SWAP3 SWAP1 ISZERO PUSH2 0xA87 JUMPI POP DUP2 MLOAD ISZERO PUSH2 0xA39 JUMPI POP SWAP1 JUMP JUMPDEST EXTCODESIZE ISZERO PUSH2 0xA42 JUMPI SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 SWAP1 REVERT JUMPDEST DUP3 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xA9A JUMPI POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE SWAP1 DUP2 SWAP1 PUSH2 0xABE SWAP1 PUSH1 0x24 DUP4 ADD SWAP1 PUSH2 0x80D JUMP JUMPDEST SUB SWAP1 REVERT JUMPDEST SWAP2 SWAP1 DUP3 SUB SWAP2 DUP3 GT PUSH2 0x85A JUMPI JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP2 MSTORE PUSH1 0x80 DUP2 ADD SWAP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT DUP3 DUP5 LT OR PUSH2 0x88D JUMPI PUSH2 0xB1F SWAP3 PUSH1 0x40 MSTORE PUSH2 0x8E1 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD SWAP1 SWAP4 SWAP1 SWAP3 DUP4 ISZERO PUSH2 0xBA8 JUMPI DUP4 SWAP5 PUSH2 0xB6E PUSH2 0xB56 PUSH2 0xBA5 SWAP7 PUSH2 0xC04 JUMP JUMPDEST SWAP7 DUP8 SWAP6 DUP4 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE DUP3 PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x1 SLOAD PUSH2 0xAC2 JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH2 0xB7C DUP5 DUP3 SLOAD PUSH2 0xAC2 JUMP JUMPDEST SWAP1 SSTORE PUSH32 0x0 AND PUSH2 0xACF JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL SWAP3 SWAP2 DUP2 ISZERO SWAP2 DUP5 DIV EQ OR ISZERO PUSH2 0x85A JUMPI JUMP JUMPDEST DUP2 ISZERO PUSH2 0xBCC JUMPI DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH2 0xBFB PUSH2 0xBA5 SWAP3 PUSH1 0x1 SLOAD SWAP1 PUSH2 0xBAF JUMP JUMPDEST PUSH2 0xBC2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD DUP1 ISZERO PUSH2 0xC00 JUMPI PUSH2 0xBFB PUSH2 0xBA5 SWAP3 PUSH1 0x0 SLOAD SWAP1 PUSH2 0xBAF JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT 0xD2 JUMPDEST PUSH31 0x44B6EBD2E86131D5A15B35F4CFEB207DCFC24E11A19C54A5F8F16AC064736F PUSH13 0x63430008140033000000000000 ","sourceMap":"310:4236:22:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2833:40;310:4236;;2848:10;310:4236;;;;;;;;;;;;;2833:40;310:4236;;;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;;;1482:68:8;;;1201:10:22;1482:68:8;;;310:4236:22;1221:4;310:4236;;;;;;;;;;1482:68:8;;310:4236:22;;;;;;;;;;;;;;;;-1:-1:-1;1482:68:8;;1177:5:22;-1:-1:-1;;;;;310:4236:22;1482:68:8;:::i;:::-;1263:23:22;;;:::i;:::-;1201:10;;310:4236;;1296:9;310:4236;;;;;1296:31;310:4236;;;1296:31;:::i;:::-;310:4236;;1337:22;310:4236;;;1337:22;:::i;:::-;310:4236;;1369:22;310:4236;;;1369:22;:::i;:::-;310:4236;;;;;;;;;;;;1407:35;1201:10;;1407:35;;310:4236;;;;;;-1:-1:-1;;;310:4236:22;;;;;1482:68:8;310:4236:22;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3691:12;310:4236;;;;;;;;;;:::i;:::-;;;;;;:::i;:::-;;;;-1:-1:-1;;;310:4236:22;;;;;;;;;;;;:::i;:::-;;;;;;;;;3517:328;;;310:4236;;;3517:328;;;310:4236;;;;3517:328;;310:4236;;;;3517:328;;310:4236;;;;3517:328;;310:4236;3691:12;310:4236;;;;3517:328;;3793:15;;310:4236;;;3517:328;;310:4236;3691:12;310:4236;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;834:19;310:4236;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;-1:-1:-1;;;;;310:4236:22;;;;;;;;;;;;;;3392:9;310:4236;;;;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;-1:-1:-1;;;;;310:4236:22;;;;;;;;;;;:::i;:::-;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;-1:-1:-1;;;;;310:4236:22;;;;;;;;;;2531:73;;310:4236;;2620:10;310:4236;;;;;;;2531:73;310:4236;;;;;;;;2562:31;;;;310:4236;;;;;;-1:-1:-1;;;310:4236:22;;;;2562:31;310:4236;;;;;;;;;;;;;;;;;4471:16;;;;;4506:5;310:4236;;;;;;;;;;;4515:18;310:4236;;;;;;;4515:18;;:4;;:18;;;;;;;;;;;4471:66;4490:43;;;;310:4236;4490:43;;:::i;4471:66::-;310:4236;;;;;4515:18;;;;;;;;;;;;;;;;;;:::i;:::-;;;310:4236;;;;-1:-1:-1;310:4236:22;;4490:43;4515:18;;;;;-1:-1:-1;4515:18:22;;;310:4236;;;;;;;;;;;-1:-1:-1;;;310:4236:22;;;;;;;;4471:66;;;310:4236;4471:66;;;;;310:4236;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2735:10;310:4236;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;;;;;;;;;;;;;;;394:39;-1:-1:-1;;;;;310:4236:22;;;;;;;;;;;;;;;;;;;;;;;4258:4;310:4236;;;;;;;;;;;;;;;;;;;;;1583:10;;310:4236;;1573:9;310:4236;;;;;;;1573:31;310:4236;;1656:23;;;;:::i;:::-;1583:10;;310:4236;;1573:9;310:4236;;;;;1689:31;310:4236;;;1689:31;:::i;:::-;310:4236;;1730:22;310:4236;;;1730:22;:::i;:::-;310:4236;;1762:22;310:4236;;;1762:22;:::i;:::-;310:4236;;1834:6;1583:10;;1802:5;-1:-1:-1;;;;;310:4236:22;1834:6;:::i;:::-;310:4236;;;;;;;;;;1857:38;1583:10;;1857:38;;310:4236;;;;;;;;-1:-1:-1;;;310:4236:22;;;;;;;;;;;;;-1:-1:-1;;;310:4236:22;;;;;;;;;;;;;;;-1:-1:-1;;310:4236:22;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;:::o;5196:642:8:-;310:4236:22;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;5487:31:9;;;;;;;;;;;;310:4236:22;;;;;;;;;;;;5535:69:9;310:4236:22;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;5535:69:9;:::i;:::-;310:4236:22;;5728:22:8;;;:56;;;;;;310:4236:22;;;;;;;;;5196:642:8;:::o;310:4236:22:-;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;310:4236:22;;;;;5728:56:8;5754:30;;;;;;;310:4236:22;;;;5754:30:8;;310:4236:22;;;;;;;;;5728:56:8;;;;;;;310:4236:22;-1:-1:-1;;;310:4236:22;;;;;;;;;;5535:69:9;310:4236:22;;;;7671:628:9;;;;7875:418;;;310:4236:22;;;7906:22:9;7902:286;;8201:17;;:::o;7902:286::-;1702:19;:23;310:4236:22;;8201:17:9;:::o;310:4236:22:-;;;-1:-1:-1;;;310:4236:22;;;;;;;;;;;;;;;;;;;;7875:418:9;310:4236:22;;;;-1:-1:-1;8980:21:9;:17;;9152:142;;;;;;;8976:379;310:4236:22;;-1:-1:-1;;;9324:20:9;;310:4236:22;9324:20:9;;;310:4236:22;;;;;;;;;;;:::i;:::-;9324:20:9;;;310:4236:22;;;;;;;;;;:::o;941:175:8:-;310:4236:22;;-1:-1:-1;;;1050:58:8;;;;-1:-1:-1;;;;;310:4236:22;;;1050:58:8;;;310:4236:22;;;;;;;;;1050:58:8;;;310:4236:22;;;;;;;;;;;;;1050:58:8;310:4236:22;;;1050:58:8;:::i;:::-;941:175::o;1931:394:22:-;-1:-1:-1;;;;;310:4236:22;;;-1:-1:-1;310:4236:22;;;2046:9;310:4236;;;;;;-1:-1:-1;;310:4236:22;;2075:15;;2071:29;;2120:27;;2186:26;2120:27;2288:6;2120:27;;:::i;:::-;310:4236;;;;;2046:9;310:4236;;;;;;;;;2186:26;:::i;:::-;310:4236;;2222:22;310:4236;;;2222:22;:::i;:::-;310:4236;;2262:5;310:4236;2288:6;:::i;:::-;1931:394;:::o;2071:29::-;2092:8;;;;;:::o;310:4236::-;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;:::o;:::-;;;;;;;;;;;;2913:188;3007:12;310:4236;3007:17;;3003:36;;3057:21;3056:38;310:4236;3066:12;310:4236;3057:21;;:::i;:::-;3056:38;:::i;3003:36::-;3026:13;;:::o;3107:188::-;3201:12;310:4236;3201:17;;3197:36;;3251:21;3250:38;310:4236;-1:-1:-1;310:4236:22;3251:21;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"631000","executionCost":"infinite","totalCost":"infinite"},"external":{"asset()":"infinite","balanceOf(address)":"2676","calculateUserYield(address)":"4693","convertToAssets(uint256)":"4595","convertToShares(uint256)":"4991","deposit(uint256)":"infinite","emergencyWithdraw(address)":"infinite","getCurrentAPY()":"2632","getPerformanceData(uint256)":"2456","getRiskScore()":"218","getStrategyInfo()":"infinite","getTotalYieldGenerated()":"2434","harvestYield()":"6119","isProfitable()":"262","maxCapacity()":"375","setCurrentAPY(uint256)":"22393","setShouldFail(bool)":"24793","setUserYield(uint256)":"22569","totalAssets()":"2268","utilizationRate()":"infinite","withdraw(uint256)":"infinite"}},"methodIdentifiers":{"asset()":"38d52e0f","balanceOf(address)":"70a08231","calculateUserYield(address)":"6f7c99d2","convertToAssets(uint256)":"07a2d13a","convertToShares(uint256)":"c6e6f592","deposit(uint256)":"b6b55f25","emergencyWithdraw(address)":"6ff1c9bc","getCurrentAPY()":"962ca496","getPerformanceData(uint256)":"3fd18893","getRiskScore()":"2b35f739","getStrategyInfo()":"9613092d","getTotalYieldGenerated()":"39c1a8e8","harvestYield()":"e8d991d1","isProfitable()":"3612ddda","maxCapacity()":"59b6a0c9","setCurrentAPY(uint256)":"39a24333","setShouldFail(bool)":"a5aa5c12","setUserYield(uint256)":"8b66268c","totalAssets()":"01e1d114","utilizationRate()":"6c321c8a","withdraw(uint256)":"2e1a7d4d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"parameter\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"StrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"yieldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalAssets\",\"type\":\"uint256\"}],\"name\":\"YieldHarvested\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateUserYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAPY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPerformanceData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRiskScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"totalAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentAPY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskScore\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastHarvest\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct IYieldStrategy.StrategyInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalYieldGenerated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isProfitable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapacity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"apy\",\"type\":\"uint256\"}],\"name\":\"setCurrentAPY\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"shouldFail\",\"type\":\"bool\"}],\"name\":\"setShouldFail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUserYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"utilizationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mock yield strategy for testing purposes\",\"events\":{\"Deposit(address,uint256,uint256)\":{\"details\":\"Emitted when funds are deposited into the strategy\",\"params\":{\"amount\":\"The amount deposited\",\"shares\":\"The number of shares minted\",\"user\":\"The address that deposited funds\"}},\"StrategyUpdated(string,uint256,uint256)\":{\"details\":\"Emitted when strategy parameters are updated\",\"params\":{\"newValue\":\"The new value\",\"oldValue\":\"The old value\",\"parameter\":\"The parameter that was updated\"}},\"Withdrawal(address,uint256,uint256)\":{\"details\":\"Emitted when funds are withdrawn from the strategy\",\"params\":{\"amount\":\"The amount withdrawn\",\"shares\":\"The number of shares burned\",\"user\":\"The address that withdrew funds\"}},\"YieldHarvested(uint256,uint256)\":{\"details\":\"Emitted when yield is harvested\",\"params\":{\"newTotalAssets\":\"The new total assets under management\",\"yieldAmount\":\"The amount of yield harvested\"}}},\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the user's share balance\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"_0\":\"The user's share balance\"}},\"calculateUserYield(address)\":{\"details\":\"Calculates yield generated for a specific user\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"_0\":\"The amount of yield generated\"}},\"convertToAssets(uint256)\":{\"details\":\"Converts shares to assets\",\"params\":{\"shares\":\"The number of shares\"},\"returns\":{\"_0\":\"The equivalent amount of assets\"}},\"convertToShares(uint256)\":{\"details\":\"Converts assets to shares\",\"params\":{\"assets\":\"The amount of assets\"},\"returns\":{\"_0\":\"The equivalent number of shares\"}},\"deposit(uint256)\":{\"details\":\"Deposits assets into the yield strategy\",\"params\":{\"amount\":\"The amount of assets to deposit\"},\"returns\":{\"shares\":\"The number of shares minted to the depositor\"}},\"emergencyWithdraw(address)\":{\"details\":\"Emergency withdrawal of all user funds (may incur penalties)\",\"params\":{\"user\":\"The address to withdraw funds for\"},\"returns\":{\"amount\":\"The amount of assets withdrawn\"}},\"getCurrentAPY()\":{\"details\":\"Calculates the current APY of the strategy\",\"returns\":{\"_0\":\"The current APY in basis points\"}},\"getRiskScore()\":{\"details\":\"Gets the strategy's risk score\",\"returns\":{\"_0\":\"The risk score from 1-10 (1 = lowest risk)\"}},\"getStrategyInfo()\":{\"details\":\"Gets comprehensive strategy information\",\"returns\":{\"_0\":\"The strategy information struct\"}},\"getTotalYieldGenerated()\":{\"details\":\"Calculates the total yield generated by the strategy\",\"returns\":{\"_0\":\"The total yield generated\"}},\"harvestYield()\":{\"details\":\"Harvests yield from the underlying protocol\",\"returns\":{\"_0\":\"The amount of yield harvested\"}},\"isProfitable()\":{\"details\":\"Checks if the strategy is profitable\",\"returns\":{\"_0\":\"Whether the strategy is currently profitable\"}},\"maxCapacity()\":{\"details\":\"Gets the maximum capacity of the strategy\",\"returns\":{\"_0\":\"The maximum amount of assets the strategy can handle\"}},\"totalAssets()\":{\"details\":\"Gets the total assets under management\",\"returns\":{\"_0\":\"The total assets managed by this strategy\"}},\"utilizationRate()\":{\"details\":\"Gets the current utilization rate\",\"returns\":{\"_0\":\"The utilization rate as a percentage (basis points)\"}},\"withdraw(uint256)\":{\"details\":\"Withdraws assets from the yield strategy\",\"params\":{\"shares\":\"The number of shares to burn\"},\"returns\":{\"amount\":\"The amount of assets withdrawn\"}}},\"stateVariables\":{\"asset\":{\"details\":\"Gets the underlying asset address\",\"return\":\"The address of the underlying asset (e.g., USDC)\",\"returns\":{\"_0\":\"The address of the underlying asset (e.g., USDC)\"}}},\"title\":\"MockYieldStrategy\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/mocks/MockYieldStrategy.sol\":\"MockYieldStrategy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"src/interfaces/IYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title IYieldStrategy\\n * @dev Interface for yield generation strategies in YieldRails\\n * @notice All yield strategies must implement this interface for compatibility\\n * @author YieldRails Team\\n */\\ninterface IYieldStrategy {\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // EVENTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Emitted when funds are deposited into the strategy\\n     * @param user The address that deposited funds\\n     * @param amount The amount deposited\\n     * @param shares The number of shares minted\\n     */\\n    event Deposit(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when funds are withdrawn from the strategy\\n     * @param user The address that withdrew funds\\n     * @param amount The amount withdrawn\\n     * @param shares The number of shares burned\\n     */\\n    event Withdrawal(address indexed user, uint256 amount, uint256 shares);\\n\\n    /**\\n     * @dev Emitted when yield is harvested\\n     * @param yieldAmount The amount of yield harvested\\n     * @param newTotalAssets The new total assets under management\\n     */\\n    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);\\n\\n    /**\\n     * @dev Emitted when strategy parameters are updated\\n     * @param parameter The parameter that was updated\\n     * @param oldValue The old value\\n     * @param newValue The new value\\n     */\\n    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRUCTS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Strategy metadata and performance metrics\\n     */\\n    struct StrategyInfo {\\n        string name;                // Strategy name (e.g., \\\"T-Bill Strategy\\\")\\n        string description;         // Strategy description\\n        uint256 totalAssets;        // Total assets under management\\n        uint256 totalShares;        // Total shares outstanding\\n        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)\\n        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)\\n        uint256 lastHarvest;        // Timestamp of last yield harvest\\n        bool active;                // Whether strategy is active\\n    }\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // DEPOSIT & WITHDRAWAL FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Deposits assets into the yield strategy\\n     * @param amount The amount of assets to deposit\\n     * @return shares The number of shares minted to the depositor\\n     */\\n    function deposit(uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Withdraws assets from the yield strategy\\n     * @param shares The number of shares to burn\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function withdraw(uint256 shares) external returns (uint256 amount);\\n\\n    /**\\n     * @dev Emergency withdrawal of all user funds (may incur penalties)\\n     * @param user The address to withdraw funds for\\n     * @return amount The amount of assets withdrawn\\n     */\\n    function emergencyWithdraw(address user) external returns (uint256 amount);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // YIELD CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Calculates the current APY of the strategy\\n     * @return apy The current APY in basis points\\n     */\\n    function getCurrentAPY() external view returns (uint256 apy);\\n\\n    /**\\n     * @dev Calculates yield generated for a specific user\\n     * @param user The user address\\n     * @return yieldAmount The amount of yield generated\\n     */\\n    function calculateUserYield(address user) external view returns (uint256 yieldAmount);\\n\\n    /**\\n     * @dev Calculates the total yield generated by the strategy\\n     * @return totalYield The total yield generated\\n     */\\n    function getTotalYieldGenerated() external view returns (uint256 totalYield);\\n\\n    /**\\n     * @dev Harvests yield from the underlying protocol\\n     * @return yieldHarvested The amount of yield harvested\\n     */\\n    function harvestYield() external returns (uint256 yieldHarvested);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // SHARE CALCULATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Converts assets to shares\\n     * @param assets The amount of assets\\n     * @return shares The equivalent number of shares\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Converts shares to assets\\n     * @param shares The number of shares\\n     * @return assets The equivalent amount of assets\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Gets the user's share balance\\n     * @param user The user address\\n     * @return balance The user's share balance\\n     */\\n    function balanceOf(address user) external view returns (uint256 balance);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // STRATEGY INFORMATION FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets comprehensive strategy information\\n     * @return info The strategy information struct\\n     */\\n    function getStrategyInfo() external view returns (StrategyInfo memory info);\\n\\n    /**\\n     * @dev Gets the underlying asset address\\n     * @return asset The address of the underlying asset (e.g., USDC)\\n     */\\n    function asset() external view returns (address asset);\\n\\n    /**\\n     * @dev Gets the total assets under management\\n     * @return totalManagedAssets The total assets managed by this strategy\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Gets the strategy's risk score\\n     * @return risk The risk score from 1-10 (1 = lowest risk)\\n     */\\n    function getRiskScore() external view returns (uint256 risk);\\n\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n    // PERFORMANCE FUNCTIONS\\n    // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\n\\n    /**\\n     * @dev Gets historical performance data\\n     * @param period The time period to look back (in seconds)\\n     * @return performance The performance data for the specified period\\n     */\\n    function getPerformanceData(uint256 period) external view returns (uint256 performance);\\n\\n    /**\\n     * @dev Checks if the strategy is profitable\\n     * @return profitable Whether the strategy is currently profitable\\n     */\\n    function isProfitable() external view returns (bool profitable);\\n\\n    /**\\n     * @dev Gets the maximum capacity of the strategy\\n     * @return maxCapacity The maximum amount of assets the strategy can handle\\n     */\\n    function maxCapacity() external view returns (uint256 maxCapacity);\\n\\n    /**\\n     * @dev Gets the current utilization rate\\n     * @return utilization The utilization rate as a percentage (basis points)\\n     */\\n    function utilizationRate() external view returns (uint256 utilization);\\n}\",\"keccak256\":\"0x3dbcde8604a18aff443ee40442187a697d0c9772bfe40e650f9e3b4da40b38cb\",\"license\":\"MIT\"},\"src/mocks/MockYieldStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"../interfaces/IYieldStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title MockYieldStrategy\\n * @dev Mock yield strategy for testing purposes\\n */\\ncontract MockYieldStrategy is IYieldStrategy {\\n    using SafeERC20 for IERC20;\\n\\n    address public immutable override asset;\\n    uint256 private _totalAssets;\\n    uint256 private _totalShares;\\n    uint256 private _userYield;\\n    uint256 private _currentAPY = 400; // 4% default\\n    bool private _shouldFail = false;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    constructor(address _asset) {\\n        asset = _asset;\\n    }\\n\\n    // Test helper functions\\n    function setUserYield(uint256 amount) external {\\n        _userYield = amount;\\n    }\\n\\n    function setShouldFail(bool shouldFail) external {\\n        _shouldFail = shouldFail;\\n    }\\n\\n    function setCurrentAPY(uint256 apy) external {\\n        _currentAPY = apy;\\n    }\\n\\n    // IYieldStrategy implementation\\n    function deposit(uint256 amount) external override returns (uint256 shares) {\\n        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\\n        \\n        shares = convertToShares(amount);\\n        _balances[msg.sender] += shares;\\n        _totalShares += shares;\\n        _totalAssets += amount;\\n\\n        emit Deposit(msg.sender, amount, shares);\\n        return shares;\\n    }\\n\\n    function withdraw(uint256 shares) external override returns (uint256 amount) {\\n        require(_balances[msg.sender] >= shares, \\\"Insufficient shares\\\");\\n        \\n        amount = convertToAssets(shares);\\n        _balances[msg.sender] -= shares;\\n        _totalShares -= shares;\\n        _totalAssets -= amount;\\n\\n        IERC20(asset).safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawal(msg.sender, amount, shares);\\n        return amount;\\n    }\\n\\n    function emergencyWithdraw(address user) external override returns (uint256 amount) {\\n        uint256 userShares = _balances[user];\\n        if (userShares == 0) return 0;\\n\\n        amount = convertToAssets(userShares);\\n        _balances[user] = 0;\\n        _totalShares -= userShares;\\n        _totalAssets -= amount;\\n\\n        IERC20(asset).safeTransfer(user, amount);\\n        return amount;\\n    }\\n\\n    function getCurrentAPY() external view override returns (uint256) {\\n        return _currentAPY;\\n    }\\n\\n    function calculateUserYield(address user) external view override returns (uint256) {\\n        if (_shouldFail) {\\n            revert(\\\"Mock strategy failure\\\");\\n        }\\n        return _userYield;\\n    }\\n\\n    function getTotalYieldGenerated() external view override returns (uint256) {\\n        return _userYield;\\n    }\\n\\n    function harvestYield() external override returns (uint256) {\\n        emit YieldHarvested(_userYield, _totalAssets);\\n        return _userYield;\\n    }\\n\\n    function convertToShares(uint256 assets) public view override returns (uint256) {\\n        if (_totalAssets == 0) return assets;\\n        return (assets * _totalShares) / _totalAssets;\\n    }\\n\\n    function convertToAssets(uint256 shares) public view override returns (uint256) {\\n        if (_totalShares == 0) return shares;\\n        return (shares * _totalAssets) / _totalShares;\\n    }\\n\\n    function balanceOf(address user) external view override returns (uint256) {\\n        return _balances[user];\\n    }\\n\\n    function getStrategyInfo() external view override returns (StrategyInfo memory) {\\n        return StrategyInfo({\\n            name: \\\"Mock Strategy\\\",\\n            description: \\\"Mock yield strategy for testing\\\",\\n            totalAssets: _totalAssets,\\n            totalShares: _totalShares,\\n            currentAPY: _currentAPY,\\n            riskScore: 1,\\n            lastHarvest: block.timestamp,\\n            active: true\\n        });\\n    }\\n\\n    function totalAssets() external view override returns (uint256) {\\n        return _totalAssets;\\n    }\\n\\n    function getRiskScore() external pure override returns (uint256) {\\n        return 1;\\n    }\\n\\n    function getPerformanceData(uint256) external view override returns (uint256) {\\n        return _currentAPY;\\n    }\\n\\n    function isProfitable() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function maxCapacity() external pure override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function utilizationRate() external view override returns (uint256) {\\n        return _totalAssets > 0 ? (_totalAssets * 10000) / this.maxCapacity() : 0;\\n    }\\n}\",\"keccak256\":\"0xd81bedb33882c0c8b8a9b05b788d1080087a9fdd2bb450a89dd949e86ef52fe9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":8248,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_totalAssets","offset":0,"slot":"0","type":"t_uint256"},{"astId":8250,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_totalShares","offset":0,"slot":"1","type":"t_uint256"},{"astId":8252,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_userYield","offset":0,"slot":"2","type":"t_uint256"},{"astId":8255,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_currentAPY","offset":0,"slot":"3","type":"t_uint256"},{"astId":8258,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_shouldFail","offset":0,"slot":"4","type":"t_bool"},{"astId":8262,"contract":"src/mocks/MockYieldStrategy.sol:MockYieldStrategy","label":"_balances","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}