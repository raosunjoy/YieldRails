// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @title IYieldStrategy
 * @dev Interface for yield generation strategies in YieldRails
 * @notice All yield strategies must implement this interface for compatibility
 * @author YieldRails Team
 */
interface IYieldStrategy {
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // EVENTS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Emitted when funds are deposited into the strategy
     * @param user The address that deposited funds
     * @param amount The amount deposited
     * @param shares The number of shares minted
     */
    event Deposit(address indexed user, uint256 amount, uint256 shares);

    /**
     * @dev Emitted when funds are withdrawn from the strategy
     * @param user The address that withdrew funds
     * @param amount The amount withdrawn
     * @param shares The number of shares burned
     */
    event Withdrawal(address indexed user, uint256 amount, uint256 shares);

    /**
     * @dev Emitted when yield is harvested
     * @param yieldAmount The amount of yield harvested
     * @param newTotalAssets The new total assets under management
     */
    event YieldHarvested(uint256 yieldAmount, uint256 newTotalAssets);

    /**
     * @dev Emitted when strategy parameters are updated
     * @param parameter The parameter that was updated
     * @param oldValue The old value
     * @param newValue The new value
     */
    event StrategyUpdated(string parameter, uint256 oldValue, uint256 newValue);

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // STRUCTS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Strategy metadata and performance metrics
     */
    struct StrategyInfo {
        string name;                // Strategy name (e.g., "T-Bill Strategy")
        string description;         // Strategy description
        uint256 totalAssets;        // Total assets under management
        uint256 totalShares;        // Total shares outstanding
        uint256 currentAPY;         // Current APY in basis points (e.g., 400 = 4%)
        uint256 riskScore;          // Risk score from 1-10 (1 = lowest risk)
        uint256 lastHarvest;        // Timestamp of last yield harvest
        bool active;                // Whether strategy is active
    }

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // DEPOSIT & WITHDRAWAL FUNCTIONS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Deposits assets into the yield strategy
     * @param amount The amount of assets to deposit
     * @return shares The number of shares minted to the depositor
     */
    function deposit(uint256 amount) external returns (uint256 shares);

    /**
     * @dev Withdraws assets from the yield strategy
     * @param shares The number of shares to burn
     * @return amount The amount of assets withdrawn
     */
    function withdraw(uint256 shares) external returns (uint256 amount);

    /**
     * @dev Emergency withdrawal of all user funds (may incur penalties)
     * @param user The address to withdraw funds for
     * @return amount The amount of assets withdrawn
     */
    function emergencyWithdraw(address user) external returns (uint256 amount);

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // YIELD CALCULATION FUNCTIONS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Calculates the current APY of the strategy
     * @return apy The current APY in basis points
     */
    function getCurrentAPY() external view returns (uint256 apy);

    /**
     * @dev Calculates yield generated for a specific user
     * @param user The user address
     * @return yieldAmount The amount of yield generated
     */
    function calculateUserYield(address user) external view returns (uint256 yieldAmount);

    /**
     * @dev Calculates the total yield generated by the strategy
     * @return totalYield The total yield generated
     */
    function getTotalYieldGenerated() external view returns (uint256 totalYield);

    /**
     * @dev Harvests yield from the underlying protocol
     * @return yieldHarvested The amount of yield harvested
     */
    function harvestYield() external returns (uint256 yieldHarvested);

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // SHARE CALCULATION FUNCTIONS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Converts assets to shares
     * @param assets The amount of assets
     * @return shares The equivalent number of shares
     */
    function convertToShares(uint256 assets) external view returns (uint256 shares);

    /**
     * @dev Converts shares to assets
     * @param shares The number of shares
     * @return assets The equivalent amount of assets
     */
    function convertToAssets(uint256 shares) external view returns (uint256 assets);

    /**
     * @dev Gets the user's share balance
     * @param user The user address
     * @return balance The user's share balance
     */
    function balanceOf(address user) external view returns (uint256 balance);

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // STRATEGY INFORMATION FUNCTIONS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Gets comprehensive strategy information
     * @return info The strategy information struct
     */
    function getStrategyInfo() external view returns (StrategyInfo memory info);

    /**
     * @dev Gets the underlying asset address
     * @return asset The address of the underlying asset (e.g., USDC)
     */
    function asset() external view returns (address asset);

    /**
     * @dev Gets the total assets under management
     * @return totalManagedAssets The total assets managed by this strategy
     */
    function totalAssets() external view returns (uint256 totalManagedAssets);

    /**
     * @dev Gets the strategy's risk score
     * @return risk The risk score from 1-10 (1 = lowest risk)
     */
    function getRiskScore() external view returns (uint256 risk);

    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════
    // PERFORMANCE FUNCTIONS
    // ═══════════════════════════════════════════════════════════════════════════════════════════════════════════

    /**
     * @dev Gets historical performance data
     * @param period The time period to look back (in seconds)
     * @return performance The performance data for the specified period
     */
    function getPerformanceData(uint256 period) external view returns (uint256 performance);

    /**
     * @dev Checks if the strategy is profitable
     * @return profitable Whether the strategy is currently profitable
     */
    function isProfitable() external view returns (bool profitable);

    /**
     * @dev Gets the maximum capacity of the strategy
     * @return maxCapacity The maximum amount of assets the strategy can handle
     */
    function maxCapacity() external view returns (uint256 maxCapacity);

    /**
     * @dev Gets the current utilization rate
     * @return utilization The utilization rate as a percentage (basis points)
     */
    function utilizationRate() external view returns (uint256 utilization);
}