
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  hashedPassword: 'hashedPassword',
  walletAddress: 'walletAddress',
  firstName: 'firstName',
  lastName: 'lastName',
  phoneNumber: 'phoneNumber',
  kycStatus: 'kycStatus',
  isActive: 'isActive',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  lastLoginAt: 'lastLoginAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  refreshToken: 'refreshToken',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  lastAccessedAt: 'lastAccessedAt'
};

exports.Prisma.UserPreferencesScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  defaultCurrency: 'defaultCurrency',
  notificationSettings: 'notificationSettings',
  yieldOptimization: 'yieldOptimization',
  autoReinvest: 'autoReinvest',
  maxSlippage: 'maxSlippage',
  preferredChains: 'preferredChains'
};

exports.Prisma.KYCDocumentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  documentType: 'documentType',
  documentNumber: 'documentNumber',
  documentUrl: 'documentUrl',
  verificationStatus: 'verificationStatus',
  submittedAt: 'submittedAt',
  reviewedAt: 'reviewedAt',
  reviewedBy: 'reviewedBy',
  notes: 'notes'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  merchantId: 'merchantId',
  amount: 'amount',
  currency: 'currency',
  tokenAddress: 'tokenAddress',
  tokenSymbol: 'tokenSymbol',
  status: 'status',
  type: 'type',
  sourceChain: 'sourceChain',
  destinationChain: 'destinationChain',
  sourceTransactionHash: 'sourceTransactionHash',
  destTransactionHash: 'destTransactionHash',
  senderAddress: 'senderAddress',
  recipientAddress: 'recipientAddress',
  escrowAddress: 'escrowAddress',
  estimatedYield: 'estimatedYield',
  actualYield: 'actualYield',
  yieldDuration: 'yieldDuration',
  yieldStrategy: 'yieldStrategy',
  platformFee: 'platformFee',
  networkFee: 'networkFee',
  totalFees: 'totalFees',
  description: 'description',
  metadata: 'metadata',
  externalReference: 'externalReference',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  confirmedAt: 'confirmedAt',
  releasedAt: 'releasedAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.PaymentEventScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  eventType: 'eventType',
  transactionHash: 'transactionHash',
  blockNumber: 'blockNumber',
  chainId: 'chainId',
  gasUsed: 'gasUsed',
  gasPrice: 'gasPrice',
  eventData: 'eventData',
  createdAt: 'createdAt'
};

exports.Prisma.YieldStrategyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  protocolName: 'protocolName',
  chainId: 'chainId',
  contractAddress: 'contractAddress',
  strategyType: 'strategyType',
  expectedAPY: 'expectedAPY',
  riskLevel: 'riskLevel',
  minAmount: 'minAmount',
  maxAmount: 'maxAmount',
  isActive: 'isActive',
  strategyConfig: 'strategyConfig',
  totalValueLocked: 'totalValueLocked',
  actualAPY: 'actualAPY',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.YieldEarningScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  paymentId: 'paymentId',
  strategyId: 'strategyId',
  principalAmount: 'principalAmount',
  yieldAmount: 'yieldAmount',
  feeAmount: 'feeAmount',
  netYieldAmount: 'netYieldAmount',
  tokenAddress: 'tokenAddress',
  tokenSymbol: 'tokenSymbol',
  chainId: 'chainId',
  startTime: 'startTime',
  endTime: 'endTime',
  duration: 'duration',
  actualAPY: 'actualAPY',
  status: 'status',
  transactionHash: 'transactionHash',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MerchantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  website: 'website',
  description: 'description',
  category: 'category',
  businessType: 'businessType',
  registrationNumber: 'registrationNumber',
  taxId: 'taxId',
  defaultCurrency: 'defaultCurrency',
  supportedChains: 'supportedChains',
  webhookUrl: 'webhookUrl',
  isActive: 'isActive',
  verificationStatus: 'verificationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  merchantId: 'merchantId',
  keyHash: 'keyHash',
  keyPrefix: 'keyPrefix',
  name: 'name',
  permissions: 'permissions',
  isActive: 'isActive',
  lastUsedAt: 'lastUsedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CrossChainTransactionScalarFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  sourceChain: 'sourceChain',
  destinationChain: 'destinationChain',
  sourceTransactionHash: 'sourceTransactionHash',
  destTransactionHash: 'destTransactionHash',
  bridgeTransactionId: 'bridgeTransactionId',
  sourceAmount: 'sourceAmount',
  destinationAmount: 'destinationAmount',
  bridgeFee: 'bridgeFee',
  sourceAddress: 'sourceAddress',
  destinationAddress: 'destinationAddress',
  bridgeAddress: 'bridgeAddress',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sourceConfirmedAt: 'sourceConfirmedAt',
  destConfirmedAt: 'destConfirmedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  title: 'title',
  message: 'message',
  data: 'data',
  isRead: 'isRead',
  isArchived: 'isArchived',
  channels: 'channels',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SystemMetricsScalarFieldEnum = {
  id: 'id',
  metricName: 'metricName',
  metricValue: 'metricValue',
  metricType: 'metricType',
  chainId: 'chainId',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.KYCStatus = exports.$Enums.KYCStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.UserRole = exports.$Enums.UserRole = {
  USER: 'USER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR',
  VALIDATOR: 'VALIDATOR'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  PASSPORT: 'PASSPORT',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  NATIONAL_ID: 'NATIONAL_ID',
  UTILITY_BILL: 'UTILITY_BILL',
  BANK_STATEMENT: 'BANK_STATEMENT'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.PaymentType = exports.$Enums.PaymentType = {
  PAYMENT: 'PAYMENT',
  REMITTANCE: 'REMITTANCE',
  CROSS_BORDER: 'CROSS_BORDER',
  MERCHANT_PAYMENT: 'MERCHANT_PAYMENT',
  P2P: 'P2P'
};

exports.PaymentEventType = exports.$Enums.PaymentEventType = {
  CREATED: 'CREATED',
  CONFIRMED: 'CONFIRMED',
  YIELD_STARTED: 'YIELD_STARTED',
  YIELD_EARNED: 'YIELD_EARNED',
  BRIDGE_INITIATED: 'BRIDGE_INITIATED',
  BRIDGE_COMPLETED: 'BRIDGE_COMPLETED',
  RELEASED: 'RELEASED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.YieldStrategyType = exports.$Enums.YieldStrategyType = {
  LENDING: 'LENDING',
  STAKING: 'STAKING',
  LIQUIDITY_PROVIDING: 'LIQUIDITY_PROVIDING',
  TREASURY_BILLS: 'TREASURY_BILLS',
  YIELD_FARMING: 'YIELD_FARMING'
};

exports.RiskLevel = exports.$Enums.RiskLevel = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

exports.YieldStatus = exports.$Enums.YieldStatus = {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  WITHDRAWN: 'WITHDRAWN',
  FAILED: 'FAILED'
};

exports.BusinessType = exports.$Enums.BusinessType = {
  ONLINE: 'ONLINE',
  PHYSICAL: 'PHYSICAL',
  MARKETPLACE: 'MARKETPLACE',
  SERVICE_PROVIDER: 'SERVICE_PROVIDER',
  NON_PROFIT: 'NON_PROFIT'
};

exports.CrossChainStatus = exports.$Enums.CrossChainStatus = {
  INITIATED: 'INITIATED',
  SOURCE_CONFIRMED: 'SOURCE_CONFIRMED',
  BRIDGE_PENDING: 'BRIDGE_PENDING',
  BRIDGE_COMPLETED: 'BRIDGE_COMPLETED',
  DESTINATION_PENDING: 'DESTINATION_PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  PAYMENT_COMPLETED: 'PAYMENT_COMPLETED',
  YIELD_EARNED: 'YIELD_EARNED',
  CROSS_CHAIN_COMPLETED: 'CROSS_CHAIN_COMPLETED',
  KYC_APPROVED: 'KYC_APPROVED',
  KYC_REJECTED: 'KYC_REJECTED',
  SECURITY_ALERT: 'SECURITY_ALERT',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  WEBHOOK: 'WEBHOOK'
};

exports.MetricType = exports.$Enums.MetricType = {
  COUNTER: 'COUNTER',
  GAUGE: 'GAUGE',
  HISTOGRAM: 'HISTOGRAM',
  SUMMARY: 'SUMMARY'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserSession: 'UserSession',
  UserPreferences: 'UserPreferences',
  KYCDocument: 'KYCDocument',
  Payment: 'Payment',
  PaymentEvent: 'PaymentEvent',
  YieldStrategy: 'YieldStrategy',
  YieldEarning: 'YieldEarning',
  Merchant: 'Merchant',
  ApiKey: 'ApiKey',
  CrossChainTransaction: 'CrossChainTransaction',
  Notification: 'Notification',
  SystemMetrics: 'SystemMetrics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
