
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSession
 * 
 */
export type UserSession = $Result.DefaultSelection<Prisma.$UserSessionPayload>
/**
 * Model UserPreferences
 * 
 */
export type UserPreferences = $Result.DefaultSelection<Prisma.$UserPreferencesPayload>
/**
 * Model KYCDocument
 * 
 */
export type KYCDocument = $Result.DefaultSelection<Prisma.$KYCDocumentPayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model PaymentEvent
 * 
 */
export type PaymentEvent = $Result.DefaultSelection<Prisma.$PaymentEventPayload>
/**
 * Model YieldStrategy
 * 
 */
export type YieldStrategy = $Result.DefaultSelection<Prisma.$YieldStrategyPayload>
/**
 * Model YieldEarning
 * 
 */
export type YieldEarning = $Result.DefaultSelection<Prisma.$YieldEarningPayload>
/**
 * Model Merchant
 * 
 */
export type Merchant = $Result.DefaultSelection<Prisma.$MerchantPayload>
/**
 * Model ApiKey
 * 
 */
export type ApiKey = $Result.DefaultSelection<Prisma.$ApiKeyPayload>
/**
 * Model CrossChainTransaction
 * 
 */
export type CrossChainTransaction = $Result.DefaultSelection<Prisma.$CrossChainTransactionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model SystemMetrics
 * 
 */
export type SystemMetrics = $Result.DefaultSelection<Prisma.$SystemMetricsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const KYCStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type KYCStatus = (typeof KYCStatus)[keyof typeof KYCStatus]


export const UserRole: {
  USER: 'USER',
  MERCHANT: 'MERCHANT',
  ADMIN: 'ADMIN',
  OPERATOR: 'OPERATOR',
  VALIDATOR: 'VALIDATOR'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const DocumentType: {
  PASSPORT: 'PASSPORT',
  DRIVERS_LICENSE: 'DRIVERS_LICENSE',
  NATIONAL_ID: 'NATIONAL_ID',
  UTILITY_BILL: 'UTILITY_BILL',
  BANK_STATEMENT: 'BANK_STATEMENT'
};

export type DocumentType = (typeof DocumentType)[keyof typeof DocumentType]


export const VerificationStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  EXPIRED: 'EXPIRED'
};

export type VerificationStatus = (typeof VerificationStatus)[keyof typeof VerificationStatus]


export const PaymentStatus: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

export type PaymentStatus = (typeof PaymentStatus)[keyof typeof PaymentStatus]


export const PaymentType: {
  PAYMENT: 'PAYMENT',
  REMITTANCE: 'REMITTANCE',
  CROSS_BORDER: 'CROSS_BORDER',
  MERCHANT_PAYMENT: 'MERCHANT_PAYMENT',
  P2P: 'P2P'
};

export type PaymentType = (typeof PaymentType)[keyof typeof PaymentType]


export const PaymentEventType: {
  CREATED: 'CREATED',
  CONFIRMED: 'CONFIRMED',
  YIELD_STARTED: 'YIELD_STARTED',
  YIELD_EARNED: 'YIELD_EARNED',
  BRIDGE_INITIATED: 'BRIDGE_INITIATED',
  BRIDGE_COMPLETED: 'BRIDGE_COMPLETED',
  RELEASED: 'RELEASED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type PaymentEventType = (typeof PaymentEventType)[keyof typeof PaymentEventType]


export const YieldStrategyType: {
  LENDING: 'LENDING',
  STAKING: 'STAKING',
  LIQUIDITY_PROVIDING: 'LIQUIDITY_PROVIDING',
  TREASURY_BILLS: 'TREASURY_BILLS',
  YIELD_FARMING: 'YIELD_FARMING'
};

export type YieldStrategyType = (typeof YieldStrategyType)[keyof typeof YieldStrategyType]


export const RiskLevel: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  VERY_HIGH: 'VERY_HIGH'
};

export type RiskLevel = (typeof RiskLevel)[keyof typeof RiskLevel]


export const YieldStatus: {
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  WITHDRAWN: 'WITHDRAWN',
  FAILED: 'FAILED'
};

export type YieldStatus = (typeof YieldStatus)[keyof typeof YieldStatus]


export const BusinessType: {
  ONLINE: 'ONLINE',
  PHYSICAL: 'PHYSICAL',
  MARKETPLACE: 'MARKETPLACE',
  SERVICE_PROVIDER: 'SERVICE_PROVIDER',
  NON_PROFIT: 'NON_PROFIT'
};

export type BusinessType = (typeof BusinessType)[keyof typeof BusinessType]


export const CrossChainStatus: {
  INITIATED: 'INITIATED',
  SOURCE_CONFIRMED: 'SOURCE_CONFIRMED',
  BRIDGE_PENDING: 'BRIDGE_PENDING',
  BRIDGE_COMPLETED: 'BRIDGE_COMPLETED',
  DESTINATION_PENDING: 'DESTINATION_PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type CrossChainStatus = (typeof CrossChainStatus)[keyof typeof CrossChainStatus]


export const NotificationType: {
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  PAYMENT_COMPLETED: 'PAYMENT_COMPLETED',
  YIELD_EARNED: 'YIELD_EARNED',
  CROSS_CHAIN_COMPLETED: 'CROSS_CHAIN_COMPLETED',
  KYC_APPROVED: 'KYC_APPROVED',
  KYC_REJECTED: 'KYC_REJECTED',
  SECURITY_ALERT: 'SECURITY_ALERT',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE'
};

export type NotificationType = (typeof NotificationType)[keyof typeof NotificationType]


export const NotificationChannel: {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  PUSH: 'PUSH',
  WEBHOOK: 'WEBHOOK'
};

export type NotificationChannel = (typeof NotificationChannel)[keyof typeof NotificationChannel]


export const MetricType: {
  COUNTER: 'COUNTER',
  GAUGE: 'GAUGE',
  HISTOGRAM: 'HISTOGRAM',
  SUMMARY: 'SUMMARY'
};

export type MetricType = (typeof MetricType)[keyof typeof MetricType]

}

export type KYCStatus = $Enums.KYCStatus

export const KYCStatus: typeof $Enums.KYCStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type DocumentType = $Enums.DocumentType

export const DocumentType: typeof $Enums.DocumentType

export type VerificationStatus = $Enums.VerificationStatus

export const VerificationStatus: typeof $Enums.VerificationStatus

export type PaymentStatus = $Enums.PaymentStatus

export const PaymentStatus: typeof $Enums.PaymentStatus

export type PaymentType = $Enums.PaymentType

export const PaymentType: typeof $Enums.PaymentType

export type PaymentEventType = $Enums.PaymentEventType

export const PaymentEventType: typeof $Enums.PaymentEventType

export type YieldStrategyType = $Enums.YieldStrategyType

export const YieldStrategyType: typeof $Enums.YieldStrategyType

export type RiskLevel = $Enums.RiskLevel

export const RiskLevel: typeof $Enums.RiskLevel

export type YieldStatus = $Enums.YieldStatus

export const YieldStatus: typeof $Enums.YieldStatus

export type BusinessType = $Enums.BusinessType

export const BusinessType: typeof $Enums.BusinessType

export type CrossChainStatus = $Enums.CrossChainStatus

export const CrossChainStatus: typeof $Enums.CrossChainStatus

export type NotificationType = $Enums.NotificationType

export const NotificationType: typeof $Enums.NotificationType

export type NotificationChannel = $Enums.NotificationChannel

export const NotificationChannel: typeof $Enums.NotificationChannel

export type MetricType = $Enums.MetricType

export const MetricType: typeof $Enums.MetricType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.userSession`: Exposes CRUD operations for the **UserSession** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSessions
    * const userSessions = await prisma.userSession.findMany()
    * ```
    */
  get userSession(): Prisma.UserSessionDelegate<ExtArgs>;

  /**
   * `prisma.userPreferences`: Exposes CRUD operations for the **UserPreferences** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPreferences
    * const userPreferences = await prisma.userPreferences.findMany()
    * ```
    */
  get userPreferences(): Prisma.UserPreferencesDelegate<ExtArgs>;

  /**
   * `prisma.kYCDocument`: Exposes CRUD operations for the **KYCDocument** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KYCDocuments
    * const kYCDocuments = await prisma.kYCDocument.findMany()
    * ```
    */
  get kYCDocument(): Prisma.KYCDocumentDelegate<ExtArgs>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs>;

  /**
   * `prisma.paymentEvent`: Exposes CRUD operations for the **PaymentEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PaymentEvents
    * const paymentEvents = await prisma.paymentEvent.findMany()
    * ```
    */
  get paymentEvent(): Prisma.PaymentEventDelegate<ExtArgs>;

  /**
   * `prisma.yieldStrategy`: Exposes CRUD operations for the **YieldStrategy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YieldStrategies
    * const yieldStrategies = await prisma.yieldStrategy.findMany()
    * ```
    */
  get yieldStrategy(): Prisma.YieldStrategyDelegate<ExtArgs>;

  /**
   * `prisma.yieldEarning`: Exposes CRUD operations for the **YieldEarning** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more YieldEarnings
    * const yieldEarnings = await prisma.yieldEarning.findMany()
    * ```
    */
  get yieldEarning(): Prisma.YieldEarningDelegate<ExtArgs>;

  /**
   * `prisma.merchant`: Exposes CRUD operations for the **Merchant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Merchants
    * const merchants = await prisma.merchant.findMany()
    * ```
    */
  get merchant(): Prisma.MerchantDelegate<ExtArgs>;

  /**
   * `prisma.apiKey`: Exposes CRUD operations for the **ApiKey** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiKeys
    * const apiKeys = await prisma.apiKey.findMany()
    * ```
    */
  get apiKey(): Prisma.ApiKeyDelegate<ExtArgs>;

  /**
   * `prisma.crossChainTransaction`: Exposes CRUD operations for the **CrossChainTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CrossChainTransactions
    * const crossChainTransactions = await prisma.crossChainTransaction.findMany()
    * ```
    */
  get crossChainTransaction(): Prisma.CrossChainTransactionDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.systemMetrics`: Exposes CRUD operations for the **SystemMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemMetrics
    * const systemMetrics = await prisma.systemMetrics.findMany()
    * ```
    */
  get systemMetrics(): Prisma.SystemMetricsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    UserSession: 'UserSession',
    UserPreferences: 'UserPreferences',
    KYCDocument: 'KYCDocument',
    Payment: 'Payment',
    PaymentEvent: 'PaymentEvent',
    YieldStrategy: 'YieldStrategy',
    YieldEarning: 'YieldEarning',
    Merchant: 'Merchant',
    ApiKey: 'ApiKey',
    CrossChainTransaction: 'CrossChainTransaction',
    Notification: 'Notification',
    SystemMetrics: 'SystemMetrics'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "userSession" | "userPreferences" | "kYCDocument" | "payment" | "paymentEvent" | "yieldStrategy" | "yieldEarning" | "merchant" | "apiKey" | "crossChainTransaction" | "notification" | "systemMetrics"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSession: {
        payload: Prisma.$UserSessionPayload<ExtArgs>
        fields: Prisma.UserSessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findFirst: {
            args: Prisma.UserSessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          findMany: {
            args: Prisma.UserSessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          create: {
            args: Prisma.UserSessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          createMany: {
            args: Prisma.UserSessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>[]
          }
          delete: {
            args: Prisma.UserSessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          update: {
            args: Prisma.UserSessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          deleteMany: {
            args: Prisma.UserSessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserSessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSessionPayload>
          }
          aggregate: {
            args: Prisma.UserSessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSession>
          }
          groupBy: {
            args: Prisma.UserSessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSessionCountArgs<ExtArgs>
            result: $Utils.Optional<UserSessionCountAggregateOutputType> | number
          }
        }
      }
      UserPreferences: {
        payload: Prisma.$UserPreferencesPayload<ExtArgs>
        fields: Prisma.UserPreferencesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPreferencesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPreferencesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findFirst: {
            args: Prisma.UserPreferencesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPreferencesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          findMany: {
            args: Prisma.UserPreferencesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          create: {
            args: Prisma.UserPreferencesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          createMany: {
            args: Prisma.UserPreferencesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPreferencesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>[]
          }
          delete: {
            args: Prisma.UserPreferencesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          update: {
            args: Prisma.UserPreferencesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          deleteMany: {
            args: Prisma.UserPreferencesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPreferencesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserPreferencesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPreferencesPayload>
          }
          aggregate: {
            args: Prisma.UserPreferencesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPreferences>
          }
          groupBy: {
            args: Prisma.UserPreferencesGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPreferencesCountArgs<ExtArgs>
            result: $Utils.Optional<UserPreferencesCountAggregateOutputType> | number
          }
        }
      }
      KYCDocument: {
        payload: Prisma.$KYCDocumentPayload<ExtArgs>
        fields: Prisma.KYCDocumentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KYCDocumentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KYCDocumentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          findFirst: {
            args: Prisma.KYCDocumentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KYCDocumentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          findMany: {
            args: Prisma.KYCDocumentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>[]
          }
          create: {
            args: Prisma.KYCDocumentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          createMany: {
            args: Prisma.KYCDocumentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.KYCDocumentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>[]
          }
          delete: {
            args: Prisma.KYCDocumentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          update: {
            args: Prisma.KYCDocumentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          deleteMany: {
            args: Prisma.KYCDocumentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.KYCDocumentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.KYCDocumentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$KYCDocumentPayload>
          }
          aggregate: {
            args: Prisma.KYCDocumentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKYCDocument>
          }
          groupBy: {
            args: Prisma.KYCDocumentGroupByArgs<ExtArgs>
            result: $Utils.Optional<KYCDocumentGroupByOutputType>[]
          }
          count: {
            args: Prisma.KYCDocumentCountArgs<ExtArgs>
            result: $Utils.Optional<KYCDocumentCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      PaymentEvent: {
        payload: Prisma.$PaymentEventPayload<ExtArgs>
        fields: Prisma.PaymentEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          findFirst: {
            args: Prisma.PaymentEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          findMany: {
            args: Prisma.PaymentEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>[]
          }
          create: {
            args: Prisma.PaymentEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          createMany: {
            args: Prisma.PaymentEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PaymentEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>[]
          }
          delete: {
            args: Prisma.PaymentEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          update: {
            args: Prisma.PaymentEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          deleteMany: {
            args: Prisma.PaymentEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentEventPayload>
          }
          aggregate: {
            args: Prisma.PaymentEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePaymentEvent>
          }
          groupBy: {
            args: Prisma.PaymentEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentEventCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentEventCountAggregateOutputType> | number
          }
        }
      }
      YieldStrategy: {
        payload: Prisma.$YieldStrategyPayload<ExtArgs>
        fields: Prisma.YieldStrategyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YieldStrategyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YieldStrategyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          findFirst: {
            args: Prisma.YieldStrategyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YieldStrategyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          findMany: {
            args: Prisma.YieldStrategyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>[]
          }
          create: {
            args: Prisma.YieldStrategyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          createMany: {
            args: Prisma.YieldStrategyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.YieldStrategyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>[]
          }
          delete: {
            args: Prisma.YieldStrategyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          update: {
            args: Prisma.YieldStrategyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          deleteMany: {
            args: Prisma.YieldStrategyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YieldStrategyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YieldStrategyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldStrategyPayload>
          }
          aggregate: {
            args: Prisma.YieldStrategyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYieldStrategy>
          }
          groupBy: {
            args: Prisma.YieldStrategyGroupByArgs<ExtArgs>
            result: $Utils.Optional<YieldStrategyGroupByOutputType>[]
          }
          count: {
            args: Prisma.YieldStrategyCountArgs<ExtArgs>
            result: $Utils.Optional<YieldStrategyCountAggregateOutputType> | number
          }
        }
      }
      YieldEarning: {
        payload: Prisma.$YieldEarningPayload<ExtArgs>
        fields: Prisma.YieldEarningFieldRefs
        operations: {
          findUnique: {
            args: Prisma.YieldEarningFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.YieldEarningFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          findFirst: {
            args: Prisma.YieldEarningFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.YieldEarningFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          findMany: {
            args: Prisma.YieldEarningFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>[]
          }
          create: {
            args: Prisma.YieldEarningCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          createMany: {
            args: Prisma.YieldEarningCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.YieldEarningCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>[]
          }
          delete: {
            args: Prisma.YieldEarningDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          update: {
            args: Prisma.YieldEarningUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          deleteMany: {
            args: Prisma.YieldEarningDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.YieldEarningUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.YieldEarningUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$YieldEarningPayload>
          }
          aggregate: {
            args: Prisma.YieldEarningAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateYieldEarning>
          }
          groupBy: {
            args: Prisma.YieldEarningGroupByArgs<ExtArgs>
            result: $Utils.Optional<YieldEarningGroupByOutputType>[]
          }
          count: {
            args: Prisma.YieldEarningCountArgs<ExtArgs>
            result: $Utils.Optional<YieldEarningCountAggregateOutputType> | number
          }
        }
      }
      Merchant: {
        payload: Prisma.$MerchantPayload<ExtArgs>
        fields: Prisma.MerchantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MerchantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MerchantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findFirst: {
            args: Prisma.MerchantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MerchantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          findMany: {
            args: Prisma.MerchantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          create: {
            args: Prisma.MerchantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          createMany: {
            args: Prisma.MerchantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MerchantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>[]
          }
          delete: {
            args: Prisma.MerchantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          update: {
            args: Prisma.MerchantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          deleteMany: {
            args: Prisma.MerchantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MerchantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MerchantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MerchantPayload>
          }
          aggregate: {
            args: Prisma.MerchantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMerchant>
          }
          groupBy: {
            args: Prisma.MerchantGroupByArgs<ExtArgs>
            result: $Utils.Optional<MerchantGroupByOutputType>[]
          }
          count: {
            args: Prisma.MerchantCountArgs<ExtArgs>
            result: $Utils.Optional<MerchantCountAggregateOutputType> | number
          }
        }
      }
      ApiKey: {
        payload: Prisma.$ApiKeyPayload<ExtArgs>
        fields: Prisma.ApiKeyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApiKeyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApiKeyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findFirst: {
            args: Prisma.ApiKeyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApiKeyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          findMany: {
            args: Prisma.ApiKeyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          create: {
            args: Prisma.ApiKeyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          createMany: {
            args: Prisma.ApiKeyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApiKeyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>[]
          }
          delete: {
            args: Prisma.ApiKeyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          update: {
            args: Prisma.ApiKeyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          deleteMany: {
            args: Prisma.ApiKeyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApiKeyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApiKeyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApiKeyPayload>
          }
          aggregate: {
            args: Prisma.ApiKeyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiKey>
          }
          groupBy: {
            args: Prisma.ApiKeyGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApiKeyCountArgs<ExtArgs>
            result: $Utils.Optional<ApiKeyCountAggregateOutputType> | number
          }
        }
      }
      CrossChainTransaction: {
        payload: Prisma.$CrossChainTransactionPayload<ExtArgs>
        fields: Prisma.CrossChainTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CrossChainTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CrossChainTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          findFirst: {
            args: Prisma.CrossChainTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CrossChainTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          findMany: {
            args: Prisma.CrossChainTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>[]
          }
          create: {
            args: Prisma.CrossChainTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          createMany: {
            args: Prisma.CrossChainTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CrossChainTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>[]
          }
          delete: {
            args: Prisma.CrossChainTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          update: {
            args: Prisma.CrossChainTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          deleteMany: {
            args: Prisma.CrossChainTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CrossChainTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CrossChainTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CrossChainTransactionPayload>
          }
          aggregate: {
            args: Prisma.CrossChainTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCrossChainTransaction>
          }
          groupBy: {
            args: Prisma.CrossChainTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CrossChainTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CrossChainTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<CrossChainTransactionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      SystemMetrics: {
        payload: Prisma.$SystemMetricsPayload<ExtArgs>
        fields: Prisma.SystemMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findFirst: {
            args: Prisma.SystemMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          findMany: {
            args: Prisma.SystemMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          create: {
            args: Prisma.SystemMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          createMany: {
            args: Prisma.SystemMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SystemMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>[]
          }
          delete: {
            args: Prisma.SystemMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          update: {
            args: Prisma.SystemMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          deleteMany: {
            args: Prisma.SystemMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemMetricsPayload>
          }
          aggregate: {
            args: Prisma.SystemMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemMetrics>
          }
          groupBy: {
            args: Prisma.SystemMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<SystemMetricsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    payments: number
    yieldEarnings: number
    notifications: number
    apiKeys: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | UserCountOutputTypeCountPaymentsArgs
    yieldEarnings?: boolean | UserCountOutputTypeCountYieldEarningsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    apiKeys?: boolean | UserCountOutputTypeCountApiKeysArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountYieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YieldEarningWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    yieldEarnings: number
    paymentEvents: number
    crossChainTransactions: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    yieldEarnings?: boolean | PaymentCountOutputTypeCountYieldEarningsArgs
    paymentEvents?: boolean | PaymentCountOutputTypeCountPaymentEventsArgs
    crossChainTransactions?: boolean | PaymentCountOutputTypeCountCrossChainTransactionsArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountYieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YieldEarningWhereInput
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountPaymentEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentEventWhereInput
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountCrossChainTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrossChainTransactionWhereInput
  }


  /**
   * Count Type YieldStrategyCountOutputType
   */

  export type YieldStrategyCountOutputType = {
    yieldEarnings: number
  }

  export type YieldStrategyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    yieldEarnings?: boolean | YieldStrategyCountOutputTypeCountYieldEarningsArgs
  }

  // Custom InputTypes
  /**
   * YieldStrategyCountOutputType without action
   */
  export type YieldStrategyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategyCountOutputType
     */
    select?: YieldStrategyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * YieldStrategyCountOutputType without action
   */
  export type YieldStrategyCountOutputTypeCountYieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YieldEarningWhereInput
  }


  /**
   * Count Type MerchantCountOutputType
   */

  export type MerchantCountOutputType = {
    payments: number
    apiKeys: number
  }

  export type MerchantCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | MerchantCountOutputTypeCountPaymentsArgs
    apiKeys?: boolean | MerchantCountOutputTypeCountApiKeysArgs
  }

  // Custom InputTypes
  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MerchantCountOutputType
     */
    select?: MerchantCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
  }

  /**
   * MerchantCountOutputType without action
   */
  export type MerchantCountOutputTypeCountApiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    walletAddress: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    kycStatus: $Enums.KYCStatus | null
    isActive: boolean | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    hashedPassword: string | null
    walletAddress: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    kycStatus: $Enums.KYCStatus | null
    isActive: boolean | null
    role: $Enums.UserRole | null
    createdAt: Date | null
    updatedAt: Date | null
    lastLoginAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    hashedPassword: number
    walletAddress: number
    firstName: number
    lastName: number
    phoneNumber: number
    kycStatus: number
    isActive: number
    role: number
    createdAt: number
    updatedAt: number
    lastLoginAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    walletAddress?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    kycStatus?: true
    isActive?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    walletAddress?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    kycStatus?: true
    isActive?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    hashedPassword?: true
    walletAddress?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    kycStatus?: true
    isActive?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    lastLoginAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    hashedPassword: string | null
    walletAddress: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    kycStatus: $Enums.KYCStatus
    isActive: boolean
    role: $Enums.UserRole
    createdAt: Date
    updatedAt: Date
    lastLoginAt: Date | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    walletAddress?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    kycStatus?: boolean
    isActive?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
    payments?: boolean | User$paymentsArgs<ExtArgs>
    yieldEarnings?: boolean | User$yieldEarningsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    apiKeys?: boolean | User$apiKeysArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    kycDocument?: boolean | User$kycDocumentArgs<ExtArgs>
    userPreferences?: boolean | User$userPreferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    walletAddress?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    kycStatus?: boolean
    isActive?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    hashedPassword?: boolean
    walletAddress?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    kycStatus?: boolean
    isActive?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    lastLoginAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | User$paymentsArgs<ExtArgs>
    yieldEarnings?: boolean | User$yieldEarningsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    apiKeys?: boolean | User$apiKeysArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    kycDocument?: boolean | User$kycDocumentArgs<ExtArgs>
    userPreferences?: boolean | User$userPreferencesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      yieldEarnings: Prisma.$YieldEarningPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      apiKeys: Prisma.$ApiKeyPayload<ExtArgs>[]
      sessions: Prisma.$UserSessionPayload<ExtArgs>[]
      kycDocument: Prisma.$KYCDocumentPayload<ExtArgs> | null
      userPreferences: Prisma.$UserPreferencesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      hashedPassword: string | null
      walletAddress: string | null
      firstName: string | null
      lastName: string | null
      phoneNumber: string | null
      kycStatus: $Enums.KYCStatus
      isActive: boolean
      role: $Enums.UserRole
      createdAt: Date
      updatedAt: Date
      lastLoginAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends User$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, User$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    yieldEarnings<T extends User$yieldEarningsArgs<ExtArgs> = {}>(args?: Subset<T, User$yieldEarningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    apiKeys<T extends User$apiKeysArgs<ExtArgs> = {}>(args?: Subset<T, User$apiKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany"> | Null>
    kycDocument<T extends User$kycDocumentArgs<ExtArgs> = {}>(args?: Subset<T, User$kycDocumentArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    userPreferences<T extends User$userPreferencesArgs<ExtArgs> = {}>(args?: Subset<T, User$userPreferencesArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly walletAddress: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly kycStatus: FieldRef<"User", 'KYCStatus'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly role: FieldRef<"User", 'UserRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly lastLoginAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.payments
   */
  export type User$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * User.yieldEarnings
   */
  export type User$yieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    where?: YieldEarningWhereInput
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    cursor?: YieldEarningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.apiKeys
   */
  export type User$apiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    cursor?: UserSessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * User.kycDocument
   */
  export type User$kycDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    where?: KYCDocumentWhereInput
  }

  /**
   * User.userPreferences
   */
  export type User$userPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    where?: UserPreferencesWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSession
   */

  export type AggregateUserSession = {
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  export type UserSessionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    refreshToken: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    lastAccessedAt: Date | null
  }

  export type UserSessionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    sessionToken: string | null
    refreshToken: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean | null
    expiresAt: Date | null
    createdAt: Date | null
    lastAccessedAt: Date | null
  }

  export type UserSessionCountAggregateOutputType = {
    id: number
    userId: number
    sessionToken: number
    refreshToken: number
    deviceInfo: number
    ipAddress: number
    userAgent: number
    isActive: number
    expiresAt: number
    createdAt: number
    lastAccessedAt: number
    _all: number
  }


  export type UserSessionMinAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    refreshToken?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    lastAccessedAt?: true
  }

  export type UserSessionMaxAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    refreshToken?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    lastAccessedAt?: true
  }

  export type UserSessionCountAggregateInputType = {
    id?: true
    userId?: true
    sessionToken?: true
    refreshToken?: true
    deviceInfo?: true
    ipAddress?: true
    userAgent?: true
    isActive?: true
    expiresAt?: true
    createdAt?: true
    lastAccessedAt?: true
    _all?: true
  }

  export type UserSessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSession to aggregate.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSessions
    **/
    _count?: true | UserSessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSessionMaxAggregateInputType
  }

  export type GetUserSessionAggregateType<T extends UserSessionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSession[P]>
      : GetScalarType<T[P], AggregateUserSession[P]>
  }




  export type UserSessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSessionWhereInput
    orderBy?: UserSessionOrderByWithAggregationInput | UserSessionOrderByWithAggregationInput[]
    by: UserSessionScalarFieldEnum[] | UserSessionScalarFieldEnum
    having?: UserSessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSessionCountAggregateInputType | true
    _min?: UserSessionMinAggregateInputType
    _max?: UserSessionMaxAggregateInputType
  }

  export type UserSessionGroupByOutputType = {
    id: string
    userId: string
    sessionToken: string
    refreshToken: string | null
    deviceInfo: string | null
    ipAddress: string | null
    userAgent: string | null
    isActive: boolean
    expiresAt: Date
    createdAt: Date
    lastAccessedAt: Date
    _count: UserSessionCountAggregateOutputType | null
    _min: UserSessionMinAggregateOutputType | null
    _max: UserSessionMaxAggregateOutputType | null
  }

  type GetUserSessionGroupByPayload<T extends UserSessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
            : GetScalarType<T[P], UserSessionGroupByOutputType[P]>
        }
      >
    >


  export type UserSessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    refreshToken?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    lastAccessedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    refreshToken?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    lastAccessedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSession"]>

  export type UserSessionSelectScalar = {
    id?: boolean
    userId?: boolean
    sessionToken?: boolean
    refreshToken?: boolean
    deviceInfo?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    isActive?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    lastAccessedAt?: boolean
  }

  export type UserSessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSession"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      sessionToken: string
      refreshToken: string | null
      deviceInfo: string | null
      ipAddress: string | null
      userAgent: string | null
      isActive: boolean
      expiresAt: Date
      createdAt: Date
      lastAccessedAt: Date
    }, ExtArgs["result"]["userSession"]>
    composites: {}
  }

  type UserSessionGetPayload<S extends boolean | null | undefined | UserSessionDefaultArgs> = $Result.GetResult<Prisma.$UserSessionPayload, S>

  type UserSessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserSessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserSessionCountAggregateInputType | true
    }

  export interface UserSessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSession'], meta: { name: 'UserSession' } }
    /**
     * Find zero or one UserSession that matches the filter.
     * @param {UserSessionFindUniqueArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSessionFindUniqueArgs>(args: SelectSubset<T, UserSessionFindUniqueArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserSession that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserSessionFindUniqueOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSessionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserSession that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSessionFindFirstArgs>(args?: SelectSubset<T, UserSessionFindFirstArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserSession that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindFirstOrThrowArgs} args - Arguments to find a UserSession
     * @example
     * // Get one UserSession
     * const userSession = await prisma.userSession.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSessionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserSessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSessions
     * const userSessions = await prisma.userSession.findMany()
     * 
     * // Get first 10 UserSessions
     * const userSessions = await prisma.userSession.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSessionWithIdOnly = await prisma.userSession.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSessionFindManyArgs>(args?: SelectSubset<T, UserSessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserSession.
     * @param {UserSessionCreateArgs} args - Arguments to create a UserSession.
     * @example
     * // Create one UserSession
     * const UserSession = await prisma.userSession.create({
     *   data: {
     *     // ... data to create a UserSession
     *   }
     * })
     * 
     */
    create<T extends UserSessionCreateArgs>(args: SelectSubset<T, UserSessionCreateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserSessions.
     * @param {UserSessionCreateManyArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSessionCreateManyArgs>(args?: SelectSubset<T, UserSessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSessions and returns the data saved in the database.
     * @param {UserSessionCreateManyAndReturnArgs} args - Arguments to create many UserSessions.
     * @example
     * // Create many UserSessions
     * const userSession = await prisma.userSession.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSessions and only return the `id`
     * const userSessionWithIdOnly = await prisma.userSession.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSessionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserSession.
     * @param {UserSessionDeleteArgs} args - Arguments to delete one UserSession.
     * @example
     * // Delete one UserSession
     * const UserSession = await prisma.userSession.delete({
     *   where: {
     *     // ... filter to delete one UserSession
     *   }
     * })
     * 
     */
    delete<T extends UserSessionDeleteArgs>(args: SelectSubset<T, UserSessionDeleteArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserSession.
     * @param {UserSessionUpdateArgs} args - Arguments to update one UserSession.
     * @example
     * // Update one UserSession
     * const userSession = await prisma.userSession.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSessionUpdateArgs>(args: SelectSubset<T, UserSessionUpdateArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserSessions.
     * @param {UserSessionDeleteManyArgs} args - Arguments to filter UserSessions to delete.
     * @example
     * // Delete a few UserSessions
     * const { count } = await prisma.userSession.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSessionDeleteManyArgs>(args?: SelectSubset<T, UserSessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSessions
     * const userSession = await prisma.userSession.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSessionUpdateManyArgs>(args: SelectSubset<T, UserSessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserSession.
     * @param {UserSessionUpsertArgs} args - Arguments to update or create a UserSession.
     * @example
     * // Update or create a UserSession
     * const userSession = await prisma.userSession.upsert({
     *   create: {
     *     // ... data to create a UserSession
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSession we want to update
     *   }
     * })
     */
    upsert<T extends UserSessionUpsertArgs>(args: SelectSubset<T, UserSessionUpsertArgs<ExtArgs>>): Prisma__UserSessionClient<$Result.GetResult<Prisma.$UserSessionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserSessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionCountArgs} args - Arguments to filter UserSessions to count.
     * @example
     * // Count the number of UserSessions
     * const count = await prisma.userSession.count({
     *   where: {
     *     // ... the filter for the UserSessions we want to count
     *   }
     * })
    **/
    count<T extends UserSessionCountArgs>(
      args?: Subset<T, UserSessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSessionAggregateArgs>(args: Subset<T, UserSessionAggregateArgs>): Prisma.PrismaPromise<GetUserSessionAggregateType<T>>

    /**
     * Group by UserSession.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSessionGroupByArgs['orderBy'] }
        : { orderBy?: UserSessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSession model
   */
  readonly fields: UserSessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSession.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSession model
   */ 
  interface UserSessionFieldRefs {
    readonly id: FieldRef<"UserSession", 'String'>
    readonly userId: FieldRef<"UserSession", 'String'>
    readonly sessionToken: FieldRef<"UserSession", 'String'>
    readonly refreshToken: FieldRef<"UserSession", 'String'>
    readonly deviceInfo: FieldRef<"UserSession", 'String'>
    readonly ipAddress: FieldRef<"UserSession", 'String'>
    readonly userAgent: FieldRef<"UserSession", 'String'>
    readonly isActive: FieldRef<"UserSession", 'Boolean'>
    readonly expiresAt: FieldRef<"UserSession", 'DateTime'>
    readonly createdAt: FieldRef<"UserSession", 'DateTime'>
    readonly lastAccessedAt: FieldRef<"UserSession", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSession findUnique
   */
  export type UserSessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findUniqueOrThrow
   */
  export type UserSessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession findFirst
   */
  export type UserSessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findFirstOrThrow
   */
  export type UserSessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSession to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSessions.
     */
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession findMany
   */
  export type UserSessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter, which UserSessions to fetch.
     */
    where?: UserSessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSessions to fetch.
     */
    orderBy?: UserSessionOrderByWithRelationInput | UserSessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSessions.
     */
    cursor?: UserSessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSessions.
     */
    skip?: number
    distinct?: UserSessionScalarFieldEnum | UserSessionScalarFieldEnum[]
  }

  /**
   * UserSession create
   */
  export type UserSessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSession.
     */
    data: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
  }

  /**
   * UserSession createMany
   */
  export type UserSessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserSession createManyAndReturn
   */
  export type UserSessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserSessions.
     */
    data: UserSessionCreateManyInput | UserSessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSession update
   */
  export type UserSessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSession.
     */
    data: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
    /**
     * Choose, which UserSession to update.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession updateMany
   */
  export type UserSessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSessions.
     */
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyInput>
    /**
     * Filter which UserSessions to update
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession upsert
   */
  export type UserSessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSession to update in case it exists.
     */
    where: UserSessionWhereUniqueInput
    /**
     * In case the UserSession found by the `where` argument doesn't exist, create a new UserSession with this data.
     */
    create: XOR<UserSessionCreateInput, UserSessionUncheckedCreateInput>
    /**
     * In case the UserSession was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSessionUpdateInput, UserSessionUncheckedUpdateInput>
  }

  /**
   * UserSession delete
   */
  export type UserSessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
    /**
     * Filter which UserSession to delete.
     */
    where: UserSessionWhereUniqueInput
  }

  /**
   * UserSession deleteMany
   */
  export type UserSessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSessions to delete
     */
    where?: UserSessionWhereInput
  }

  /**
   * UserSession without action
   */
  export type UserSessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSession
     */
    select?: UserSessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSessionInclude<ExtArgs> | null
  }


  /**
   * Model UserPreferences
   */

  export type AggregateUserPreferences = {
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  export type UserPreferencesAvgAggregateOutputType = {
    maxSlippage: Decimal | null
  }

  export type UserPreferencesSumAggregateOutputType = {
    maxSlippage: Decimal | null
  }

  export type UserPreferencesMinAggregateOutputType = {
    id: string | null
    userId: string | null
    defaultCurrency: string | null
    yieldOptimization: boolean | null
    autoReinvest: boolean | null
    maxSlippage: Decimal | null
  }

  export type UserPreferencesMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    defaultCurrency: string | null
    yieldOptimization: boolean | null
    autoReinvest: boolean | null
    maxSlippage: Decimal | null
  }

  export type UserPreferencesCountAggregateOutputType = {
    id: number
    userId: number
    defaultCurrency: number
    notificationSettings: number
    yieldOptimization: number
    autoReinvest: number
    maxSlippage: number
    preferredChains: number
    _all: number
  }


  export type UserPreferencesAvgAggregateInputType = {
    maxSlippage?: true
  }

  export type UserPreferencesSumAggregateInputType = {
    maxSlippage?: true
  }

  export type UserPreferencesMinAggregateInputType = {
    id?: true
    userId?: true
    defaultCurrency?: true
    yieldOptimization?: true
    autoReinvest?: true
    maxSlippage?: true
  }

  export type UserPreferencesMaxAggregateInputType = {
    id?: true
    userId?: true
    defaultCurrency?: true
    yieldOptimization?: true
    autoReinvest?: true
    maxSlippage?: true
  }

  export type UserPreferencesCountAggregateInputType = {
    id?: true
    userId?: true
    defaultCurrency?: true
    notificationSettings?: true
    yieldOptimization?: true
    autoReinvest?: true
    maxSlippage?: true
    preferredChains?: true
    _all?: true
  }

  export type UserPreferencesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to aggregate.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPreferences
    **/
    _count?: true | UserPreferencesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserPreferencesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserPreferencesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPreferencesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type GetUserPreferencesAggregateType<T extends UserPreferencesAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPreferences]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPreferences[P]>
      : GetScalarType<T[P], AggregateUserPreferences[P]>
  }




  export type UserPreferencesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPreferencesWhereInput
    orderBy?: UserPreferencesOrderByWithAggregationInput | UserPreferencesOrderByWithAggregationInput[]
    by: UserPreferencesScalarFieldEnum[] | UserPreferencesScalarFieldEnum
    having?: UserPreferencesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPreferencesCountAggregateInputType | true
    _avg?: UserPreferencesAvgAggregateInputType
    _sum?: UserPreferencesSumAggregateInputType
    _min?: UserPreferencesMinAggregateInputType
    _max?: UserPreferencesMaxAggregateInputType
  }

  export type UserPreferencesGroupByOutputType = {
    id: string
    userId: string
    defaultCurrency: string
    notificationSettings: JsonValue
    yieldOptimization: boolean
    autoReinvest: boolean
    maxSlippage: Decimal
    preferredChains: string[]
    _count: UserPreferencesCountAggregateOutputType | null
    _avg: UserPreferencesAvgAggregateOutputType | null
    _sum: UserPreferencesSumAggregateOutputType | null
    _min: UserPreferencesMinAggregateOutputType | null
    _max: UserPreferencesMaxAggregateOutputType | null
  }

  type GetUserPreferencesGroupByPayload<T extends UserPreferencesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPreferencesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPreferencesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
            : GetScalarType<T[P], UserPreferencesGroupByOutputType[P]>
        }
      >
    >


  export type UserPreferencesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    defaultCurrency?: boolean
    notificationSettings?: boolean
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: boolean
    preferredChains?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    defaultCurrency?: boolean
    notificationSettings?: boolean
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: boolean
    preferredChains?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPreferences"]>

  export type UserPreferencesSelectScalar = {
    id?: boolean
    userId?: boolean
    defaultCurrency?: boolean
    notificationSettings?: boolean
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: boolean
    preferredChains?: boolean
  }

  export type UserPreferencesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserPreferencesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserPreferencesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPreferences"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      defaultCurrency: string
      notificationSettings: Prisma.JsonValue
      yieldOptimization: boolean
      autoReinvest: boolean
      maxSlippage: Prisma.Decimal
      preferredChains: string[]
    }, ExtArgs["result"]["userPreferences"]>
    composites: {}
  }

  type UserPreferencesGetPayload<S extends boolean | null | undefined | UserPreferencesDefaultArgs> = $Result.GetResult<Prisma.$UserPreferencesPayload, S>

  type UserPreferencesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserPreferencesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserPreferencesCountAggregateInputType | true
    }

  export interface UserPreferencesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPreferences'], meta: { name: 'UserPreferences' } }
    /**
     * Find zero or one UserPreferences that matches the filter.
     * @param {UserPreferencesFindUniqueArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPreferencesFindUniqueArgs>(args: SelectSubset<T, UserPreferencesFindUniqueArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserPreferences that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserPreferencesFindUniqueOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPreferencesFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPreferencesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPreferencesFindFirstArgs>(args?: SelectSubset<T, UserPreferencesFindFirstArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserPreferences that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindFirstOrThrowArgs} args - Arguments to find a UserPreferences
     * @example
     * // Get one UserPreferences
     * const userPreferences = await prisma.userPreferences.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPreferencesFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPreferencesFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserPreferences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany()
     * 
     * // Get first 10 UserPreferences
     * const userPreferences = await prisma.userPreferences.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPreferencesWithIdOnly = await prisma.userPreferences.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPreferencesFindManyArgs>(args?: SelectSubset<T, UserPreferencesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserPreferences.
     * @param {UserPreferencesCreateArgs} args - Arguments to create a UserPreferences.
     * @example
     * // Create one UserPreferences
     * const UserPreferences = await prisma.userPreferences.create({
     *   data: {
     *     // ... data to create a UserPreferences
     *   }
     * })
     * 
     */
    create<T extends UserPreferencesCreateArgs>(args: SelectSubset<T, UserPreferencesCreateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserPreferences.
     * @param {UserPreferencesCreateManyArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPreferencesCreateManyArgs>(args?: SelectSubset<T, UserPreferencesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPreferences and returns the data saved in the database.
     * @param {UserPreferencesCreateManyAndReturnArgs} args - Arguments to create many UserPreferences.
     * @example
     * // Create many UserPreferences
     * const userPreferences = await prisma.userPreferences.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPreferences and only return the `id`
     * const userPreferencesWithIdOnly = await prisma.userPreferences.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPreferencesCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPreferencesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UserPreferences.
     * @param {UserPreferencesDeleteArgs} args - Arguments to delete one UserPreferences.
     * @example
     * // Delete one UserPreferences
     * const UserPreferences = await prisma.userPreferences.delete({
     *   where: {
     *     // ... filter to delete one UserPreferences
     *   }
     * })
     * 
     */
    delete<T extends UserPreferencesDeleteArgs>(args: SelectSubset<T, UserPreferencesDeleteArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserPreferences.
     * @param {UserPreferencesUpdateArgs} args - Arguments to update one UserPreferences.
     * @example
     * // Update one UserPreferences
     * const userPreferences = await prisma.userPreferences.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPreferencesUpdateArgs>(args: SelectSubset<T, UserPreferencesUpdateArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserPreferences.
     * @param {UserPreferencesDeleteManyArgs} args - Arguments to filter UserPreferences to delete.
     * @example
     * // Delete a few UserPreferences
     * const { count } = await prisma.userPreferences.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPreferencesDeleteManyArgs>(args?: SelectSubset<T, UserPreferencesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPreferences
     * const userPreferences = await prisma.userPreferences.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPreferencesUpdateManyArgs>(args: SelectSubset<T, UserPreferencesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserPreferences.
     * @param {UserPreferencesUpsertArgs} args - Arguments to update or create a UserPreferences.
     * @example
     * // Update or create a UserPreferences
     * const userPreferences = await prisma.userPreferences.upsert({
     *   create: {
     *     // ... data to create a UserPreferences
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPreferences we want to update
     *   }
     * })
     */
    upsert<T extends UserPreferencesUpsertArgs>(args: SelectSubset<T, UserPreferencesUpsertArgs<ExtArgs>>): Prisma__UserPreferencesClient<$Result.GetResult<Prisma.$UserPreferencesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesCountArgs} args - Arguments to filter UserPreferences to count.
     * @example
     * // Count the number of UserPreferences
     * const count = await prisma.userPreferences.count({
     *   where: {
     *     // ... the filter for the UserPreferences we want to count
     *   }
     * })
    **/
    count<T extends UserPreferencesCountArgs>(
      args?: Subset<T, UserPreferencesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPreferencesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPreferencesAggregateArgs>(args: Subset<T, UserPreferencesAggregateArgs>): Prisma.PrismaPromise<GetUserPreferencesAggregateType<T>>

    /**
     * Group by UserPreferences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPreferencesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPreferencesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPreferencesGroupByArgs['orderBy'] }
        : { orderBy?: UserPreferencesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPreferencesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPreferencesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPreferences model
   */
  readonly fields: UserPreferencesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPreferences.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPreferencesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPreferences model
   */ 
  interface UserPreferencesFieldRefs {
    readonly id: FieldRef<"UserPreferences", 'String'>
    readonly userId: FieldRef<"UserPreferences", 'String'>
    readonly defaultCurrency: FieldRef<"UserPreferences", 'String'>
    readonly notificationSettings: FieldRef<"UserPreferences", 'Json'>
    readonly yieldOptimization: FieldRef<"UserPreferences", 'Boolean'>
    readonly autoReinvest: FieldRef<"UserPreferences", 'Boolean'>
    readonly maxSlippage: FieldRef<"UserPreferences", 'Decimal'>
    readonly preferredChains: FieldRef<"UserPreferences", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * UserPreferences findUnique
   */
  export type UserPreferencesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findUniqueOrThrow
   */
  export type UserPreferencesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences findFirst
   */
  export type UserPreferencesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findFirstOrThrow
   */
  export type UserPreferencesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPreferences.
     */
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences findMany
   */
  export type UserPreferencesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter, which UserPreferences to fetch.
     */
    where?: UserPreferencesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPreferences to fetch.
     */
    orderBy?: UserPreferencesOrderByWithRelationInput | UserPreferencesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPreferences.
     */
    cursor?: UserPreferencesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPreferences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPreferences.
     */
    skip?: number
    distinct?: UserPreferencesScalarFieldEnum | UserPreferencesScalarFieldEnum[]
  }

  /**
   * UserPreferences create
   */
  export type UserPreferencesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPreferences.
     */
    data: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
  }

  /**
   * UserPreferences createMany
   */
  export type UserPreferencesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPreferences createManyAndReturn
   */
  export type UserPreferencesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UserPreferences.
     */
    data: UserPreferencesCreateManyInput | UserPreferencesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPreferences update
   */
  export type UserPreferencesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPreferences.
     */
    data: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
    /**
     * Choose, which UserPreferences to update.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences updateMany
   */
  export type UserPreferencesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPreferences.
     */
    data: XOR<UserPreferencesUpdateManyMutationInput, UserPreferencesUncheckedUpdateManyInput>
    /**
     * Filter which UserPreferences to update
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences upsert
   */
  export type UserPreferencesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPreferences to update in case it exists.
     */
    where: UserPreferencesWhereUniqueInput
    /**
     * In case the UserPreferences found by the `where` argument doesn't exist, create a new UserPreferences with this data.
     */
    create: XOR<UserPreferencesCreateInput, UserPreferencesUncheckedCreateInput>
    /**
     * In case the UserPreferences was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPreferencesUpdateInput, UserPreferencesUncheckedUpdateInput>
  }

  /**
   * UserPreferences delete
   */
  export type UserPreferencesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
    /**
     * Filter which UserPreferences to delete.
     */
    where: UserPreferencesWhereUniqueInput
  }

  /**
   * UserPreferences deleteMany
   */
  export type UserPreferencesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPreferences to delete
     */
    where?: UserPreferencesWhereInput
  }

  /**
   * UserPreferences without action
   */
  export type UserPreferencesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPreferences
     */
    select?: UserPreferencesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPreferencesInclude<ExtArgs> | null
  }


  /**
   * Model KYCDocument
   */

  export type AggregateKYCDocument = {
    _count: KYCDocumentCountAggregateOutputType | null
    _min: KYCDocumentMinAggregateOutputType | null
    _max: KYCDocumentMaxAggregateOutputType | null
  }

  export type KYCDocumentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    documentType: $Enums.DocumentType | null
    documentNumber: string | null
    documentUrl: string | null
    verificationStatus: $Enums.VerificationStatus | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    notes: string | null
  }

  export type KYCDocumentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    documentType: $Enums.DocumentType | null
    documentNumber: string | null
    documentUrl: string | null
    verificationStatus: $Enums.VerificationStatus | null
    submittedAt: Date | null
    reviewedAt: Date | null
    reviewedBy: string | null
    notes: string | null
  }

  export type KYCDocumentCountAggregateOutputType = {
    id: number
    userId: number
    documentType: number
    documentNumber: number
    documentUrl: number
    verificationStatus: number
    submittedAt: number
    reviewedAt: number
    reviewedBy: number
    notes: number
    _all: number
  }


  export type KYCDocumentMinAggregateInputType = {
    id?: true
    userId?: true
    documentType?: true
    documentNumber?: true
    documentUrl?: true
    verificationStatus?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    notes?: true
  }

  export type KYCDocumentMaxAggregateInputType = {
    id?: true
    userId?: true
    documentType?: true
    documentNumber?: true
    documentUrl?: true
    verificationStatus?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    notes?: true
  }

  export type KYCDocumentCountAggregateInputType = {
    id?: true
    userId?: true
    documentType?: true
    documentNumber?: true
    documentUrl?: true
    verificationStatus?: true
    submittedAt?: true
    reviewedAt?: true
    reviewedBy?: true
    notes?: true
    _all?: true
  }

  export type KYCDocumentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCDocument to aggregate.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KYCDocuments
    **/
    _count?: true | KYCDocumentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KYCDocumentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KYCDocumentMaxAggregateInputType
  }

  export type GetKYCDocumentAggregateType<T extends KYCDocumentAggregateArgs> = {
        [P in keyof T & keyof AggregateKYCDocument]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKYCDocument[P]>
      : GetScalarType<T[P], AggregateKYCDocument[P]>
  }




  export type KYCDocumentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KYCDocumentWhereInput
    orderBy?: KYCDocumentOrderByWithAggregationInput | KYCDocumentOrderByWithAggregationInput[]
    by: KYCDocumentScalarFieldEnum[] | KYCDocumentScalarFieldEnum
    having?: KYCDocumentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KYCDocumentCountAggregateInputType | true
    _min?: KYCDocumentMinAggregateInputType
    _max?: KYCDocumentMaxAggregateInputType
  }

  export type KYCDocumentGroupByOutputType = {
    id: string
    userId: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl: string | null
    verificationStatus: $Enums.VerificationStatus
    submittedAt: Date
    reviewedAt: Date | null
    reviewedBy: string | null
    notes: string | null
    _count: KYCDocumentCountAggregateOutputType | null
    _min: KYCDocumentMinAggregateOutputType | null
    _max: KYCDocumentMaxAggregateOutputType | null
  }

  type GetKYCDocumentGroupByPayload<T extends KYCDocumentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KYCDocumentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KYCDocumentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KYCDocumentGroupByOutputType[P]>
            : GetScalarType<T[P], KYCDocumentGroupByOutputType[P]>
        }
      >
    >


  export type KYCDocumentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    documentType?: boolean
    documentNumber?: boolean
    documentUrl?: boolean
    verificationStatus?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCDocument"]>

  export type KYCDocumentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    documentType?: boolean
    documentNumber?: boolean
    documentUrl?: boolean
    verificationStatus?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    notes?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kYCDocument"]>

  export type KYCDocumentSelectScalar = {
    id?: boolean
    userId?: boolean
    documentType?: boolean
    documentNumber?: boolean
    documentUrl?: boolean
    verificationStatus?: boolean
    submittedAt?: boolean
    reviewedAt?: boolean
    reviewedBy?: boolean
    notes?: boolean
  }

  export type KYCDocumentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type KYCDocumentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $KYCDocumentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KYCDocument"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      documentType: $Enums.DocumentType
      documentNumber: string
      documentUrl: string | null
      verificationStatus: $Enums.VerificationStatus
      submittedAt: Date
      reviewedAt: Date | null
      reviewedBy: string | null
      notes: string | null
    }, ExtArgs["result"]["kYCDocument"]>
    composites: {}
  }

  type KYCDocumentGetPayload<S extends boolean | null | undefined | KYCDocumentDefaultArgs> = $Result.GetResult<Prisma.$KYCDocumentPayload, S>

  type KYCDocumentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KYCDocumentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KYCDocumentCountAggregateInputType | true
    }

  export interface KYCDocumentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KYCDocument'], meta: { name: 'KYCDocument' } }
    /**
     * Find zero or one KYCDocument that matches the filter.
     * @param {KYCDocumentFindUniqueArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends KYCDocumentFindUniqueArgs>(args: SelectSubset<T, KYCDocumentFindUniqueArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one KYCDocument that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {KYCDocumentFindUniqueOrThrowArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends KYCDocumentFindUniqueOrThrowArgs>(args: SelectSubset<T, KYCDocumentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first KYCDocument that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindFirstArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends KYCDocumentFindFirstArgs>(args?: SelectSubset<T, KYCDocumentFindFirstArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first KYCDocument that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindFirstOrThrowArgs} args - Arguments to find a KYCDocument
     * @example
     * // Get one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends KYCDocumentFindFirstOrThrowArgs>(args?: SelectSubset<T, KYCDocumentFindFirstOrThrowArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more KYCDocuments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KYCDocuments
     * const kYCDocuments = await prisma.kYCDocument.findMany()
     * 
     * // Get first 10 KYCDocuments
     * const kYCDocuments = await prisma.kYCDocument.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kYCDocumentWithIdOnly = await prisma.kYCDocument.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends KYCDocumentFindManyArgs>(args?: SelectSubset<T, KYCDocumentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a KYCDocument.
     * @param {KYCDocumentCreateArgs} args - Arguments to create a KYCDocument.
     * @example
     * // Create one KYCDocument
     * const KYCDocument = await prisma.kYCDocument.create({
     *   data: {
     *     // ... data to create a KYCDocument
     *   }
     * })
     * 
     */
    create<T extends KYCDocumentCreateArgs>(args: SelectSubset<T, KYCDocumentCreateArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many KYCDocuments.
     * @param {KYCDocumentCreateManyArgs} args - Arguments to create many KYCDocuments.
     * @example
     * // Create many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends KYCDocumentCreateManyArgs>(args?: SelectSubset<T, KYCDocumentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KYCDocuments and returns the data saved in the database.
     * @param {KYCDocumentCreateManyAndReturnArgs} args - Arguments to create many KYCDocuments.
     * @example
     * // Create many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KYCDocuments and only return the `id`
     * const kYCDocumentWithIdOnly = await prisma.kYCDocument.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends KYCDocumentCreateManyAndReturnArgs>(args?: SelectSubset<T, KYCDocumentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a KYCDocument.
     * @param {KYCDocumentDeleteArgs} args - Arguments to delete one KYCDocument.
     * @example
     * // Delete one KYCDocument
     * const KYCDocument = await prisma.kYCDocument.delete({
     *   where: {
     *     // ... filter to delete one KYCDocument
     *   }
     * })
     * 
     */
    delete<T extends KYCDocumentDeleteArgs>(args: SelectSubset<T, KYCDocumentDeleteArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one KYCDocument.
     * @param {KYCDocumentUpdateArgs} args - Arguments to update one KYCDocument.
     * @example
     * // Update one KYCDocument
     * const kYCDocument = await prisma.kYCDocument.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends KYCDocumentUpdateArgs>(args: SelectSubset<T, KYCDocumentUpdateArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more KYCDocuments.
     * @param {KYCDocumentDeleteManyArgs} args - Arguments to filter KYCDocuments to delete.
     * @example
     * // Delete a few KYCDocuments
     * const { count } = await prisma.kYCDocument.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends KYCDocumentDeleteManyArgs>(args?: SelectSubset<T, KYCDocumentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KYCDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KYCDocuments
     * const kYCDocument = await prisma.kYCDocument.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends KYCDocumentUpdateManyArgs>(args: SelectSubset<T, KYCDocumentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KYCDocument.
     * @param {KYCDocumentUpsertArgs} args - Arguments to update or create a KYCDocument.
     * @example
     * // Update or create a KYCDocument
     * const kYCDocument = await prisma.kYCDocument.upsert({
     *   create: {
     *     // ... data to create a KYCDocument
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KYCDocument we want to update
     *   }
     * })
     */
    upsert<T extends KYCDocumentUpsertArgs>(args: SelectSubset<T, KYCDocumentUpsertArgs<ExtArgs>>): Prisma__KYCDocumentClient<$Result.GetResult<Prisma.$KYCDocumentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of KYCDocuments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentCountArgs} args - Arguments to filter KYCDocuments to count.
     * @example
     * // Count the number of KYCDocuments
     * const count = await prisma.kYCDocument.count({
     *   where: {
     *     // ... the filter for the KYCDocuments we want to count
     *   }
     * })
    **/
    count<T extends KYCDocumentCountArgs>(
      args?: Subset<T, KYCDocumentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KYCDocumentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KYCDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KYCDocumentAggregateArgs>(args: Subset<T, KYCDocumentAggregateArgs>): Prisma.PrismaPromise<GetKYCDocumentAggregateType<T>>

    /**
     * Group by KYCDocument.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KYCDocumentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KYCDocumentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KYCDocumentGroupByArgs['orderBy'] }
        : { orderBy?: KYCDocumentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KYCDocumentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKYCDocumentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KYCDocument model
   */
  readonly fields: KYCDocumentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KYCDocument.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KYCDocumentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the KYCDocument model
   */ 
  interface KYCDocumentFieldRefs {
    readonly id: FieldRef<"KYCDocument", 'String'>
    readonly userId: FieldRef<"KYCDocument", 'String'>
    readonly documentType: FieldRef<"KYCDocument", 'DocumentType'>
    readonly documentNumber: FieldRef<"KYCDocument", 'String'>
    readonly documentUrl: FieldRef<"KYCDocument", 'String'>
    readonly verificationStatus: FieldRef<"KYCDocument", 'VerificationStatus'>
    readonly submittedAt: FieldRef<"KYCDocument", 'DateTime'>
    readonly reviewedAt: FieldRef<"KYCDocument", 'DateTime'>
    readonly reviewedBy: FieldRef<"KYCDocument", 'String'>
    readonly notes: FieldRef<"KYCDocument", 'String'>
  }
    

  // Custom InputTypes
  /**
   * KYCDocument findUnique
   */
  export type KYCDocumentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument findUniqueOrThrow
   */
  export type KYCDocumentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument findFirst
   */
  export type KYCDocumentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCDocuments.
     */
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument findFirstOrThrow
   */
  export type KYCDocumentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocument to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KYCDocuments.
     */
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument findMany
   */
  export type KYCDocumentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter, which KYCDocuments to fetch.
     */
    where?: KYCDocumentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KYCDocuments to fetch.
     */
    orderBy?: KYCDocumentOrderByWithRelationInput | KYCDocumentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KYCDocuments.
     */
    cursor?: KYCDocumentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KYCDocuments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KYCDocuments.
     */
    skip?: number
    distinct?: KYCDocumentScalarFieldEnum | KYCDocumentScalarFieldEnum[]
  }

  /**
   * KYCDocument create
   */
  export type KYCDocumentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The data needed to create a KYCDocument.
     */
    data: XOR<KYCDocumentCreateInput, KYCDocumentUncheckedCreateInput>
  }

  /**
   * KYCDocument createMany
   */
  export type KYCDocumentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KYCDocuments.
     */
    data: KYCDocumentCreateManyInput | KYCDocumentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * KYCDocument createManyAndReturn
   */
  export type KYCDocumentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many KYCDocuments.
     */
    data: KYCDocumentCreateManyInput | KYCDocumentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * KYCDocument update
   */
  export type KYCDocumentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The data needed to update a KYCDocument.
     */
    data: XOR<KYCDocumentUpdateInput, KYCDocumentUncheckedUpdateInput>
    /**
     * Choose, which KYCDocument to update.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument updateMany
   */
  export type KYCDocumentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KYCDocuments.
     */
    data: XOR<KYCDocumentUpdateManyMutationInput, KYCDocumentUncheckedUpdateManyInput>
    /**
     * Filter which KYCDocuments to update
     */
    where?: KYCDocumentWhereInput
  }

  /**
   * KYCDocument upsert
   */
  export type KYCDocumentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * The filter to search for the KYCDocument to update in case it exists.
     */
    where: KYCDocumentWhereUniqueInput
    /**
     * In case the KYCDocument found by the `where` argument doesn't exist, create a new KYCDocument with this data.
     */
    create: XOR<KYCDocumentCreateInput, KYCDocumentUncheckedCreateInput>
    /**
     * In case the KYCDocument was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KYCDocumentUpdateInput, KYCDocumentUncheckedUpdateInput>
  }

  /**
   * KYCDocument delete
   */
  export type KYCDocumentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
    /**
     * Filter which KYCDocument to delete.
     */
    where: KYCDocumentWhereUniqueInput
  }

  /**
   * KYCDocument deleteMany
   */
  export type KYCDocumentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KYCDocuments to delete
     */
    where?: KYCDocumentWhereInput
  }

  /**
   * KYCDocument without action
   */
  export type KYCDocumentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KYCDocument
     */
    select?: KYCDocumentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: KYCDocumentInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    amount: Decimal | null
    estimatedYield: Decimal | null
    actualYield: Decimal | null
    yieldDuration: number | null
    platformFee: Decimal | null
    networkFee: Decimal | null
    totalFees: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    amount: Decimal | null
    estimatedYield: Decimal | null
    actualYield: Decimal | null
    yieldDuration: number | null
    platformFee: Decimal | null
    networkFee: Decimal | null
    totalFees: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    userId: string | null
    merchantId: string | null
    amount: Decimal | null
    currency: string | null
    tokenAddress: string | null
    tokenSymbol: string | null
    status: $Enums.PaymentStatus | null
    type: $Enums.PaymentType | null
    sourceChain: string | null
    destinationChain: string | null
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    senderAddress: string | null
    recipientAddress: string | null
    escrowAddress: string | null
    estimatedYield: Decimal | null
    actualYield: Decimal | null
    yieldDuration: number | null
    yieldStrategy: string | null
    platformFee: Decimal | null
    networkFee: Decimal | null
    totalFees: Decimal | null
    description: string | null
    externalReference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    confirmedAt: Date | null
    releasedAt: Date | null
    expiresAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    merchantId: string | null
    amount: Decimal | null
    currency: string | null
    tokenAddress: string | null
    tokenSymbol: string | null
    status: $Enums.PaymentStatus | null
    type: $Enums.PaymentType | null
    sourceChain: string | null
    destinationChain: string | null
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    senderAddress: string | null
    recipientAddress: string | null
    escrowAddress: string | null
    estimatedYield: Decimal | null
    actualYield: Decimal | null
    yieldDuration: number | null
    yieldStrategy: string | null
    platformFee: Decimal | null
    networkFee: Decimal | null
    totalFees: Decimal | null
    description: string | null
    externalReference: string | null
    createdAt: Date | null
    updatedAt: Date | null
    confirmedAt: Date | null
    releasedAt: Date | null
    expiresAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    userId: number
    merchantId: number
    amount: number
    currency: number
    tokenAddress: number
    tokenSymbol: number
    status: number
    type: number
    sourceChain: number
    destinationChain: number
    sourceTransactionHash: number
    destTransactionHash: number
    senderAddress: number
    recipientAddress: number
    escrowAddress: number
    estimatedYield: number
    actualYield: number
    yieldDuration: number
    yieldStrategy: number
    platformFee: number
    networkFee: number
    totalFees: number
    description: number
    metadata: number
    externalReference: number
    createdAt: number
    updatedAt: number
    confirmedAt: number
    releasedAt: number
    expiresAt: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    amount?: true
    estimatedYield?: true
    actualYield?: true
    yieldDuration?: true
    platformFee?: true
    networkFee?: true
    totalFees?: true
  }

  export type PaymentSumAggregateInputType = {
    amount?: true
    estimatedYield?: true
    actualYield?: true
    yieldDuration?: true
    platformFee?: true
    networkFee?: true
    totalFees?: true
  }

  export type PaymentMinAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    amount?: true
    currency?: true
    tokenAddress?: true
    tokenSymbol?: true
    status?: true
    type?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    senderAddress?: true
    recipientAddress?: true
    escrowAddress?: true
    estimatedYield?: true
    actualYield?: true
    yieldDuration?: true
    yieldStrategy?: true
    platformFee?: true
    networkFee?: true
    totalFees?: true
    description?: true
    externalReference?: true
    createdAt?: true
    updatedAt?: true
    confirmedAt?: true
    releasedAt?: true
    expiresAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    amount?: true
    currency?: true
    tokenAddress?: true
    tokenSymbol?: true
    status?: true
    type?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    senderAddress?: true
    recipientAddress?: true
    escrowAddress?: true
    estimatedYield?: true
    actualYield?: true
    yieldDuration?: true
    yieldStrategy?: true
    platformFee?: true
    networkFee?: true
    totalFees?: true
    description?: true
    externalReference?: true
    createdAt?: true
    updatedAt?: true
    confirmedAt?: true
    releasedAt?: true
    expiresAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    amount?: true
    currency?: true
    tokenAddress?: true
    tokenSymbol?: true
    status?: true
    type?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    senderAddress?: true
    recipientAddress?: true
    escrowAddress?: true
    estimatedYield?: true
    actualYield?: true
    yieldDuration?: true
    yieldStrategy?: true
    platformFee?: true
    networkFee?: true
    totalFees?: true
    description?: true
    metadata?: true
    externalReference?: true
    createdAt?: true
    updatedAt?: true
    confirmedAt?: true
    releasedAt?: true
    expiresAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    userId: string
    merchantId: string | null
    amount: Decimal
    currency: string
    tokenAddress: string | null
    tokenSymbol: string | null
    status: $Enums.PaymentStatus
    type: $Enums.PaymentType
    sourceChain: string
    destinationChain: string | null
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress: string | null
    estimatedYield: Decimal | null
    actualYield: Decimal | null
    yieldDuration: number | null
    yieldStrategy: string | null
    platformFee: Decimal | null
    networkFee: Decimal | null
    totalFees: Decimal | null
    description: string | null
    metadata: JsonValue | null
    externalReference: string | null
    createdAt: Date
    updatedAt: Date
    confirmedAt: Date | null
    releasedAt: Date | null
    expiresAt: Date | null
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    amount?: boolean
    currency?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    status?: boolean
    type?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    senderAddress?: boolean
    recipientAddress?: boolean
    escrowAddress?: boolean
    estimatedYield?: boolean
    actualYield?: boolean
    yieldDuration?: boolean
    yieldStrategy?: boolean
    platformFee?: boolean
    networkFee?: boolean
    totalFees?: boolean
    description?: boolean
    metadata?: boolean
    externalReference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    confirmedAt?: boolean
    releasedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | Payment$merchantArgs<ExtArgs>
    yieldEarnings?: boolean | Payment$yieldEarningsArgs<ExtArgs>
    paymentEvents?: boolean | Payment$paymentEventsArgs<ExtArgs>
    crossChainTransactions?: boolean | Payment$crossChainTransactionsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    amount?: boolean
    currency?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    status?: boolean
    type?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    senderAddress?: boolean
    recipientAddress?: boolean
    escrowAddress?: boolean
    estimatedYield?: boolean
    actualYield?: boolean
    yieldDuration?: boolean
    yieldStrategy?: boolean
    platformFee?: boolean
    networkFee?: boolean
    totalFees?: boolean
    description?: boolean
    metadata?: boolean
    externalReference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    confirmedAt?: boolean
    releasedAt?: boolean
    expiresAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | Payment$merchantArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>

  export type PaymentSelectScalar = {
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    amount?: boolean
    currency?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    status?: boolean
    type?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    senderAddress?: boolean
    recipientAddress?: boolean
    escrowAddress?: boolean
    estimatedYield?: boolean
    actualYield?: boolean
    yieldDuration?: boolean
    yieldStrategy?: boolean
    platformFee?: boolean
    networkFee?: boolean
    totalFees?: boolean
    description?: boolean
    metadata?: boolean
    externalReference?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    confirmedAt?: boolean
    releasedAt?: boolean
    expiresAt?: boolean
  }

  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | Payment$merchantArgs<ExtArgs>
    yieldEarnings?: boolean | Payment$yieldEarningsArgs<ExtArgs>
    paymentEvents?: boolean | Payment$paymentEventsArgs<ExtArgs>
    crossChainTransactions?: boolean | Payment$crossChainTransactionsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PaymentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    merchant?: boolean | Payment$merchantArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      merchant: Prisma.$MerchantPayload<ExtArgs> | null
      yieldEarnings: Prisma.$YieldEarningPayload<ExtArgs>[]
      paymentEvents: Prisma.$PaymentEventPayload<ExtArgs>[]
      crossChainTransactions: Prisma.$CrossChainTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      merchantId: string | null
      amount: Prisma.Decimal
      currency: string
      tokenAddress: string | null
      tokenSymbol: string | null
      status: $Enums.PaymentStatus
      type: $Enums.PaymentType
      sourceChain: string
      destinationChain: string | null
      sourceTransactionHash: string | null
      destTransactionHash: string | null
      senderAddress: string
      recipientAddress: string
      escrowAddress: string | null
      estimatedYield: Prisma.Decimal | null
      actualYield: Prisma.Decimal | null
      yieldDuration: number | null
      yieldStrategy: string | null
      platformFee: Prisma.Decimal | null
      networkFee: Prisma.Decimal | null
      totalFees: Prisma.Decimal | null
      description: string | null
      metadata: Prisma.JsonValue | null
      externalReference: string | null
      createdAt: Date
      updatedAt: Date
      confirmedAt: Date | null
      releasedAt: Date | null
      expiresAt: Date | null
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {PaymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `id`
     * const paymentWithIdOnly = await prisma.payment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    merchant<T extends Payment$merchantArgs<ExtArgs> = {}>(args?: Subset<T, Payment$merchantArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    yieldEarnings<T extends Payment$yieldEarningsArgs<ExtArgs> = {}>(args?: Subset<T, Payment$yieldEarningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findMany"> | Null>
    paymentEvents<T extends Payment$paymentEventsArgs<ExtArgs> = {}>(args?: Subset<T, Payment$paymentEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findMany"> | Null>
    crossChainTransactions<T extends Payment$crossChainTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Payment$crossChainTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */ 
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly userId: FieldRef<"Payment", 'String'>
    readonly merchantId: FieldRef<"Payment", 'String'>
    readonly amount: FieldRef<"Payment", 'Decimal'>
    readonly currency: FieldRef<"Payment", 'String'>
    readonly tokenAddress: FieldRef<"Payment", 'String'>
    readonly tokenSymbol: FieldRef<"Payment", 'String'>
    readonly status: FieldRef<"Payment", 'PaymentStatus'>
    readonly type: FieldRef<"Payment", 'PaymentType'>
    readonly sourceChain: FieldRef<"Payment", 'String'>
    readonly destinationChain: FieldRef<"Payment", 'String'>
    readonly sourceTransactionHash: FieldRef<"Payment", 'String'>
    readonly destTransactionHash: FieldRef<"Payment", 'String'>
    readonly senderAddress: FieldRef<"Payment", 'String'>
    readonly recipientAddress: FieldRef<"Payment", 'String'>
    readonly escrowAddress: FieldRef<"Payment", 'String'>
    readonly estimatedYield: FieldRef<"Payment", 'Decimal'>
    readonly actualYield: FieldRef<"Payment", 'Decimal'>
    readonly yieldDuration: FieldRef<"Payment", 'Int'>
    readonly yieldStrategy: FieldRef<"Payment", 'String'>
    readonly platformFee: FieldRef<"Payment", 'Decimal'>
    readonly networkFee: FieldRef<"Payment", 'Decimal'>
    readonly totalFees: FieldRef<"Payment", 'Decimal'>
    readonly description: FieldRef<"Payment", 'String'>
    readonly metadata: FieldRef<"Payment", 'Json'>
    readonly externalReference: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
    readonly confirmedAt: FieldRef<"Payment", 'DateTime'>
    readonly releasedAt: FieldRef<"Payment", 'DateTime'>
    readonly expiresAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment createManyAndReturn
   */
  export type PaymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
  }

  /**
   * Payment.merchant
   */
  export type Payment$merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
  }

  /**
   * Payment.yieldEarnings
   */
  export type Payment$yieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    where?: YieldEarningWhereInput
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    cursor?: YieldEarningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * Payment.paymentEvents
   */
  export type Payment$paymentEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    where?: PaymentEventWhereInput
    orderBy?: PaymentEventOrderByWithRelationInput | PaymentEventOrderByWithRelationInput[]
    cursor?: PaymentEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentEventScalarFieldEnum | PaymentEventScalarFieldEnum[]
  }

  /**
   * Payment.crossChainTransactions
   */
  export type Payment$crossChainTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    where?: CrossChainTransactionWhereInput
    orderBy?: CrossChainTransactionOrderByWithRelationInput | CrossChainTransactionOrderByWithRelationInput[]
    cursor?: CrossChainTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CrossChainTransactionScalarFieldEnum | CrossChainTransactionScalarFieldEnum[]
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model PaymentEvent
   */

  export type AggregatePaymentEvent = {
    _count: PaymentEventCountAggregateOutputType | null
    _avg: PaymentEventAvgAggregateOutputType | null
    _sum: PaymentEventSumAggregateOutputType | null
    _min: PaymentEventMinAggregateOutputType | null
    _max: PaymentEventMaxAggregateOutputType | null
  }

  export type PaymentEventAvgAggregateOutputType = {
    blockNumber: number | null
    gasUsed: number | null
    gasPrice: number | null
  }

  export type PaymentEventSumAggregateOutputType = {
    blockNumber: bigint | null
    gasUsed: bigint | null
    gasPrice: bigint | null
  }

  export type PaymentEventMinAggregateOutputType = {
    id: string | null
    paymentId: string | null
    eventType: $Enums.PaymentEventType | null
    transactionHash: string | null
    blockNumber: bigint | null
    chainId: string | null
    gasUsed: bigint | null
    gasPrice: bigint | null
    createdAt: Date | null
  }

  export type PaymentEventMaxAggregateOutputType = {
    id: string | null
    paymentId: string | null
    eventType: $Enums.PaymentEventType | null
    transactionHash: string | null
    blockNumber: bigint | null
    chainId: string | null
    gasUsed: bigint | null
    gasPrice: bigint | null
    createdAt: Date | null
  }

  export type PaymentEventCountAggregateOutputType = {
    id: number
    paymentId: number
    eventType: number
    transactionHash: number
    blockNumber: number
    chainId: number
    gasUsed: number
    gasPrice: number
    eventData: number
    createdAt: number
    _all: number
  }


  export type PaymentEventAvgAggregateInputType = {
    blockNumber?: true
    gasUsed?: true
    gasPrice?: true
  }

  export type PaymentEventSumAggregateInputType = {
    blockNumber?: true
    gasUsed?: true
    gasPrice?: true
  }

  export type PaymentEventMinAggregateInputType = {
    id?: true
    paymentId?: true
    eventType?: true
    transactionHash?: true
    blockNumber?: true
    chainId?: true
    gasUsed?: true
    gasPrice?: true
    createdAt?: true
  }

  export type PaymentEventMaxAggregateInputType = {
    id?: true
    paymentId?: true
    eventType?: true
    transactionHash?: true
    blockNumber?: true
    chainId?: true
    gasUsed?: true
    gasPrice?: true
    createdAt?: true
  }

  export type PaymentEventCountAggregateInputType = {
    id?: true
    paymentId?: true
    eventType?: true
    transactionHash?: true
    blockNumber?: true
    chainId?: true
    gasUsed?: true
    gasPrice?: true
    eventData?: true
    createdAt?: true
    _all?: true
  }

  export type PaymentEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentEvent to aggregate.
     */
    where?: PaymentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentEvents to fetch.
     */
    orderBy?: PaymentEventOrderByWithRelationInput | PaymentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PaymentEvents
    **/
    _count?: true | PaymentEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentEventMaxAggregateInputType
  }

  export type GetPaymentEventAggregateType<T extends PaymentEventAggregateArgs> = {
        [P in keyof T & keyof AggregatePaymentEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePaymentEvent[P]>
      : GetScalarType<T[P], AggregatePaymentEvent[P]>
  }




  export type PaymentEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentEventWhereInput
    orderBy?: PaymentEventOrderByWithAggregationInput | PaymentEventOrderByWithAggregationInput[]
    by: PaymentEventScalarFieldEnum[] | PaymentEventScalarFieldEnum
    having?: PaymentEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentEventCountAggregateInputType | true
    _avg?: PaymentEventAvgAggregateInputType
    _sum?: PaymentEventSumAggregateInputType
    _min?: PaymentEventMinAggregateInputType
    _max?: PaymentEventMaxAggregateInputType
  }

  export type PaymentEventGroupByOutputType = {
    id: string
    paymentId: string
    eventType: $Enums.PaymentEventType
    transactionHash: string | null
    blockNumber: bigint | null
    chainId: string | null
    gasUsed: bigint | null
    gasPrice: bigint | null
    eventData: JsonValue | null
    createdAt: Date
    _count: PaymentEventCountAggregateOutputType | null
    _avg: PaymentEventAvgAggregateOutputType | null
    _sum: PaymentEventSumAggregateOutputType | null
    _min: PaymentEventMinAggregateOutputType | null
    _max: PaymentEventMaxAggregateOutputType | null
  }

  type GetPaymentEventGroupByPayload<T extends PaymentEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentEventGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentEventGroupByOutputType[P]>
        }
      >
    >


  export type PaymentEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    eventType?: boolean
    transactionHash?: boolean
    blockNumber?: boolean
    chainId?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    eventData?: boolean
    createdAt?: boolean
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentEvent"]>

  export type PaymentEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    eventType?: boolean
    transactionHash?: boolean
    blockNumber?: boolean
    chainId?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    eventData?: boolean
    createdAt?: boolean
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["paymentEvent"]>

  export type PaymentEventSelectScalar = {
    id?: boolean
    paymentId?: boolean
    eventType?: boolean
    transactionHash?: boolean
    blockNumber?: boolean
    chainId?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    eventData?: boolean
    createdAt?: boolean
  }

  export type PaymentEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }
  export type PaymentEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }

  export type $PaymentEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PaymentEvent"
    objects: {
      payment: Prisma.$PaymentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      paymentId: string
      eventType: $Enums.PaymentEventType
      transactionHash: string | null
      blockNumber: bigint | null
      chainId: string | null
      gasUsed: bigint | null
      gasPrice: bigint | null
      eventData: Prisma.JsonValue | null
      createdAt: Date
    }, ExtArgs["result"]["paymentEvent"]>
    composites: {}
  }

  type PaymentEventGetPayload<S extends boolean | null | undefined | PaymentEventDefaultArgs> = $Result.GetResult<Prisma.$PaymentEventPayload, S>

  type PaymentEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PaymentEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PaymentEventCountAggregateInputType | true
    }

  export interface PaymentEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PaymentEvent'], meta: { name: 'PaymentEvent' } }
    /**
     * Find zero or one PaymentEvent that matches the filter.
     * @param {PaymentEventFindUniqueArgs} args - Arguments to find a PaymentEvent
     * @example
     * // Get one PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentEventFindUniqueArgs>(args: SelectSubset<T, PaymentEventFindUniqueArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PaymentEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PaymentEventFindUniqueOrThrowArgs} args - Arguments to find a PaymentEvent
     * @example
     * // Get one PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentEventFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PaymentEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventFindFirstArgs} args - Arguments to find a PaymentEvent
     * @example
     * // Get one PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentEventFindFirstArgs>(args?: SelectSubset<T, PaymentEventFindFirstArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PaymentEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventFindFirstOrThrowArgs} args - Arguments to find a PaymentEvent
     * @example
     * // Get one PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentEventFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PaymentEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PaymentEvents
     * const paymentEvents = await prisma.paymentEvent.findMany()
     * 
     * // Get first 10 PaymentEvents
     * const paymentEvents = await prisma.paymentEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentEventWithIdOnly = await prisma.paymentEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentEventFindManyArgs>(args?: SelectSubset<T, PaymentEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PaymentEvent.
     * @param {PaymentEventCreateArgs} args - Arguments to create a PaymentEvent.
     * @example
     * // Create one PaymentEvent
     * const PaymentEvent = await prisma.paymentEvent.create({
     *   data: {
     *     // ... data to create a PaymentEvent
     *   }
     * })
     * 
     */
    create<T extends PaymentEventCreateArgs>(args: SelectSubset<T, PaymentEventCreateArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PaymentEvents.
     * @param {PaymentEventCreateManyArgs} args - Arguments to create many PaymentEvents.
     * @example
     * // Create many PaymentEvents
     * const paymentEvent = await prisma.paymentEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentEventCreateManyArgs>(args?: SelectSubset<T, PaymentEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PaymentEvents and returns the data saved in the database.
     * @param {PaymentEventCreateManyAndReturnArgs} args - Arguments to create many PaymentEvents.
     * @example
     * // Create many PaymentEvents
     * const paymentEvent = await prisma.paymentEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PaymentEvents and only return the `id`
     * const paymentEventWithIdOnly = await prisma.paymentEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PaymentEventCreateManyAndReturnArgs>(args?: SelectSubset<T, PaymentEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PaymentEvent.
     * @param {PaymentEventDeleteArgs} args - Arguments to delete one PaymentEvent.
     * @example
     * // Delete one PaymentEvent
     * const PaymentEvent = await prisma.paymentEvent.delete({
     *   where: {
     *     // ... filter to delete one PaymentEvent
     *   }
     * })
     * 
     */
    delete<T extends PaymentEventDeleteArgs>(args: SelectSubset<T, PaymentEventDeleteArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PaymentEvent.
     * @param {PaymentEventUpdateArgs} args - Arguments to update one PaymentEvent.
     * @example
     * // Update one PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentEventUpdateArgs>(args: SelectSubset<T, PaymentEventUpdateArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PaymentEvents.
     * @param {PaymentEventDeleteManyArgs} args - Arguments to filter PaymentEvents to delete.
     * @example
     * // Delete a few PaymentEvents
     * const { count } = await prisma.paymentEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentEventDeleteManyArgs>(args?: SelectSubset<T, PaymentEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PaymentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PaymentEvents
     * const paymentEvent = await prisma.paymentEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentEventUpdateManyArgs>(args: SelectSubset<T, PaymentEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PaymentEvent.
     * @param {PaymentEventUpsertArgs} args - Arguments to update or create a PaymentEvent.
     * @example
     * // Update or create a PaymentEvent
     * const paymentEvent = await prisma.paymentEvent.upsert({
     *   create: {
     *     // ... data to create a PaymentEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PaymentEvent we want to update
     *   }
     * })
     */
    upsert<T extends PaymentEventUpsertArgs>(args: SelectSubset<T, PaymentEventUpsertArgs<ExtArgs>>): Prisma__PaymentEventClient<$Result.GetResult<Prisma.$PaymentEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PaymentEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventCountArgs} args - Arguments to filter PaymentEvents to count.
     * @example
     * // Count the number of PaymentEvents
     * const count = await prisma.paymentEvent.count({
     *   where: {
     *     // ... the filter for the PaymentEvents we want to count
     *   }
     * })
    **/
    count<T extends PaymentEventCountArgs>(
      args?: Subset<T, PaymentEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PaymentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentEventAggregateArgs>(args: Subset<T, PaymentEventAggregateArgs>): Prisma.PrismaPromise<GetPaymentEventAggregateType<T>>

    /**
     * Group by PaymentEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentEventGroupByArgs['orderBy'] }
        : { orderBy?: PaymentEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PaymentEvent model
   */
  readonly fields: PaymentEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PaymentEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PaymentEvent model
   */ 
  interface PaymentEventFieldRefs {
    readonly id: FieldRef<"PaymentEvent", 'String'>
    readonly paymentId: FieldRef<"PaymentEvent", 'String'>
    readonly eventType: FieldRef<"PaymentEvent", 'PaymentEventType'>
    readonly transactionHash: FieldRef<"PaymentEvent", 'String'>
    readonly blockNumber: FieldRef<"PaymentEvent", 'BigInt'>
    readonly chainId: FieldRef<"PaymentEvent", 'String'>
    readonly gasUsed: FieldRef<"PaymentEvent", 'BigInt'>
    readonly gasPrice: FieldRef<"PaymentEvent", 'BigInt'>
    readonly eventData: FieldRef<"PaymentEvent", 'Json'>
    readonly createdAt: FieldRef<"PaymentEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PaymentEvent findUnique
   */
  export type PaymentEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter, which PaymentEvent to fetch.
     */
    where: PaymentEventWhereUniqueInput
  }

  /**
   * PaymentEvent findUniqueOrThrow
   */
  export type PaymentEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter, which PaymentEvent to fetch.
     */
    where: PaymentEventWhereUniqueInput
  }

  /**
   * PaymentEvent findFirst
   */
  export type PaymentEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter, which PaymentEvent to fetch.
     */
    where?: PaymentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentEvents to fetch.
     */
    orderBy?: PaymentEventOrderByWithRelationInput | PaymentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentEvents.
     */
    cursor?: PaymentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentEvents.
     */
    distinct?: PaymentEventScalarFieldEnum | PaymentEventScalarFieldEnum[]
  }

  /**
   * PaymentEvent findFirstOrThrow
   */
  export type PaymentEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter, which PaymentEvent to fetch.
     */
    where?: PaymentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentEvents to fetch.
     */
    orderBy?: PaymentEventOrderByWithRelationInput | PaymentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PaymentEvents.
     */
    cursor?: PaymentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PaymentEvents.
     */
    distinct?: PaymentEventScalarFieldEnum | PaymentEventScalarFieldEnum[]
  }

  /**
   * PaymentEvent findMany
   */
  export type PaymentEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter, which PaymentEvents to fetch.
     */
    where?: PaymentEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PaymentEvents to fetch.
     */
    orderBy?: PaymentEventOrderByWithRelationInput | PaymentEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PaymentEvents.
     */
    cursor?: PaymentEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PaymentEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PaymentEvents.
     */
    skip?: number
    distinct?: PaymentEventScalarFieldEnum | PaymentEventScalarFieldEnum[]
  }

  /**
   * PaymentEvent create
   */
  export type PaymentEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * The data needed to create a PaymentEvent.
     */
    data: XOR<PaymentEventCreateInput, PaymentEventUncheckedCreateInput>
  }

  /**
   * PaymentEvent createMany
   */
  export type PaymentEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PaymentEvents.
     */
    data: PaymentEventCreateManyInput | PaymentEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PaymentEvent createManyAndReturn
   */
  export type PaymentEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PaymentEvents.
     */
    data: PaymentEventCreateManyInput | PaymentEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PaymentEvent update
   */
  export type PaymentEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * The data needed to update a PaymentEvent.
     */
    data: XOR<PaymentEventUpdateInput, PaymentEventUncheckedUpdateInput>
    /**
     * Choose, which PaymentEvent to update.
     */
    where: PaymentEventWhereUniqueInput
  }

  /**
   * PaymentEvent updateMany
   */
  export type PaymentEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PaymentEvents.
     */
    data: XOR<PaymentEventUpdateManyMutationInput, PaymentEventUncheckedUpdateManyInput>
    /**
     * Filter which PaymentEvents to update
     */
    where?: PaymentEventWhereInput
  }

  /**
   * PaymentEvent upsert
   */
  export type PaymentEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * The filter to search for the PaymentEvent to update in case it exists.
     */
    where: PaymentEventWhereUniqueInput
    /**
     * In case the PaymentEvent found by the `where` argument doesn't exist, create a new PaymentEvent with this data.
     */
    create: XOR<PaymentEventCreateInput, PaymentEventUncheckedCreateInput>
    /**
     * In case the PaymentEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentEventUpdateInput, PaymentEventUncheckedUpdateInput>
  }

  /**
   * PaymentEvent delete
   */
  export type PaymentEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
    /**
     * Filter which PaymentEvent to delete.
     */
    where: PaymentEventWhereUniqueInput
  }

  /**
   * PaymentEvent deleteMany
   */
  export type PaymentEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PaymentEvents to delete
     */
    where?: PaymentEventWhereInput
  }

  /**
   * PaymentEvent without action
   */
  export type PaymentEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentEvent
     */
    select?: PaymentEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentEventInclude<ExtArgs> | null
  }


  /**
   * Model YieldStrategy
   */

  export type AggregateYieldStrategy = {
    _count: YieldStrategyCountAggregateOutputType | null
    _avg: YieldStrategyAvgAggregateOutputType | null
    _sum: YieldStrategySumAggregateOutputType | null
    _min: YieldStrategyMinAggregateOutputType | null
    _max: YieldStrategyMaxAggregateOutputType | null
  }

  export type YieldStrategyAvgAggregateOutputType = {
    expectedAPY: Decimal | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    totalValueLocked: Decimal | null
    actualAPY: Decimal | null
  }

  export type YieldStrategySumAggregateOutputType = {
    expectedAPY: Decimal | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    totalValueLocked: Decimal | null
    actualAPY: Decimal | null
  }

  export type YieldStrategyMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    protocolName: string | null
    chainId: string | null
    contractAddress: string | null
    strategyType: $Enums.YieldStrategyType | null
    expectedAPY: Decimal | null
    riskLevel: $Enums.RiskLevel | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    isActive: boolean | null
    totalValueLocked: Decimal | null
    actualAPY: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YieldStrategyMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    protocolName: string | null
    chainId: string | null
    contractAddress: string | null
    strategyType: $Enums.YieldStrategyType | null
    expectedAPY: Decimal | null
    riskLevel: $Enums.RiskLevel | null
    minAmount: Decimal | null
    maxAmount: Decimal | null
    isActive: boolean | null
    totalValueLocked: Decimal | null
    actualAPY: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YieldStrategyCountAggregateOutputType = {
    id: number
    name: number
    description: number
    protocolName: number
    chainId: number
    contractAddress: number
    strategyType: number
    expectedAPY: number
    riskLevel: number
    minAmount: number
    maxAmount: number
    isActive: number
    strategyConfig: number
    totalValueLocked: number
    actualAPY: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YieldStrategyAvgAggregateInputType = {
    expectedAPY?: true
    minAmount?: true
    maxAmount?: true
    totalValueLocked?: true
    actualAPY?: true
  }

  export type YieldStrategySumAggregateInputType = {
    expectedAPY?: true
    minAmount?: true
    maxAmount?: true
    totalValueLocked?: true
    actualAPY?: true
  }

  export type YieldStrategyMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    protocolName?: true
    chainId?: true
    contractAddress?: true
    strategyType?: true
    expectedAPY?: true
    riskLevel?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    totalValueLocked?: true
    actualAPY?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YieldStrategyMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    protocolName?: true
    chainId?: true
    contractAddress?: true
    strategyType?: true
    expectedAPY?: true
    riskLevel?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    totalValueLocked?: true
    actualAPY?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YieldStrategyCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    protocolName?: true
    chainId?: true
    contractAddress?: true
    strategyType?: true
    expectedAPY?: true
    riskLevel?: true
    minAmount?: true
    maxAmount?: true
    isActive?: true
    strategyConfig?: true
    totalValueLocked?: true
    actualAPY?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YieldStrategyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YieldStrategy to aggregate.
     */
    where?: YieldStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldStrategies to fetch.
     */
    orderBy?: YieldStrategyOrderByWithRelationInput | YieldStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YieldStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YieldStrategies
    **/
    _count?: true | YieldStrategyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YieldStrategyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YieldStrategySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YieldStrategyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YieldStrategyMaxAggregateInputType
  }

  export type GetYieldStrategyAggregateType<T extends YieldStrategyAggregateArgs> = {
        [P in keyof T & keyof AggregateYieldStrategy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYieldStrategy[P]>
      : GetScalarType<T[P], AggregateYieldStrategy[P]>
  }




  export type YieldStrategyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YieldStrategyWhereInput
    orderBy?: YieldStrategyOrderByWithAggregationInput | YieldStrategyOrderByWithAggregationInput[]
    by: YieldStrategyScalarFieldEnum[] | YieldStrategyScalarFieldEnum
    having?: YieldStrategyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YieldStrategyCountAggregateInputType | true
    _avg?: YieldStrategyAvgAggregateInputType
    _sum?: YieldStrategySumAggregateInputType
    _min?: YieldStrategyMinAggregateInputType
    _max?: YieldStrategyMaxAggregateInputType
  }

  export type YieldStrategyGroupByOutputType = {
    id: string
    name: string
    description: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal
    riskLevel: $Enums.RiskLevel
    minAmount: Decimal
    maxAmount: Decimal | null
    isActive: boolean
    strategyConfig: JsonValue
    totalValueLocked: Decimal
    actualAPY: Decimal | null
    createdAt: Date
    updatedAt: Date
    _count: YieldStrategyCountAggregateOutputType | null
    _avg: YieldStrategyAvgAggregateOutputType | null
    _sum: YieldStrategySumAggregateOutputType | null
    _min: YieldStrategyMinAggregateOutputType | null
    _max: YieldStrategyMaxAggregateOutputType | null
  }

  type GetYieldStrategyGroupByPayload<T extends YieldStrategyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YieldStrategyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YieldStrategyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YieldStrategyGroupByOutputType[P]>
            : GetScalarType<T[P], YieldStrategyGroupByOutputType[P]>
        }
      >
    >


  export type YieldStrategySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    protocolName?: boolean
    chainId?: boolean
    contractAddress?: boolean
    strategyType?: boolean
    expectedAPY?: boolean
    riskLevel?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    strategyConfig?: boolean
    totalValueLocked?: boolean
    actualAPY?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    yieldEarnings?: boolean | YieldStrategy$yieldEarningsArgs<ExtArgs>
    _count?: boolean | YieldStrategyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yieldStrategy"]>

  export type YieldStrategySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    protocolName?: boolean
    chainId?: boolean
    contractAddress?: boolean
    strategyType?: boolean
    expectedAPY?: boolean
    riskLevel?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    strategyConfig?: boolean
    totalValueLocked?: boolean
    actualAPY?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["yieldStrategy"]>

  export type YieldStrategySelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    protocolName?: boolean
    chainId?: boolean
    contractAddress?: boolean
    strategyType?: boolean
    expectedAPY?: boolean
    riskLevel?: boolean
    minAmount?: boolean
    maxAmount?: boolean
    isActive?: boolean
    strategyConfig?: boolean
    totalValueLocked?: boolean
    actualAPY?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type YieldStrategyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    yieldEarnings?: boolean | YieldStrategy$yieldEarningsArgs<ExtArgs>
    _count?: boolean | YieldStrategyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type YieldStrategyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $YieldStrategyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YieldStrategy"
    objects: {
      yieldEarnings: Prisma.$YieldEarningPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      protocolName: string
      chainId: string
      contractAddress: string
      strategyType: $Enums.YieldStrategyType
      expectedAPY: Prisma.Decimal
      riskLevel: $Enums.RiskLevel
      minAmount: Prisma.Decimal
      maxAmount: Prisma.Decimal | null
      isActive: boolean
      strategyConfig: Prisma.JsonValue
      totalValueLocked: Prisma.Decimal
      actualAPY: Prisma.Decimal | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["yieldStrategy"]>
    composites: {}
  }

  type YieldStrategyGetPayload<S extends boolean | null | undefined | YieldStrategyDefaultArgs> = $Result.GetResult<Prisma.$YieldStrategyPayload, S>

  type YieldStrategyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<YieldStrategyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: YieldStrategyCountAggregateInputType | true
    }

  export interface YieldStrategyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YieldStrategy'], meta: { name: 'YieldStrategy' } }
    /**
     * Find zero or one YieldStrategy that matches the filter.
     * @param {YieldStrategyFindUniqueArgs} args - Arguments to find a YieldStrategy
     * @example
     * // Get one YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YieldStrategyFindUniqueArgs>(args: SelectSubset<T, YieldStrategyFindUniqueArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one YieldStrategy that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {YieldStrategyFindUniqueOrThrowArgs} args - Arguments to find a YieldStrategy
     * @example
     * // Get one YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YieldStrategyFindUniqueOrThrowArgs>(args: SelectSubset<T, YieldStrategyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first YieldStrategy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyFindFirstArgs} args - Arguments to find a YieldStrategy
     * @example
     * // Get one YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YieldStrategyFindFirstArgs>(args?: SelectSubset<T, YieldStrategyFindFirstArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first YieldStrategy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyFindFirstOrThrowArgs} args - Arguments to find a YieldStrategy
     * @example
     * // Get one YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YieldStrategyFindFirstOrThrowArgs>(args?: SelectSubset<T, YieldStrategyFindFirstOrThrowArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more YieldStrategies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YieldStrategies
     * const yieldStrategies = await prisma.yieldStrategy.findMany()
     * 
     * // Get first 10 YieldStrategies
     * const yieldStrategies = await prisma.yieldStrategy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yieldStrategyWithIdOnly = await prisma.yieldStrategy.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends YieldStrategyFindManyArgs>(args?: SelectSubset<T, YieldStrategyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a YieldStrategy.
     * @param {YieldStrategyCreateArgs} args - Arguments to create a YieldStrategy.
     * @example
     * // Create one YieldStrategy
     * const YieldStrategy = await prisma.yieldStrategy.create({
     *   data: {
     *     // ... data to create a YieldStrategy
     *   }
     * })
     * 
     */
    create<T extends YieldStrategyCreateArgs>(args: SelectSubset<T, YieldStrategyCreateArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many YieldStrategies.
     * @param {YieldStrategyCreateManyArgs} args - Arguments to create many YieldStrategies.
     * @example
     * // Create many YieldStrategies
     * const yieldStrategy = await prisma.yieldStrategy.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YieldStrategyCreateManyArgs>(args?: SelectSubset<T, YieldStrategyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many YieldStrategies and returns the data saved in the database.
     * @param {YieldStrategyCreateManyAndReturnArgs} args - Arguments to create many YieldStrategies.
     * @example
     * // Create many YieldStrategies
     * const yieldStrategy = await prisma.yieldStrategy.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many YieldStrategies and only return the `id`
     * const yieldStrategyWithIdOnly = await prisma.yieldStrategy.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends YieldStrategyCreateManyAndReturnArgs>(args?: SelectSubset<T, YieldStrategyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a YieldStrategy.
     * @param {YieldStrategyDeleteArgs} args - Arguments to delete one YieldStrategy.
     * @example
     * // Delete one YieldStrategy
     * const YieldStrategy = await prisma.yieldStrategy.delete({
     *   where: {
     *     // ... filter to delete one YieldStrategy
     *   }
     * })
     * 
     */
    delete<T extends YieldStrategyDeleteArgs>(args: SelectSubset<T, YieldStrategyDeleteArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one YieldStrategy.
     * @param {YieldStrategyUpdateArgs} args - Arguments to update one YieldStrategy.
     * @example
     * // Update one YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YieldStrategyUpdateArgs>(args: SelectSubset<T, YieldStrategyUpdateArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more YieldStrategies.
     * @param {YieldStrategyDeleteManyArgs} args - Arguments to filter YieldStrategies to delete.
     * @example
     * // Delete a few YieldStrategies
     * const { count } = await prisma.yieldStrategy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YieldStrategyDeleteManyArgs>(args?: SelectSubset<T, YieldStrategyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YieldStrategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YieldStrategies
     * const yieldStrategy = await prisma.yieldStrategy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YieldStrategyUpdateManyArgs>(args: SelectSubset<T, YieldStrategyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YieldStrategy.
     * @param {YieldStrategyUpsertArgs} args - Arguments to update or create a YieldStrategy.
     * @example
     * // Update or create a YieldStrategy
     * const yieldStrategy = await prisma.yieldStrategy.upsert({
     *   create: {
     *     // ... data to create a YieldStrategy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YieldStrategy we want to update
     *   }
     * })
     */
    upsert<T extends YieldStrategyUpsertArgs>(args: SelectSubset<T, YieldStrategyUpsertArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of YieldStrategies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyCountArgs} args - Arguments to filter YieldStrategies to count.
     * @example
     * // Count the number of YieldStrategies
     * const count = await prisma.yieldStrategy.count({
     *   where: {
     *     // ... the filter for the YieldStrategies we want to count
     *   }
     * })
    **/
    count<T extends YieldStrategyCountArgs>(
      args?: Subset<T, YieldStrategyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YieldStrategyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YieldStrategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YieldStrategyAggregateArgs>(args: Subset<T, YieldStrategyAggregateArgs>): Prisma.PrismaPromise<GetYieldStrategyAggregateType<T>>

    /**
     * Group by YieldStrategy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldStrategyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YieldStrategyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YieldStrategyGroupByArgs['orderBy'] }
        : { orderBy?: YieldStrategyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YieldStrategyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYieldStrategyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YieldStrategy model
   */
  readonly fields: YieldStrategyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YieldStrategy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YieldStrategyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    yieldEarnings<T extends YieldStrategy$yieldEarningsArgs<ExtArgs> = {}>(args?: Subset<T, YieldStrategy$yieldEarningsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YieldStrategy model
   */ 
  interface YieldStrategyFieldRefs {
    readonly id: FieldRef<"YieldStrategy", 'String'>
    readonly name: FieldRef<"YieldStrategy", 'String'>
    readonly description: FieldRef<"YieldStrategy", 'String'>
    readonly protocolName: FieldRef<"YieldStrategy", 'String'>
    readonly chainId: FieldRef<"YieldStrategy", 'String'>
    readonly contractAddress: FieldRef<"YieldStrategy", 'String'>
    readonly strategyType: FieldRef<"YieldStrategy", 'YieldStrategyType'>
    readonly expectedAPY: FieldRef<"YieldStrategy", 'Decimal'>
    readonly riskLevel: FieldRef<"YieldStrategy", 'RiskLevel'>
    readonly minAmount: FieldRef<"YieldStrategy", 'Decimal'>
    readonly maxAmount: FieldRef<"YieldStrategy", 'Decimal'>
    readonly isActive: FieldRef<"YieldStrategy", 'Boolean'>
    readonly strategyConfig: FieldRef<"YieldStrategy", 'Json'>
    readonly totalValueLocked: FieldRef<"YieldStrategy", 'Decimal'>
    readonly actualAPY: FieldRef<"YieldStrategy", 'Decimal'>
    readonly createdAt: FieldRef<"YieldStrategy", 'DateTime'>
    readonly updatedAt: FieldRef<"YieldStrategy", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * YieldStrategy findUnique
   */
  export type YieldStrategyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter, which YieldStrategy to fetch.
     */
    where: YieldStrategyWhereUniqueInput
  }

  /**
   * YieldStrategy findUniqueOrThrow
   */
  export type YieldStrategyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter, which YieldStrategy to fetch.
     */
    where: YieldStrategyWhereUniqueInput
  }

  /**
   * YieldStrategy findFirst
   */
  export type YieldStrategyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter, which YieldStrategy to fetch.
     */
    where?: YieldStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldStrategies to fetch.
     */
    orderBy?: YieldStrategyOrderByWithRelationInput | YieldStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YieldStrategies.
     */
    cursor?: YieldStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YieldStrategies.
     */
    distinct?: YieldStrategyScalarFieldEnum | YieldStrategyScalarFieldEnum[]
  }

  /**
   * YieldStrategy findFirstOrThrow
   */
  export type YieldStrategyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter, which YieldStrategy to fetch.
     */
    where?: YieldStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldStrategies to fetch.
     */
    orderBy?: YieldStrategyOrderByWithRelationInput | YieldStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YieldStrategies.
     */
    cursor?: YieldStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldStrategies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YieldStrategies.
     */
    distinct?: YieldStrategyScalarFieldEnum | YieldStrategyScalarFieldEnum[]
  }

  /**
   * YieldStrategy findMany
   */
  export type YieldStrategyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter, which YieldStrategies to fetch.
     */
    where?: YieldStrategyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldStrategies to fetch.
     */
    orderBy?: YieldStrategyOrderByWithRelationInput | YieldStrategyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YieldStrategies.
     */
    cursor?: YieldStrategyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldStrategies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldStrategies.
     */
    skip?: number
    distinct?: YieldStrategyScalarFieldEnum | YieldStrategyScalarFieldEnum[]
  }

  /**
   * YieldStrategy create
   */
  export type YieldStrategyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * The data needed to create a YieldStrategy.
     */
    data: XOR<YieldStrategyCreateInput, YieldStrategyUncheckedCreateInput>
  }

  /**
   * YieldStrategy createMany
   */
  export type YieldStrategyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YieldStrategies.
     */
    data: YieldStrategyCreateManyInput | YieldStrategyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YieldStrategy createManyAndReturn
   */
  export type YieldStrategyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many YieldStrategies.
     */
    data: YieldStrategyCreateManyInput | YieldStrategyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YieldStrategy update
   */
  export type YieldStrategyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * The data needed to update a YieldStrategy.
     */
    data: XOR<YieldStrategyUpdateInput, YieldStrategyUncheckedUpdateInput>
    /**
     * Choose, which YieldStrategy to update.
     */
    where: YieldStrategyWhereUniqueInput
  }

  /**
   * YieldStrategy updateMany
   */
  export type YieldStrategyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YieldStrategies.
     */
    data: XOR<YieldStrategyUpdateManyMutationInput, YieldStrategyUncheckedUpdateManyInput>
    /**
     * Filter which YieldStrategies to update
     */
    where?: YieldStrategyWhereInput
  }

  /**
   * YieldStrategy upsert
   */
  export type YieldStrategyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * The filter to search for the YieldStrategy to update in case it exists.
     */
    where: YieldStrategyWhereUniqueInput
    /**
     * In case the YieldStrategy found by the `where` argument doesn't exist, create a new YieldStrategy with this data.
     */
    create: XOR<YieldStrategyCreateInput, YieldStrategyUncheckedCreateInput>
    /**
     * In case the YieldStrategy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YieldStrategyUpdateInput, YieldStrategyUncheckedUpdateInput>
  }

  /**
   * YieldStrategy delete
   */
  export type YieldStrategyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
    /**
     * Filter which YieldStrategy to delete.
     */
    where: YieldStrategyWhereUniqueInput
  }

  /**
   * YieldStrategy deleteMany
   */
  export type YieldStrategyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YieldStrategies to delete
     */
    where?: YieldStrategyWhereInput
  }

  /**
   * YieldStrategy.yieldEarnings
   */
  export type YieldStrategy$yieldEarningsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    where?: YieldEarningWhereInput
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    cursor?: YieldEarningWhereUniqueInput
    take?: number
    skip?: number
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * YieldStrategy without action
   */
  export type YieldStrategyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldStrategy
     */
    select?: YieldStrategySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldStrategyInclude<ExtArgs> | null
  }


  /**
   * Model YieldEarning
   */

  export type AggregateYieldEarning = {
    _count: YieldEarningCountAggregateOutputType | null
    _avg: YieldEarningAvgAggregateOutputType | null
    _sum: YieldEarningSumAggregateOutputType | null
    _min: YieldEarningMinAggregateOutputType | null
    _max: YieldEarningMaxAggregateOutputType | null
  }

  export type YieldEarningAvgAggregateOutputType = {
    principalAmount: Decimal | null
    yieldAmount: Decimal | null
    feeAmount: Decimal | null
    netYieldAmount: Decimal | null
    duration: number | null
    actualAPY: Decimal | null
  }

  export type YieldEarningSumAggregateOutputType = {
    principalAmount: Decimal | null
    yieldAmount: Decimal | null
    feeAmount: Decimal | null
    netYieldAmount: Decimal | null
    duration: number | null
    actualAPY: Decimal | null
  }

  export type YieldEarningMinAggregateOutputType = {
    id: string | null
    userId: string | null
    paymentId: string | null
    strategyId: string | null
    principalAmount: Decimal | null
    yieldAmount: Decimal | null
    feeAmount: Decimal | null
    netYieldAmount: Decimal | null
    tokenAddress: string | null
    tokenSymbol: string | null
    chainId: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    actualAPY: Decimal | null
    status: $Enums.YieldStatus | null
    transactionHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YieldEarningMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    paymentId: string | null
    strategyId: string | null
    principalAmount: Decimal | null
    yieldAmount: Decimal | null
    feeAmount: Decimal | null
    netYieldAmount: Decimal | null
    tokenAddress: string | null
    tokenSymbol: string | null
    chainId: string | null
    startTime: Date | null
    endTime: Date | null
    duration: number | null
    actualAPY: Decimal | null
    status: $Enums.YieldStatus | null
    transactionHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type YieldEarningCountAggregateOutputType = {
    id: number
    userId: number
    paymentId: number
    strategyId: number
    principalAmount: number
    yieldAmount: number
    feeAmount: number
    netYieldAmount: number
    tokenAddress: number
    tokenSymbol: number
    chainId: number
    startTime: number
    endTime: number
    duration: number
    actualAPY: number
    status: number
    transactionHash: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type YieldEarningAvgAggregateInputType = {
    principalAmount?: true
    yieldAmount?: true
    feeAmount?: true
    netYieldAmount?: true
    duration?: true
    actualAPY?: true
  }

  export type YieldEarningSumAggregateInputType = {
    principalAmount?: true
    yieldAmount?: true
    feeAmount?: true
    netYieldAmount?: true
    duration?: true
    actualAPY?: true
  }

  export type YieldEarningMinAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    strategyId?: true
    principalAmount?: true
    yieldAmount?: true
    feeAmount?: true
    netYieldAmount?: true
    tokenAddress?: true
    tokenSymbol?: true
    chainId?: true
    startTime?: true
    endTime?: true
    duration?: true
    actualAPY?: true
    status?: true
    transactionHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YieldEarningMaxAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    strategyId?: true
    principalAmount?: true
    yieldAmount?: true
    feeAmount?: true
    netYieldAmount?: true
    tokenAddress?: true
    tokenSymbol?: true
    chainId?: true
    startTime?: true
    endTime?: true
    duration?: true
    actualAPY?: true
    status?: true
    transactionHash?: true
    createdAt?: true
    updatedAt?: true
  }

  export type YieldEarningCountAggregateInputType = {
    id?: true
    userId?: true
    paymentId?: true
    strategyId?: true
    principalAmount?: true
    yieldAmount?: true
    feeAmount?: true
    netYieldAmount?: true
    tokenAddress?: true
    tokenSymbol?: true
    chainId?: true
    startTime?: true
    endTime?: true
    duration?: true
    actualAPY?: true
    status?: true
    transactionHash?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type YieldEarningAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YieldEarning to aggregate.
     */
    where?: YieldEarningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldEarnings to fetch.
     */
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: YieldEarningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldEarnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldEarnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned YieldEarnings
    **/
    _count?: true | YieldEarningCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: YieldEarningAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: YieldEarningSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: YieldEarningMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: YieldEarningMaxAggregateInputType
  }

  export type GetYieldEarningAggregateType<T extends YieldEarningAggregateArgs> = {
        [P in keyof T & keyof AggregateYieldEarning]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateYieldEarning[P]>
      : GetScalarType<T[P], AggregateYieldEarning[P]>
  }




  export type YieldEarningGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: YieldEarningWhereInput
    orderBy?: YieldEarningOrderByWithAggregationInput | YieldEarningOrderByWithAggregationInput[]
    by: YieldEarningScalarFieldEnum[] | YieldEarningScalarFieldEnum
    having?: YieldEarningScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: YieldEarningCountAggregateInputType | true
    _avg?: YieldEarningAvgAggregateInputType
    _sum?: YieldEarningSumAggregateInputType
    _min?: YieldEarningMinAggregateInputType
    _max?: YieldEarningMaxAggregateInputType
  }

  export type YieldEarningGroupByOutputType = {
    id: string
    userId: string
    paymentId: string | null
    strategyId: string
    principalAmount: Decimal
    yieldAmount: Decimal
    feeAmount: Decimal
    netYieldAmount: Decimal
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date
    endTime: Date | null
    duration: number | null
    actualAPY: Decimal | null
    status: $Enums.YieldStatus
    transactionHash: string | null
    createdAt: Date
    updatedAt: Date
    _count: YieldEarningCountAggregateOutputType | null
    _avg: YieldEarningAvgAggregateOutputType | null
    _sum: YieldEarningSumAggregateOutputType | null
    _min: YieldEarningMinAggregateOutputType | null
    _max: YieldEarningMaxAggregateOutputType | null
  }

  type GetYieldEarningGroupByPayload<T extends YieldEarningGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<YieldEarningGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof YieldEarningGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], YieldEarningGroupByOutputType[P]>
            : GetScalarType<T[P], YieldEarningGroupByOutputType[P]>
        }
      >
    >


  export type YieldEarningSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    strategyId?: boolean
    principalAmount?: boolean
    yieldAmount?: boolean
    feeAmount?: boolean
    netYieldAmount?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    chainId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    actualAPY?: boolean
    status?: boolean
    transactionHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment?: boolean | YieldEarning$paymentArgs<ExtArgs>
    strategy?: boolean | YieldStrategyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yieldEarning"]>

  export type YieldEarningSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    strategyId?: boolean
    principalAmount?: boolean
    yieldAmount?: boolean
    feeAmount?: boolean
    netYieldAmount?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    chainId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    actualAPY?: boolean
    status?: boolean
    transactionHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment?: boolean | YieldEarning$paymentArgs<ExtArgs>
    strategy?: boolean | YieldStrategyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["yieldEarning"]>

  export type YieldEarningSelectScalar = {
    id?: boolean
    userId?: boolean
    paymentId?: boolean
    strategyId?: boolean
    principalAmount?: boolean
    yieldAmount?: boolean
    feeAmount?: boolean
    netYieldAmount?: boolean
    tokenAddress?: boolean
    tokenSymbol?: boolean
    chainId?: boolean
    startTime?: boolean
    endTime?: boolean
    duration?: boolean
    actualAPY?: boolean
    status?: boolean
    transactionHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type YieldEarningInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment?: boolean | YieldEarning$paymentArgs<ExtArgs>
    strategy?: boolean | YieldStrategyDefaultArgs<ExtArgs>
  }
  export type YieldEarningIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    payment?: boolean | YieldEarning$paymentArgs<ExtArgs>
    strategy?: boolean | YieldStrategyDefaultArgs<ExtArgs>
  }

  export type $YieldEarningPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "YieldEarning"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs> | null
      strategy: Prisma.$YieldStrategyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      paymentId: string | null
      strategyId: string
      principalAmount: Prisma.Decimal
      yieldAmount: Prisma.Decimal
      feeAmount: Prisma.Decimal
      netYieldAmount: Prisma.Decimal
      tokenAddress: string
      tokenSymbol: string
      chainId: string
      startTime: Date
      endTime: Date | null
      duration: number | null
      actualAPY: Prisma.Decimal | null
      status: $Enums.YieldStatus
      transactionHash: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["yieldEarning"]>
    composites: {}
  }

  type YieldEarningGetPayload<S extends boolean | null | undefined | YieldEarningDefaultArgs> = $Result.GetResult<Prisma.$YieldEarningPayload, S>

  type YieldEarningCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<YieldEarningFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: YieldEarningCountAggregateInputType | true
    }

  export interface YieldEarningDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['YieldEarning'], meta: { name: 'YieldEarning' } }
    /**
     * Find zero or one YieldEarning that matches the filter.
     * @param {YieldEarningFindUniqueArgs} args - Arguments to find a YieldEarning
     * @example
     * // Get one YieldEarning
     * const yieldEarning = await prisma.yieldEarning.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends YieldEarningFindUniqueArgs>(args: SelectSubset<T, YieldEarningFindUniqueArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one YieldEarning that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {YieldEarningFindUniqueOrThrowArgs} args - Arguments to find a YieldEarning
     * @example
     * // Get one YieldEarning
     * const yieldEarning = await prisma.yieldEarning.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends YieldEarningFindUniqueOrThrowArgs>(args: SelectSubset<T, YieldEarningFindUniqueOrThrowArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first YieldEarning that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningFindFirstArgs} args - Arguments to find a YieldEarning
     * @example
     * // Get one YieldEarning
     * const yieldEarning = await prisma.yieldEarning.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends YieldEarningFindFirstArgs>(args?: SelectSubset<T, YieldEarningFindFirstArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first YieldEarning that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningFindFirstOrThrowArgs} args - Arguments to find a YieldEarning
     * @example
     * // Get one YieldEarning
     * const yieldEarning = await prisma.yieldEarning.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends YieldEarningFindFirstOrThrowArgs>(args?: SelectSubset<T, YieldEarningFindFirstOrThrowArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more YieldEarnings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all YieldEarnings
     * const yieldEarnings = await prisma.yieldEarning.findMany()
     * 
     * // Get first 10 YieldEarnings
     * const yieldEarnings = await prisma.yieldEarning.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const yieldEarningWithIdOnly = await prisma.yieldEarning.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends YieldEarningFindManyArgs>(args?: SelectSubset<T, YieldEarningFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a YieldEarning.
     * @param {YieldEarningCreateArgs} args - Arguments to create a YieldEarning.
     * @example
     * // Create one YieldEarning
     * const YieldEarning = await prisma.yieldEarning.create({
     *   data: {
     *     // ... data to create a YieldEarning
     *   }
     * })
     * 
     */
    create<T extends YieldEarningCreateArgs>(args: SelectSubset<T, YieldEarningCreateArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many YieldEarnings.
     * @param {YieldEarningCreateManyArgs} args - Arguments to create many YieldEarnings.
     * @example
     * // Create many YieldEarnings
     * const yieldEarning = await prisma.yieldEarning.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends YieldEarningCreateManyArgs>(args?: SelectSubset<T, YieldEarningCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many YieldEarnings and returns the data saved in the database.
     * @param {YieldEarningCreateManyAndReturnArgs} args - Arguments to create many YieldEarnings.
     * @example
     * // Create many YieldEarnings
     * const yieldEarning = await prisma.yieldEarning.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many YieldEarnings and only return the `id`
     * const yieldEarningWithIdOnly = await prisma.yieldEarning.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends YieldEarningCreateManyAndReturnArgs>(args?: SelectSubset<T, YieldEarningCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a YieldEarning.
     * @param {YieldEarningDeleteArgs} args - Arguments to delete one YieldEarning.
     * @example
     * // Delete one YieldEarning
     * const YieldEarning = await prisma.yieldEarning.delete({
     *   where: {
     *     // ... filter to delete one YieldEarning
     *   }
     * })
     * 
     */
    delete<T extends YieldEarningDeleteArgs>(args: SelectSubset<T, YieldEarningDeleteArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one YieldEarning.
     * @param {YieldEarningUpdateArgs} args - Arguments to update one YieldEarning.
     * @example
     * // Update one YieldEarning
     * const yieldEarning = await prisma.yieldEarning.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends YieldEarningUpdateArgs>(args: SelectSubset<T, YieldEarningUpdateArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more YieldEarnings.
     * @param {YieldEarningDeleteManyArgs} args - Arguments to filter YieldEarnings to delete.
     * @example
     * // Delete a few YieldEarnings
     * const { count } = await prisma.yieldEarning.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends YieldEarningDeleteManyArgs>(args?: SelectSubset<T, YieldEarningDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more YieldEarnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many YieldEarnings
     * const yieldEarning = await prisma.yieldEarning.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends YieldEarningUpdateManyArgs>(args: SelectSubset<T, YieldEarningUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one YieldEarning.
     * @param {YieldEarningUpsertArgs} args - Arguments to update or create a YieldEarning.
     * @example
     * // Update or create a YieldEarning
     * const yieldEarning = await prisma.yieldEarning.upsert({
     *   create: {
     *     // ... data to create a YieldEarning
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the YieldEarning we want to update
     *   }
     * })
     */
    upsert<T extends YieldEarningUpsertArgs>(args: SelectSubset<T, YieldEarningUpsertArgs<ExtArgs>>): Prisma__YieldEarningClient<$Result.GetResult<Prisma.$YieldEarningPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of YieldEarnings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningCountArgs} args - Arguments to filter YieldEarnings to count.
     * @example
     * // Count the number of YieldEarnings
     * const count = await prisma.yieldEarning.count({
     *   where: {
     *     // ... the filter for the YieldEarnings we want to count
     *   }
     * })
    **/
    count<T extends YieldEarningCountArgs>(
      args?: Subset<T, YieldEarningCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], YieldEarningCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a YieldEarning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends YieldEarningAggregateArgs>(args: Subset<T, YieldEarningAggregateArgs>): Prisma.PrismaPromise<GetYieldEarningAggregateType<T>>

    /**
     * Group by YieldEarning.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {YieldEarningGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends YieldEarningGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: YieldEarningGroupByArgs['orderBy'] }
        : { orderBy?: YieldEarningGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, YieldEarningGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetYieldEarningGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the YieldEarning model
   */
  readonly fields: YieldEarningFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for YieldEarning.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__YieldEarningClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    payment<T extends YieldEarning$paymentArgs<ExtArgs> = {}>(args?: Subset<T, YieldEarning$paymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    strategy<T extends YieldStrategyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, YieldStrategyDefaultArgs<ExtArgs>>): Prisma__YieldStrategyClient<$Result.GetResult<Prisma.$YieldStrategyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the YieldEarning model
   */ 
  interface YieldEarningFieldRefs {
    readonly id: FieldRef<"YieldEarning", 'String'>
    readonly userId: FieldRef<"YieldEarning", 'String'>
    readonly paymentId: FieldRef<"YieldEarning", 'String'>
    readonly strategyId: FieldRef<"YieldEarning", 'String'>
    readonly principalAmount: FieldRef<"YieldEarning", 'Decimal'>
    readonly yieldAmount: FieldRef<"YieldEarning", 'Decimal'>
    readonly feeAmount: FieldRef<"YieldEarning", 'Decimal'>
    readonly netYieldAmount: FieldRef<"YieldEarning", 'Decimal'>
    readonly tokenAddress: FieldRef<"YieldEarning", 'String'>
    readonly tokenSymbol: FieldRef<"YieldEarning", 'String'>
    readonly chainId: FieldRef<"YieldEarning", 'String'>
    readonly startTime: FieldRef<"YieldEarning", 'DateTime'>
    readonly endTime: FieldRef<"YieldEarning", 'DateTime'>
    readonly duration: FieldRef<"YieldEarning", 'Int'>
    readonly actualAPY: FieldRef<"YieldEarning", 'Decimal'>
    readonly status: FieldRef<"YieldEarning", 'YieldStatus'>
    readonly transactionHash: FieldRef<"YieldEarning", 'String'>
    readonly createdAt: FieldRef<"YieldEarning", 'DateTime'>
    readonly updatedAt: FieldRef<"YieldEarning", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * YieldEarning findUnique
   */
  export type YieldEarningFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter, which YieldEarning to fetch.
     */
    where: YieldEarningWhereUniqueInput
  }

  /**
   * YieldEarning findUniqueOrThrow
   */
  export type YieldEarningFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter, which YieldEarning to fetch.
     */
    where: YieldEarningWhereUniqueInput
  }

  /**
   * YieldEarning findFirst
   */
  export type YieldEarningFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter, which YieldEarning to fetch.
     */
    where?: YieldEarningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldEarnings to fetch.
     */
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YieldEarnings.
     */
    cursor?: YieldEarningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldEarnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldEarnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YieldEarnings.
     */
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * YieldEarning findFirstOrThrow
   */
  export type YieldEarningFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter, which YieldEarning to fetch.
     */
    where?: YieldEarningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldEarnings to fetch.
     */
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for YieldEarnings.
     */
    cursor?: YieldEarningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldEarnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldEarnings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of YieldEarnings.
     */
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * YieldEarning findMany
   */
  export type YieldEarningFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter, which YieldEarnings to fetch.
     */
    where?: YieldEarningWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of YieldEarnings to fetch.
     */
    orderBy?: YieldEarningOrderByWithRelationInput | YieldEarningOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing YieldEarnings.
     */
    cursor?: YieldEarningWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` YieldEarnings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` YieldEarnings.
     */
    skip?: number
    distinct?: YieldEarningScalarFieldEnum | YieldEarningScalarFieldEnum[]
  }

  /**
   * YieldEarning create
   */
  export type YieldEarningCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * The data needed to create a YieldEarning.
     */
    data: XOR<YieldEarningCreateInput, YieldEarningUncheckedCreateInput>
  }

  /**
   * YieldEarning createMany
   */
  export type YieldEarningCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many YieldEarnings.
     */
    data: YieldEarningCreateManyInput | YieldEarningCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * YieldEarning createManyAndReturn
   */
  export type YieldEarningCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many YieldEarnings.
     */
    data: YieldEarningCreateManyInput | YieldEarningCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * YieldEarning update
   */
  export type YieldEarningUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * The data needed to update a YieldEarning.
     */
    data: XOR<YieldEarningUpdateInput, YieldEarningUncheckedUpdateInput>
    /**
     * Choose, which YieldEarning to update.
     */
    where: YieldEarningWhereUniqueInput
  }

  /**
   * YieldEarning updateMany
   */
  export type YieldEarningUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update YieldEarnings.
     */
    data: XOR<YieldEarningUpdateManyMutationInput, YieldEarningUncheckedUpdateManyInput>
    /**
     * Filter which YieldEarnings to update
     */
    where?: YieldEarningWhereInput
  }

  /**
   * YieldEarning upsert
   */
  export type YieldEarningUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * The filter to search for the YieldEarning to update in case it exists.
     */
    where: YieldEarningWhereUniqueInput
    /**
     * In case the YieldEarning found by the `where` argument doesn't exist, create a new YieldEarning with this data.
     */
    create: XOR<YieldEarningCreateInput, YieldEarningUncheckedCreateInput>
    /**
     * In case the YieldEarning was found with the provided `where` argument, update it with this data.
     */
    update: XOR<YieldEarningUpdateInput, YieldEarningUncheckedUpdateInput>
  }

  /**
   * YieldEarning delete
   */
  export type YieldEarningDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
    /**
     * Filter which YieldEarning to delete.
     */
    where: YieldEarningWhereUniqueInput
  }

  /**
   * YieldEarning deleteMany
   */
  export type YieldEarningDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which YieldEarnings to delete
     */
    where?: YieldEarningWhereInput
  }

  /**
   * YieldEarning.payment
   */
  export type YieldEarning$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * YieldEarning without action
   */
  export type YieldEarningDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the YieldEarning
     */
    select?: YieldEarningSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: YieldEarningInclude<ExtArgs> | null
  }


  /**
   * Model Merchant
   */

  export type AggregateMerchant = {
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  export type MerchantMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    website: string | null
    description: string | null
    category: string | null
    businessType: $Enums.BusinessType | null
    registrationNumber: string | null
    taxId: string | null
    defaultCurrency: string | null
    webhookUrl: string | null
    isActive: boolean | null
    verificationStatus: $Enums.VerificationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    website: string | null
    description: string | null
    category: string | null
    businessType: $Enums.BusinessType | null
    registrationNumber: string | null
    taxId: string | null
    defaultCurrency: string | null
    webhookUrl: string | null
    isActive: boolean | null
    verificationStatus: $Enums.VerificationStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MerchantCountAggregateOutputType = {
    id: number
    name: number
    email: number
    website: number
    description: number
    category: number
    businessType: number
    registrationNumber: number
    taxId: number
    defaultCurrency: number
    supportedChains: number
    webhookUrl: number
    isActive: number
    verificationStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MerchantMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    website?: true
    description?: true
    category?: true
    businessType?: true
    registrationNumber?: true
    taxId?: true
    defaultCurrency?: true
    webhookUrl?: true
    isActive?: true
    verificationStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    website?: true
    description?: true
    category?: true
    businessType?: true
    registrationNumber?: true
    taxId?: true
    defaultCurrency?: true
    webhookUrl?: true
    isActive?: true
    verificationStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MerchantCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    website?: true
    description?: true
    category?: true
    businessType?: true
    registrationNumber?: true
    taxId?: true
    defaultCurrency?: true
    supportedChains?: true
    webhookUrl?: true
    isActive?: true
    verificationStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MerchantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchant to aggregate.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Merchants
    **/
    _count?: true | MerchantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MerchantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MerchantMaxAggregateInputType
  }

  export type GetMerchantAggregateType<T extends MerchantAggregateArgs> = {
        [P in keyof T & keyof AggregateMerchant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMerchant[P]>
      : GetScalarType<T[P], AggregateMerchant[P]>
  }




  export type MerchantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MerchantWhereInput
    orderBy?: MerchantOrderByWithAggregationInput | MerchantOrderByWithAggregationInput[]
    by: MerchantScalarFieldEnum[] | MerchantScalarFieldEnum
    having?: MerchantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MerchantCountAggregateInputType | true
    _min?: MerchantMinAggregateInputType
    _max?: MerchantMaxAggregateInputType
  }

  export type MerchantGroupByOutputType = {
    id: string
    name: string
    email: string
    website: string | null
    description: string | null
    category: string | null
    businessType: $Enums.BusinessType
    registrationNumber: string | null
    taxId: string | null
    defaultCurrency: string
    supportedChains: string[]
    webhookUrl: string | null
    isActive: boolean
    verificationStatus: $Enums.VerificationStatus
    createdAt: Date
    updatedAt: Date
    _count: MerchantCountAggregateOutputType | null
    _min: MerchantMinAggregateOutputType | null
    _max: MerchantMaxAggregateOutputType | null
  }

  type GetMerchantGroupByPayload<T extends MerchantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MerchantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MerchantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MerchantGroupByOutputType[P]>
            : GetScalarType<T[P], MerchantGroupByOutputType[P]>
        }
      >
    >


  export type MerchantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    category?: boolean
    businessType?: boolean
    registrationNumber?: boolean
    taxId?: boolean
    defaultCurrency?: boolean
    supportedChains?: boolean
    webhookUrl?: boolean
    isActive?: boolean
    verificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    payments?: boolean | Merchant$paymentsArgs<ExtArgs>
    apiKeys?: boolean | Merchant$apiKeysArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    category?: boolean
    businessType?: boolean
    registrationNumber?: boolean
    taxId?: boolean
    defaultCurrency?: boolean
    supportedChains?: boolean
    webhookUrl?: boolean
    isActive?: boolean
    verificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["merchant"]>

  export type MerchantSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    website?: boolean
    description?: boolean
    category?: boolean
    businessType?: boolean
    registrationNumber?: boolean
    taxId?: boolean
    defaultCurrency?: boolean
    supportedChains?: boolean
    webhookUrl?: boolean
    isActive?: boolean
    verificationStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MerchantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payments?: boolean | Merchant$paymentsArgs<ExtArgs>
    apiKeys?: boolean | Merchant$apiKeysArgs<ExtArgs>
    _count?: boolean | MerchantCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MerchantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MerchantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Merchant"
    objects: {
      payments: Prisma.$PaymentPayload<ExtArgs>[]
      apiKeys: Prisma.$ApiKeyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      website: string | null
      description: string | null
      category: string | null
      businessType: $Enums.BusinessType
      registrationNumber: string | null
      taxId: string | null
      defaultCurrency: string
      supportedChains: string[]
      webhookUrl: string | null
      isActive: boolean
      verificationStatus: $Enums.VerificationStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["merchant"]>
    composites: {}
  }

  type MerchantGetPayload<S extends boolean | null | undefined | MerchantDefaultArgs> = $Result.GetResult<Prisma.$MerchantPayload, S>

  type MerchantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MerchantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MerchantCountAggregateInputType | true
    }

  export interface MerchantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Merchant'], meta: { name: 'Merchant' } }
    /**
     * Find zero or one Merchant that matches the filter.
     * @param {MerchantFindUniqueArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MerchantFindUniqueArgs>(args: SelectSubset<T, MerchantFindUniqueArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Merchant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MerchantFindUniqueOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MerchantFindUniqueOrThrowArgs>(args: SelectSubset<T, MerchantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Merchant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MerchantFindFirstArgs>(args?: SelectSubset<T, MerchantFindFirstArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Merchant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindFirstOrThrowArgs} args - Arguments to find a Merchant
     * @example
     * // Get one Merchant
     * const merchant = await prisma.merchant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MerchantFindFirstOrThrowArgs>(args?: SelectSubset<T, MerchantFindFirstOrThrowArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Merchants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Merchants
     * const merchants = await prisma.merchant.findMany()
     * 
     * // Get first 10 Merchants
     * const merchants = await prisma.merchant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const merchantWithIdOnly = await prisma.merchant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MerchantFindManyArgs>(args?: SelectSubset<T, MerchantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Merchant.
     * @param {MerchantCreateArgs} args - Arguments to create a Merchant.
     * @example
     * // Create one Merchant
     * const Merchant = await prisma.merchant.create({
     *   data: {
     *     // ... data to create a Merchant
     *   }
     * })
     * 
     */
    create<T extends MerchantCreateArgs>(args: SelectSubset<T, MerchantCreateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Merchants.
     * @param {MerchantCreateManyArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MerchantCreateManyArgs>(args?: SelectSubset<T, MerchantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Merchants and returns the data saved in the database.
     * @param {MerchantCreateManyAndReturnArgs} args - Arguments to create many Merchants.
     * @example
     * // Create many Merchants
     * const merchant = await prisma.merchant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Merchants and only return the `id`
     * const merchantWithIdOnly = await prisma.merchant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MerchantCreateManyAndReturnArgs>(args?: SelectSubset<T, MerchantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Merchant.
     * @param {MerchantDeleteArgs} args - Arguments to delete one Merchant.
     * @example
     * // Delete one Merchant
     * const Merchant = await prisma.merchant.delete({
     *   where: {
     *     // ... filter to delete one Merchant
     *   }
     * })
     * 
     */
    delete<T extends MerchantDeleteArgs>(args: SelectSubset<T, MerchantDeleteArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Merchant.
     * @param {MerchantUpdateArgs} args - Arguments to update one Merchant.
     * @example
     * // Update one Merchant
     * const merchant = await prisma.merchant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MerchantUpdateArgs>(args: SelectSubset<T, MerchantUpdateArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Merchants.
     * @param {MerchantDeleteManyArgs} args - Arguments to filter Merchants to delete.
     * @example
     * // Delete a few Merchants
     * const { count } = await prisma.merchant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MerchantDeleteManyArgs>(args?: SelectSubset<T, MerchantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Merchants
     * const merchant = await prisma.merchant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MerchantUpdateManyArgs>(args: SelectSubset<T, MerchantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Merchant.
     * @param {MerchantUpsertArgs} args - Arguments to update or create a Merchant.
     * @example
     * // Update or create a Merchant
     * const merchant = await prisma.merchant.upsert({
     *   create: {
     *     // ... data to create a Merchant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Merchant we want to update
     *   }
     * })
     */
    upsert<T extends MerchantUpsertArgs>(args: SelectSubset<T, MerchantUpsertArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Merchants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantCountArgs} args - Arguments to filter Merchants to count.
     * @example
     * // Count the number of Merchants
     * const count = await prisma.merchant.count({
     *   where: {
     *     // ... the filter for the Merchants we want to count
     *   }
     * })
    **/
    count<T extends MerchantCountArgs>(
      args?: Subset<T, MerchantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MerchantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MerchantAggregateArgs>(args: Subset<T, MerchantAggregateArgs>): Prisma.PrismaPromise<GetMerchantAggregateType<T>>

    /**
     * Group by Merchant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MerchantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MerchantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MerchantGroupByArgs['orderBy'] }
        : { orderBy?: MerchantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MerchantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMerchantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Merchant model
   */
  readonly fields: MerchantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Merchant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MerchantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payments<T extends Merchant$paymentsArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany"> | Null>
    apiKeys<T extends Merchant$apiKeysArgs<ExtArgs> = {}>(args?: Subset<T, Merchant$apiKeysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Merchant model
   */ 
  interface MerchantFieldRefs {
    readonly id: FieldRef<"Merchant", 'String'>
    readonly name: FieldRef<"Merchant", 'String'>
    readonly email: FieldRef<"Merchant", 'String'>
    readonly website: FieldRef<"Merchant", 'String'>
    readonly description: FieldRef<"Merchant", 'String'>
    readonly category: FieldRef<"Merchant", 'String'>
    readonly businessType: FieldRef<"Merchant", 'BusinessType'>
    readonly registrationNumber: FieldRef<"Merchant", 'String'>
    readonly taxId: FieldRef<"Merchant", 'String'>
    readonly defaultCurrency: FieldRef<"Merchant", 'String'>
    readonly supportedChains: FieldRef<"Merchant", 'String[]'>
    readonly webhookUrl: FieldRef<"Merchant", 'String'>
    readonly isActive: FieldRef<"Merchant", 'Boolean'>
    readonly verificationStatus: FieldRef<"Merchant", 'VerificationStatus'>
    readonly createdAt: FieldRef<"Merchant", 'DateTime'>
    readonly updatedAt: FieldRef<"Merchant", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Merchant findUnique
   */
  export type MerchantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findUniqueOrThrow
   */
  export type MerchantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant findFirst
   */
  export type MerchantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findFirstOrThrow
   */
  export type MerchantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchant to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Merchants.
     */
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant findMany
   */
  export type MerchantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter, which Merchants to fetch.
     */
    where?: MerchantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Merchants to fetch.
     */
    orderBy?: MerchantOrderByWithRelationInput | MerchantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Merchants.
     */
    cursor?: MerchantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Merchants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Merchants.
     */
    skip?: number
    distinct?: MerchantScalarFieldEnum | MerchantScalarFieldEnum[]
  }

  /**
   * Merchant create
   */
  export type MerchantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to create a Merchant.
     */
    data: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
  }

  /**
   * Merchant createMany
   */
  export type MerchantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Merchant createManyAndReturn
   */
  export type MerchantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Merchants.
     */
    data: MerchantCreateManyInput | MerchantCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Merchant update
   */
  export type MerchantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The data needed to update a Merchant.
     */
    data: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
    /**
     * Choose, which Merchant to update.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant updateMany
   */
  export type MerchantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Merchants.
     */
    data: XOR<MerchantUpdateManyMutationInput, MerchantUncheckedUpdateManyInput>
    /**
     * Filter which Merchants to update
     */
    where?: MerchantWhereInput
  }

  /**
   * Merchant upsert
   */
  export type MerchantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * The filter to search for the Merchant to update in case it exists.
     */
    where: MerchantWhereUniqueInput
    /**
     * In case the Merchant found by the `where` argument doesn't exist, create a new Merchant with this data.
     */
    create: XOR<MerchantCreateInput, MerchantUncheckedCreateInput>
    /**
     * In case the Merchant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MerchantUpdateInput, MerchantUncheckedUpdateInput>
  }

  /**
   * Merchant delete
   */
  export type MerchantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    /**
     * Filter which Merchant to delete.
     */
    where: MerchantWhereUniqueInput
  }

  /**
   * Merchant deleteMany
   */
  export type MerchantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Merchants to delete
     */
    where?: MerchantWhereInput
  }

  /**
   * Merchant.payments
   */
  export type Merchant$paymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    cursor?: PaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Merchant.apiKeys
   */
  export type Merchant$apiKeysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    cursor?: ApiKeyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * Merchant without action
   */
  export type MerchantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
  }


  /**
   * Model ApiKey
   */

  export type AggregateApiKey = {
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  export type ApiKeyMinAggregateOutputType = {
    id: string | null
    userId: string | null
    merchantId: string | null
    keyHash: string | null
    keyPrefix: string | null
    name: string | null
    isActive: boolean | null
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApiKeyMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    merchantId: string | null
    keyHash: string | null
    keyPrefix: string | null
    name: string | null
    isActive: boolean | null
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ApiKeyCountAggregateOutputType = {
    id: number
    userId: number
    merchantId: number
    keyHash: number
    keyPrefix: number
    name: number
    permissions: number
    isActive: number
    lastUsedAt: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ApiKeyMinAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    keyHash?: true
    keyPrefix?: true
    name?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApiKeyMaxAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    keyHash?: true
    keyPrefix?: true
    name?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ApiKeyCountAggregateInputType = {
    id?: true
    userId?: true
    merchantId?: true
    keyHash?: true
    keyPrefix?: true
    name?: true
    permissions?: true
    isActive?: true
    lastUsedAt?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ApiKeyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKey to aggregate.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ApiKeys
    **/
    _count?: true | ApiKeyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiKeyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiKeyMaxAggregateInputType
  }

  export type GetApiKeyAggregateType<T extends ApiKeyAggregateArgs> = {
        [P in keyof T & keyof AggregateApiKey]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiKey[P]>
      : GetScalarType<T[P], AggregateApiKey[P]>
  }




  export type ApiKeyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApiKeyWhereInput
    orderBy?: ApiKeyOrderByWithAggregationInput | ApiKeyOrderByWithAggregationInput[]
    by: ApiKeyScalarFieldEnum[] | ApiKeyScalarFieldEnum
    having?: ApiKeyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiKeyCountAggregateInputType | true
    _min?: ApiKeyMinAggregateInputType
    _max?: ApiKeyMaxAggregateInputType
  }

  export type ApiKeyGroupByOutputType = {
    id: string
    userId: string | null
    merchantId: string | null
    keyHash: string
    keyPrefix: string
    name: string | null
    permissions: string[]
    isActive: boolean
    lastUsedAt: Date | null
    expiresAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: ApiKeyCountAggregateOutputType | null
    _min: ApiKeyMinAggregateOutputType | null
    _max: ApiKeyMaxAggregateOutputType | null
  }

  type GetApiKeyGroupByPayload<T extends ApiKeyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiKeyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiKeyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
            : GetScalarType<T[P], ApiKeyGroupByOutputType[P]>
        }
      >
    >


  export type ApiKeySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    keyHash?: boolean
    keyPrefix?: boolean
    name?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | ApiKey$userArgs<ExtArgs>
    merchant?: boolean | ApiKey$merchantArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    keyHash?: boolean
    keyPrefix?: boolean
    name?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | ApiKey$userArgs<ExtArgs>
    merchant?: boolean | ApiKey$merchantArgs<ExtArgs>
  }, ExtArgs["result"]["apiKey"]>

  export type ApiKeySelectScalar = {
    id?: boolean
    userId?: boolean
    merchantId?: boolean
    keyHash?: boolean
    keyPrefix?: boolean
    name?: boolean
    permissions?: boolean
    isActive?: boolean
    lastUsedAt?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ApiKeyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ApiKey$userArgs<ExtArgs>
    merchant?: boolean | ApiKey$merchantArgs<ExtArgs>
  }
  export type ApiKeyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | ApiKey$userArgs<ExtArgs>
    merchant?: boolean | ApiKey$merchantArgs<ExtArgs>
  }

  export type $ApiKeyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ApiKey"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      merchant: Prisma.$MerchantPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string | null
      merchantId: string | null
      keyHash: string
      keyPrefix: string
      name: string | null
      permissions: string[]
      isActive: boolean
      lastUsedAt: Date | null
      expiresAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["apiKey"]>
    composites: {}
  }

  type ApiKeyGetPayload<S extends boolean | null | undefined | ApiKeyDefaultArgs> = $Result.GetResult<Prisma.$ApiKeyPayload, S>

  type ApiKeyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApiKeyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApiKeyCountAggregateInputType | true
    }

  export interface ApiKeyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ApiKey'], meta: { name: 'ApiKey' } }
    /**
     * Find zero or one ApiKey that matches the filter.
     * @param {ApiKeyFindUniqueArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApiKeyFindUniqueArgs>(args: SelectSubset<T, ApiKeyFindUniqueArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ApiKey that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApiKeyFindUniqueOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApiKeyFindUniqueOrThrowArgs>(args: SelectSubset<T, ApiKeyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ApiKey that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApiKeyFindFirstArgs>(args?: SelectSubset<T, ApiKeyFindFirstArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ApiKey that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindFirstOrThrowArgs} args - Arguments to find a ApiKey
     * @example
     * // Get one ApiKey
     * const apiKey = await prisma.apiKey.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApiKeyFindFirstOrThrowArgs>(args?: SelectSubset<T, ApiKeyFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ApiKeys that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiKeys
     * const apiKeys = await prisma.apiKey.findMany()
     * 
     * // Get first 10 ApiKeys
     * const apiKeys = await prisma.apiKey.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApiKeyFindManyArgs>(args?: SelectSubset<T, ApiKeyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ApiKey.
     * @param {ApiKeyCreateArgs} args - Arguments to create a ApiKey.
     * @example
     * // Create one ApiKey
     * const ApiKey = await prisma.apiKey.create({
     *   data: {
     *     // ... data to create a ApiKey
     *   }
     * })
     * 
     */
    create<T extends ApiKeyCreateArgs>(args: SelectSubset<T, ApiKeyCreateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ApiKeys.
     * @param {ApiKeyCreateManyArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApiKeyCreateManyArgs>(args?: SelectSubset<T, ApiKeyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiKeys and returns the data saved in the database.
     * @param {ApiKeyCreateManyAndReturnArgs} args - Arguments to create many ApiKeys.
     * @example
     * // Create many ApiKeys
     * const apiKey = await prisma.apiKey.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiKeys and only return the `id`
     * const apiKeyWithIdOnly = await prisma.apiKey.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApiKeyCreateManyAndReturnArgs>(args?: SelectSubset<T, ApiKeyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ApiKey.
     * @param {ApiKeyDeleteArgs} args - Arguments to delete one ApiKey.
     * @example
     * // Delete one ApiKey
     * const ApiKey = await prisma.apiKey.delete({
     *   where: {
     *     // ... filter to delete one ApiKey
     *   }
     * })
     * 
     */
    delete<T extends ApiKeyDeleteArgs>(args: SelectSubset<T, ApiKeyDeleteArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ApiKey.
     * @param {ApiKeyUpdateArgs} args - Arguments to update one ApiKey.
     * @example
     * // Update one ApiKey
     * const apiKey = await prisma.apiKey.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApiKeyUpdateArgs>(args: SelectSubset<T, ApiKeyUpdateArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ApiKeys.
     * @param {ApiKeyDeleteManyArgs} args - Arguments to filter ApiKeys to delete.
     * @example
     * // Delete a few ApiKeys
     * const { count } = await prisma.apiKey.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApiKeyDeleteManyArgs>(args?: SelectSubset<T, ApiKeyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiKeys
     * const apiKey = await prisma.apiKey.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApiKeyUpdateManyArgs>(args: SelectSubset<T, ApiKeyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ApiKey.
     * @param {ApiKeyUpsertArgs} args - Arguments to update or create a ApiKey.
     * @example
     * // Update or create a ApiKey
     * const apiKey = await prisma.apiKey.upsert({
     *   create: {
     *     // ... data to create a ApiKey
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiKey we want to update
     *   }
     * })
     */
    upsert<T extends ApiKeyUpsertArgs>(args: SelectSubset<T, ApiKeyUpsertArgs<ExtArgs>>): Prisma__ApiKeyClient<$Result.GetResult<Prisma.$ApiKeyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ApiKeys.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyCountArgs} args - Arguments to filter ApiKeys to count.
     * @example
     * // Count the number of ApiKeys
     * const count = await prisma.apiKey.count({
     *   where: {
     *     // ... the filter for the ApiKeys we want to count
     *   }
     * })
    **/
    count<T extends ApiKeyCountArgs>(
      args?: Subset<T, ApiKeyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiKeyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiKeyAggregateArgs>(args: Subset<T, ApiKeyAggregateArgs>): Prisma.PrismaPromise<GetApiKeyAggregateType<T>>

    /**
     * Group by ApiKey.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiKeyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApiKeyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApiKeyGroupByArgs['orderBy'] }
        : { orderBy?: ApiKeyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApiKeyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiKeyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ApiKey model
   */
  readonly fields: ApiKeyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ApiKey.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApiKeyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends ApiKey$userArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    merchant<T extends ApiKey$merchantArgs<ExtArgs> = {}>(args?: Subset<T, ApiKey$merchantArgs<ExtArgs>>): Prisma__MerchantClient<$Result.GetResult<Prisma.$MerchantPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ApiKey model
   */ 
  interface ApiKeyFieldRefs {
    readonly id: FieldRef<"ApiKey", 'String'>
    readonly userId: FieldRef<"ApiKey", 'String'>
    readonly merchantId: FieldRef<"ApiKey", 'String'>
    readonly keyHash: FieldRef<"ApiKey", 'String'>
    readonly keyPrefix: FieldRef<"ApiKey", 'String'>
    readonly name: FieldRef<"ApiKey", 'String'>
    readonly permissions: FieldRef<"ApiKey", 'String[]'>
    readonly isActive: FieldRef<"ApiKey", 'Boolean'>
    readonly lastUsedAt: FieldRef<"ApiKey", 'DateTime'>
    readonly expiresAt: FieldRef<"ApiKey", 'DateTime'>
    readonly createdAt: FieldRef<"ApiKey", 'DateTime'>
    readonly updatedAt: FieldRef<"ApiKey", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ApiKey findUnique
   */
  export type ApiKeyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findUniqueOrThrow
   */
  export type ApiKeyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey findFirst
   */
  export type ApiKeyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findFirstOrThrow
   */
  export type ApiKeyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKey to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ApiKeys.
     */
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey findMany
   */
  export type ApiKeyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter, which ApiKeys to fetch.
     */
    where?: ApiKeyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ApiKeys to fetch.
     */
    orderBy?: ApiKeyOrderByWithRelationInput | ApiKeyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ApiKeys.
     */
    cursor?: ApiKeyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ApiKeys from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ApiKeys.
     */
    skip?: number
    distinct?: ApiKeyScalarFieldEnum | ApiKeyScalarFieldEnum[]
  }

  /**
   * ApiKey create
   */
  export type ApiKeyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to create a ApiKey.
     */
    data: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
  }

  /**
   * ApiKey createMany
   */
  export type ApiKeyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ApiKey createManyAndReturn
   */
  export type ApiKeyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ApiKeys.
     */
    data: ApiKeyCreateManyInput | ApiKeyCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ApiKey update
   */
  export type ApiKeyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The data needed to update a ApiKey.
     */
    data: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
    /**
     * Choose, which ApiKey to update.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey updateMany
   */
  export type ApiKeyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ApiKeys.
     */
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyInput>
    /**
     * Filter which ApiKeys to update
     */
    where?: ApiKeyWhereInput
  }

  /**
   * ApiKey upsert
   */
  export type ApiKeyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * The filter to search for the ApiKey to update in case it exists.
     */
    where: ApiKeyWhereUniqueInput
    /**
     * In case the ApiKey found by the `where` argument doesn't exist, create a new ApiKey with this data.
     */
    create: XOR<ApiKeyCreateInput, ApiKeyUncheckedCreateInput>
    /**
     * In case the ApiKey was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApiKeyUpdateInput, ApiKeyUncheckedUpdateInput>
  }

  /**
   * ApiKey delete
   */
  export type ApiKeyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
    /**
     * Filter which ApiKey to delete.
     */
    where: ApiKeyWhereUniqueInput
  }

  /**
   * ApiKey deleteMany
   */
  export type ApiKeyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ApiKeys to delete
     */
    where?: ApiKeyWhereInput
  }

  /**
   * ApiKey.user
   */
  export type ApiKey$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ApiKey.merchant
   */
  export type ApiKey$merchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Merchant
     */
    select?: MerchantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MerchantInclude<ExtArgs> | null
    where?: MerchantWhereInput
  }

  /**
   * ApiKey without action
   */
  export type ApiKeyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApiKey
     */
    select?: ApiKeySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApiKeyInclude<ExtArgs> | null
  }


  /**
   * Model CrossChainTransaction
   */

  export type AggregateCrossChainTransaction = {
    _count: CrossChainTransactionCountAggregateOutputType | null
    _avg: CrossChainTransactionAvgAggregateOutputType | null
    _sum: CrossChainTransactionSumAggregateOutputType | null
    _min: CrossChainTransactionMinAggregateOutputType | null
    _max: CrossChainTransactionMaxAggregateOutputType | null
  }

  export type CrossChainTransactionAvgAggregateOutputType = {
    sourceAmount: Decimal | null
    destinationAmount: Decimal | null
    bridgeFee: Decimal | null
  }

  export type CrossChainTransactionSumAggregateOutputType = {
    sourceAmount: Decimal | null
    destinationAmount: Decimal | null
    bridgeFee: Decimal | null
  }

  export type CrossChainTransactionMinAggregateOutputType = {
    id: string | null
    paymentId: string | null
    sourceChain: string | null
    destinationChain: string | null
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    bridgeTransactionId: string | null
    sourceAmount: Decimal | null
    destinationAmount: Decimal | null
    bridgeFee: Decimal | null
    sourceAddress: string | null
    destinationAddress: string | null
    bridgeAddress: string | null
    status: $Enums.CrossChainStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    sourceConfirmedAt: Date | null
    destConfirmedAt: Date | null
  }

  export type CrossChainTransactionMaxAggregateOutputType = {
    id: string | null
    paymentId: string | null
    sourceChain: string | null
    destinationChain: string | null
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    bridgeTransactionId: string | null
    sourceAmount: Decimal | null
    destinationAmount: Decimal | null
    bridgeFee: Decimal | null
    sourceAddress: string | null
    destinationAddress: string | null
    bridgeAddress: string | null
    status: $Enums.CrossChainStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    sourceConfirmedAt: Date | null
    destConfirmedAt: Date | null
  }

  export type CrossChainTransactionCountAggregateOutputType = {
    id: number
    paymentId: number
    sourceChain: number
    destinationChain: number
    sourceTransactionHash: number
    destTransactionHash: number
    bridgeTransactionId: number
    sourceAmount: number
    destinationAmount: number
    bridgeFee: number
    sourceAddress: number
    destinationAddress: number
    bridgeAddress: number
    status: number
    createdAt: number
    updatedAt: number
    sourceConfirmedAt: number
    destConfirmedAt: number
    _all: number
  }


  export type CrossChainTransactionAvgAggregateInputType = {
    sourceAmount?: true
    destinationAmount?: true
    bridgeFee?: true
  }

  export type CrossChainTransactionSumAggregateInputType = {
    sourceAmount?: true
    destinationAmount?: true
    bridgeFee?: true
  }

  export type CrossChainTransactionMinAggregateInputType = {
    id?: true
    paymentId?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    bridgeTransactionId?: true
    sourceAmount?: true
    destinationAmount?: true
    bridgeFee?: true
    sourceAddress?: true
    destinationAddress?: true
    bridgeAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    sourceConfirmedAt?: true
    destConfirmedAt?: true
  }

  export type CrossChainTransactionMaxAggregateInputType = {
    id?: true
    paymentId?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    bridgeTransactionId?: true
    sourceAmount?: true
    destinationAmount?: true
    bridgeFee?: true
    sourceAddress?: true
    destinationAddress?: true
    bridgeAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    sourceConfirmedAt?: true
    destConfirmedAt?: true
  }

  export type CrossChainTransactionCountAggregateInputType = {
    id?: true
    paymentId?: true
    sourceChain?: true
    destinationChain?: true
    sourceTransactionHash?: true
    destTransactionHash?: true
    bridgeTransactionId?: true
    sourceAmount?: true
    destinationAmount?: true
    bridgeFee?: true
    sourceAddress?: true
    destinationAddress?: true
    bridgeAddress?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    sourceConfirmedAt?: true
    destConfirmedAt?: true
    _all?: true
  }

  export type CrossChainTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrossChainTransaction to aggregate.
     */
    where?: CrossChainTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrossChainTransactions to fetch.
     */
    orderBy?: CrossChainTransactionOrderByWithRelationInput | CrossChainTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CrossChainTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrossChainTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrossChainTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CrossChainTransactions
    **/
    _count?: true | CrossChainTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CrossChainTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CrossChainTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CrossChainTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CrossChainTransactionMaxAggregateInputType
  }

  export type GetCrossChainTransactionAggregateType<T extends CrossChainTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateCrossChainTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCrossChainTransaction[P]>
      : GetScalarType<T[P], AggregateCrossChainTransaction[P]>
  }




  export type CrossChainTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CrossChainTransactionWhereInput
    orderBy?: CrossChainTransactionOrderByWithAggregationInput | CrossChainTransactionOrderByWithAggregationInput[]
    by: CrossChainTransactionScalarFieldEnum[] | CrossChainTransactionScalarFieldEnum
    having?: CrossChainTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CrossChainTransactionCountAggregateInputType | true
    _avg?: CrossChainTransactionAvgAggregateInputType
    _sum?: CrossChainTransactionSumAggregateInputType
    _min?: CrossChainTransactionMinAggregateInputType
    _max?: CrossChainTransactionMaxAggregateInputType
  }

  export type CrossChainTransactionGroupByOutputType = {
    id: string
    paymentId: string | null
    sourceChain: string
    destinationChain: string
    sourceTransactionHash: string | null
    destTransactionHash: string | null
    bridgeTransactionId: string | null
    sourceAmount: Decimal
    destinationAmount: Decimal | null
    bridgeFee: Decimal | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress: string | null
    status: $Enums.CrossChainStatus
    createdAt: Date
    updatedAt: Date
    sourceConfirmedAt: Date | null
    destConfirmedAt: Date | null
    _count: CrossChainTransactionCountAggregateOutputType | null
    _avg: CrossChainTransactionAvgAggregateOutputType | null
    _sum: CrossChainTransactionSumAggregateOutputType | null
    _min: CrossChainTransactionMinAggregateOutputType | null
    _max: CrossChainTransactionMaxAggregateOutputType | null
  }

  type GetCrossChainTransactionGroupByPayload<T extends CrossChainTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CrossChainTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CrossChainTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CrossChainTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], CrossChainTransactionGroupByOutputType[P]>
        }
      >
    >


  export type CrossChainTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    bridgeTransactionId?: boolean
    sourceAmount?: boolean
    destinationAmount?: boolean
    bridgeFee?: boolean
    sourceAddress?: boolean
    destinationAddress?: boolean
    bridgeAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sourceConfirmedAt?: boolean
    destConfirmedAt?: boolean
    payment?: boolean | CrossChainTransaction$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["crossChainTransaction"]>

  export type CrossChainTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    paymentId?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    bridgeTransactionId?: boolean
    sourceAmount?: boolean
    destinationAmount?: boolean
    bridgeFee?: boolean
    sourceAddress?: boolean
    destinationAddress?: boolean
    bridgeAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sourceConfirmedAt?: boolean
    destConfirmedAt?: boolean
    payment?: boolean | CrossChainTransaction$paymentArgs<ExtArgs>
  }, ExtArgs["result"]["crossChainTransaction"]>

  export type CrossChainTransactionSelectScalar = {
    id?: boolean
    paymentId?: boolean
    sourceChain?: boolean
    destinationChain?: boolean
    sourceTransactionHash?: boolean
    destTransactionHash?: boolean
    bridgeTransactionId?: boolean
    sourceAmount?: boolean
    destinationAmount?: boolean
    bridgeFee?: boolean
    sourceAddress?: boolean
    destinationAddress?: boolean
    bridgeAddress?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sourceConfirmedAt?: boolean
    destConfirmedAt?: boolean
  }

  export type CrossChainTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | CrossChainTransaction$paymentArgs<ExtArgs>
  }
  export type CrossChainTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment?: boolean | CrossChainTransaction$paymentArgs<ExtArgs>
  }

  export type $CrossChainTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CrossChainTransaction"
    objects: {
      payment: Prisma.$PaymentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      paymentId: string | null
      sourceChain: string
      destinationChain: string
      sourceTransactionHash: string | null
      destTransactionHash: string | null
      bridgeTransactionId: string | null
      sourceAmount: Prisma.Decimal
      destinationAmount: Prisma.Decimal | null
      bridgeFee: Prisma.Decimal | null
      sourceAddress: string
      destinationAddress: string
      bridgeAddress: string | null
      status: $Enums.CrossChainStatus
      createdAt: Date
      updatedAt: Date
      sourceConfirmedAt: Date | null
      destConfirmedAt: Date | null
    }, ExtArgs["result"]["crossChainTransaction"]>
    composites: {}
  }

  type CrossChainTransactionGetPayload<S extends boolean | null | undefined | CrossChainTransactionDefaultArgs> = $Result.GetResult<Prisma.$CrossChainTransactionPayload, S>

  type CrossChainTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CrossChainTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CrossChainTransactionCountAggregateInputType | true
    }

  export interface CrossChainTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CrossChainTransaction'], meta: { name: 'CrossChainTransaction' } }
    /**
     * Find zero or one CrossChainTransaction that matches the filter.
     * @param {CrossChainTransactionFindUniqueArgs} args - Arguments to find a CrossChainTransaction
     * @example
     * // Get one CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CrossChainTransactionFindUniqueArgs>(args: SelectSubset<T, CrossChainTransactionFindUniqueArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CrossChainTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CrossChainTransactionFindUniqueOrThrowArgs} args - Arguments to find a CrossChainTransaction
     * @example
     * // Get one CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CrossChainTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, CrossChainTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CrossChainTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionFindFirstArgs} args - Arguments to find a CrossChainTransaction
     * @example
     * // Get one CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CrossChainTransactionFindFirstArgs>(args?: SelectSubset<T, CrossChainTransactionFindFirstArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CrossChainTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionFindFirstOrThrowArgs} args - Arguments to find a CrossChainTransaction
     * @example
     * // Get one CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CrossChainTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, CrossChainTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CrossChainTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CrossChainTransactions
     * const crossChainTransactions = await prisma.crossChainTransaction.findMany()
     * 
     * // Get first 10 CrossChainTransactions
     * const crossChainTransactions = await prisma.crossChainTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const crossChainTransactionWithIdOnly = await prisma.crossChainTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CrossChainTransactionFindManyArgs>(args?: SelectSubset<T, CrossChainTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CrossChainTransaction.
     * @param {CrossChainTransactionCreateArgs} args - Arguments to create a CrossChainTransaction.
     * @example
     * // Create one CrossChainTransaction
     * const CrossChainTransaction = await prisma.crossChainTransaction.create({
     *   data: {
     *     // ... data to create a CrossChainTransaction
     *   }
     * })
     * 
     */
    create<T extends CrossChainTransactionCreateArgs>(args: SelectSubset<T, CrossChainTransactionCreateArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CrossChainTransactions.
     * @param {CrossChainTransactionCreateManyArgs} args - Arguments to create many CrossChainTransactions.
     * @example
     * // Create many CrossChainTransactions
     * const crossChainTransaction = await prisma.crossChainTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CrossChainTransactionCreateManyArgs>(args?: SelectSubset<T, CrossChainTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CrossChainTransactions and returns the data saved in the database.
     * @param {CrossChainTransactionCreateManyAndReturnArgs} args - Arguments to create many CrossChainTransactions.
     * @example
     * // Create many CrossChainTransactions
     * const crossChainTransaction = await prisma.crossChainTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CrossChainTransactions and only return the `id`
     * const crossChainTransactionWithIdOnly = await prisma.crossChainTransaction.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CrossChainTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, CrossChainTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CrossChainTransaction.
     * @param {CrossChainTransactionDeleteArgs} args - Arguments to delete one CrossChainTransaction.
     * @example
     * // Delete one CrossChainTransaction
     * const CrossChainTransaction = await prisma.crossChainTransaction.delete({
     *   where: {
     *     // ... filter to delete one CrossChainTransaction
     *   }
     * })
     * 
     */
    delete<T extends CrossChainTransactionDeleteArgs>(args: SelectSubset<T, CrossChainTransactionDeleteArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CrossChainTransaction.
     * @param {CrossChainTransactionUpdateArgs} args - Arguments to update one CrossChainTransaction.
     * @example
     * // Update one CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CrossChainTransactionUpdateArgs>(args: SelectSubset<T, CrossChainTransactionUpdateArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CrossChainTransactions.
     * @param {CrossChainTransactionDeleteManyArgs} args - Arguments to filter CrossChainTransactions to delete.
     * @example
     * // Delete a few CrossChainTransactions
     * const { count } = await prisma.crossChainTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CrossChainTransactionDeleteManyArgs>(args?: SelectSubset<T, CrossChainTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CrossChainTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CrossChainTransactions
     * const crossChainTransaction = await prisma.crossChainTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CrossChainTransactionUpdateManyArgs>(args: SelectSubset<T, CrossChainTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CrossChainTransaction.
     * @param {CrossChainTransactionUpsertArgs} args - Arguments to update or create a CrossChainTransaction.
     * @example
     * // Update or create a CrossChainTransaction
     * const crossChainTransaction = await prisma.crossChainTransaction.upsert({
     *   create: {
     *     // ... data to create a CrossChainTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CrossChainTransaction we want to update
     *   }
     * })
     */
    upsert<T extends CrossChainTransactionUpsertArgs>(args: SelectSubset<T, CrossChainTransactionUpsertArgs<ExtArgs>>): Prisma__CrossChainTransactionClient<$Result.GetResult<Prisma.$CrossChainTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CrossChainTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionCountArgs} args - Arguments to filter CrossChainTransactions to count.
     * @example
     * // Count the number of CrossChainTransactions
     * const count = await prisma.crossChainTransaction.count({
     *   where: {
     *     // ... the filter for the CrossChainTransactions we want to count
     *   }
     * })
    **/
    count<T extends CrossChainTransactionCountArgs>(
      args?: Subset<T, CrossChainTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CrossChainTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CrossChainTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CrossChainTransactionAggregateArgs>(args: Subset<T, CrossChainTransactionAggregateArgs>): Prisma.PrismaPromise<GetCrossChainTransactionAggregateType<T>>

    /**
     * Group by CrossChainTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CrossChainTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CrossChainTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CrossChainTransactionGroupByArgs['orderBy'] }
        : { orderBy?: CrossChainTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CrossChainTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCrossChainTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CrossChainTransaction model
   */
  readonly fields: CrossChainTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CrossChainTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CrossChainTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payment<T extends CrossChainTransaction$paymentArgs<ExtArgs> = {}>(args?: Subset<T, CrossChainTransaction$paymentArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CrossChainTransaction model
   */ 
  interface CrossChainTransactionFieldRefs {
    readonly id: FieldRef<"CrossChainTransaction", 'String'>
    readonly paymentId: FieldRef<"CrossChainTransaction", 'String'>
    readonly sourceChain: FieldRef<"CrossChainTransaction", 'String'>
    readonly destinationChain: FieldRef<"CrossChainTransaction", 'String'>
    readonly sourceTransactionHash: FieldRef<"CrossChainTransaction", 'String'>
    readonly destTransactionHash: FieldRef<"CrossChainTransaction", 'String'>
    readonly bridgeTransactionId: FieldRef<"CrossChainTransaction", 'String'>
    readonly sourceAmount: FieldRef<"CrossChainTransaction", 'Decimal'>
    readonly destinationAmount: FieldRef<"CrossChainTransaction", 'Decimal'>
    readonly bridgeFee: FieldRef<"CrossChainTransaction", 'Decimal'>
    readonly sourceAddress: FieldRef<"CrossChainTransaction", 'String'>
    readonly destinationAddress: FieldRef<"CrossChainTransaction", 'String'>
    readonly bridgeAddress: FieldRef<"CrossChainTransaction", 'String'>
    readonly status: FieldRef<"CrossChainTransaction", 'CrossChainStatus'>
    readonly createdAt: FieldRef<"CrossChainTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"CrossChainTransaction", 'DateTime'>
    readonly sourceConfirmedAt: FieldRef<"CrossChainTransaction", 'DateTime'>
    readonly destConfirmedAt: FieldRef<"CrossChainTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CrossChainTransaction findUnique
   */
  export type CrossChainTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CrossChainTransaction to fetch.
     */
    where: CrossChainTransactionWhereUniqueInput
  }

  /**
   * CrossChainTransaction findUniqueOrThrow
   */
  export type CrossChainTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CrossChainTransaction to fetch.
     */
    where: CrossChainTransactionWhereUniqueInput
  }

  /**
   * CrossChainTransaction findFirst
   */
  export type CrossChainTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CrossChainTransaction to fetch.
     */
    where?: CrossChainTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrossChainTransactions to fetch.
     */
    orderBy?: CrossChainTransactionOrderByWithRelationInput | CrossChainTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrossChainTransactions.
     */
    cursor?: CrossChainTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrossChainTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrossChainTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrossChainTransactions.
     */
    distinct?: CrossChainTransactionScalarFieldEnum | CrossChainTransactionScalarFieldEnum[]
  }

  /**
   * CrossChainTransaction findFirstOrThrow
   */
  export type CrossChainTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CrossChainTransaction to fetch.
     */
    where?: CrossChainTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrossChainTransactions to fetch.
     */
    orderBy?: CrossChainTransactionOrderByWithRelationInput | CrossChainTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CrossChainTransactions.
     */
    cursor?: CrossChainTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrossChainTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrossChainTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CrossChainTransactions.
     */
    distinct?: CrossChainTransactionScalarFieldEnum | CrossChainTransactionScalarFieldEnum[]
  }

  /**
   * CrossChainTransaction findMany
   */
  export type CrossChainTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter, which CrossChainTransactions to fetch.
     */
    where?: CrossChainTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CrossChainTransactions to fetch.
     */
    orderBy?: CrossChainTransactionOrderByWithRelationInput | CrossChainTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CrossChainTransactions.
     */
    cursor?: CrossChainTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CrossChainTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CrossChainTransactions.
     */
    skip?: number
    distinct?: CrossChainTransactionScalarFieldEnum | CrossChainTransactionScalarFieldEnum[]
  }

  /**
   * CrossChainTransaction create
   */
  export type CrossChainTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a CrossChainTransaction.
     */
    data: XOR<CrossChainTransactionCreateInput, CrossChainTransactionUncheckedCreateInput>
  }

  /**
   * CrossChainTransaction createMany
   */
  export type CrossChainTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CrossChainTransactions.
     */
    data: CrossChainTransactionCreateManyInput | CrossChainTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CrossChainTransaction createManyAndReturn
   */
  export type CrossChainTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CrossChainTransactions.
     */
    data: CrossChainTransactionCreateManyInput | CrossChainTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CrossChainTransaction update
   */
  export type CrossChainTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a CrossChainTransaction.
     */
    data: XOR<CrossChainTransactionUpdateInput, CrossChainTransactionUncheckedUpdateInput>
    /**
     * Choose, which CrossChainTransaction to update.
     */
    where: CrossChainTransactionWhereUniqueInput
  }

  /**
   * CrossChainTransaction updateMany
   */
  export type CrossChainTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CrossChainTransactions.
     */
    data: XOR<CrossChainTransactionUpdateManyMutationInput, CrossChainTransactionUncheckedUpdateManyInput>
    /**
     * Filter which CrossChainTransactions to update
     */
    where?: CrossChainTransactionWhereInput
  }

  /**
   * CrossChainTransaction upsert
   */
  export type CrossChainTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the CrossChainTransaction to update in case it exists.
     */
    where: CrossChainTransactionWhereUniqueInput
    /**
     * In case the CrossChainTransaction found by the `where` argument doesn't exist, create a new CrossChainTransaction with this data.
     */
    create: XOR<CrossChainTransactionCreateInput, CrossChainTransactionUncheckedCreateInput>
    /**
     * In case the CrossChainTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CrossChainTransactionUpdateInput, CrossChainTransactionUncheckedUpdateInput>
  }

  /**
   * CrossChainTransaction delete
   */
  export type CrossChainTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
    /**
     * Filter which CrossChainTransaction to delete.
     */
    where: CrossChainTransactionWhereUniqueInput
  }

  /**
   * CrossChainTransaction deleteMany
   */
  export type CrossChainTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CrossChainTransactions to delete
     */
    where?: CrossChainTransactionWhereInput
  }

  /**
   * CrossChainTransaction.payment
   */
  export type CrossChainTransaction$paymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    where?: PaymentWhereInput
  }

  /**
   * CrossChainTransaction without action
   */
  export type CrossChainTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CrossChainTransaction
     */
    select?: CrossChainTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CrossChainTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    isArchived: boolean | null
    sentAt: Date | null
    deliveredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: $Enums.NotificationType | null
    title: string | null
    message: string | null
    isRead: boolean | null
    isArchived: boolean | null
    sentAt: Date | null
    deliveredAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    title: number
    message: number
    data: number
    isRead: number
    isArchived: number
    channels: number
    sentAt: number
    deliveredAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    isArchived?: true
    sentAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    isRead?: true
    isArchived?: true
    sentAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    title?: true
    message?: true
    data?: true
    isRead?: true
    isArchived?: true
    channels?: true
    sentAt?: true
    deliveredAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    data: JsonValue | null
    isRead: boolean
    isArchived: boolean
    channels: $Enums.NotificationChannel[]
    sentAt: Date | null
    deliveredAt: Date | null
    createdAt: Date
    updatedAt: Date
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    isArchived?: boolean
    channels?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    isArchived?: boolean
    channels?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    title?: boolean
    message?: boolean
    data?: boolean
    isRead?: boolean
    isArchived?: boolean
    channels?: boolean
    sentAt?: boolean
    deliveredAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: $Enums.NotificationType
      title: string
      message: string
      data: Prisma.JsonValue | null
      isRead: boolean
      isArchived: boolean
      channels: $Enums.NotificationChannel[]
      sentAt: Date | null
      deliveredAt: Date | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly userId: FieldRef<"Notification", 'String'>
    readonly type: FieldRef<"Notification", 'NotificationType'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly data: FieldRef<"Notification", 'Json'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly isArchived: FieldRef<"Notification", 'Boolean'>
    readonly channels: FieldRef<"Notification", 'NotificationChannel[]'>
    readonly sentAt: FieldRef<"Notification", 'DateTime'>
    readonly deliveredAt: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly updatedAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model SystemMetrics
   */

  export type AggregateSystemMetrics = {
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  export type SystemMetricsAvgAggregateOutputType = {
    metricValue: Decimal | null
  }

  export type SystemMetricsSumAggregateOutputType = {
    metricValue: Decimal | null
  }

  export type SystemMetricsMinAggregateOutputType = {
    id: string | null
    metricName: string | null
    metricValue: Decimal | null
    metricType: $Enums.MetricType | null
    chainId: string | null
    timestamp: Date | null
  }

  export type SystemMetricsMaxAggregateOutputType = {
    id: string | null
    metricName: string | null
    metricValue: Decimal | null
    metricType: $Enums.MetricType | null
    chainId: string | null
    timestamp: Date | null
  }

  export type SystemMetricsCountAggregateOutputType = {
    id: number
    metricName: number
    metricValue: number
    metricType: number
    chainId: number
    metadata: number
    timestamp: number
    _all: number
  }


  export type SystemMetricsAvgAggregateInputType = {
    metricValue?: true
  }

  export type SystemMetricsSumAggregateInputType = {
    metricValue?: true
  }

  export type SystemMetricsMinAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricType?: true
    chainId?: true
    timestamp?: true
  }

  export type SystemMetricsMaxAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricType?: true
    chainId?: true
    timestamp?: true
  }

  export type SystemMetricsCountAggregateInputType = {
    id?: true
    metricName?: true
    metricValue?: true
    metricType?: true
    chainId?: true
    metadata?: true
    timestamp?: true
    _all?: true
  }

  export type SystemMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to aggregate.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemMetrics
    **/
    _count?: true | SystemMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemMetricsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemMetricsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type GetSystemMetricsAggregateType<T extends SystemMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemMetrics[P]>
      : GetScalarType<T[P], AggregateSystemMetrics[P]>
  }




  export type SystemMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemMetricsWhereInput
    orderBy?: SystemMetricsOrderByWithAggregationInput | SystemMetricsOrderByWithAggregationInput[]
    by: SystemMetricsScalarFieldEnum[] | SystemMetricsScalarFieldEnum
    having?: SystemMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemMetricsCountAggregateInputType | true
    _avg?: SystemMetricsAvgAggregateInputType
    _sum?: SystemMetricsSumAggregateInputType
    _min?: SystemMetricsMinAggregateInputType
    _max?: SystemMetricsMaxAggregateInputType
  }

  export type SystemMetricsGroupByOutputType = {
    id: string
    metricName: string
    metricValue: Decimal
    metricType: $Enums.MetricType
    chainId: string | null
    metadata: JsonValue | null
    timestamp: Date
    _count: SystemMetricsCountAggregateOutputType | null
    _avg: SystemMetricsAvgAggregateOutputType | null
    _sum: SystemMetricsSumAggregateOutputType | null
    _min: SystemMetricsMinAggregateOutputType | null
    _max: SystemMetricsMaxAggregateOutputType | null
  }

  type GetSystemMetricsGroupByPayload<T extends SystemMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], SystemMetricsGroupByOutputType[P]>
        }
      >
    >


  export type SystemMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricType?: boolean
    chainId?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricType?: boolean
    chainId?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["systemMetrics"]>

  export type SystemMetricsSelectScalar = {
    id?: boolean
    metricName?: boolean
    metricValue?: boolean
    metricType?: boolean
    chainId?: boolean
    metadata?: boolean
    timestamp?: boolean
  }


  export type $SystemMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      metricName: string
      metricValue: Prisma.Decimal
      metricType: $Enums.MetricType
      chainId: string | null
      metadata: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["systemMetrics"]>
    composites: {}
  }

  type SystemMetricsGetPayload<S extends boolean | null | undefined | SystemMetricsDefaultArgs> = $Result.GetResult<Prisma.$SystemMetricsPayload, S>

  type SystemMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemMetricsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemMetricsCountAggregateInputType | true
    }

  export interface SystemMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemMetrics'], meta: { name: 'SystemMetrics' } }
    /**
     * Find zero or one SystemMetrics that matches the filter.
     * @param {SystemMetricsFindUniqueArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemMetricsFindUniqueArgs>(args: SelectSubset<T, SystemMetricsFindUniqueArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemMetrics that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemMetricsFindUniqueOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemMetricsFindFirstArgs>(args?: SelectSubset<T, SystemMetricsFindFirstArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindFirstOrThrowArgs} args - Arguments to find a SystemMetrics
     * @example
     * // Get one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany()
     * 
     * // Get first 10 SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemMetricsFindManyArgs>(args?: SelectSubset<T, SystemMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemMetrics.
     * @param {SystemMetricsCreateArgs} args - Arguments to create a SystemMetrics.
     * @example
     * // Create one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.create({
     *   data: {
     *     // ... data to create a SystemMetrics
     *   }
     * })
     * 
     */
    create<T extends SystemMetricsCreateArgs>(args: SelectSubset<T, SystemMetricsCreateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemMetrics.
     * @param {SystemMetricsCreateManyArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemMetricsCreateManyArgs>(args?: SelectSubset<T, SystemMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SystemMetrics and returns the data saved in the database.
     * @param {SystemMetricsCreateManyAndReturnArgs} args - Arguments to create many SystemMetrics.
     * @example
     * // Create many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SystemMetrics and only return the `id`
     * const systemMetricsWithIdOnly = await prisma.systemMetrics.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SystemMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, SystemMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SystemMetrics.
     * @param {SystemMetricsDeleteArgs} args - Arguments to delete one SystemMetrics.
     * @example
     * // Delete one SystemMetrics
     * const SystemMetrics = await prisma.systemMetrics.delete({
     *   where: {
     *     // ... filter to delete one SystemMetrics
     *   }
     * })
     * 
     */
    delete<T extends SystemMetricsDeleteArgs>(args: SelectSubset<T, SystemMetricsDeleteArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemMetrics.
     * @param {SystemMetricsUpdateArgs} args - Arguments to update one SystemMetrics.
     * @example
     * // Update one SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemMetricsUpdateArgs>(args: SelectSubset<T, SystemMetricsUpdateArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemMetrics.
     * @param {SystemMetricsDeleteManyArgs} args - Arguments to filter SystemMetrics to delete.
     * @example
     * // Delete a few SystemMetrics
     * const { count } = await prisma.systemMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemMetricsDeleteManyArgs>(args?: SelectSubset<T, SystemMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemMetricsUpdateManyArgs>(args: SelectSubset<T, SystemMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemMetrics.
     * @param {SystemMetricsUpsertArgs} args - Arguments to update or create a SystemMetrics.
     * @example
     * // Update or create a SystemMetrics
     * const systemMetrics = await prisma.systemMetrics.upsert({
     *   create: {
     *     // ... data to create a SystemMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemMetrics we want to update
     *   }
     * })
     */
    upsert<T extends SystemMetricsUpsertArgs>(args: SelectSubset<T, SystemMetricsUpsertArgs<ExtArgs>>): Prisma__SystemMetricsClient<$Result.GetResult<Prisma.$SystemMetricsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsCountArgs} args - Arguments to filter SystemMetrics to count.
     * @example
     * // Count the number of SystemMetrics
     * const count = await prisma.systemMetrics.count({
     *   where: {
     *     // ... the filter for the SystemMetrics we want to count
     *   }
     * })
    **/
    count<T extends SystemMetricsCountArgs>(
      args?: Subset<T, SystemMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemMetricsAggregateArgs>(args: Subset<T, SystemMetricsAggregateArgs>): Prisma.PrismaPromise<GetSystemMetricsAggregateType<T>>

    /**
     * Group by SystemMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemMetricsGroupByArgs['orderBy'] }
        : { orderBy?: SystemMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemMetrics model
   */
  readonly fields: SystemMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemMetrics model
   */ 
  interface SystemMetricsFieldRefs {
    readonly id: FieldRef<"SystemMetrics", 'String'>
    readonly metricName: FieldRef<"SystemMetrics", 'String'>
    readonly metricValue: FieldRef<"SystemMetrics", 'Decimal'>
    readonly metricType: FieldRef<"SystemMetrics", 'MetricType'>
    readonly chainId: FieldRef<"SystemMetrics", 'String'>
    readonly metadata: FieldRef<"SystemMetrics", 'Json'>
    readonly timestamp: FieldRef<"SystemMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemMetrics findUnique
   */
  export type SystemMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findUniqueOrThrow
   */
  export type SystemMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics findFirst
   */
  export type SystemMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findFirstOrThrow
   */
  export type SystemMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemMetrics.
     */
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics findMany
   */
  export type SystemMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter, which SystemMetrics to fetch.
     */
    where?: SystemMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemMetrics to fetch.
     */
    orderBy?: SystemMetricsOrderByWithRelationInput | SystemMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemMetrics.
     */
    cursor?: SystemMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemMetrics.
     */
    skip?: number
    distinct?: SystemMetricsScalarFieldEnum | SystemMetricsScalarFieldEnum[]
  }

  /**
   * SystemMetrics create
   */
  export type SystemMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemMetrics.
     */
    data: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
  }

  /**
   * SystemMetrics createMany
   */
  export type SystemMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemMetrics createManyAndReturn
   */
  export type SystemMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SystemMetrics.
     */
    data: SystemMetricsCreateManyInput | SystemMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemMetrics update
   */
  export type SystemMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
    /**
     * Choose, which SystemMetrics to update.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics updateMany
   */
  export type SystemMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemMetrics.
     */
    data: XOR<SystemMetricsUpdateManyMutationInput, SystemMetricsUncheckedUpdateManyInput>
    /**
     * Filter which SystemMetrics to update
     */
    where?: SystemMetricsWhereInput
  }

  /**
   * SystemMetrics upsert
   */
  export type SystemMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemMetrics to update in case it exists.
     */
    where: SystemMetricsWhereUniqueInput
    /**
     * In case the SystemMetrics found by the `where` argument doesn't exist, create a new SystemMetrics with this data.
     */
    create: XOR<SystemMetricsCreateInput, SystemMetricsUncheckedCreateInput>
    /**
     * In case the SystemMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemMetricsUpdateInput, SystemMetricsUncheckedUpdateInput>
  }

  /**
   * SystemMetrics delete
   */
  export type SystemMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
    /**
     * Filter which SystemMetrics to delete.
     */
    where: SystemMetricsWhereUniqueInput
  }

  /**
   * SystemMetrics deleteMany
   */
  export type SystemMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemMetrics to delete
     */
    where?: SystemMetricsWhereInput
  }

  /**
   * SystemMetrics without action
   */
  export type SystemMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemMetrics
     */
    select?: SystemMetricsSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    hashedPassword: 'hashedPassword',
    walletAddress: 'walletAddress',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    kycStatus: 'kycStatus',
    isActive: 'isActive',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    lastLoginAt: 'lastLoginAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSessionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    sessionToken: 'sessionToken',
    refreshToken: 'refreshToken',
    deviceInfo: 'deviceInfo',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    isActive: 'isActive',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    lastAccessedAt: 'lastAccessedAt'
  };

  export type UserSessionScalarFieldEnum = (typeof UserSessionScalarFieldEnum)[keyof typeof UserSessionScalarFieldEnum]


  export const UserPreferencesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    defaultCurrency: 'defaultCurrency',
    notificationSettings: 'notificationSettings',
    yieldOptimization: 'yieldOptimization',
    autoReinvest: 'autoReinvest',
    maxSlippage: 'maxSlippage',
    preferredChains: 'preferredChains'
  };

  export type UserPreferencesScalarFieldEnum = (typeof UserPreferencesScalarFieldEnum)[keyof typeof UserPreferencesScalarFieldEnum]


  export const KYCDocumentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    documentType: 'documentType',
    documentNumber: 'documentNumber',
    documentUrl: 'documentUrl',
    verificationStatus: 'verificationStatus',
    submittedAt: 'submittedAt',
    reviewedAt: 'reviewedAt',
    reviewedBy: 'reviewedBy',
    notes: 'notes'
  };

  export type KYCDocumentScalarFieldEnum = (typeof KYCDocumentScalarFieldEnum)[keyof typeof KYCDocumentScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    merchantId: 'merchantId',
    amount: 'amount',
    currency: 'currency',
    tokenAddress: 'tokenAddress',
    tokenSymbol: 'tokenSymbol',
    status: 'status',
    type: 'type',
    sourceChain: 'sourceChain',
    destinationChain: 'destinationChain',
    sourceTransactionHash: 'sourceTransactionHash',
    destTransactionHash: 'destTransactionHash',
    senderAddress: 'senderAddress',
    recipientAddress: 'recipientAddress',
    escrowAddress: 'escrowAddress',
    estimatedYield: 'estimatedYield',
    actualYield: 'actualYield',
    yieldDuration: 'yieldDuration',
    yieldStrategy: 'yieldStrategy',
    platformFee: 'platformFee',
    networkFee: 'networkFee',
    totalFees: 'totalFees',
    description: 'description',
    metadata: 'metadata',
    externalReference: 'externalReference',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    confirmedAt: 'confirmedAt',
    releasedAt: 'releasedAt',
    expiresAt: 'expiresAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const PaymentEventScalarFieldEnum: {
    id: 'id',
    paymentId: 'paymentId',
    eventType: 'eventType',
    transactionHash: 'transactionHash',
    blockNumber: 'blockNumber',
    chainId: 'chainId',
    gasUsed: 'gasUsed',
    gasPrice: 'gasPrice',
    eventData: 'eventData',
    createdAt: 'createdAt'
  };

  export type PaymentEventScalarFieldEnum = (typeof PaymentEventScalarFieldEnum)[keyof typeof PaymentEventScalarFieldEnum]


  export const YieldStrategyScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    protocolName: 'protocolName',
    chainId: 'chainId',
    contractAddress: 'contractAddress',
    strategyType: 'strategyType',
    expectedAPY: 'expectedAPY',
    riskLevel: 'riskLevel',
    minAmount: 'minAmount',
    maxAmount: 'maxAmount',
    isActive: 'isActive',
    strategyConfig: 'strategyConfig',
    totalValueLocked: 'totalValueLocked',
    actualAPY: 'actualAPY',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YieldStrategyScalarFieldEnum = (typeof YieldStrategyScalarFieldEnum)[keyof typeof YieldStrategyScalarFieldEnum]


  export const YieldEarningScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    paymentId: 'paymentId',
    strategyId: 'strategyId',
    principalAmount: 'principalAmount',
    yieldAmount: 'yieldAmount',
    feeAmount: 'feeAmount',
    netYieldAmount: 'netYieldAmount',
    tokenAddress: 'tokenAddress',
    tokenSymbol: 'tokenSymbol',
    chainId: 'chainId',
    startTime: 'startTime',
    endTime: 'endTime',
    duration: 'duration',
    actualAPY: 'actualAPY',
    status: 'status',
    transactionHash: 'transactionHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type YieldEarningScalarFieldEnum = (typeof YieldEarningScalarFieldEnum)[keyof typeof YieldEarningScalarFieldEnum]


  export const MerchantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    website: 'website',
    description: 'description',
    category: 'category',
    businessType: 'businessType',
    registrationNumber: 'registrationNumber',
    taxId: 'taxId',
    defaultCurrency: 'defaultCurrency',
    supportedChains: 'supportedChains',
    webhookUrl: 'webhookUrl',
    isActive: 'isActive',
    verificationStatus: 'verificationStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MerchantScalarFieldEnum = (typeof MerchantScalarFieldEnum)[keyof typeof MerchantScalarFieldEnum]


  export const ApiKeyScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    merchantId: 'merchantId',
    keyHash: 'keyHash',
    keyPrefix: 'keyPrefix',
    name: 'name',
    permissions: 'permissions',
    isActive: 'isActive',
    lastUsedAt: 'lastUsedAt',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ApiKeyScalarFieldEnum = (typeof ApiKeyScalarFieldEnum)[keyof typeof ApiKeyScalarFieldEnum]


  export const CrossChainTransactionScalarFieldEnum: {
    id: 'id',
    paymentId: 'paymentId',
    sourceChain: 'sourceChain',
    destinationChain: 'destinationChain',
    sourceTransactionHash: 'sourceTransactionHash',
    destTransactionHash: 'destTransactionHash',
    bridgeTransactionId: 'bridgeTransactionId',
    sourceAmount: 'sourceAmount',
    destinationAmount: 'destinationAmount',
    bridgeFee: 'bridgeFee',
    sourceAddress: 'sourceAddress',
    destinationAddress: 'destinationAddress',
    bridgeAddress: 'bridgeAddress',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    sourceConfirmedAt: 'sourceConfirmedAt',
    destConfirmedAt: 'destConfirmedAt'
  };

  export type CrossChainTransactionScalarFieldEnum = (typeof CrossChainTransactionScalarFieldEnum)[keyof typeof CrossChainTransactionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    title: 'title',
    message: 'message',
    data: 'data',
    isRead: 'isRead',
    isArchived: 'isArchived',
    channels: 'channels',
    sentAt: 'sentAt',
    deliveredAt: 'deliveredAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const SystemMetricsScalarFieldEnum: {
    id: 'id',
    metricName: 'metricName',
    metricValue: 'metricValue',
    metricType: 'metricType',
    chainId: 'chainId',
    metadata: 'metadata',
    timestamp: 'timestamp'
  };

  export type SystemMetricsScalarFieldEnum = (typeof SystemMetricsScalarFieldEnum)[keyof typeof SystemMetricsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'KYCStatus'
   */
  export type EnumKYCStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KYCStatus'>
    


  /**
   * Reference to a field of type 'KYCStatus[]'
   */
  export type ListEnumKYCStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'KYCStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DocumentType'
   */
  export type EnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType'>
    


  /**
   * Reference to a field of type 'DocumentType[]'
   */
  export type ListEnumDocumentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DocumentType[]'>
    


  /**
   * Reference to a field of type 'VerificationStatus'
   */
  export type EnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus'>
    


  /**
   * Reference to a field of type 'VerificationStatus[]'
   */
  export type ListEnumVerificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'VerificationStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentStatus'
   */
  export type EnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus'>
    


  /**
   * Reference to a field of type 'PaymentStatus[]'
   */
  export type ListEnumPaymentStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentStatus[]'>
    


  /**
   * Reference to a field of type 'PaymentType'
   */
  export type EnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType'>
    


  /**
   * Reference to a field of type 'PaymentType[]'
   */
  export type ListEnumPaymentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentType[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'PaymentEventType'
   */
  export type EnumPaymentEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentEventType'>
    


  /**
   * Reference to a field of type 'PaymentEventType[]'
   */
  export type ListEnumPaymentEventTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PaymentEventType[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'YieldStrategyType'
   */
  export type EnumYieldStrategyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YieldStrategyType'>
    


  /**
   * Reference to a field of type 'YieldStrategyType[]'
   */
  export type ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YieldStrategyType[]'>
    


  /**
   * Reference to a field of type 'RiskLevel'
   */
  export type EnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel'>
    


  /**
   * Reference to a field of type 'RiskLevel[]'
   */
  export type ListEnumRiskLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'RiskLevel[]'>
    


  /**
   * Reference to a field of type 'YieldStatus'
   */
  export type EnumYieldStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YieldStatus'>
    


  /**
   * Reference to a field of type 'YieldStatus[]'
   */
  export type ListEnumYieldStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'YieldStatus[]'>
    


  /**
   * Reference to a field of type 'BusinessType'
   */
  export type EnumBusinessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessType'>
    


  /**
   * Reference to a field of type 'BusinessType[]'
   */
  export type ListEnumBusinessTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BusinessType[]'>
    


  /**
   * Reference to a field of type 'CrossChainStatus'
   */
  export type EnumCrossChainStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CrossChainStatus'>
    


  /**
   * Reference to a field of type 'CrossChainStatus[]'
   */
  export type ListEnumCrossChainStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CrossChainStatus[]'>
    


  /**
   * Reference to a field of type 'NotificationType'
   */
  export type EnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType'>
    


  /**
   * Reference to a field of type 'NotificationType[]'
   */
  export type ListEnumNotificationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationType[]'>
    


  /**
   * Reference to a field of type 'NotificationChannel[]'
   */
  export type ListEnumNotificationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationChannel[]'>
    


  /**
   * Reference to a field of type 'NotificationChannel'
   */
  export type EnumNotificationChannelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'NotificationChannel'>
    


  /**
   * Reference to a field of type 'MetricType'
   */
  export type EnumMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricType'>
    


  /**
   * Reference to a field of type 'MetricType[]'
   */
  export type ListEnumMetricTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetricType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    hashedPassword?: StringNullableFilter<"User"> | string | null
    walletAddress?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    kycStatus?: EnumKYCStatusFilter<"User"> | $Enums.KYCStatus
    isActive?: BoolFilter<"User"> | boolean
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    payments?: PaymentListRelationFilter
    yieldEarnings?: YieldEarningListRelationFilter
    notifications?: NotificationListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
    sessions?: UserSessionListRelationFilter
    kycDocument?: XOR<KYCDocumentNullableRelationFilter, KYCDocumentWhereInput> | null
    userPreferences?: XOR<UserPreferencesNullableRelationFilter, UserPreferencesWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    walletAddress?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    kycStatus?: SortOrder
    isActive?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    payments?: PaymentOrderByRelationAggregateInput
    yieldEarnings?: YieldEarningOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    apiKeys?: ApiKeyOrderByRelationAggregateInput
    sessions?: UserSessionOrderByRelationAggregateInput
    kycDocument?: KYCDocumentOrderByWithRelationInput
    userPreferences?: UserPreferencesOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    walletAddress?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    hashedPassword?: StringNullableFilter<"User"> | string | null
    firstName?: StringNullableFilter<"User"> | string | null
    lastName?: StringNullableFilter<"User"> | string | null
    phoneNumber?: StringNullableFilter<"User"> | string | null
    kycStatus?: EnumKYCStatusFilter<"User"> | $Enums.KYCStatus
    isActive?: BoolFilter<"User"> | boolean
    role?: EnumUserRoleFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableFilter<"User"> | Date | string | null
    payments?: PaymentListRelationFilter
    yieldEarnings?: YieldEarningListRelationFilter
    notifications?: NotificationListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
    sessions?: UserSessionListRelationFilter
    kycDocument?: XOR<KYCDocumentNullableRelationFilter, KYCDocumentWhereInput> | null
    userPreferences?: XOR<UserPreferencesNullableRelationFilter, UserPreferencesWhereInput> | null
  }, "id" | "email" | "walletAddress">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrderInput | SortOrder
    walletAddress?: SortOrderInput | SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    phoneNumber?: SortOrderInput | SortOrder
    kycStatus?: SortOrder
    isActive?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    hashedPassword?: StringNullableWithAggregatesFilter<"User"> | string | null
    walletAddress?: StringNullableWithAggregatesFilter<"User"> | string | null
    firstName?: StringNullableWithAggregatesFilter<"User"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"User"> | string | null
    phoneNumber?: StringNullableWithAggregatesFilter<"User"> | string | null
    kycStatus?: EnumKYCStatusWithAggregatesFilter<"User"> | $Enums.KYCStatus
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    role?: EnumUserRoleWithAggregatesFilter<"User"> | $Enums.UserRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type UserSessionWhereInput = {
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    refreshToken?: StringNullableFilter<"UserSession"> | string | null
    deviceInfo?: StringNullableFilter<"UserSession"> | string | null
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    lastAccessedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserSessionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    lastAccessedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    refreshToken?: string
    AND?: UserSessionWhereInput | UserSessionWhereInput[]
    OR?: UserSessionWhereInput[]
    NOT?: UserSessionWhereInput | UserSessionWhereInput[]
    userId?: StringFilter<"UserSession"> | string
    deviceInfo?: StringNullableFilter<"UserSession"> | string | null
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    lastAccessedAt?: DateTimeFilter<"UserSession"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken" | "refreshToken">

  export type UserSessionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    deviceInfo?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    lastAccessedAt?: SortOrder
    _count?: UserSessionCountOrderByAggregateInput
    _max?: UserSessionMaxOrderByAggregateInput
    _min?: UserSessionMinOrderByAggregateInput
  }

  export type UserSessionScalarWhereWithAggregatesInput = {
    AND?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    OR?: UserSessionScalarWhereWithAggregatesInput[]
    NOT?: UserSessionScalarWhereWithAggregatesInput | UserSessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSession"> | string
    userId?: StringWithAggregatesFilter<"UserSession"> | string
    sessionToken?: StringWithAggregatesFilter<"UserSession"> | string
    refreshToken?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    deviceInfo?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"UserSession"> | string | null
    isActive?: BoolWithAggregatesFilter<"UserSession"> | boolean
    expiresAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
    lastAccessedAt?: DateTimeWithAggregatesFilter<"UserSession"> | Date | string
  }

  export type UserPreferencesWhereInput = {
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    id?: StringFilter<"UserPreferences"> | string
    userId?: StringFilter<"UserPreferences"> | string
    defaultCurrency?: StringFilter<"UserPreferences"> | string
    notificationSettings?: JsonFilter<"UserPreferences">
    yieldOptimization?: BoolFilter<"UserPreferences"> | boolean
    autoReinvest?: BoolFilter<"UserPreferences"> | boolean
    maxSlippage?: DecimalFilter<"UserPreferences"> | Decimal | DecimalJsLike | number | string
    preferredChains?: StringNullableListFilter<"UserPreferences">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserPreferencesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    defaultCurrency?: SortOrder
    notificationSettings?: SortOrder
    yieldOptimization?: SortOrder
    autoReinvest?: SortOrder
    maxSlippage?: SortOrder
    preferredChains?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserPreferencesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    OR?: UserPreferencesWhereInput[]
    NOT?: UserPreferencesWhereInput | UserPreferencesWhereInput[]
    defaultCurrency?: StringFilter<"UserPreferences"> | string
    notificationSettings?: JsonFilter<"UserPreferences">
    yieldOptimization?: BoolFilter<"UserPreferences"> | boolean
    autoReinvest?: BoolFilter<"UserPreferences"> | boolean
    maxSlippage?: DecimalFilter<"UserPreferences"> | Decimal | DecimalJsLike | number | string
    preferredChains?: StringNullableListFilter<"UserPreferences">
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserPreferencesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    defaultCurrency?: SortOrder
    notificationSettings?: SortOrder
    yieldOptimization?: SortOrder
    autoReinvest?: SortOrder
    maxSlippage?: SortOrder
    preferredChains?: SortOrder
    _count?: UserPreferencesCountOrderByAggregateInput
    _avg?: UserPreferencesAvgOrderByAggregateInput
    _max?: UserPreferencesMaxOrderByAggregateInput
    _min?: UserPreferencesMinOrderByAggregateInput
    _sum?: UserPreferencesSumOrderByAggregateInput
  }

  export type UserPreferencesScalarWhereWithAggregatesInput = {
    AND?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    OR?: UserPreferencesScalarWhereWithAggregatesInput[]
    NOT?: UserPreferencesScalarWhereWithAggregatesInput | UserPreferencesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPreferences"> | string
    userId?: StringWithAggregatesFilter<"UserPreferences"> | string
    defaultCurrency?: StringWithAggregatesFilter<"UserPreferences"> | string
    notificationSettings?: JsonWithAggregatesFilter<"UserPreferences">
    yieldOptimization?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    autoReinvest?: BoolWithAggregatesFilter<"UserPreferences"> | boolean
    maxSlippage?: DecimalWithAggregatesFilter<"UserPreferences"> | Decimal | DecimalJsLike | number | string
    preferredChains?: StringNullableListFilter<"UserPreferences">
  }

  export type KYCDocumentWhereInput = {
    AND?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    OR?: KYCDocumentWhereInput[]
    NOT?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    id?: StringFilter<"KYCDocument"> | string
    userId?: StringFilter<"KYCDocument"> | string
    documentType?: EnumDocumentTypeFilter<"KYCDocument"> | $Enums.DocumentType
    documentNumber?: StringFilter<"KYCDocument"> | string
    documentUrl?: StringNullableFilter<"KYCDocument"> | string | null
    verificationStatus?: EnumVerificationStatusFilter<"KYCDocument"> | $Enums.VerificationStatus
    submittedAt?: DateTimeFilter<"KYCDocument"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"KYCDocument"> | Date | string | null
    reviewedBy?: StringNullableFilter<"KYCDocument"> | string | null
    notes?: StringNullableFilter<"KYCDocument"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type KYCDocumentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    documentType?: SortOrder
    documentNumber?: SortOrder
    documentUrl?: SortOrderInput | SortOrder
    verificationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type KYCDocumentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    OR?: KYCDocumentWhereInput[]
    NOT?: KYCDocumentWhereInput | KYCDocumentWhereInput[]
    documentType?: EnumDocumentTypeFilter<"KYCDocument"> | $Enums.DocumentType
    documentNumber?: StringFilter<"KYCDocument"> | string
    documentUrl?: StringNullableFilter<"KYCDocument"> | string | null
    verificationStatus?: EnumVerificationStatusFilter<"KYCDocument"> | $Enums.VerificationStatus
    submittedAt?: DateTimeFilter<"KYCDocument"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"KYCDocument"> | Date | string | null
    reviewedBy?: StringNullableFilter<"KYCDocument"> | string | null
    notes?: StringNullableFilter<"KYCDocument"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type KYCDocumentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    documentType?: SortOrder
    documentNumber?: SortOrder
    documentUrl?: SortOrderInput | SortOrder
    verificationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    reviewedBy?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: KYCDocumentCountOrderByAggregateInput
    _max?: KYCDocumentMaxOrderByAggregateInput
    _min?: KYCDocumentMinOrderByAggregateInput
  }

  export type KYCDocumentScalarWhereWithAggregatesInput = {
    AND?: KYCDocumentScalarWhereWithAggregatesInput | KYCDocumentScalarWhereWithAggregatesInput[]
    OR?: KYCDocumentScalarWhereWithAggregatesInput[]
    NOT?: KYCDocumentScalarWhereWithAggregatesInput | KYCDocumentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"KYCDocument"> | string
    userId?: StringWithAggregatesFilter<"KYCDocument"> | string
    documentType?: EnumDocumentTypeWithAggregatesFilter<"KYCDocument"> | $Enums.DocumentType
    documentNumber?: StringWithAggregatesFilter<"KYCDocument"> | string
    documentUrl?: StringNullableWithAggregatesFilter<"KYCDocument"> | string | null
    verificationStatus?: EnumVerificationStatusWithAggregatesFilter<"KYCDocument"> | $Enums.VerificationStatus
    submittedAt?: DateTimeWithAggregatesFilter<"KYCDocument"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"KYCDocument"> | Date | string | null
    reviewedBy?: StringNullableWithAggregatesFilter<"KYCDocument"> | string | null
    notes?: StringNullableWithAggregatesFilter<"KYCDocument"> | string | null
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    userId?: StringFilter<"Payment"> | string
    merchantId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    tokenAddress?: StringNullableFilter<"Payment"> | string | null
    tokenSymbol?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    sourceChain?: StringFilter<"Payment"> | string
    destinationChain?: StringNullableFilter<"Payment"> | string | null
    sourceTransactionHash?: StringNullableFilter<"Payment"> | string | null
    destTransactionHash?: StringNullableFilter<"Payment"> | string | null
    senderAddress?: StringFilter<"Payment"> | string
    recipientAddress?: StringFilter<"Payment"> | string
    escrowAddress?: StringNullableFilter<"Payment"> | string | null
    estimatedYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    actualYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: IntNullableFilter<"Payment"> | number | null
    yieldStrategy?: StringNullableFilter<"Payment"> | string | null
    platformFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    networkFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    totalFees?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: JsonNullableFilter<"Payment">
    externalReference?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    confirmedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    releasedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    merchant?: XOR<MerchantNullableRelationFilter, MerchantWhereInput> | null
    yieldEarnings?: YieldEarningListRelationFilter
    paymentEvents?: PaymentEventListRelationFilter
    crossChainTransactions?: CrossChainTransactionListRelationFilter
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    tokenAddress?: SortOrderInput | SortOrder
    tokenSymbol?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrderInput | SortOrder
    sourceTransactionHash?: SortOrderInput | SortOrder
    destTransactionHash?: SortOrderInput | SortOrder
    senderAddress?: SortOrder
    recipientAddress?: SortOrder
    escrowAddress?: SortOrderInput | SortOrder
    estimatedYield?: SortOrderInput | SortOrder
    actualYield?: SortOrderInput | SortOrder
    yieldDuration?: SortOrderInput | SortOrder
    yieldStrategy?: SortOrderInput | SortOrder
    platformFee?: SortOrderInput | SortOrder
    networkFee?: SortOrderInput | SortOrder
    totalFees?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    externalReference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    merchant?: MerchantOrderByWithRelationInput
    yieldEarnings?: YieldEarningOrderByRelationAggregateInput
    paymentEvents?: PaymentEventOrderByRelationAggregateInput
    crossChainTransactions?: CrossChainTransactionOrderByRelationAggregateInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    userId?: StringFilter<"Payment"> | string
    merchantId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    tokenAddress?: StringNullableFilter<"Payment"> | string | null
    tokenSymbol?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    sourceChain?: StringFilter<"Payment"> | string
    destinationChain?: StringNullableFilter<"Payment"> | string | null
    sourceTransactionHash?: StringNullableFilter<"Payment"> | string | null
    destTransactionHash?: StringNullableFilter<"Payment"> | string | null
    senderAddress?: StringFilter<"Payment"> | string
    recipientAddress?: StringFilter<"Payment"> | string
    escrowAddress?: StringNullableFilter<"Payment"> | string | null
    estimatedYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    actualYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: IntNullableFilter<"Payment"> | number | null
    yieldStrategy?: StringNullableFilter<"Payment"> | string | null
    platformFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    networkFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    totalFees?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: JsonNullableFilter<"Payment">
    externalReference?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    confirmedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    releasedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    merchant?: XOR<MerchantNullableRelationFilter, MerchantWhereInput> | null
    yieldEarnings?: YieldEarningListRelationFilter
    paymentEvents?: PaymentEventListRelationFilter
    crossChainTransactions?: CrossChainTransactionListRelationFilter
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrderInput | SortOrder
    amount?: SortOrder
    currency?: SortOrder
    tokenAddress?: SortOrderInput | SortOrder
    tokenSymbol?: SortOrderInput | SortOrder
    status?: SortOrder
    type?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrderInput | SortOrder
    sourceTransactionHash?: SortOrderInput | SortOrder
    destTransactionHash?: SortOrderInput | SortOrder
    senderAddress?: SortOrder
    recipientAddress?: SortOrder
    escrowAddress?: SortOrderInput | SortOrder
    estimatedYield?: SortOrderInput | SortOrder
    actualYield?: SortOrderInput | SortOrder
    yieldDuration?: SortOrderInput | SortOrder
    yieldStrategy?: SortOrderInput | SortOrder
    platformFee?: SortOrderInput | SortOrder
    networkFee?: SortOrderInput | SortOrder
    totalFees?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    externalReference?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    confirmedAt?: SortOrderInput | SortOrder
    releasedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _avg?: PaymentAvgOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
    _sum?: PaymentSumOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    userId?: StringWithAggregatesFilter<"Payment"> | string
    merchantId?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    amount?: DecimalWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringWithAggregatesFilter<"Payment"> | string
    tokenAddress?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    tokenSymbol?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    status?: EnumPaymentStatusWithAggregatesFilter<"Payment"> | $Enums.PaymentStatus
    type?: EnumPaymentTypeWithAggregatesFilter<"Payment"> | $Enums.PaymentType
    sourceChain?: StringWithAggregatesFilter<"Payment"> | string
    destinationChain?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    sourceTransactionHash?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    destTransactionHash?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    senderAddress?: StringWithAggregatesFilter<"Payment"> | string
    recipientAddress?: StringWithAggregatesFilter<"Payment"> | string
    escrowAddress?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    estimatedYield?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    actualYield?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: IntNullableWithAggregatesFilter<"Payment"> | number | null
    yieldStrategy?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    platformFee?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    networkFee?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    totalFees?: DecimalNullableWithAggregatesFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"Payment">
    externalReference?: StringNullableWithAggregatesFilter<"Payment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    confirmedAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    releasedAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"Payment"> | Date | string | null
  }

  export type PaymentEventWhereInput = {
    AND?: PaymentEventWhereInput | PaymentEventWhereInput[]
    OR?: PaymentEventWhereInput[]
    NOT?: PaymentEventWhereInput | PaymentEventWhereInput[]
    id?: StringFilter<"PaymentEvent"> | string
    paymentId?: StringFilter<"PaymentEvent"> | string
    eventType?: EnumPaymentEventTypeFilter<"PaymentEvent"> | $Enums.PaymentEventType
    transactionHash?: StringNullableFilter<"PaymentEvent"> | string | null
    blockNumber?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    chainId?: StringNullableFilter<"PaymentEvent"> | string | null
    gasUsed?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    gasPrice?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    eventData?: JsonNullableFilter<"PaymentEvent">
    createdAt?: DateTimeFilter<"PaymentEvent"> | Date | string
    payment?: XOR<PaymentRelationFilter, PaymentWhereInput>
  }

  export type PaymentEventOrderByWithRelationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    eventType?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    chainId?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    eventData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    payment?: PaymentOrderByWithRelationInput
  }

  export type PaymentEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentEventWhereInput | PaymentEventWhereInput[]
    OR?: PaymentEventWhereInput[]
    NOT?: PaymentEventWhereInput | PaymentEventWhereInput[]
    paymentId?: StringFilter<"PaymentEvent"> | string
    eventType?: EnumPaymentEventTypeFilter<"PaymentEvent"> | $Enums.PaymentEventType
    transactionHash?: StringNullableFilter<"PaymentEvent"> | string | null
    blockNumber?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    chainId?: StringNullableFilter<"PaymentEvent"> | string | null
    gasUsed?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    gasPrice?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    eventData?: JsonNullableFilter<"PaymentEvent">
    createdAt?: DateTimeFilter<"PaymentEvent"> | Date | string
    payment?: XOR<PaymentRelationFilter, PaymentWhereInput>
  }, "id">

  export type PaymentEventOrderByWithAggregationInput = {
    id?: SortOrder
    paymentId?: SortOrder
    eventType?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    blockNumber?: SortOrderInput | SortOrder
    chainId?: SortOrderInput | SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    eventData?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PaymentEventCountOrderByAggregateInput
    _avg?: PaymentEventAvgOrderByAggregateInput
    _max?: PaymentEventMaxOrderByAggregateInput
    _min?: PaymentEventMinOrderByAggregateInput
    _sum?: PaymentEventSumOrderByAggregateInput
  }

  export type PaymentEventScalarWhereWithAggregatesInput = {
    AND?: PaymentEventScalarWhereWithAggregatesInput | PaymentEventScalarWhereWithAggregatesInput[]
    OR?: PaymentEventScalarWhereWithAggregatesInput[]
    NOT?: PaymentEventScalarWhereWithAggregatesInput | PaymentEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PaymentEvent"> | string
    paymentId?: StringWithAggregatesFilter<"PaymentEvent"> | string
    eventType?: EnumPaymentEventTypeWithAggregatesFilter<"PaymentEvent"> | $Enums.PaymentEventType
    transactionHash?: StringNullableWithAggregatesFilter<"PaymentEvent"> | string | null
    blockNumber?: BigIntNullableWithAggregatesFilter<"PaymentEvent"> | bigint | number | null
    chainId?: StringNullableWithAggregatesFilter<"PaymentEvent"> | string | null
    gasUsed?: BigIntNullableWithAggregatesFilter<"PaymentEvent"> | bigint | number | null
    gasPrice?: BigIntNullableWithAggregatesFilter<"PaymentEvent"> | bigint | number | null
    eventData?: JsonNullableWithAggregatesFilter<"PaymentEvent">
    createdAt?: DateTimeWithAggregatesFilter<"PaymentEvent"> | Date | string
  }

  export type YieldStrategyWhereInput = {
    AND?: YieldStrategyWhereInput | YieldStrategyWhereInput[]
    OR?: YieldStrategyWhereInput[]
    NOT?: YieldStrategyWhereInput | YieldStrategyWhereInput[]
    id?: StringFilter<"YieldStrategy"> | string
    name?: StringFilter<"YieldStrategy"> | string
    description?: StringNullableFilter<"YieldStrategy"> | string | null
    protocolName?: StringFilter<"YieldStrategy"> | string
    chainId?: StringFilter<"YieldStrategy"> | string
    contractAddress?: StringFilter<"YieldStrategy"> | string
    strategyType?: EnumYieldStrategyTypeFilter<"YieldStrategy"> | $Enums.YieldStrategyType
    expectedAPY?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFilter<"YieldStrategy"> | $Enums.RiskLevel
    minAmount?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalNullableFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFilter<"YieldStrategy"> | boolean
    strategyConfig?: JsonFilter<"YieldStrategy">
    totalValueLocked?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    actualAPY?: DecimalNullableFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"YieldStrategy"> | Date | string
    updatedAt?: DateTimeFilter<"YieldStrategy"> | Date | string
    yieldEarnings?: YieldEarningListRelationFilter
  }

  export type YieldStrategyOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    protocolName?: SortOrder
    chainId?: SortOrder
    contractAddress?: SortOrder
    strategyType?: SortOrder
    expectedAPY?: SortOrder
    riskLevel?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    strategyConfig?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    yieldEarnings?: YieldEarningOrderByRelationAggregateInput
  }

  export type YieldStrategyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: YieldStrategyWhereInput | YieldStrategyWhereInput[]
    OR?: YieldStrategyWhereInput[]
    NOT?: YieldStrategyWhereInput | YieldStrategyWhereInput[]
    description?: StringNullableFilter<"YieldStrategy"> | string | null
    protocolName?: StringFilter<"YieldStrategy"> | string
    chainId?: StringFilter<"YieldStrategy"> | string
    contractAddress?: StringFilter<"YieldStrategy"> | string
    strategyType?: EnumYieldStrategyTypeFilter<"YieldStrategy"> | $Enums.YieldStrategyType
    expectedAPY?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFilter<"YieldStrategy"> | $Enums.RiskLevel
    minAmount?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalNullableFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFilter<"YieldStrategy"> | boolean
    strategyConfig?: JsonFilter<"YieldStrategy">
    totalValueLocked?: DecimalFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    actualAPY?: DecimalNullableFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFilter<"YieldStrategy"> | Date | string
    updatedAt?: DateTimeFilter<"YieldStrategy"> | Date | string
    yieldEarnings?: YieldEarningListRelationFilter
  }, "id" | "name">

  export type YieldStrategyOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    protocolName?: SortOrder
    chainId?: SortOrder
    contractAddress?: SortOrder
    strategyType?: SortOrder
    expectedAPY?: SortOrder
    riskLevel?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrderInput | SortOrder
    isActive?: SortOrder
    strategyConfig?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YieldStrategyCountOrderByAggregateInput
    _avg?: YieldStrategyAvgOrderByAggregateInput
    _max?: YieldStrategyMaxOrderByAggregateInput
    _min?: YieldStrategyMinOrderByAggregateInput
    _sum?: YieldStrategySumOrderByAggregateInput
  }

  export type YieldStrategyScalarWhereWithAggregatesInput = {
    AND?: YieldStrategyScalarWhereWithAggregatesInput | YieldStrategyScalarWhereWithAggregatesInput[]
    OR?: YieldStrategyScalarWhereWithAggregatesInput[]
    NOT?: YieldStrategyScalarWhereWithAggregatesInput | YieldStrategyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"YieldStrategy"> | string
    name?: StringWithAggregatesFilter<"YieldStrategy"> | string
    description?: StringNullableWithAggregatesFilter<"YieldStrategy"> | string | null
    protocolName?: StringWithAggregatesFilter<"YieldStrategy"> | string
    chainId?: StringWithAggregatesFilter<"YieldStrategy"> | string
    contractAddress?: StringWithAggregatesFilter<"YieldStrategy"> | string
    strategyType?: EnumYieldStrategyTypeWithAggregatesFilter<"YieldStrategy"> | $Enums.YieldStrategyType
    expectedAPY?: DecimalWithAggregatesFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelWithAggregatesFilter<"YieldStrategy"> | $Enums.RiskLevel
    minAmount?: DecimalWithAggregatesFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    maxAmount?: DecimalNullableWithAggregatesFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolWithAggregatesFilter<"YieldStrategy"> | boolean
    strategyConfig?: JsonWithAggregatesFilter<"YieldStrategy">
    totalValueLocked?: DecimalWithAggregatesFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string
    actualAPY?: DecimalNullableWithAggregatesFilter<"YieldStrategy"> | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeWithAggregatesFilter<"YieldStrategy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"YieldStrategy"> | Date | string
  }

  export type YieldEarningWhereInput = {
    AND?: YieldEarningWhereInput | YieldEarningWhereInput[]
    OR?: YieldEarningWhereInput[]
    NOT?: YieldEarningWhereInput | YieldEarningWhereInput[]
    id?: StringFilter<"YieldEarning"> | string
    userId?: StringFilter<"YieldEarning"> | string
    paymentId?: StringNullableFilter<"YieldEarning"> | string | null
    strategyId?: StringFilter<"YieldEarning"> | string
    principalAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFilter<"YieldEarning"> | string
    tokenSymbol?: StringFilter<"YieldEarning"> | string
    chainId?: StringFilter<"YieldEarning"> | string
    startTime?: DateTimeFilter<"YieldEarning"> | Date | string
    endTime?: DateTimeNullableFilter<"YieldEarning"> | Date | string | null
    duration?: IntNullableFilter<"YieldEarning"> | number | null
    actualAPY?: DecimalNullableFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFilter<"YieldEarning"> | $Enums.YieldStatus
    transactionHash?: StringNullableFilter<"YieldEarning"> | string | null
    createdAt?: DateTimeFilter<"YieldEarning"> | Date | string
    updatedAt?: DateTimeFilter<"YieldEarning"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
    strategy?: XOR<YieldStrategyRelationFilter, YieldStrategyWhereInput>
  }

  export type YieldEarningOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    strategyId?: SortOrder
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    chainId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    actualAPY?: SortOrderInput | SortOrder
    status?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
    strategy?: YieldStrategyOrderByWithRelationInput
  }

  export type YieldEarningWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: YieldEarningWhereInput | YieldEarningWhereInput[]
    OR?: YieldEarningWhereInput[]
    NOT?: YieldEarningWhereInput | YieldEarningWhereInput[]
    userId?: StringFilter<"YieldEarning"> | string
    paymentId?: StringNullableFilter<"YieldEarning"> | string | null
    strategyId?: StringFilter<"YieldEarning"> | string
    principalAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFilter<"YieldEarning"> | string
    tokenSymbol?: StringFilter<"YieldEarning"> | string
    chainId?: StringFilter<"YieldEarning"> | string
    startTime?: DateTimeFilter<"YieldEarning"> | Date | string
    endTime?: DateTimeNullableFilter<"YieldEarning"> | Date | string | null
    duration?: IntNullableFilter<"YieldEarning"> | number | null
    actualAPY?: DecimalNullableFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFilter<"YieldEarning"> | $Enums.YieldStatus
    transactionHash?: StringNullableFilter<"YieldEarning"> | string | null
    createdAt?: DateTimeFilter<"YieldEarning"> | Date | string
    updatedAt?: DateTimeFilter<"YieldEarning"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
    strategy?: XOR<YieldStrategyRelationFilter, YieldStrategyWhereInput>
  }, "id">

  export type YieldEarningOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    strategyId?: SortOrder
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    chainId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrderInput | SortOrder
    duration?: SortOrderInput | SortOrder
    actualAPY?: SortOrderInput | SortOrder
    status?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: YieldEarningCountOrderByAggregateInput
    _avg?: YieldEarningAvgOrderByAggregateInput
    _max?: YieldEarningMaxOrderByAggregateInput
    _min?: YieldEarningMinOrderByAggregateInput
    _sum?: YieldEarningSumOrderByAggregateInput
  }

  export type YieldEarningScalarWhereWithAggregatesInput = {
    AND?: YieldEarningScalarWhereWithAggregatesInput | YieldEarningScalarWhereWithAggregatesInput[]
    OR?: YieldEarningScalarWhereWithAggregatesInput[]
    NOT?: YieldEarningScalarWhereWithAggregatesInput | YieldEarningScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"YieldEarning"> | string
    userId?: StringWithAggregatesFilter<"YieldEarning"> | string
    paymentId?: StringNullableWithAggregatesFilter<"YieldEarning"> | string | null
    strategyId?: StringWithAggregatesFilter<"YieldEarning"> | string
    principalAmount?: DecimalWithAggregatesFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalWithAggregatesFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalWithAggregatesFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalWithAggregatesFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringWithAggregatesFilter<"YieldEarning"> | string
    tokenSymbol?: StringWithAggregatesFilter<"YieldEarning"> | string
    chainId?: StringWithAggregatesFilter<"YieldEarning"> | string
    startTime?: DateTimeWithAggregatesFilter<"YieldEarning"> | Date | string
    endTime?: DateTimeNullableWithAggregatesFilter<"YieldEarning"> | Date | string | null
    duration?: IntNullableWithAggregatesFilter<"YieldEarning"> | number | null
    actualAPY?: DecimalNullableWithAggregatesFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusWithAggregatesFilter<"YieldEarning"> | $Enums.YieldStatus
    transactionHash?: StringNullableWithAggregatesFilter<"YieldEarning"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"YieldEarning"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"YieldEarning"> | Date | string
  }

  export type MerchantWhereInput = {
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    id?: StringFilter<"Merchant"> | string
    name?: StringFilter<"Merchant"> | string
    email?: StringFilter<"Merchant"> | string
    website?: StringNullableFilter<"Merchant"> | string | null
    description?: StringNullableFilter<"Merchant"> | string | null
    category?: StringNullableFilter<"Merchant"> | string | null
    businessType?: EnumBusinessTypeFilter<"Merchant"> | $Enums.BusinessType
    registrationNumber?: StringNullableFilter<"Merchant"> | string | null
    taxId?: StringNullableFilter<"Merchant"> | string | null
    defaultCurrency?: StringFilter<"Merchant"> | string
    supportedChains?: StringNullableListFilter<"Merchant">
    webhookUrl?: StringNullableFilter<"Merchant"> | string | null
    isActive?: BoolFilter<"Merchant"> | boolean
    verificationStatus?: EnumVerificationStatusFilter<"Merchant"> | $Enums.VerificationStatus
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    payments?: PaymentListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
  }

  export type MerchantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    businessType?: SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    defaultCurrency?: SortOrder
    supportedChains?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    payments?: PaymentOrderByRelationAggregateInput
    apiKeys?: ApiKeyOrderByRelationAggregateInput
  }

  export type MerchantWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: MerchantWhereInput | MerchantWhereInput[]
    OR?: MerchantWhereInput[]
    NOT?: MerchantWhereInput | MerchantWhereInput[]
    name?: StringFilter<"Merchant"> | string
    website?: StringNullableFilter<"Merchant"> | string | null
    description?: StringNullableFilter<"Merchant"> | string | null
    category?: StringNullableFilter<"Merchant"> | string | null
    businessType?: EnumBusinessTypeFilter<"Merchant"> | $Enums.BusinessType
    registrationNumber?: StringNullableFilter<"Merchant"> | string | null
    taxId?: StringNullableFilter<"Merchant"> | string | null
    defaultCurrency?: StringFilter<"Merchant"> | string
    supportedChains?: StringNullableListFilter<"Merchant">
    webhookUrl?: StringNullableFilter<"Merchant"> | string | null
    isActive?: BoolFilter<"Merchant"> | boolean
    verificationStatus?: EnumVerificationStatusFilter<"Merchant"> | $Enums.VerificationStatus
    createdAt?: DateTimeFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeFilter<"Merchant"> | Date | string
    payments?: PaymentListRelationFilter
    apiKeys?: ApiKeyListRelationFilter
  }, "id" | "email">

  export type MerchantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    website?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    businessType?: SortOrder
    registrationNumber?: SortOrderInput | SortOrder
    taxId?: SortOrderInput | SortOrder
    defaultCurrency?: SortOrder
    supportedChains?: SortOrder
    webhookUrl?: SortOrderInput | SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MerchantCountOrderByAggregateInput
    _max?: MerchantMaxOrderByAggregateInput
    _min?: MerchantMinOrderByAggregateInput
  }

  export type MerchantScalarWhereWithAggregatesInput = {
    AND?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    OR?: MerchantScalarWhereWithAggregatesInput[]
    NOT?: MerchantScalarWhereWithAggregatesInput | MerchantScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Merchant"> | string
    name?: StringWithAggregatesFilter<"Merchant"> | string
    email?: StringWithAggregatesFilter<"Merchant"> | string
    website?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    description?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    category?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    businessType?: EnumBusinessTypeWithAggregatesFilter<"Merchant"> | $Enums.BusinessType
    registrationNumber?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    taxId?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    defaultCurrency?: StringWithAggregatesFilter<"Merchant"> | string
    supportedChains?: StringNullableListFilter<"Merchant">
    webhookUrl?: StringNullableWithAggregatesFilter<"Merchant"> | string | null
    isActive?: BoolWithAggregatesFilter<"Merchant"> | boolean
    verificationStatus?: EnumVerificationStatusWithAggregatesFilter<"Merchant"> | $Enums.VerificationStatus
    createdAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Merchant"> | Date | string
  }

  export type ApiKeyWhereInput = {
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    userId?: StringNullableFilter<"ApiKey"> | string | null
    merchantId?: StringNullableFilter<"ApiKey"> | string | null
    keyHash?: StringFilter<"ApiKey"> | string
    keyPrefix?: StringFilter<"ApiKey"> | string
    name?: StringNullableFilter<"ApiKey"> | string | null
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    merchant?: XOR<MerchantNullableRelationFilter, MerchantWhereInput> | null
  }

  export type ApiKeyOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    merchantId?: SortOrderInput | SortOrder
    keyHash?: SortOrder
    keyPrefix?: SortOrder
    name?: SortOrderInput | SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    merchant?: MerchantOrderByWithRelationInput
  }

  export type ApiKeyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    keyHash?: string
    AND?: ApiKeyWhereInput | ApiKeyWhereInput[]
    OR?: ApiKeyWhereInput[]
    NOT?: ApiKeyWhereInput | ApiKeyWhereInput[]
    userId?: StringNullableFilter<"ApiKey"> | string | null
    merchantId?: StringNullableFilter<"ApiKey"> | string | null
    keyPrefix?: StringFilter<"ApiKey"> | string
    name?: StringNullableFilter<"ApiKey"> | string | null
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    merchant?: XOR<MerchantNullableRelationFilter, MerchantWhereInput> | null
  }, "id" | "keyHash">

  export type ApiKeyOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    merchantId?: SortOrderInput | SortOrder
    keyHash?: SortOrder
    keyPrefix?: SortOrder
    name?: SortOrderInput | SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrderInput | SortOrder
    expiresAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ApiKeyCountOrderByAggregateInput
    _max?: ApiKeyMaxOrderByAggregateInput
    _min?: ApiKeyMinOrderByAggregateInput
  }

  export type ApiKeyScalarWhereWithAggregatesInput = {
    AND?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    OR?: ApiKeyScalarWhereWithAggregatesInput[]
    NOT?: ApiKeyScalarWhereWithAggregatesInput | ApiKeyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ApiKey"> | string
    userId?: StringNullableWithAggregatesFilter<"ApiKey"> | string | null
    merchantId?: StringNullableWithAggregatesFilter<"ApiKey"> | string | null
    keyHash?: StringWithAggregatesFilter<"ApiKey"> | string
    keyPrefix?: StringWithAggregatesFilter<"ApiKey"> | string
    name?: StringNullableWithAggregatesFilter<"ApiKey"> | string | null
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolWithAggregatesFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableWithAggregatesFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ApiKey"> | Date | string
  }

  export type CrossChainTransactionWhereInput = {
    AND?: CrossChainTransactionWhereInput | CrossChainTransactionWhereInput[]
    OR?: CrossChainTransactionWhereInput[]
    NOT?: CrossChainTransactionWhereInput | CrossChainTransactionWhereInput[]
    id?: StringFilter<"CrossChainTransaction"> | string
    paymentId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceChain?: StringFilter<"CrossChainTransaction"> | string
    destinationChain?: StringFilter<"CrossChainTransaction"> | string
    sourceTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    destTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    bridgeTransactionId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceAmount?: DecimalFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string
    destinationAmount?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFilter<"CrossChainTransaction"> | string
    destinationAddress?: StringFilter<"CrossChainTransaction"> | string
    bridgeAddress?: StringNullableFilter<"CrossChainTransaction"> | string | null
    status?: EnumCrossChainStatusFilter<"CrossChainTransaction"> | $Enums.CrossChainStatus
    createdAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    sourceConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
    destConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
    payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
  }

  export type CrossChainTransactionOrderByWithRelationInput = {
    id?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrderInput | SortOrder
    destTransactionHash?: SortOrderInput | SortOrder
    bridgeTransactionId?: SortOrderInput | SortOrder
    sourceAmount?: SortOrder
    destinationAmount?: SortOrderInput | SortOrder
    bridgeFee?: SortOrderInput | SortOrder
    sourceAddress?: SortOrder
    destinationAddress?: SortOrder
    bridgeAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sourceConfirmedAt?: SortOrderInput | SortOrder
    destConfirmedAt?: SortOrderInput | SortOrder
    payment?: PaymentOrderByWithRelationInput
  }

  export type CrossChainTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CrossChainTransactionWhereInput | CrossChainTransactionWhereInput[]
    OR?: CrossChainTransactionWhereInput[]
    NOT?: CrossChainTransactionWhereInput | CrossChainTransactionWhereInput[]
    paymentId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceChain?: StringFilter<"CrossChainTransaction"> | string
    destinationChain?: StringFilter<"CrossChainTransaction"> | string
    sourceTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    destTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    bridgeTransactionId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceAmount?: DecimalFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string
    destinationAmount?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFilter<"CrossChainTransaction"> | string
    destinationAddress?: StringFilter<"CrossChainTransaction"> | string
    bridgeAddress?: StringNullableFilter<"CrossChainTransaction"> | string | null
    status?: EnumCrossChainStatusFilter<"CrossChainTransaction"> | $Enums.CrossChainStatus
    createdAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    sourceConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
    destConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
    payment?: XOR<PaymentNullableRelationFilter, PaymentWhereInput> | null
  }, "id">

  export type CrossChainTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrderInput | SortOrder
    destTransactionHash?: SortOrderInput | SortOrder
    bridgeTransactionId?: SortOrderInput | SortOrder
    sourceAmount?: SortOrder
    destinationAmount?: SortOrderInput | SortOrder
    bridgeFee?: SortOrderInput | SortOrder
    sourceAddress?: SortOrder
    destinationAddress?: SortOrder
    bridgeAddress?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sourceConfirmedAt?: SortOrderInput | SortOrder
    destConfirmedAt?: SortOrderInput | SortOrder
    _count?: CrossChainTransactionCountOrderByAggregateInput
    _avg?: CrossChainTransactionAvgOrderByAggregateInput
    _max?: CrossChainTransactionMaxOrderByAggregateInput
    _min?: CrossChainTransactionMinOrderByAggregateInput
    _sum?: CrossChainTransactionSumOrderByAggregateInput
  }

  export type CrossChainTransactionScalarWhereWithAggregatesInput = {
    AND?: CrossChainTransactionScalarWhereWithAggregatesInput | CrossChainTransactionScalarWhereWithAggregatesInput[]
    OR?: CrossChainTransactionScalarWhereWithAggregatesInput[]
    NOT?: CrossChainTransactionScalarWhereWithAggregatesInput | CrossChainTransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CrossChainTransaction"> | string
    paymentId?: StringNullableWithAggregatesFilter<"CrossChainTransaction"> | string | null
    sourceChain?: StringWithAggregatesFilter<"CrossChainTransaction"> | string
    destinationChain?: StringWithAggregatesFilter<"CrossChainTransaction"> | string
    sourceTransactionHash?: StringNullableWithAggregatesFilter<"CrossChainTransaction"> | string | null
    destTransactionHash?: StringNullableWithAggregatesFilter<"CrossChainTransaction"> | string | null
    bridgeTransactionId?: StringNullableWithAggregatesFilter<"CrossChainTransaction"> | string | null
    sourceAmount?: DecimalWithAggregatesFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string
    destinationAmount?: DecimalNullableWithAggregatesFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: DecimalNullableWithAggregatesFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringWithAggregatesFilter<"CrossChainTransaction"> | string
    destinationAddress?: StringWithAggregatesFilter<"CrossChainTransaction"> | string
    bridgeAddress?: StringNullableWithAggregatesFilter<"CrossChainTransaction"> | string | null
    status?: EnumCrossChainStatusWithAggregatesFilter<"CrossChainTransaction"> | $Enums.CrossChainStatus
    createdAt?: DateTimeWithAggregatesFilter<"CrossChainTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CrossChainTransaction"> | Date | string
    sourceConfirmedAt?: DateTimeNullableWithAggregatesFilter<"CrossChainTransaction"> | Date | string | null
    destConfirmedAt?: DateTimeNullableWithAggregatesFilter<"CrossChainTransaction"> | Date | string | null
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    isArchived?: BoolFilter<"Notification"> | boolean
    channels?: EnumNotificationChannelNullableListFilter<"Notification">
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isArchived?: SortOrder
    channels?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    isArchived?: BoolFilter<"Notification"> | boolean
    channels?: EnumNotificationChannelNullableListFilter<"Notification">
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrderInput | SortOrder
    isRead?: SortOrder
    isArchived?: SortOrder
    channels?: SortOrder
    sentAt?: SortOrderInput | SortOrder
    deliveredAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    userId?: StringWithAggregatesFilter<"Notification"> | string
    type?: EnumNotificationTypeWithAggregatesFilter<"Notification"> | $Enums.NotificationType
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    data?: JsonNullableWithAggregatesFilter<"Notification">
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    isArchived?: BoolWithAggregatesFilter<"Notification"> | boolean
    channels?: EnumNotificationChannelNullableListFilter<"Notification">
    sentAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    deliveredAt?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type SystemMetricsWhereInput = {
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    id?: StringFilter<"SystemMetrics"> | string
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: DecimalFilter<"SystemMetrics"> | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFilter<"SystemMetrics"> | $Enums.MetricType
    chainId?: StringNullableFilter<"SystemMetrics"> | string | null
    metadata?: JsonNullableFilter<"SystemMetrics">
    timestamp?: DateTimeFilter<"SystemMetrics"> | Date | string
  }

  export type SystemMetricsOrderByWithRelationInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricType?: SortOrder
    chainId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type SystemMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    OR?: SystemMetricsWhereInput[]
    NOT?: SystemMetricsWhereInput | SystemMetricsWhereInput[]
    metricName?: StringFilter<"SystemMetrics"> | string
    metricValue?: DecimalFilter<"SystemMetrics"> | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFilter<"SystemMetrics"> | $Enums.MetricType
    chainId?: StringNullableFilter<"SystemMetrics"> | string | null
    metadata?: JsonNullableFilter<"SystemMetrics">
    timestamp?: DateTimeFilter<"SystemMetrics"> | Date | string
  }, "id">

  export type SystemMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricType?: SortOrder
    chainId?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: SystemMetricsCountOrderByAggregateInput
    _avg?: SystemMetricsAvgOrderByAggregateInput
    _max?: SystemMetricsMaxOrderByAggregateInput
    _min?: SystemMetricsMinOrderByAggregateInput
    _sum?: SystemMetricsSumOrderByAggregateInput
  }

  export type SystemMetricsScalarWhereWithAggregatesInput = {
    AND?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    OR?: SystemMetricsScalarWhereWithAggregatesInput[]
    NOT?: SystemMetricsScalarWhereWithAggregatesInput | SystemMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SystemMetrics"> | string
    metricName?: StringWithAggregatesFilter<"SystemMetrics"> | string
    metricValue?: DecimalWithAggregatesFilter<"SystemMetrics"> | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeWithAggregatesFilter<"SystemMetrics"> | $Enums.MetricType
    chainId?: StringNullableWithAggregatesFilter<"SystemMetrics"> | string | null
    metadata?: JsonNullableWithAggregatesFilter<"SystemMetrics">
    timestamp?: DateTimeWithAggregatesFilter<"SystemMetrics"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserSessionCreateInput = {
    id?: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type UserSessionUncheckedCreateInput = {
    id?: string
    userId: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type UserSessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type UserSessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionCreateManyInput = {
    id?: string
    userId: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type UserSessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPreferencesCreateInput = {
    id?: string
    defaultCurrency?: string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesCreatepreferredChainsInput | string[]
    user: UserCreateNestedOneWithoutUserPreferencesInput
  }

  export type UserPreferencesUncheckedCreateInput = {
    id?: string
    userId: string
    defaultCurrency?: string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesCreatepreferredChainsInput | string[]
  }

  export type UserPreferencesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
    user?: UserUpdateOneRequiredWithoutUserPreferencesNestedInput
  }

  export type UserPreferencesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
  }

  export type UserPreferencesCreateManyInput = {
    id?: string
    userId: string
    defaultCurrency?: string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesCreatepreferredChainsInput | string[]
  }

  export type UserPreferencesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
  }

  export type UserPreferencesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
  }

  export type KYCDocumentCreateInput = {
    id?: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl?: string | null
    verificationStatus?: $Enums.VerificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    notes?: string | null
    user: UserCreateNestedOneWithoutKycDocumentInput
  }

  export type KYCDocumentUncheckedCreateInput = {
    id?: string
    userId: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl?: string | null
    verificationStatus?: $Enums.VerificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    notes?: string | null
  }

  export type KYCDocumentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutKycDocumentNestedInput
  }

  export type KYCDocumentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KYCDocumentCreateManyInput = {
    id?: string
    userId: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl?: string | null
    verificationStatus?: $Enums.VerificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    notes?: string | null
  }

  export type KYCDocumentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KYCDocumentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PaymentCreateInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutPaymentsInput
    merchant?: MerchantCreateNestedOneWithoutPaymentsInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    userId: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventUncheckedCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    merchant?: MerchantUpdateOneWithoutPaymentsNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    id?: string
    userId: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PaymentEventCreateInput = {
    id?: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    payment: PaymentCreateNestedOneWithoutPaymentEventsInput
  }

  export type PaymentEventUncheckedCreateInput = {
    id?: string
    paymentId: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PaymentEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUpdateOneRequiredWithoutPaymentEventsNestedInput
  }

  export type PaymentEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentEventCreateManyInput = {
    id?: string
    paymentId: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PaymentEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldStrategyCreateInput = {
    id?: string
    name: string
    description?: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal | DecimalJsLike | number | string
    riskLevel?: $Enums.RiskLevel
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: Decimal | DecimalJsLike | number | string
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    yieldEarnings?: YieldEarningCreateNestedManyWithoutStrategyInput
  }

  export type YieldStrategyUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal | DecimalJsLike | number | string
    riskLevel?: $Enums.RiskLevel
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: Decimal | DecimalJsLike | number | string
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutStrategyInput
  }

  export type YieldStrategyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yieldEarnings?: YieldEarningUpdateManyWithoutStrategyNestedInput
  }

  export type YieldStrategyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutStrategyNestedInput
  }

  export type YieldStrategyCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal | DecimalJsLike | number | string
    riskLevel?: $Enums.RiskLevel
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: Decimal | DecimalJsLike | number | string
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldStrategyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldStrategyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningCreateInput = {
    id?: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutYieldEarningsInput
    payment?: PaymentCreateNestedOneWithoutYieldEarningsInput
    strategy: YieldStrategyCreateNestedOneWithoutYieldEarningsInput
  }

  export type YieldEarningUncheckedCreateInput = {
    id?: string
    userId: string
    paymentId?: string | null
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutYieldEarningsNestedInput
    payment?: PaymentUpdateOneWithoutYieldEarningsNestedInput
    strategy?: YieldStrategyUpdateOneRequiredWithoutYieldEarningsNestedInput
  }

  export type YieldEarningUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningCreateManyInput = {
    id?: string
    userId: string
    paymentId?: string | null
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantCreateInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentCreateNestedManyWithoutMerchantInput
    apiKeys?: ApiKeyCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutMerchantInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUpdateManyWithoutMerchantNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutMerchantNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantCreateManyInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MerchantUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MerchantUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyCreateInput = {
    id?: string
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApiKeysInput
    merchant?: MerchantCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateInput = {
    id?: string
    userId?: string | null
    merchantId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApiKeysNestedInput
    merchant?: MerchantUpdateOneWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyCreateManyInput = {
    id?: string
    userId?: string | null
    merchantId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrossChainTransactionCreateInput = {
    id?: string
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
    payment?: PaymentCreateNestedOneWithoutCrossChainTransactionsInput
  }

  export type CrossChainTransactionUncheckedCreateInput = {
    id?: string
    paymentId?: string | null
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
  }

  export type CrossChainTransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment?: PaymentUpdateOneWithoutCrossChainTransactionsNestedInput
  }

  export type CrossChainTransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CrossChainTransactionCreateManyInput = {
    id?: string
    paymentId?: string | null
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
  }

  export type CrossChainTransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CrossChainTransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NotificationCreateInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: string
    userId: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsCreateInput = {
    id?: string
    metricName: string
    metricValue: Decimal | DecimalJsLike | number | string
    metricType?: $Enums.MetricType
    chainId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemMetricsUncheckedCreateInput = {
    id?: string
    metricName: string
    metricValue: Decimal | DecimalJsLike | number | string
    metricType?: $Enums.MetricType
    chainId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsCreateManyInput = {
    id?: string
    metricName: string
    metricValue: Decimal | DecimalJsLike | number | string
    metricType?: $Enums.MetricType
    chainId?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type SystemMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    metricName?: StringFieldUpdateOperationsInput | string
    metricValue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    metricType?: EnumMetricTypeFieldUpdateOperationsInput | $Enums.MetricType
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumKYCStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKYCStatusFilter<$PrismaModel> | $Enums.KYCStatus
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type PaymentListRelationFilter = {
    every?: PaymentWhereInput
    some?: PaymentWhereInput
    none?: PaymentWhereInput
  }

  export type YieldEarningListRelationFilter = {
    every?: YieldEarningWhereInput
    some?: YieldEarningWhereInput
    none?: YieldEarningWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type ApiKeyListRelationFilter = {
    every?: ApiKeyWhereInput
    some?: ApiKeyWhereInput
    none?: ApiKeyWhereInput
  }

  export type UserSessionListRelationFilter = {
    every?: UserSessionWhereInput
    some?: UserSessionWhereInput
    none?: UserSessionWhereInput
  }

  export type KYCDocumentNullableRelationFilter = {
    is?: KYCDocumentWhereInput | null
    isNot?: KYCDocumentWhereInput | null
  }

  export type UserPreferencesNullableRelationFilter = {
    is?: UserPreferencesWhereInput | null
    isNot?: UserPreferencesWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type YieldEarningOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApiKeyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    walletAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    kycStatus?: SortOrder
    isActive?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    walletAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    kycStatus?: SortOrder
    isActive?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    hashedPassword?: SortOrder
    walletAddress?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    kycStatus?: SortOrder
    isActive?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    lastLoginAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumKYCStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKYCStatusWithAggregatesFilter<$PrismaModel> | $Enums.KYCStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKYCStatusFilter<$PrismaModel>
    _max?: NestedEnumKYCStatusFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserSessionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    refreshToken?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    lastAccessedAt?: SortOrder
  }

  export type UserSessionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    refreshToken?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    lastAccessedAt?: SortOrder
  }

  export type UserSessionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    sessionToken?: SortOrder
    refreshToken?: SortOrder
    deviceInfo?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    isActive?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    lastAccessedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type UserPreferencesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    defaultCurrency?: SortOrder
    notificationSettings?: SortOrder
    yieldOptimization?: SortOrder
    autoReinvest?: SortOrder
    maxSlippage?: SortOrder
    preferredChains?: SortOrder
  }

  export type UserPreferencesAvgOrderByAggregateInput = {
    maxSlippage?: SortOrder
  }

  export type UserPreferencesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    defaultCurrency?: SortOrder
    yieldOptimization?: SortOrder
    autoReinvest?: SortOrder
    maxSlippage?: SortOrder
  }

  export type UserPreferencesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    defaultCurrency?: SortOrder
    yieldOptimization?: SortOrder
    autoReinvest?: SortOrder
    maxSlippage?: SortOrder
  }

  export type UserPreferencesSumOrderByAggregateInput = {
    maxSlippage?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type EnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type EnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }

  export type KYCDocumentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    documentType?: SortOrder
    documentNumber?: SortOrder
    documentUrl?: SortOrder
    verificationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    notes?: SortOrder
  }

  export type KYCDocumentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    documentType?: SortOrder
    documentNumber?: SortOrder
    documentUrl?: SortOrder
    verificationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    notes?: SortOrder
  }

  export type KYCDocumentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    documentType?: SortOrder
    documentNumber?: SortOrder
    documentUrl?: SortOrder
    verificationStatus?: SortOrder
    submittedAt?: SortOrder
    reviewedAt?: SortOrder
    reviewedBy?: SortOrder
    notes?: SortOrder
  }

  export type EnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type EnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }

  export type EnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type EnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type MerchantNullableRelationFilter = {
    is?: MerchantWhereInput | null
    isNot?: MerchantWhereInput | null
  }

  export type PaymentEventListRelationFilter = {
    every?: PaymentEventWhereInput
    some?: PaymentEventWhereInput
    none?: PaymentEventWhereInput
  }

  export type CrossChainTransactionListRelationFilter = {
    every?: CrossChainTransactionWhereInput
    some?: CrossChainTransactionWhereInput
    none?: CrossChainTransactionWhereInput
  }

  export type PaymentEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CrossChainTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    status?: SortOrder
    type?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    senderAddress?: SortOrder
    recipientAddress?: SortOrder
    escrowAddress?: SortOrder
    estimatedYield?: SortOrder
    actualYield?: SortOrder
    yieldDuration?: SortOrder
    yieldStrategy?: SortOrder
    platformFee?: SortOrder
    networkFee?: SortOrder
    totalFees?: SortOrder
    description?: SortOrder
    metadata?: SortOrder
    externalReference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    confirmedAt?: SortOrder
    releasedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentAvgOrderByAggregateInput = {
    amount?: SortOrder
    estimatedYield?: SortOrder
    actualYield?: SortOrder
    yieldDuration?: SortOrder
    platformFee?: SortOrder
    networkFee?: SortOrder
    totalFees?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    status?: SortOrder
    type?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    senderAddress?: SortOrder
    recipientAddress?: SortOrder
    escrowAddress?: SortOrder
    estimatedYield?: SortOrder
    actualYield?: SortOrder
    yieldDuration?: SortOrder
    yieldStrategy?: SortOrder
    platformFee?: SortOrder
    networkFee?: SortOrder
    totalFees?: SortOrder
    description?: SortOrder
    externalReference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    confirmedAt?: SortOrder
    releasedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    amount?: SortOrder
    currency?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    status?: SortOrder
    type?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    senderAddress?: SortOrder
    recipientAddress?: SortOrder
    escrowAddress?: SortOrder
    estimatedYield?: SortOrder
    actualYield?: SortOrder
    yieldDuration?: SortOrder
    yieldStrategy?: SortOrder
    platformFee?: SortOrder
    networkFee?: SortOrder
    totalFees?: SortOrder
    description?: SortOrder
    externalReference?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    confirmedAt?: SortOrder
    releasedAt?: SortOrder
    expiresAt?: SortOrder
  }

  export type PaymentSumOrderByAggregateInput = {
    amount?: SortOrder
    estimatedYield?: SortOrder
    actualYield?: SortOrder
    yieldDuration?: SortOrder
    platformFee?: SortOrder
    networkFee?: SortOrder
    totalFees?: SortOrder
  }

  export type EnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type EnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumPaymentEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentEventType | EnumPaymentEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentEventTypeFilter<$PrismaModel> | $Enums.PaymentEventType
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type PaymentRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type PaymentEventCountOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    eventType?: SortOrder
    transactionHash?: SortOrder
    blockNumber?: SortOrder
    chainId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    eventData?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentEventAvgOrderByAggregateInput = {
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
  }

  export type PaymentEventMaxOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    eventType?: SortOrder
    transactionHash?: SortOrder
    blockNumber?: SortOrder
    chainId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentEventMinOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    eventType?: SortOrder
    transactionHash?: SortOrder
    blockNumber?: SortOrder
    chainId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    createdAt?: SortOrder
  }

  export type PaymentEventSumOrderByAggregateInput = {
    blockNumber?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
  }

  export type EnumPaymentEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentEventType | EnumPaymentEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentEventTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentEventTypeFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type EnumYieldStrategyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStrategyType | EnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStrategyTypeFilter<$PrismaModel> | $Enums.YieldStrategyType
  }

  export type EnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type YieldStrategyCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    protocolName?: SortOrder
    chainId?: SortOrder
    contractAddress?: SortOrder
    strategyType?: SortOrder
    expectedAPY?: SortOrder
    riskLevel?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    strategyConfig?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldStrategyAvgOrderByAggregateInput = {
    expectedAPY?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrder
  }

  export type YieldStrategyMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    protocolName?: SortOrder
    chainId?: SortOrder
    contractAddress?: SortOrder
    strategyType?: SortOrder
    expectedAPY?: SortOrder
    riskLevel?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldStrategyMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    protocolName?: SortOrder
    chainId?: SortOrder
    contractAddress?: SortOrder
    strategyType?: SortOrder
    expectedAPY?: SortOrder
    riskLevel?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    isActive?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldStrategySumOrderByAggregateInput = {
    expectedAPY?: SortOrder
    minAmount?: SortOrder
    maxAmount?: SortOrder
    totalValueLocked?: SortOrder
    actualAPY?: SortOrder
  }

  export type EnumYieldStrategyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStrategyType | EnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStrategyTypeWithAggregatesFilter<$PrismaModel> | $Enums.YieldStrategyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYieldStrategyTypeFilter<$PrismaModel>
    _max?: NestedEnumYieldStrategyTypeFilter<$PrismaModel>
  }

  export type EnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type EnumYieldStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStatus | EnumYieldStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStatusFilter<$PrismaModel> | $Enums.YieldStatus
  }

  export type PaymentNullableRelationFilter = {
    is?: PaymentWhereInput | null
    isNot?: PaymentWhereInput | null
  }

  export type YieldStrategyRelationFilter = {
    is?: YieldStrategyWhereInput
    isNot?: YieldStrategyWhereInput
  }

  export type YieldEarningCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    strategyId?: SortOrder
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    chainId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    actualAPY?: SortOrder
    status?: SortOrder
    transactionHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldEarningAvgOrderByAggregateInput = {
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    duration?: SortOrder
    actualAPY?: SortOrder
  }

  export type YieldEarningMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    strategyId?: SortOrder
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    chainId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    actualAPY?: SortOrder
    status?: SortOrder
    transactionHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldEarningMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    paymentId?: SortOrder
    strategyId?: SortOrder
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    tokenAddress?: SortOrder
    tokenSymbol?: SortOrder
    chainId?: SortOrder
    startTime?: SortOrder
    endTime?: SortOrder
    duration?: SortOrder
    actualAPY?: SortOrder
    status?: SortOrder
    transactionHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type YieldEarningSumOrderByAggregateInput = {
    principalAmount?: SortOrder
    yieldAmount?: SortOrder
    feeAmount?: SortOrder
    netYieldAmount?: SortOrder
    duration?: SortOrder
    actualAPY?: SortOrder
  }

  export type EnumYieldStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStatus | EnumYieldStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStatusWithAggregatesFilter<$PrismaModel> | $Enums.YieldStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYieldStatusFilter<$PrismaModel>
    _max?: NestedEnumYieldStatusFilter<$PrismaModel>
  }

  export type EnumBusinessTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessTypeFilter<$PrismaModel> | $Enums.BusinessType
  }

  export type MerchantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    category?: SortOrder
    businessType?: SortOrder
    registrationNumber?: SortOrder
    taxId?: SortOrder
    defaultCurrency?: SortOrder
    supportedChains?: SortOrder
    webhookUrl?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    category?: SortOrder
    businessType?: SortOrder
    registrationNumber?: SortOrder
    taxId?: SortOrder
    defaultCurrency?: SortOrder
    webhookUrl?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MerchantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    website?: SortOrder
    description?: SortOrder
    category?: SortOrder
    businessType?: SortOrder
    registrationNumber?: SortOrder
    taxId?: SortOrder
    defaultCurrency?: SortOrder
    webhookUrl?: SortOrder
    isActive?: SortOrder
    verificationStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumBusinessTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessTypeWithAggregatesFilter<$PrismaModel> | $Enums.BusinessType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessTypeFilter<$PrismaModel>
    _max?: NestedEnumBusinessTypeFilter<$PrismaModel>
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ApiKeyCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    keyHash?: SortOrder
    keyPrefix?: SortOrder
    name?: SortOrder
    permissions?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApiKeyMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    keyHash?: SortOrder
    keyPrefix?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ApiKeyMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    merchantId?: SortOrder
    keyHash?: SortOrder
    keyPrefix?: SortOrder
    name?: SortOrder
    isActive?: SortOrder
    lastUsedAt?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumCrossChainStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CrossChainStatus | EnumCrossChainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCrossChainStatusFilter<$PrismaModel> | $Enums.CrossChainStatus
  }

  export type CrossChainTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    bridgeTransactionId?: SortOrder
    sourceAmount?: SortOrder
    destinationAmount?: SortOrder
    bridgeFee?: SortOrder
    sourceAddress?: SortOrder
    destinationAddress?: SortOrder
    bridgeAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sourceConfirmedAt?: SortOrder
    destConfirmedAt?: SortOrder
  }

  export type CrossChainTransactionAvgOrderByAggregateInput = {
    sourceAmount?: SortOrder
    destinationAmount?: SortOrder
    bridgeFee?: SortOrder
  }

  export type CrossChainTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    bridgeTransactionId?: SortOrder
    sourceAmount?: SortOrder
    destinationAmount?: SortOrder
    bridgeFee?: SortOrder
    sourceAddress?: SortOrder
    destinationAddress?: SortOrder
    bridgeAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sourceConfirmedAt?: SortOrder
    destConfirmedAt?: SortOrder
  }

  export type CrossChainTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    paymentId?: SortOrder
    sourceChain?: SortOrder
    destinationChain?: SortOrder
    sourceTransactionHash?: SortOrder
    destTransactionHash?: SortOrder
    bridgeTransactionId?: SortOrder
    sourceAmount?: SortOrder
    destinationAmount?: SortOrder
    bridgeFee?: SortOrder
    sourceAddress?: SortOrder
    destinationAddress?: SortOrder
    bridgeAddress?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sourceConfirmedAt?: SortOrder
    destConfirmedAt?: SortOrder
  }

  export type CrossChainTransactionSumOrderByAggregateInput = {
    sourceAmount?: SortOrder
    destinationAmount?: SortOrder
    bridgeFee?: SortOrder
  }

  export type EnumCrossChainStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CrossChainStatus | EnumCrossChainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCrossChainStatusWithAggregatesFilter<$PrismaModel> | $Enums.CrossChainStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCrossChainStatusFilter<$PrismaModel>
    _max?: NestedEnumCrossChainStatusFilter<$PrismaModel>
  }

  export type EnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type EnumNotificationChannelNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationChannel[] | ListEnumNotificationChannelFieldRefInput<$PrismaModel> | null
    has?: $Enums.NotificationChannel | EnumNotificationChannelFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.NotificationChannel[] | ListEnumNotificationChannelFieldRefInput<$PrismaModel>
    hasSome?: $Enums.NotificationChannel[] | ListEnumNotificationChannelFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    data?: SortOrder
    isRead?: SortOrder
    isArchived?: SortOrder
    channels?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    isArchived?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    title?: SortOrder
    message?: SortOrder
    isRead?: SortOrder
    isArchived?: SortOrder
    sentAt?: SortOrder
    deliveredAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type EnumMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeFilter<$PrismaModel> | $Enums.MetricType
  }

  export type SystemMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricType?: SortOrder
    chainId?: SortOrder
    metadata?: SortOrder
    timestamp?: SortOrder
  }

  export type SystemMetricsAvgOrderByAggregateInput = {
    metricValue?: SortOrder
  }

  export type SystemMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricType?: SortOrder
    chainId?: SortOrder
    timestamp?: SortOrder
  }

  export type SystemMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    metricName?: SortOrder
    metricValue?: SortOrder
    metricType?: SortOrder
    chainId?: SortOrder
    timestamp?: SortOrder
  }

  export type SystemMetricsSumOrderByAggregateInput = {
    metricValue?: SortOrder
  }

  export type EnumMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.MetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumMetricTypeFilter<$PrismaModel>
  }

  export type PaymentCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type YieldEarningCreateNestedManyWithoutUserInput = {
    create?: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput> | YieldEarningCreateWithoutUserInput[] | YieldEarningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutUserInput | YieldEarningCreateOrConnectWithoutUserInput[]
    createMany?: YieldEarningCreateManyUserInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApiKeyCreateNestedManyWithoutUserInput = {
    create?: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput> | ApiKeyCreateWithoutUserInput[] | ApiKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUserInput | ApiKeyCreateOrConnectWithoutUserInput[]
    createMany?: ApiKeyCreateManyUserInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type UserSessionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type KYCDocumentCreateNestedOneWithoutUserInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput
    connect?: KYCDocumentWhereUniqueInput
  }

  export type UserPreferencesCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type PaymentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type YieldEarningUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput> | YieldEarningCreateWithoutUserInput[] | YieldEarningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutUserInput | YieldEarningCreateOrConnectWithoutUserInput[]
    createMany?: YieldEarningCreateManyUserInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput> | ApiKeyCreateWithoutUserInput[] | ApiKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUserInput | ApiKeyCreateOrConnectWithoutUserInput[]
    createMany?: ApiKeyCreateManyUserInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type UserSessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
  }

  export type KYCDocumentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput
    connect?: KYCDocumentWhereUniqueInput
  }

  export type UserPreferencesUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    connect?: UserPreferencesWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumKYCStatusFieldUpdateOperationsInput = {
    set?: $Enums.KYCStatus
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PaymentUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type YieldEarningUpdateManyWithoutUserNestedInput = {
    create?: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput> | YieldEarningCreateWithoutUserInput[] | YieldEarningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutUserInput | YieldEarningCreateOrConnectWithoutUserInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutUserInput | YieldEarningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: YieldEarningCreateManyUserInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutUserInput | YieldEarningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutUserInput | YieldEarningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApiKeyUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput> | ApiKeyCreateWithoutUserInput[] | ApiKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUserInput | ApiKeyCreateOrConnectWithoutUserInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutUserInput | ApiKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApiKeyCreateManyUserInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutUserInput | ApiKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutUserInput | ApiKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type UserSessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type KYCDocumentUpdateOneWithoutUserNestedInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput
    upsert?: KYCDocumentUpsertWithoutUserInput
    disconnect?: KYCDocumentWhereInput | boolean
    delete?: KYCDocumentWhereInput | boolean
    connect?: KYCDocumentWhereUniqueInput
    update?: XOR<XOR<KYCDocumentUpdateToOneWithWhereWithoutUserInput, KYCDocumentUpdateWithoutUserInput>, KYCDocumentUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput> | PaymentCreateWithoutUserInput[] | PaymentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutUserInput | PaymentCreateOrConnectWithoutUserInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutUserInput | PaymentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PaymentCreateManyUserInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutUserInput | PaymentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutUserInput | PaymentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type YieldEarningUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput> | YieldEarningCreateWithoutUserInput[] | YieldEarningUncheckedCreateWithoutUserInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutUserInput | YieldEarningCreateOrConnectWithoutUserInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutUserInput | YieldEarningUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: YieldEarningCreateManyUserInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutUserInput | YieldEarningUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutUserInput | YieldEarningUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type ApiKeyUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput> | ApiKeyCreateWithoutUserInput[] | ApiKeyUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutUserInput | ApiKeyCreateOrConnectWithoutUserInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutUserInput | ApiKeyUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ApiKeyCreateManyUserInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutUserInput | ApiKeyUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutUserInput | ApiKeyUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type UserSessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput> | UserSessionCreateWithoutUserInput[] | UserSessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSessionCreateOrConnectWithoutUserInput | UserSessionCreateOrConnectWithoutUserInput[]
    upsert?: UserSessionUpsertWithWhereUniqueWithoutUserInput | UserSessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSessionCreateManyUserInputEnvelope
    set?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    disconnect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    delete?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    connect?: UserSessionWhereUniqueInput | UserSessionWhereUniqueInput[]
    update?: UserSessionUpdateWithWhereUniqueWithoutUserInput | UserSessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSessionUpdateManyWithWhereWithoutUserInput | UserSessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
  }

  export type KYCDocumentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
    connectOrCreate?: KYCDocumentCreateOrConnectWithoutUserInput
    upsert?: KYCDocumentUpsertWithoutUserInput
    disconnect?: KYCDocumentWhereInput | boolean
    delete?: KYCDocumentWhereInput | boolean
    connect?: KYCDocumentWhereUniqueInput
    update?: XOR<XOR<KYCDocumentUpdateToOneWithWhereWithoutUserInput, KYCDocumentUpdateWithoutUserInput>, KYCDocumentUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    connectOrCreate?: UserPreferencesCreateOrConnectWithoutUserInput
    upsert?: UserPreferencesUpsertWithoutUserInput
    disconnect?: UserPreferencesWhereInput | boolean
    delete?: UserPreferencesWhereInput | boolean
    connect?: UserPreferencesWhereUniqueInput
    update?: XOR<XOR<UserPreferencesUpdateToOneWithWhereWithoutUserInput, UserPreferencesUpdateWithoutUserInput>, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserPreferencesCreatepreferredChainsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutUserPreferencesInput = {
    create?: XOR<UserCreateWithoutUserPreferencesInput, UserUncheckedCreateWithoutUserPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPreferencesInput
    connect?: UserWhereUniqueInput
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type UserPreferencesUpdatepreferredChainsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutUserPreferencesNestedInput = {
    create?: XOR<UserCreateWithoutUserPreferencesInput, UserUncheckedCreateWithoutUserPreferencesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPreferencesInput
    upsert?: UserUpsertWithoutUserPreferencesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPreferencesInput, UserUpdateWithoutUserPreferencesInput>, UserUncheckedUpdateWithoutUserPreferencesInput>
  }

  export type UserCreateNestedOneWithoutKycDocumentInput = {
    create?: XOR<UserCreateWithoutKycDocumentInput, UserUncheckedCreateWithoutKycDocumentInput>
    connectOrCreate?: UserCreateOrConnectWithoutKycDocumentInput
    connect?: UserWhereUniqueInput
  }

  export type EnumDocumentTypeFieldUpdateOperationsInput = {
    set?: $Enums.DocumentType
  }

  export type EnumVerificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.VerificationStatus
  }

  export type UserUpdateOneRequiredWithoutKycDocumentNestedInput = {
    create?: XOR<UserCreateWithoutKycDocumentInput, UserUncheckedCreateWithoutKycDocumentInput>
    connectOrCreate?: UserCreateOrConnectWithoutKycDocumentInput
    upsert?: UserUpsertWithoutKycDocumentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKycDocumentInput, UserUpdateWithoutKycDocumentInput>, UserUncheckedUpdateWithoutKycDocumentInput>
  }

  export type UserCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    connect?: UserWhereUniqueInput
  }

  export type MerchantCreateNestedOneWithoutPaymentsInput = {
    create?: XOR<MerchantCreateWithoutPaymentsInput, MerchantUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPaymentsInput
    connect?: MerchantWhereUniqueInput
  }

  export type YieldEarningCreateNestedManyWithoutPaymentInput = {
    create?: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput> | YieldEarningCreateWithoutPaymentInput[] | YieldEarningUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutPaymentInput | YieldEarningCreateOrConnectWithoutPaymentInput[]
    createMany?: YieldEarningCreateManyPaymentInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type PaymentEventCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput> | PaymentEventCreateWithoutPaymentInput[] | PaymentEventUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentEventCreateOrConnectWithoutPaymentInput | PaymentEventCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentEventCreateManyPaymentInputEnvelope
    connect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
  }

  export type CrossChainTransactionCreateNestedManyWithoutPaymentInput = {
    create?: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput> | CrossChainTransactionCreateWithoutPaymentInput[] | CrossChainTransactionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CrossChainTransactionCreateOrConnectWithoutPaymentInput | CrossChainTransactionCreateOrConnectWithoutPaymentInput[]
    createMany?: CrossChainTransactionCreateManyPaymentInputEnvelope
    connect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
  }

  export type YieldEarningUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput> | YieldEarningCreateWithoutPaymentInput[] | YieldEarningUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutPaymentInput | YieldEarningCreateOrConnectWithoutPaymentInput[]
    createMany?: YieldEarningCreateManyPaymentInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type PaymentEventUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput> | PaymentEventCreateWithoutPaymentInput[] | PaymentEventUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentEventCreateOrConnectWithoutPaymentInput | PaymentEventCreateOrConnectWithoutPaymentInput[]
    createMany?: PaymentEventCreateManyPaymentInputEnvelope
    connect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
  }

  export type CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput> | CrossChainTransactionCreateWithoutPaymentInput[] | CrossChainTransactionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CrossChainTransactionCreateOrConnectWithoutPaymentInput | CrossChainTransactionCreateOrConnectWithoutPaymentInput[]
    createMany?: CrossChainTransactionCreateManyPaymentInputEnvelope
    connect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
  }

  export type EnumPaymentStatusFieldUpdateOperationsInput = {
    set?: $Enums.PaymentStatus
  }

  export type EnumPaymentTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentType
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPaymentsNestedInput = {
    create?: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPaymentsInput
    upsert?: UserUpsertWithoutPaymentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPaymentsInput, UserUpdateWithoutPaymentsInput>, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type MerchantUpdateOneWithoutPaymentsNestedInput = {
    create?: XOR<MerchantCreateWithoutPaymentsInput, MerchantUncheckedCreateWithoutPaymentsInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutPaymentsInput
    upsert?: MerchantUpsertWithoutPaymentsInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutPaymentsInput, MerchantUpdateWithoutPaymentsInput>, MerchantUncheckedUpdateWithoutPaymentsInput>
  }

  export type YieldEarningUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput> | YieldEarningCreateWithoutPaymentInput[] | YieldEarningUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutPaymentInput | YieldEarningCreateOrConnectWithoutPaymentInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutPaymentInput | YieldEarningUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: YieldEarningCreateManyPaymentInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutPaymentInput | YieldEarningUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutPaymentInput | YieldEarningUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type PaymentEventUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput> | PaymentEventCreateWithoutPaymentInput[] | PaymentEventUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentEventCreateOrConnectWithoutPaymentInput | PaymentEventCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentEventUpsertWithWhereUniqueWithoutPaymentInput | PaymentEventUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentEventCreateManyPaymentInputEnvelope
    set?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    disconnect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    delete?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    connect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    update?: PaymentEventUpdateWithWhereUniqueWithoutPaymentInput | PaymentEventUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentEventUpdateManyWithWhereWithoutPaymentInput | PaymentEventUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentEventScalarWhereInput | PaymentEventScalarWhereInput[]
  }

  export type CrossChainTransactionUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput> | CrossChainTransactionCreateWithoutPaymentInput[] | CrossChainTransactionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CrossChainTransactionCreateOrConnectWithoutPaymentInput | CrossChainTransactionCreateOrConnectWithoutPaymentInput[]
    upsert?: CrossChainTransactionUpsertWithWhereUniqueWithoutPaymentInput | CrossChainTransactionUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: CrossChainTransactionCreateManyPaymentInputEnvelope
    set?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    disconnect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    delete?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    connect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    update?: CrossChainTransactionUpdateWithWhereUniqueWithoutPaymentInput | CrossChainTransactionUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: CrossChainTransactionUpdateManyWithWhereWithoutPaymentInput | CrossChainTransactionUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: CrossChainTransactionScalarWhereInput | CrossChainTransactionScalarWhereInput[]
  }

  export type YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput> | YieldEarningCreateWithoutPaymentInput[] | YieldEarningUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutPaymentInput | YieldEarningCreateOrConnectWithoutPaymentInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutPaymentInput | YieldEarningUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: YieldEarningCreateManyPaymentInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutPaymentInput | YieldEarningUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutPaymentInput | YieldEarningUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput> | PaymentEventCreateWithoutPaymentInput[] | PaymentEventUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: PaymentEventCreateOrConnectWithoutPaymentInput | PaymentEventCreateOrConnectWithoutPaymentInput[]
    upsert?: PaymentEventUpsertWithWhereUniqueWithoutPaymentInput | PaymentEventUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: PaymentEventCreateManyPaymentInputEnvelope
    set?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    disconnect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    delete?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    connect?: PaymentEventWhereUniqueInput | PaymentEventWhereUniqueInput[]
    update?: PaymentEventUpdateWithWhereUniqueWithoutPaymentInput | PaymentEventUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: PaymentEventUpdateManyWithWhereWithoutPaymentInput | PaymentEventUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: PaymentEventScalarWhereInput | PaymentEventScalarWhereInput[]
  }

  export type CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput> | CrossChainTransactionCreateWithoutPaymentInput[] | CrossChainTransactionUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: CrossChainTransactionCreateOrConnectWithoutPaymentInput | CrossChainTransactionCreateOrConnectWithoutPaymentInput[]
    upsert?: CrossChainTransactionUpsertWithWhereUniqueWithoutPaymentInput | CrossChainTransactionUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: CrossChainTransactionCreateManyPaymentInputEnvelope
    set?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    disconnect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    delete?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    connect?: CrossChainTransactionWhereUniqueInput | CrossChainTransactionWhereUniqueInput[]
    update?: CrossChainTransactionUpdateWithWhereUniqueWithoutPaymentInput | CrossChainTransactionUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: CrossChainTransactionUpdateManyWithWhereWithoutPaymentInput | CrossChainTransactionUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: CrossChainTransactionScalarWhereInput | CrossChainTransactionScalarWhereInput[]
  }

  export type PaymentCreateNestedOneWithoutPaymentEventsInput = {
    create?: XOR<PaymentCreateWithoutPaymentEventsInput, PaymentUncheckedCreateWithoutPaymentEventsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentEventsInput
    connect?: PaymentWhereUniqueInput
  }

  export type EnumPaymentEventTypeFieldUpdateOperationsInput = {
    set?: $Enums.PaymentEventType
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type PaymentUpdateOneRequiredWithoutPaymentEventsNestedInput = {
    create?: XOR<PaymentCreateWithoutPaymentEventsInput, PaymentUncheckedCreateWithoutPaymentEventsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutPaymentEventsInput
    upsert?: PaymentUpsertWithoutPaymentEventsInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutPaymentEventsInput, PaymentUpdateWithoutPaymentEventsInput>, PaymentUncheckedUpdateWithoutPaymentEventsInput>
  }

  export type YieldEarningCreateNestedManyWithoutStrategyInput = {
    create?: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput> | YieldEarningCreateWithoutStrategyInput[] | YieldEarningUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutStrategyInput | YieldEarningCreateOrConnectWithoutStrategyInput[]
    createMany?: YieldEarningCreateManyStrategyInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type YieldEarningUncheckedCreateNestedManyWithoutStrategyInput = {
    create?: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput> | YieldEarningCreateWithoutStrategyInput[] | YieldEarningUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutStrategyInput | YieldEarningCreateOrConnectWithoutStrategyInput[]
    createMany?: YieldEarningCreateManyStrategyInputEnvelope
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
  }

  export type EnumYieldStrategyTypeFieldUpdateOperationsInput = {
    set?: $Enums.YieldStrategyType
  }

  export type EnumRiskLevelFieldUpdateOperationsInput = {
    set?: $Enums.RiskLevel
  }

  export type YieldEarningUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput> | YieldEarningCreateWithoutStrategyInput[] | YieldEarningUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutStrategyInput | YieldEarningCreateOrConnectWithoutStrategyInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutStrategyInput | YieldEarningUpsertWithWhereUniqueWithoutStrategyInput[]
    createMany?: YieldEarningCreateManyStrategyInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutStrategyInput | YieldEarningUpdateWithWhereUniqueWithoutStrategyInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutStrategyInput | YieldEarningUpdateManyWithWhereWithoutStrategyInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type YieldEarningUncheckedUpdateManyWithoutStrategyNestedInput = {
    create?: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput> | YieldEarningCreateWithoutStrategyInput[] | YieldEarningUncheckedCreateWithoutStrategyInput[]
    connectOrCreate?: YieldEarningCreateOrConnectWithoutStrategyInput | YieldEarningCreateOrConnectWithoutStrategyInput[]
    upsert?: YieldEarningUpsertWithWhereUniqueWithoutStrategyInput | YieldEarningUpsertWithWhereUniqueWithoutStrategyInput[]
    createMany?: YieldEarningCreateManyStrategyInputEnvelope
    set?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    disconnect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    delete?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    connect?: YieldEarningWhereUniqueInput | YieldEarningWhereUniqueInput[]
    update?: YieldEarningUpdateWithWhereUniqueWithoutStrategyInput | YieldEarningUpdateWithWhereUniqueWithoutStrategyInput[]
    updateMany?: YieldEarningUpdateManyWithWhereWithoutStrategyInput | YieldEarningUpdateManyWithWhereWithoutStrategyInput[]
    deleteMany?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutYieldEarningsInput = {
    create?: XOR<UserCreateWithoutYieldEarningsInput, UserUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutYieldEarningsInput
    connect?: UserWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutYieldEarningsInput = {
    create?: XOR<PaymentCreateWithoutYieldEarningsInput, PaymentUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutYieldEarningsInput
    connect?: PaymentWhereUniqueInput
  }

  export type YieldStrategyCreateNestedOneWithoutYieldEarningsInput = {
    create?: XOR<YieldStrategyCreateWithoutYieldEarningsInput, YieldStrategyUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: YieldStrategyCreateOrConnectWithoutYieldEarningsInput
    connect?: YieldStrategyWhereUniqueInput
  }

  export type EnumYieldStatusFieldUpdateOperationsInput = {
    set?: $Enums.YieldStatus
  }

  export type UserUpdateOneRequiredWithoutYieldEarningsNestedInput = {
    create?: XOR<UserCreateWithoutYieldEarningsInput, UserUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: UserCreateOrConnectWithoutYieldEarningsInput
    upsert?: UserUpsertWithoutYieldEarningsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutYieldEarningsInput, UserUpdateWithoutYieldEarningsInput>, UserUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type PaymentUpdateOneWithoutYieldEarningsNestedInput = {
    create?: XOR<PaymentCreateWithoutYieldEarningsInput, PaymentUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutYieldEarningsInput
    upsert?: PaymentUpsertWithoutYieldEarningsInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutYieldEarningsInput, PaymentUpdateWithoutYieldEarningsInput>, PaymentUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type YieldStrategyUpdateOneRequiredWithoutYieldEarningsNestedInput = {
    create?: XOR<YieldStrategyCreateWithoutYieldEarningsInput, YieldStrategyUncheckedCreateWithoutYieldEarningsInput>
    connectOrCreate?: YieldStrategyCreateOrConnectWithoutYieldEarningsInput
    upsert?: YieldStrategyUpsertWithoutYieldEarningsInput
    connect?: YieldStrategyWhereUniqueInput
    update?: XOR<XOR<YieldStrategyUpdateToOneWithWhereWithoutYieldEarningsInput, YieldStrategyUpdateWithoutYieldEarningsInput>, YieldStrategyUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type MerchantCreatesupportedChainsInput = {
    set: string[]
  }

  export type PaymentCreateNestedManyWithoutMerchantInput = {
    create?: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput> | PaymentCreateWithoutMerchantInput[] | PaymentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMerchantInput | PaymentCreateOrConnectWithoutMerchantInput[]
    createMany?: PaymentCreateManyMerchantInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ApiKeyCreateNestedManyWithoutMerchantInput = {
    create?: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput> | ApiKeyCreateWithoutMerchantInput[] | ApiKeyUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutMerchantInput | ApiKeyCreateOrConnectWithoutMerchantInput[]
    createMany?: ApiKeyCreateManyMerchantInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type PaymentUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput> | PaymentCreateWithoutMerchantInput[] | PaymentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMerchantInput | PaymentCreateOrConnectWithoutMerchantInput[]
    createMany?: PaymentCreateManyMerchantInputEnvelope
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
  }

  export type ApiKeyUncheckedCreateNestedManyWithoutMerchantInput = {
    create?: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput> | ApiKeyCreateWithoutMerchantInput[] | ApiKeyUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutMerchantInput | ApiKeyCreateOrConnectWithoutMerchantInput[]
    createMany?: ApiKeyCreateManyMerchantInputEnvelope
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
  }

  export type EnumBusinessTypeFieldUpdateOperationsInput = {
    set?: $Enums.BusinessType
  }

  export type MerchantUpdatesupportedChainsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PaymentUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput> | PaymentCreateWithoutMerchantInput[] | PaymentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMerchantInput | PaymentCreateOrConnectWithoutMerchantInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutMerchantInput | PaymentUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: PaymentCreateManyMerchantInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutMerchantInput | PaymentUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutMerchantInput | PaymentUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ApiKeyUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput> | ApiKeyCreateWithoutMerchantInput[] | ApiKeyUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutMerchantInput | ApiKeyCreateOrConnectWithoutMerchantInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutMerchantInput | ApiKeyUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: ApiKeyCreateManyMerchantInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutMerchantInput | ApiKeyUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutMerchantInput | ApiKeyUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type PaymentUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput> | PaymentCreateWithoutMerchantInput[] | PaymentUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: PaymentCreateOrConnectWithoutMerchantInput | PaymentCreateOrConnectWithoutMerchantInput[]
    upsert?: PaymentUpsertWithWhereUniqueWithoutMerchantInput | PaymentUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: PaymentCreateManyMerchantInputEnvelope
    set?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    disconnect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    delete?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    connect?: PaymentWhereUniqueInput | PaymentWhereUniqueInput[]
    update?: PaymentUpdateWithWhereUniqueWithoutMerchantInput | PaymentUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: PaymentUpdateManyWithWhereWithoutMerchantInput | PaymentUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
  }

  export type ApiKeyUncheckedUpdateManyWithoutMerchantNestedInput = {
    create?: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput> | ApiKeyCreateWithoutMerchantInput[] | ApiKeyUncheckedCreateWithoutMerchantInput[]
    connectOrCreate?: ApiKeyCreateOrConnectWithoutMerchantInput | ApiKeyCreateOrConnectWithoutMerchantInput[]
    upsert?: ApiKeyUpsertWithWhereUniqueWithoutMerchantInput | ApiKeyUpsertWithWhereUniqueWithoutMerchantInput[]
    createMany?: ApiKeyCreateManyMerchantInputEnvelope
    set?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    disconnect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    delete?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    connect?: ApiKeyWhereUniqueInput | ApiKeyWhereUniqueInput[]
    update?: ApiKeyUpdateWithWhereUniqueWithoutMerchantInput | ApiKeyUpdateWithWhereUniqueWithoutMerchantInput[]
    updateMany?: ApiKeyUpdateManyWithWhereWithoutMerchantInput | ApiKeyUpdateManyWithWhereWithoutMerchantInput[]
    deleteMany?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
  }

  export type ApiKeyCreatepermissionsInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutApiKeysInput
    connect?: UserWhereUniqueInput
  }

  export type MerchantCreateNestedOneWithoutApiKeysInput = {
    create?: XOR<MerchantCreateWithoutApiKeysInput, MerchantUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutApiKeysInput
    connect?: MerchantWhereUniqueInput
  }

  export type ApiKeyUpdatepermissionsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneWithoutApiKeysNestedInput = {
    create?: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: UserCreateOrConnectWithoutApiKeysInput
    upsert?: UserUpsertWithoutApiKeysInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApiKeysInput, UserUpdateWithoutApiKeysInput>, UserUncheckedUpdateWithoutApiKeysInput>
  }

  export type MerchantUpdateOneWithoutApiKeysNestedInput = {
    create?: XOR<MerchantCreateWithoutApiKeysInput, MerchantUncheckedCreateWithoutApiKeysInput>
    connectOrCreate?: MerchantCreateOrConnectWithoutApiKeysInput
    upsert?: MerchantUpsertWithoutApiKeysInput
    disconnect?: MerchantWhereInput | boolean
    delete?: MerchantWhereInput | boolean
    connect?: MerchantWhereUniqueInput
    update?: XOR<XOR<MerchantUpdateToOneWithWhereWithoutApiKeysInput, MerchantUpdateWithoutApiKeysInput>, MerchantUncheckedUpdateWithoutApiKeysInput>
  }

  export type PaymentCreateNestedOneWithoutCrossChainTransactionsInput = {
    create?: XOR<PaymentCreateWithoutCrossChainTransactionsInput, PaymentUncheckedCreateWithoutCrossChainTransactionsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutCrossChainTransactionsInput
    connect?: PaymentWhereUniqueInput
  }

  export type EnumCrossChainStatusFieldUpdateOperationsInput = {
    set?: $Enums.CrossChainStatus
  }

  export type PaymentUpdateOneWithoutCrossChainTransactionsNestedInput = {
    create?: XOR<PaymentCreateWithoutCrossChainTransactionsInput, PaymentUncheckedCreateWithoutCrossChainTransactionsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutCrossChainTransactionsInput
    upsert?: PaymentUpsertWithoutCrossChainTransactionsInput
    disconnect?: PaymentWhereInput | boolean
    delete?: PaymentWhereInput | boolean
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutCrossChainTransactionsInput, PaymentUpdateWithoutCrossChainTransactionsInput>, PaymentUncheckedUpdateWithoutCrossChainTransactionsInput>
  }

  export type NotificationCreatechannelsInput = {
    set: $Enums.NotificationChannel[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumNotificationTypeFieldUpdateOperationsInput = {
    set?: $Enums.NotificationType
  }

  export type NotificationUpdatechannelsInput = {
    set?: $Enums.NotificationChannel[]
    push?: $Enums.NotificationChannel | $Enums.NotificationChannel[]
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type EnumMetricTypeFieldUpdateOperationsInput = {
    set?: $Enums.MetricType
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumKYCStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKYCStatusFilter<$PrismaModel> | $Enums.KYCStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumKYCStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.KYCStatus | EnumKYCStatusFieldRefInput<$PrismaModel>
    in?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.KYCStatus[] | ListEnumKYCStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumKYCStatusWithAggregatesFilter<$PrismaModel> | $Enums.KYCStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumKYCStatusFilter<$PrismaModel>
    _max?: NestedEnumKYCStatusFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnumDocumentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeFilter<$PrismaModel> | $Enums.DocumentType
  }

  export type NestedEnumVerificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusFilter<$PrismaModel> | $Enums.VerificationStatus
  }

  export type NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DocumentType | EnumDocumentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.DocumentType[] | ListEnumDocumentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumDocumentTypeWithAggregatesFilter<$PrismaModel> | $Enums.DocumentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDocumentTypeFilter<$PrismaModel>
    _max?: NestedEnumDocumentTypeFilter<$PrismaModel>
  }

  export type NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.VerificationStatus | EnumVerificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.VerificationStatus[] | ListEnumVerificationStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumVerificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.VerificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumVerificationStatusFilter<$PrismaModel>
    _max?: NestedEnumVerificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusFilter<$PrismaModel> | $Enums.PaymentStatus
  }

  export type NestedEnumPaymentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeFilter<$PrismaModel> | $Enums.PaymentType
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentStatus | EnumPaymentStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentStatus[] | ListEnumPaymentStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentStatusWithAggregatesFilter<$PrismaModel> | $Enums.PaymentStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentStatusFilter<$PrismaModel>
    _max?: NestedEnumPaymentStatusFilter<$PrismaModel>
  }

  export type NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentType | EnumPaymentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentType[] | ListEnumPaymentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentTypeFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPaymentEventTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentEventType | EnumPaymentEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentEventTypeFilter<$PrismaModel> | $Enums.PaymentEventType
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedEnumPaymentEventTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PaymentEventType | EnumPaymentEventTypeFieldRefInput<$PrismaModel>
    in?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.PaymentEventType[] | ListEnumPaymentEventTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentEventTypeWithAggregatesFilter<$PrismaModel> | $Enums.PaymentEventType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentEventTypeFilter<$PrismaModel>
    _max?: NestedEnumPaymentEventTypeFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedEnumYieldStrategyTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStrategyType | EnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStrategyTypeFilter<$PrismaModel> | $Enums.YieldStrategyType
  }

  export type NestedEnumRiskLevelFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelFilter<$PrismaModel> | $Enums.RiskLevel
  }

  export type NestedEnumYieldStrategyTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStrategyType | EnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStrategyType[] | ListEnumYieldStrategyTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStrategyTypeWithAggregatesFilter<$PrismaModel> | $Enums.YieldStrategyType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYieldStrategyTypeFilter<$PrismaModel>
    _max?: NestedEnumYieldStrategyTypeFilter<$PrismaModel>
  }

  export type NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.RiskLevel | EnumRiskLevelFieldRefInput<$PrismaModel>
    in?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    notIn?: $Enums.RiskLevel[] | ListEnumRiskLevelFieldRefInput<$PrismaModel>
    not?: NestedEnumRiskLevelWithAggregatesFilter<$PrismaModel> | $Enums.RiskLevel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRiskLevelFilter<$PrismaModel>
    _max?: NestedEnumRiskLevelFilter<$PrismaModel>
  }

  export type NestedEnumYieldStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStatus | EnumYieldStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStatusFilter<$PrismaModel> | $Enums.YieldStatus
  }

  export type NestedEnumYieldStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.YieldStatus | EnumYieldStatusFieldRefInput<$PrismaModel>
    in?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.YieldStatus[] | ListEnumYieldStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumYieldStatusWithAggregatesFilter<$PrismaModel> | $Enums.YieldStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumYieldStatusFilter<$PrismaModel>
    _max?: NestedEnumYieldStatusFilter<$PrismaModel>
  }

  export type NestedEnumBusinessTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessTypeFilter<$PrismaModel> | $Enums.BusinessType
  }

  export type NestedEnumBusinessTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BusinessType | EnumBusinessTypeFieldRefInput<$PrismaModel>
    in?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.BusinessType[] | ListEnumBusinessTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumBusinessTypeWithAggregatesFilter<$PrismaModel> | $Enums.BusinessType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBusinessTypeFilter<$PrismaModel>
    _max?: NestedEnumBusinessTypeFilter<$PrismaModel>
  }

  export type NestedEnumCrossChainStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CrossChainStatus | EnumCrossChainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCrossChainStatusFilter<$PrismaModel> | $Enums.CrossChainStatus
  }

  export type NestedEnumCrossChainStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CrossChainStatus | EnumCrossChainStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CrossChainStatus[] | ListEnumCrossChainStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCrossChainStatusWithAggregatesFilter<$PrismaModel> | $Enums.CrossChainStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCrossChainStatusFilter<$PrismaModel>
    _max?: NestedEnumCrossChainStatusFilter<$PrismaModel>
  }

  export type NestedEnumNotificationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeFilter<$PrismaModel> | $Enums.NotificationType
  }

  export type NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.NotificationType | EnumNotificationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.NotificationType[] | ListEnumNotificationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumNotificationTypeWithAggregatesFilter<$PrismaModel> | $Enums.NotificationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumNotificationTypeFilter<$PrismaModel>
    _max?: NestedEnumNotificationTypeFilter<$PrismaModel>
  }

  export type NestedEnumMetricTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeFilter<$PrismaModel> | $Enums.MetricType
  }

  export type NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetricType | EnumMetricTypeFieldRefInput<$PrismaModel>
    in?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.MetricType[] | ListEnumMetricTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumMetricTypeWithAggregatesFilter<$PrismaModel> | $Enums.MetricType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetricTypeFilter<$PrismaModel>
    _max?: NestedEnumMetricTypeFilter<$PrismaModel>
  }

  export type PaymentCreateWithoutUserInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    merchant?: MerchantCreateNestedOneWithoutPaymentsInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutUserInput = {
    id?: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventUncheckedCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutUserInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentCreateManyUserInputEnvelope = {
    data: PaymentCreateManyUserInput | PaymentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type YieldEarningCreateWithoutUserInput = {
    id?: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    payment?: PaymentCreateNestedOneWithoutYieldEarningsInput
    strategy: YieldStrategyCreateNestedOneWithoutYieldEarningsInput
  }

  export type YieldEarningUncheckedCreateWithoutUserInput = {
    id?: string
    paymentId?: string | null
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningCreateOrConnectWithoutUserInput = {
    where: YieldEarningWhereUniqueInput
    create: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput>
  }

  export type YieldEarningCreateManyUserInputEnvelope = {
    data: YieldEarningCreateManyUserInput | YieldEarningCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutUserInput = {
    id?: string
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    merchant?: MerchantCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateWithoutUserInput = {
    id?: string
    merchantId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyCreateOrConnectWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput>
  }

  export type ApiKeyCreateManyUserInputEnvelope = {
    data: ApiKeyCreateManyUserInput | ApiKeyCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserSessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type UserSessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type UserSessionCreateOrConnectWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionCreateManyUserInputEnvelope = {
    data: UserSessionCreateManyUserInput | UserSessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type KYCDocumentCreateWithoutUserInput = {
    id?: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl?: string | null
    verificationStatus?: $Enums.VerificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    notes?: string | null
  }

  export type KYCDocumentUncheckedCreateWithoutUserInput = {
    id?: string
    documentType: $Enums.DocumentType
    documentNumber: string
    documentUrl?: string | null
    verificationStatus?: $Enums.VerificationStatus
    submittedAt?: Date | string
    reviewedAt?: Date | string | null
    reviewedBy?: string | null
    notes?: string | null
  }

  export type KYCDocumentCreateOrConnectWithoutUserInput = {
    where: KYCDocumentWhereUniqueInput
    create: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
  }

  export type UserPreferencesCreateWithoutUserInput = {
    id?: string
    defaultCurrency?: string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesCreatepreferredChainsInput | string[]
  }

  export type UserPreferencesUncheckedCreateWithoutUserInput = {
    id?: string
    defaultCurrency?: string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: boolean
    autoReinvest?: boolean
    maxSlippage?: Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesCreatepreferredChainsInput | string[]
  }

  export type UserPreferencesCreateOrConnectWithoutUserInput = {
    where: UserPreferencesWhereUniqueInput
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
  }

  export type PaymentUpsertWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
    create: XOR<PaymentCreateWithoutUserInput, PaymentUncheckedCreateWithoutUserInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutUserInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutUserInput, PaymentUncheckedUpdateWithoutUserInput>
  }

  export type PaymentUpdateManyWithWhereWithoutUserInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutUserInput>
  }

  export type PaymentScalarWhereInput = {
    AND?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    OR?: PaymentScalarWhereInput[]
    NOT?: PaymentScalarWhereInput | PaymentScalarWhereInput[]
    id?: StringFilter<"Payment"> | string
    userId?: StringFilter<"Payment"> | string
    merchantId?: StringNullableFilter<"Payment"> | string | null
    amount?: DecimalFilter<"Payment"> | Decimal | DecimalJsLike | number | string
    currency?: StringFilter<"Payment"> | string
    tokenAddress?: StringNullableFilter<"Payment"> | string | null
    tokenSymbol?: StringNullableFilter<"Payment"> | string | null
    status?: EnumPaymentStatusFilter<"Payment"> | $Enums.PaymentStatus
    type?: EnumPaymentTypeFilter<"Payment"> | $Enums.PaymentType
    sourceChain?: StringFilter<"Payment"> | string
    destinationChain?: StringNullableFilter<"Payment"> | string | null
    sourceTransactionHash?: StringNullableFilter<"Payment"> | string | null
    destTransactionHash?: StringNullableFilter<"Payment"> | string | null
    senderAddress?: StringFilter<"Payment"> | string
    recipientAddress?: StringFilter<"Payment"> | string
    escrowAddress?: StringNullableFilter<"Payment"> | string | null
    estimatedYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    actualYield?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: IntNullableFilter<"Payment"> | number | null
    yieldStrategy?: StringNullableFilter<"Payment"> | string | null
    platformFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    networkFee?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    totalFees?: DecimalNullableFilter<"Payment"> | Decimal | DecimalJsLike | number | string | null
    description?: StringNullableFilter<"Payment"> | string | null
    metadata?: JsonNullableFilter<"Payment">
    externalReference?: StringNullableFilter<"Payment"> | string | null
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    confirmedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    releasedAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"Payment"> | Date | string | null
  }

  export type YieldEarningUpsertWithWhereUniqueWithoutUserInput = {
    where: YieldEarningWhereUniqueInput
    update: XOR<YieldEarningUpdateWithoutUserInput, YieldEarningUncheckedUpdateWithoutUserInput>
    create: XOR<YieldEarningCreateWithoutUserInput, YieldEarningUncheckedCreateWithoutUserInput>
  }

  export type YieldEarningUpdateWithWhereUniqueWithoutUserInput = {
    where: YieldEarningWhereUniqueInput
    data: XOR<YieldEarningUpdateWithoutUserInput, YieldEarningUncheckedUpdateWithoutUserInput>
  }

  export type YieldEarningUpdateManyWithWhereWithoutUserInput = {
    where: YieldEarningScalarWhereInput
    data: XOR<YieldEarningUpdateManyMutationInput, YieldEarningUncheckedUpdateManyWithoutUserInput>
  }

  export type YieldEarningScalarWhereInput = {
    AND?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
    OR?: YieldEarningScalarWhereInput[]
    NOT?: YieldEarningScalarWhereInput | YieldEarningScalarWhereInput[]
    id?: StringFilter<"YieldEarning"> | string
    userId?: StringFilter<"YieldEarning"> | string
    paymentId?: StringNullableFilter<"YieldEarning"> | string | null
    strategyId?: StringFilter<"YieldEarning"> | string
    principalAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFilter<"YieldEarning"> | string
    tokenSymbol?: StringFilter<"YieldEarning"> | string
    chainId?: StringFilter<"YieldEarning"> | string
    startTime?: DateTimeFilter<"YieldEarning"> | Date | string
    endTime?: DateTimeNullableFilter<"YieldEarning"> | Date | string | null
    duration?: IntNullableFilter<"YieldEarning"> | number | null
    actualAPY?: DecimalNullableFilter<"YieldEarning"> | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFilter<"YieldEarning"> | $Enums.YieldStatus
    transactionHash?: StringNullableFilter<"YieldEarning"> | string | null
    createdAt?: DateTimeFilter<"YieldEarning"> | Date | string
    updatedAt?: DateTimeFilter<"YieldEarning"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    userId?: StringFilter<"Notification"> | string
    type?: EnumNotificationTypeFilter<"Notification"> | $Enums.NotificationType
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    data?: JsonNullableFilter<"Notification">
    isRead?: BoolFilter<"Notification"> | boolean
    isArchived?: BoolFilter<"Notification"> | boolean
    channels?: EnumNotificationChannelNullableListFilter<"Notification">
    sentAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    deliveredAt?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    updatedAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutUserInput, ApiKeyUncheckedUpdateWithoutUserInput>
    create: XOR<ApiKeyCreateWithoutUserInput, ApiKeyUncheckedCreateWithoutUserInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutUserInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutUserInput, ApiKeyUncheckedUpdateWithoutUserInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutUserInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutUserInput>
  }

  export type ApiKeyScalarWhereInput = {
    AND?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    OR?: ApiKeyScalarWhereInput[]
    NOT?: ApiKeyScalarWhereInput | ApiKeyScalarWhereInput[]
    id?: StringFilter<"ApiKey"> | string
    userId?: StringNullableFilter<"ApiKey"> | string | null
    merchantId?: StringNullableFilter<"ApiKey"> | string | null
    keyHash?: StringFilter<"ApiKey"> | string
    keyPrefix?: StringFilter<"ApiKey"> | string
    name?: StringNullableFilter<"ApiKey"> | string | null
    permissions?: StringNullableListFilter<"ApiKey">
    isActive?: BoolFilter<"ApiKey"> | boolean
    lastUsedAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    expiresAt?: DateTimeNullableFilter<"ApiKey"> | Date | string | null
    createdAt?: DateTimeFilter<"ApiKey"> | Date | string
    updatedAt?: DateTimeFilter<"ApiKey"> | Date | string
  }

  export type UserSessionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    update: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
    create: XOR<UserSessionCreateWithoutUserInput, UserSessionUncheckedCreateWithoutUserInput>
  }

  export type UserSessionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSessionWhereUniqueInput
    data: XOR<UserSessionUpdateWithoutUserInput, UserSessionUncheckedUpdateWithoutUserInput>
  }

  export type UserSessionUpdateManyWithWhereWithoutUserInput = {
    where: UserSessionScalarWhereInput
    data: XOR<UserSessionUpdateManyMutationInput, UserSessionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSessionScalarWhereInput = {
    AND?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    OR?: UserSessionScalarWhereInput[]
    NOT?: UserSessionScalarWhereInput | UserSessionScalarWhereInput[]
    id?: StringFilter<"UserSession"> | string
    userId?: StringFilter<"UserSession"> | string
    sessionToken?: StringFilter<"UserSession"> | string
    refreshToken?: StringNullableFilter<"UserSession"> | string | null
    deviceInfo?: StringNullableFilter<"UserSession"> | string | null
    ipAddress?: StringNullableFilter<"UserSession"> | string | null
    userAgent?: StringNullableFilter<"UserSession"> | string | null
    isActive?: BoolFilter<"UserSession"> | boolean
    expiresAt?: DateTimeFilter<"UserSession"> | Date | string
    createdAt?: DateTimeFilter<"UserSession"> | Date | string
    lastAccessedAt?: DateTimeFilter<"UserSession"> | Date | string
  }

  export type KYCDocumentUpsertWithoutUserInput = {
    update: XOR<KYCDocumentUpdateWithoutUserInput, KYCDocumentUncheckedUpdateWithoutUserInput>
    create: XOR<KYCDocumentCreateWithoutUserInput, KYCDocumentUncheckedCreateWithoutUserInput>
    where?: KYCDocumentWhereInput
  }

  export type KYCDocumentUpdateToOneWithWhereWithoutUserInput = {
    where?: KYCDocumentWhereInput
    data: XOR<KYCDocumentUpdateWithoutUserInput, KYCDocumentUncheckedUpdateWithoutUserInput>
  }

  export type KYCDocumentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type KYCDocumentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    documentType?: EnumDocumentTypeFieldUpdateOperationsInput | $Enums.DocumentType
    documentNumber?: StringFieldUpdateOperationsInput | string
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    submittedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reviewedBy?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPreferencesUpsertWithoutUserInput = {
    update: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
    create: XOR<UserPreferencesCreateWithoutUserInput, UserPreferencesUncheckedCreateWithoutUserInput>
    where?: UserPreferencesWhereInput
  }

  export type UserPreferencesUpdateToOneWithWhereWithoutUserInput = {
    where?: UserPreferencesWhereInput
    data: XOR<UserPreferencesUpdateWithoutUserInput, UserPreferencesUncheckedUpdateWithoutUserInput>
  }

  export type UserPreferencesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
  }

  export type UserPreferencesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    notificationSettings?: JsonNullValueInput | InputJsonValue
    yieldOptimization?: BoolFieldUpdateOperationsInput | boolean
    autoReinvest?: BoolFieldUpdateOperationsInput | boolean
    maxSlippage?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    preferredChains?: UserPreferencesUpdatepreferredChainsInput | string[]
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutUserPreferencesInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserPreferencesInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserPreferencesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPreferencesInput, UserUncheckedCreateWithoutUserPreferencesInput>
  }

  export type UserUpsertWithoutUserPreferencesInput = {
    update: XOR<UserUpdateWithoutUserPreferencesInput, UserUncheckedUpdateWithoutUserPreferencesInput>
    create: XOR<UserCreateWithoutUserPreferencesInput, UserUncheckedCreateWithoutUserPreferencesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPreferencesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPreferencesInput, UserUncheckedUpdateWithoutUserPreferencesInput>
  }

  export type UserUpdateWithoutUserPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPreferencesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutKycDocumentInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKycDocumentInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKycDocumentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKycDocumentInput, UserUncheckedCreateWithoutKycDocumentInput>
  }

  export type UserUpsertWithoutKycDocumentInput = {
    update: XOR<UserUpdateWithoutKycDocumentInput, UserUncheckedUpdateWithoutKycDocumentInput>
    create: XOR<UserCreateWithoutKycDocumentInput, UserUncheckedCreateWithoutKycDocumentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKycDocumentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKycDocumentInput, UserUncheckedUpdateWithoutKycDocumentInput>
  }

  export type UserUpdateWithoutKycDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKycDocumentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutPaymentsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPaymentsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPaymentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
  }

  export type MerchantCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKeys?: ApiKeyCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutPaymentsInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutPaymentsInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutPaymentsInput, MerchantUncheckedCreateWithoutPaymentsInput>
  }

  export type YieldEarningCreateWithoutPaymentInput = {
    id?: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutYieldEarningsInput
    strategy: YieldStrategyCreateNestedOneWithoutYieldEarningsInput
  }

  export type YieldEarningUncheckedCreateWithoutPaymentInput = {
    id?: string
    userId: string
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningCreateOrConnectWithoutPaymentInput = {
    where: YieldEarningWhereUniqueInput
    create: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput>
  }

  export type YieldEarningCreateManyPaymentInputEnvelope = {
    data: YieldEarningCreateManyPaymentInput | YieldEarningCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type PaymentEventCreateWithoutPaymentInput = {
    id?: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PaymentEventUncheckedCreateWithoutPaymentInput = {
    id?: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PaymentEventCreateOrConnectWithoutPaymentInput = {
    where: PaymentEventWhereUniqueInput
    create: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentEventCreateManyPaymentInputEnvelope = {
    data: PaymentEventCreateManyPaymentInput | PaymentEventCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type CrossChainTransactionCreateWithoutPaymentInput = {
    id?: string
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
  }

  export type CrossChainTransactionUncheckedCreateWithoutPaymentInput = {
    id?: string
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
  }

  export type CrossChainTransactionCreateOrConnectWithoutPaymentInput = {
    where: CrossChainTransactionWhereUniqueInput
    create: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput>
  }

  export type CrossChainTransactionCreateManyPaymentInputEnvelope = {
    data: CrossChainTransactionCreateManyPaymentInput | CrossChainTransactionCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPaymentsInput = {
    update: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
    create: XOR<UserCreateWithoutPaymentsInput, UserUncheckedCreateWithoutPaymentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPaymentsInput, UserUncheckedUpdateWithoutPaymentsInput>
  }

  export type UserUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MerchantUpsertWithoutPaymentsInput = {
    update: XOR<MerchantUpdateWithoutPaymentsInput, MerchantUncheckedUpdateWithoutPaymentsInput>
    create: XOR<MerchantCreateWithoutPaymentsInput, MerchantUncheckedCreateWithoutPaymentsInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutPaymentsInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutPaymentsInput, MerchantUncheckedUpdateWithoutPaymentsInput>
  }

  export type MerchantUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKeys?: ApiKeyUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type YieldEarningUpsertWithWhereUniqueWithoutPaymentInput = {
    where: YieldEarningWhereUniqueInput
    update: XOR<YieldEarningUpdateWithoutPaymentInput, YieldEarningUncheckedUpdateWithoutPaymentInput>
    create: XOR<YieldEarningCreateWithoutPaymentInput, YieldEarningUncheckedCreateWithoutPaymentInput>
  }

  export type YieldEarningUpdateWithWhereUniqueWithoutPaymentInput = {
    where: YieldEarningWhereUniqueInput
    data: XOR<YieldEarningUpdateWithoutPaymentInput, YieldEarningUncheckedUpdateWithoutPaymentInput>
  }

  export type YieldEarningUpdateManyWithWhereWithoutPaymentInput = {
    where: YieldEarningScalarWhereInput
    data: XOR<YieldEarningUpdateManyMutationInput, YieldEarningUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentEventUpsertWithWhereUniqueWithoutPaymentInput = {
    where: PaymentEventWhereUniqueInput
    update: XOR<PaymentEventUpdateWithoutPaymentInput, PaymentEventUncheckedUpdateWithoutPaymentInput>
    create: XOR<PaymentEventCreateWithoutPaymentInput, PaymentEventUncheckedCreateWithoutPaymentInput>
  }

  export type PaymentEventUpdateWithWhereUniqueWithoutPaymentInput = {
    where: PaymentEventWhereUniqueInput
    data: XOR<PaymentEventUpdateWithoutPaymentInput, PaymentEventUncheckedUpdateWithoutPaymentInput>
  }

  export type PaymentEventUpdateManyWithWhereWithoutPaymentInput = {
    where: PaymentEventScalarWhereInput
    data: XOR<PaymentEventUpdateManyMutationInput, PaymentEventUncheckedUpdateManyWithoutPaymentInput>
  }

  export type PaymentEventScalarWhereInput = {
    AND?: PaymentEventScalarWhereInput | PaymentEventScalarWhereInput[]
    OR?: PaymentEventScalarWhereInput[]
    NOT?: PaymentEventScalarWhereInput | PaymentEventScalarWhereInput[]
    id?: StringFilter<"PaymentEvent"> | string
    paymentId?: StringFilter<"PaymentEvent"> | string
    eventType?: EnumPaymentEventTypeFilter<"PaymentEvent"> | $Enums.PaymentEventType
    transactionHash?: StringNullableFilter<"PaymentEvent"> | string | null
    blockNumber?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    chainId?: StringNullableFilter<"PaymentEvent"> | string | null
    gasUsed?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    gasPrice?: BigIntNullableFilter<"PaymentEvent"> | bigint | number | null
    eventData?: JsonNullableFilter<"PaymentEvent">
    createdAt?: DateTimeFilter<"PaymentEvent"> | Date | string
  }

  export type CrossChainTransactionUpsertWithWhereUniqueWithoutPaymentInput = {
    where: CrossChainTransactionWhereUniqueInput
    update: XOR<CrossChainTransactionUpdateWithoutPaymentInput, CrossChainTransactionUncheckedUpdateWithoutPaymentInput>
    create: XOR<CrossChainTransactionCreateWithoutPaymentInput, CrossChainTransactionUncheckedCreateWithoutPaymentInput>
  }

  export type CrossChainTransactionUpdateWithWhereUniqueWithoutPaymentInput = {
    where: CrossChainTransactionWhereUniqueInput
    data: XOR<CrossChainTransactionUpdateWithoutPaymentInput, CrossChainTransactionUncheckedUpdateWithoutPaymentInput>
  }

  export type CrossChainTransactionUpdateManyWithWhereWithoutPaymentInput = {
    where: CrossChainTransactionScalarWhereInput
    data: XOR<CrossChainTransactionUpdateManyMutationInput, CrossChainTransactionUncheckedUpdateManyWithoutPaymentInput>
  }

  export type CrossChainTransactionScalarWhereInput = {
    AND?: CrossChainTransactionScalarWhereInput | CrossChainTransactionScalarWhereInput[]
    OR?: CrossChainTransactionScalarWhereInput[]
    NOT?: CrossChainTransactionScalarWhereInput | CrossChainTransactionScalarWhereInput[]
    id?: StringFilter<"CrossChainTransaction"> | string
    paymentId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceChain?: StringFilter<"CrossChainTransaction"> | string
    destinationChain?: StringFilter<"CrossChainTransaction"> | string
    sourceTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    destTransactionHash?: StringNullableFilter<"CrossChainTransaction"> | string | null
    bridgeTransactionId?: StringNullableFilter<"CrossChainTransaction"> | string | null
    sourceAmount?: DecimalFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string
    destinationAmount?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: DecimalNullableFilter<"CrossChainTransaction"> | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFilter<"CrossChainTransaction"> | string
    destinationAddress?: StringFilter<"CrossChainTransaction"> | string
    bridgeAddress?: StringNullableFilter<"CrossChainTransaction"> | string | null
    status?: EnumCrossChainStatusFilter<"CrossChainTransaction"> | $Enums.CrossChainStatus
    createdAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"CrossChainTransaction"> | Date | string
    sourceConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
    destConfirmedAt?: DateTimeNullableFilter<"CrossChainTransaction"> | Date | string | null
  }

  export type PaymentCreateWithoutPaymentEventsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutPaymentsInput
    merchant?: MerchantCreateNestedOneWithoutPaymentsInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutPaymentEventsInput = {
    id?: string
    userId: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutPaymentEventsInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutPaymentEventsInput, PaymentUncheckedCreateWithoutPaymentEventsInput>
  }

  export type PaymentUpsertWithoutPaymentEventsInput = {
    update: XOR<PaymentUpdateWithoutPaymentEventsInput, PaymentUncheckedUpdateWithoutPaymentEventsInput>
    create: XOR<PaymentCreateWithoutPaymentEventsInput, PaymentUncheckedCreateWithoutPaymentEventsInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutPaymentEventsInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutPaymentEventsInput, PaymentUncheckedUpdateWithoutPaymentEventsInput>
  }

  export type PaymentUpdateWithoutPaymentEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    merchant?: MerchantUpdateOneWithoutPaymentsNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutPaymentEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type YieldEarningCreateWithoutStrategyInput = {
    id?: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutYieldEarningsInput
    payment?: PaymentCreateNestedOneWithoutYieldEarningsInput
  }

  export type YieldEarningUncheckedCreateWithoutStrategyInput = {
    id?: string
    userId: string
    paymentId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningCreateOrConnectWithoutStrategyInput = {
    where: YieldEarningWhereUniqueInput
    create: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput>
  }

  export type YieldEarningCreateManyStrategyInputEnvelope = {
    data: YieldEarningCreateManyStrategyInput | YieldEarningCreateManyStrategyInput[]
    skipDuplicates?: boolean
  }

  export type YieldEarningUpsertWithWhereUniqueWithoutStrategyInput = {
    where: YieldEarningWhereUniqueInput
    update: XOR<YieldEarningUpdateWithoutStrategyInput, YieldEarningUncheckedUpdateWithoutStrategyInput>
    create: XOR<YieldEarningCreateWithoutStrategyInput, YieldEarningUncheckedCreateWithoutStrategyInput>
  }

  export type YieldEarningUpdateWithWhereUniqueWithoutStrategyInput = {
    where: YieldEarningWhereUniqueInput
    data: XOR<YieldEarningUpdateWithoutStrategyInput, YieldEarningUncheckedUpdateWithoutStrategyInput>
  }

  export type YieldEarningUpdateManyWithWhereWithoutStrategyInput = {
    where: YieldEarningScalarWhereInput
    data: XOR<YieldEarningUpdateManyMutationInput, YieldEarningUncheckedUpdateManyWithoutStrategyInput>
  }

  export type UserCreateWithoutYieldEarningsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutYieldEarningsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutYieldEarningsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutYieldEarningsInput, UserUncheckedCreateWithoutYieldEarningsInput>
  }

  export type PaymentCreateWithoutYieldEarningsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutPaymentsInput
    merchant?: MerchantCreateNestedOneWithoutPaymentsInput
    paymentEvents?: PaymentEventCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutYieldEarningsInput = {
    id?: string
    userId: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    paymentEvents?: PaymentEventUncheckedCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutYieldEarningsInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutYieldEarningsInput, PaymentUncheckedCreateWithoutYieldEarningsInput>
  }

  export type YieldStrategyCreateWithoutYieldEarningsInput = {
    id?: string
    name: string
    description?: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal | DecimalJsLike | number | string
    riskLevel?: $Enums.RiskLevel
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: Decimal | DecimalJsLike | number | string
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldStrategyUncheckedCreateWithoutYieldEarningsInput = {
    id?: string
    name: string
    description?: string | null
    protocolName: string
    chainId: string
    contractAddress: string
    strategyType: $Enums.YieldStrategyType
    expectedAPY: Decimal | DecimalJsLike | number | string
    riskLevel?: $Enums.RiskLevel
    minAmount: Decimal | DecimalJsLike | number | string
    maxAmount?: Decimal | DecimalJsLike | number | string | null
    isActive?: boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: Decimal | DecimalJsLike | number | string
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldStrategyCreateOrConnectWithoutYieldEarningsInput = {
    where: YieldStrategyWhereUniqueInput
    create: XOR<YieldStrategyCreateWithoutYieldEarningsInput, YieldStrategyUncheckedCreateWithoutYieldEarningsInput>
  }

  export type UserUpsertWithoutYieldEarningsInput = {
    update: XOR<UserUpdateWithoutYieldEarningsInput, UserUncheckedUpdateWithoutYieldEarningsInput>
    create: XOR<UserCreateWithoutYieldEarningsInput, UserUncheckedCreateWithoutYieldEarningsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutYieldEarningsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutYieldEarningsInput, UserUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type UserUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PaymentUpsertWithoutYieldEarningsInput = {
    update: XOR<PaymentUpdateWithoutYieldEarningsInput, PaymentUncheckedUpdateWithoutYieldEarningsInput>
    create: XOR<PaymentCreateWithoutYieldEarningsInput, PaymentUncheckedCreateWithoutYieldEarningsInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutYieldEarningsInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutYieldEarningsInput, PaymentUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type PaymentUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    merchant?: MerchantUpdateOneWithoutPaymentsNestedInput
    paymentEvents?: PaymentEventUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    paymentEvents?: PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type YieldStrategyUpsertWithoutYieldEarningsInput = {
    update: XOR<YieldStrategyUpdateWithoutYieldEarningsInput, YieldStrategyUncheckedUpdateWithoutYieldEarningsInput>
    create: XOR<YieldStrategyCreateWithoutYieldEarningsInput, YieldStrategyUncheckedCreateWithoutYieldEarningsInput>
    where?: YieldStrategyWhereInput
  }

  export type YieldStrategyUpdateToOneWithWhereWithoutYieldEarningsInput = {
    where?: YieldStrategyWhereInput
    data: XOR<YieldStrategyUpdateWithoutYieldEarningsInput, YieldStrategyUncheckedUpdateWithoutYieldEarningsInput>
  }

  export type YieldStrategyUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldStrategyUncheckedUpdateWithoutYieldEarningsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    protocolName?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    contractAddress?: StringFieldUpdateOperationsInput | string
    strategyType?: EnumYieldStrategyTypeFieldUpdateOperationsInput | $Enums.YieldStrategyType
    expectedAPY?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    riskLevel?: EnumRiskLevelFieldUpdateOperationsInput | $Enums.RiskLevel
    minAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    maxAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    strategyConfig?: JsonNullValueInput | InputJsonValue
    totalValueLocked?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateWithoutMerchantInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutPaymentsInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutMerchantInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventUncheckedCreateNestedManyWithoutPaymentInput
    crossChainTransactions?: CrossChainTransactionUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutMerchantInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput>
  }

  export type PaymentCreateManyMerchantInputEnvelope = {
    data: PaymentCreateManyMerchantInput | PaymentCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type ApiKeyCreateWithoutMerchantInput = {
    id?: string
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user?: UserCreateNestedOneWithoutApiKeysInput
  }

  export type ApiKeyUncheckedCreateWithoutMerchantInput = {
    id?: string
    userId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyCreateOrConnectWithoutMerchantInput = {
    where: ApiKeyWhereUniqueInput
    create: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput>
  }

  export type ApiKeyCreateManyMerchantInputEnvelope = {
    data: ApiKeyCreateManyMerchantInput | ApiKeyCreateManyMerchantInput[]
    skipDuplicates?: boolean
  }

  export type PaymentUpsertWithWhereUniqueWithoutMerchantInput = {
    where: PaymentWhereUniqueInput
    update: XOR<PaymentUpdateWithoutMerchantInput, PaymentUncheckedUpdateWithoutMerchantInput>
    create: XOR<PaymentCreateWithoutMerchantInput, PaymentUncheckedCreateWithoutMerchantInput>
  }

  export type PaymentUpdateWithWhereUniqueWithoutMerchantInput = {
    where: PaymentWhereUniqueInput
    data: XOR<PaymentUpdateWithoutMerchantInput, PaymentUncheckedUpdateWithoutMerchantInput>
  }

  export type PaymentUpdateManyWithWhereWithoutMerchantInput = {
    where: PaymentScalarWhereInput
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyWithoutMerchantInput>
  }

  export type ApiKeyUpsertWithWhereUniqueWithoutMerchantInput = {
    where: ApiKeyWhereUniqueInput
    update: XOR<ApiKeyUpdateWithoutMerchantInput, ApiKeyUncheckedUpdateWithoutMerchantInput>
    create: XOR<ApiKeyCreateWithoutMerchantInput, ApiKeyUncheckedCreateWithoutMerchantInput>
  }

  export type ApiKeyUpdateWithWhereUniqueWithoutMerchantInput = {
    where: ApiKeyWhereUniqueInput
    data: XOR<ApiKeyUpdateWithoutMerchantInput, ApiKeyUncheckedUpdateWithoutMerchantInput>
  }

  export type ApiKeyUpdateManyWithWhereWithoutMerchantInput = {
    where: ApiKeyScalarWhereInput
    data: XOR<ApiKeyUpdateManyMutationInput, ApiKeyUncheckedUpdateManyWithoutMerchantInput>
  }

  export type UserCreateWithoutApiKeysInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutApiKeysInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutApiKeysInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
  }

  export type MerchantCreateWithoutApiKeysInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentCreateNestedManyWithoutMerchantInput
  }

  export type MerchantUncheckedCreateWithoutApiKeysInput = {
    id?: string
    name: string
    email: string
    website?: string | null
    description?: string | null
    category?: string | null
    businessType?: $Enums.BusinessType
    registrationNumber?: string | null
    taxId?: string | null
    defaultCurrency?: string
    supportedChains?: MerchantCreatesupportedChainsInput | string[]
    webhookUrl?: string | null
    isActive?: boolean
    verificationStatus?: $Enums.VerificationStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    payments?: PaymentUncheckedCreateNestedManyWithoutMerchantInput
  }

  export type MerchantCreateOrConnectWithoutApiKeysInput = {
    where: MerchantWhereUniqueInput
    create: XOR<MerchantCreateWithoutApiKeysInput, MerchantUncheckedCreateWithoutApiKeysInput>
  }

  export type UserUpsertWithoutApiKeysInput = {
    update: XOR<UserUpdateWithoutApiKeysInput, UserUncheckedUpdateWithoutApiKeysInput>
    create: XOR<UserCreateWithoutApiKeysInput, UserUncheckedCreateWithoutApiKeysInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApiKeysInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApiKeysInput, UserUncheckedUpdateWithoutApiKeysInput>
  }

  export type UserUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MerchantUpsertWithoutApiKeysInput = {
    update: XOR<MerchantUpdateWithoutApiKeysInput, MerchantUncheckedUpdateWithoutApiKeysInput>
    create: XOR<MerchantCreateWithoutApiKeysInput, MerchantUncheckedCreateWithoutApiKeysInput>
    where?: MerchantWhereInput
  }

  export type MerchantUpdateToOneWithWhereWithoutApiKeysInput = {
    where?: MerchantWhereInput
    data: XOR<MerchantUpdateWithoutApiKeysInput, MerchantUncheckedUpdateWithoutApiKeysInput>
  }

  export type MerchantUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUpdateManyWithoutMerchantNestedInput
  }

  export type MerchantUncheckedUpdateWithoutApiKeysInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    website?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    businessType?: EnumBusinessTypeFieldUpdateOperationsInput | $Enums.BusinessType
    registrationNumber?: NullableStringFieldUpdateOperationsInput | string | null
    taxId?: NullableStringFieldUpdateOperationsInput | string | null
    defaultCurrency?: StringFieldUpdateOperationsInput | string
    supportedChains?: MerchantUpdatesupportedChainsInput | string[]
    webhookUrl?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    verificationStatus?: EnumVerificationStatusFieldUpdateOperationsInput | $Enums.VerificationStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payments?: PaymentUncheckedUpdateManyWithoutMerchantNestedInput
  }

  export type PaymentCreateWithoutCrossChainTransactionsInput = {
    id?: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    user: UserCreateNestedOneWithoutPaymentsInput
    merchant?: MerchantCreateNestedOneWithoutPaymentsInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateWithoutCrossChainTransactionsInput = {
    id?: string
    userId: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutPaymentInput
    paymentEvents?: PaymentEventUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentCreateOrConnectWithoutCrossChainTransactionsInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutCrossChainTransactionsInput, PaymentUncheckedCreateWithoutCrossChainTransactionsInput>
  }

  export type PaymentUpsertWithoutCrossChainTransactionsInput = {
    update: XOR<PaymentUpdateWithoutCrossChainTransactionsInput, PaymentUncheckedUpdateWithoutCrossChainTransactionsInput>
    create: XOR<PaymentCreateWithoutCrossChainTransactionsInput, PaymentUncheckedCreateWithoutCrossChainTransactionsInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutCrossChainTransactionsInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutCrossChainTransactionsInput, PaymentUncheckedUpdateWithoutCrossChainTransactionsInput>
  }

  export type PaymentUpdateWithoutCrossChainTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    merchant?: MerchantUpdateOneWithoutPaymentsNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutCrossChainTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyCreateNestedManyWithoutUserInput
    sessions?: UserSessionCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    email: string
    hashedPassword?: string | null
    walletAddress?: string | null
    firstName?: string | null
    lastName?: string | null
    phoneNumber?: string | null
    kycStatus?: $Enums.KYCStatus
    isActive?: boolean
    role?: $Enums.UserRole
    createdAt?: Date | string
    updatedAt?: Date | string
    lastLoginAt?: Date | string | null
    payments?: PaymentUncheckedCreateNestedManyWithoutUserInput
    yieldEarnings?: YieldEarningUncheckedCreateNestedManyWithoutUserInput
    apiKeys?: ApiKeyUncheckedCreateNestedManyWithoutUserInput
    sessions?: UserSessionUncheckedCreateNestedManyWithoutUserInput
    kycDocument?: KYCDocumentUncheckedCreateNestedOneWithoutUserInput
    userPreferences?: UserPreferencesUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    hashedPassword?: NullableStringFieldUpdateOperationsInput | string | null
    walletAddress?: NullableStringFieldUpdateOperationsInput | string | null
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    kycStatus?: EnumKYCStatusFieldUpdateOperationsInput | $Enums.KYCStatus
    isActive?: BoolFieldUpdateOperationsInput | boolean
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payments?: PaymentUncheckedUpdateManyWithoutUserNestedInput
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutUserNestedInput
    apiKeys?: ApiKeyUncheckedUpdateManyWithoutUserNestedInput
    sessions?: UserSessionUncheckedUpdateManyWithoutUserNestedInput
    kycDocument?: KYCDocumentUncheckedUpdateOneWithoutUserNestedInput
    userPreferences?: UserPreferencesUncheckedUpdateOneWithoutUserNestedInput
  }

  export type PaymentCreateManyUserInput = {
    id?: string
    merchantId?: string | null
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type YieldEarningCreateManyUserInput = {
    id?: string
    paymentId?: string | null
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    type: $Enums.NotificationType
    title: string
    message: string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: boolean
    isArchived?: boolean
    channels?: NotificationCreatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: Date | string | null
    deliveredAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ApiKeyCreateManyUserInput = {
    id?: string
    merchantId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    refreshToken?: string | null
    deviceInfo?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    isActive?: boolean
    expiresAt: Date | string
    createdAt?: Date | string
    lastAccessedAt?: Date | string
  }

  export type PaymentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    merchant?: MerchantUpdateOneWithoutPaymentsNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type YieldEarningUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUpdateOneWithoutYieldEarningsNestedInput
    strategy?: YieldStrategyUpdateOneRequiredWithoutYieldEarningsNestedInput
  }

  export type YieldEarningUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: EnumNotificationTypeFieldUpdateOperationsInput | $Enums.NotificationType
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    isRead?: BoolFieldUpdateOperationsInput | boolean
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    channels?: NotificationUpdatechannelsInput | $Enums.NotificationChannel[]
    sentAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    deliveredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    merchant?: MerchantUpdateOneWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    merchantId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    deviceInfo?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastAccessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningCreateManyPaymentInput = {
    id?: string
    userId: string
    strategyId: string
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentEventCreateManyPaymentInput = {
    id?: string
    eventType: $Enums.PaymentEventType
    transactionHash?: string | null
    blockNumber?: bigint | number | null
    chainId?: string | null
    gasUsed?: bigint | number | null
    gasPrice?: bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type CrossChainTransactionCreateManyPaymentInput = {
    id?: string
    sourceChain: string
    destinationChain: string
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    bridgeTransactionId?: string | null
    sourceAmount: Decimal | DecimalJsLike | number | string
    destinationAmount?: Decimal | DecimalJsLike | number | string | null
    bridgeFee?: Decimal | DecimalJsLike | number | string | null
    sourceAddress: string
    destinationAddress: string
    bridgeAddress?: string | null
    status?: $Enums.CrossChainStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    sourceConfirmedAt?: Date | string | null
    destConfirmedAt?: Date | string | null
  }

  export type YieldEarningUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutYieldEarningsNestedInput
    strategy?: YieldStrategyUpdateOneRequiredWithoutYieldEarningsNestedInput
  }

  export type YieldEarningUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    strategyId?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentEventUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentEventUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentEventUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: EnumPaymentEventTypeFieldUpdateOperationsInput | $Enums.PaymentEventType
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    blockNumber?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    chainId?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    gasPrice?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    eventData?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CrossChainTransactionUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CrossChainTransactionUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CrossChainTransactionUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: StringFieldUpdateOperationsInput | string
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    bridgeTransactionId?: NullableStringFieldUpdateOperationsInput | string | null
    sourceAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    destinationAmount?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    bridgeFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    sourceAddress?: StringFieldUpdateOperationsInput | string
    destinationAddress?: StringFieldUpdateOperationsInput | string
    bridgeAddress?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCrossChainStatusFieldUpdateOperationsInput | $Enums.CrossChainStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sourceConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    destConfirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type YieldEarningCreateManyStrategyInput = {
    id?: string
    userId: string
    paymentId?: string | null
    principalAmount: Decimal | DecimalJsLike | number | string
    yieldAmount: Decimal | DecimalJsLike | number | string
    feeAmount?: Decimal | DecimalJsLike | number | string
    netYieldAmount: Decimal | DecimalJsLike | number | string
    tokenAddress: string
    tokenSymbol: string
    chainId: string
    startTime: Date | string
    endTime?: Date | string | null
    duration?: number | null
    actualAPY?: Decimal | DecimalJsLike | number | string | null
    status?: $Enums.YieldStatus
    transactionHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type YieldEarningUpdateWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutYieldEarningsNestedInput
    payment?: PaymentUpdateOneWithoutYieldEarningsNestedInput
  }

  export type YieldEarningUncheckedUpdateWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type YieldEarningUncheckedUpdateManyWithoutStrategyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    principalAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    yieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    feeAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    netYieldAmount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    tokenAddress?: StringFieldUpdateOperationsInput | string
    tokenSymbol?: StringFieldUpdateOperationsInput | string
    chainId?: StringFieldUpdateOperationsInput | string
    startTime?: DateTimeFieldUpdateOperationsInput | Date | string
    endTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    duration?: NullableIntFieldUpdateOperationsInput | number | null
    actualAPY?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    status?: EnumYieldStatusFieldUpdateOperationsInput | $Enums.YieldStatus
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateManyMerchantInput = {
    id?: string
    userId: string
    amount: Decimal | DecimalJsLike | number | string
    currency?: string
    tokenAddress?: string | null
    tokenSymbol?: string | null
    status?: $Enums.PaymentStatus
    type?: $Enums.PaymentType
    sourceChain: string
    destinationChain?: string | null
    sourceTransactionHash?: string | null
    destTransactionHash?: string | null
    senderAddress: string
    recipientAddress: string
    escrowAddress?: string | null
    estimatedYield?: Decimal | DecimalJsLike | number | string | null
    actualYield?: Decimal | DecimalJsLike | number | string | null
    yieldDuration?: number | null
    yieldStrategy?: string | null
    platformFee?: Decimal | DecimalJsLike | number | string | null
    networkFee?: Decimal | DecimalJsLike | number | string | null
    totalFees?: Decimal | DecimalJsLike | number | string | null
    description?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    confirmedAt?: Date | string | null
    releasedAt?: Date | string | null
    expiresAt?: Date | string | null
  }

  export type ApiKeyCreateManyMerchantInput = {
    id?: string
    userId?: string | null
    keyHash: string
    keyPrefix: string
    name?: string | null
    permissions?: ApiKeyCreatepermissionsInput | string[]
    isActive?: boolean
    lastUsedAt?: Date | string | null
    expiresAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPaymentsNestedInput
    yieldEarnings?: YieldEarningUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    yieldEarnings?: YieldEarningUncheckedUpdateManyWithoutPaymentNestedInput
    paymentEvents?: PaymentEventUncheckedUpdateManyWithoutPaymentNestedInput
    crossChainTransactions?: CrossChainTransactionUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    currency?: StringFieldUpdateOperationsInput | string
    tokenAddress?: NullableStringFieldUpdateOperationsInput | string | null
    tokenSymbol?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPaymentStatusFieldUpdateOperationsInput | $Enums.PaymentStatus
    type?: EnumPaymentTypeFieldUpdateOperationsInput | $Enums.PaymentType
    sourceChain?: StringFieldUpdateOperationsInput | string
    destinationChain?: NullableStringFieldUpdateOperationsInput | string | null
    sourceTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    destTransactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    senderAddress?: StringFieldUpdateOperationsInput | string
    recipientAddress?: StringFieldUpdateOperationsInput | string
    escrowAddress?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    actualYield?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    yieldDuration?: NullableIntFieldUpdateOperationsInput | number | null
    yieldStrategy?: NullableStringFieldUpdateOperationsInput | string | null
    platformFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    networkFee?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    totalFees?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    externalReference?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    confirmedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    releasedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ApiKeyUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutApiKeysNestedInput
  }

  export type ApiKeyUncheckedUpdateWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ApiKeyUncheckedUpdateManyWithoutMerchantInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    keyHash?: StringFieldUpdateOperationsInput | string
    keyPrefix?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: ApiKeyUpdatepermissionsInput | string[]
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lastUsedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentCountOutputTypeDefaultArgs instead
     */
    export type PaymentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YieldStrategyCountOutputTypeDefaultArgs instead
     */
    export type YieldStrategyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YieldStrategyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MerchantCountOutputTypeDefaultArgs instead
     */
    export type MerchantCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MerchantCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserSessionDefaultArgs instead
     */
    export type UserSessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserSessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserPreferencesDefaultArgs instead
     */
    export type UserPreferencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserPreferencesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KYCDocumentDefaultArgs instead
     */
    export type KYCDocumentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KYCDocumentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentDefaultArgs instead
     */
    export type PaymentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PaymentEventDefaultArgs instead
     */
    export type PaymentEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PaymentEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YieldStrategyDefaultArgs instead
     */
    export type YieldStrategyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YieldStrategyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use YieldEarningDefaultArgs instead
     */
    export type YieldEarningArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = YieldEarningDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MerchantDefaultArgs instead
     */
    export type MerchantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MerchantDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApiKeyDefaultArgs instead
     */
    export type ApiKeyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApiKeyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CrossChainTransactionDefaultArgs instead
     */
    export type CrossChainTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CrossChainTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemMetricsDefaultArgs instead
     */
    export type SystemMetricsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemMetricsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}